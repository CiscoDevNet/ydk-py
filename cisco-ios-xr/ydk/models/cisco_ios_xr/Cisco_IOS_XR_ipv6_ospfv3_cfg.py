""" Cisco_IOS_XR_ipv6_ospfv3_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv6\-ospfv3 package configuration.

This module contains definitions
for the following management objects\:
  ospfv3\: OSPFv3 configuration

This YANG module augments the
  Cisco\-IOS\-XR\-snmp\-agent\-cfg
module with configuration data.

Copyright (c) 2013\-2018 by Cisco Systems, Inc.
All rights reserved.

"""
import sys
from collections import OrderedDict

from ydk.types import Entity as _Entity_
from ydk.types import EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error



class Ospfv3AddressFamily(Enum):
    """
    Ospfv3AddressFamily (Enum Class)

    Ospfv3 address family

    .. data:: ipv6 = 1

    	IPv6 address family

    """

    ipv6 = Enum.YLeaf(1, "ipv6")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3AddressFamily']


class Ospfv3Authentication(Enum):
    """
    Ospfv3Authentication (Enum Class)

    Ospfv3 authentication

    .. data:: md5 = 1

    	MD5 algorithm

    .. data:: sha1 = 2

    	SHA1 algorithm

    """

    md5 = Enum.YLeaf(1, "md5")

    sha1 = Enum.YLeaf(2, "sha1")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3Authentication']


class Ospfv3AuthenticationType2(Enum):
    """
    Ospfv3AuthenticationType2 (Enum Class)

    Ospfv3 authentication type2

    .. data:: null = 0

    	NULL authentication

    .. data:: md5 = 1

    	MD5 algorithm

    .. data:: sha1 = 2

    	SHA1 algorithm

    """

    null = Enum.YLeaf(0, "null")

    md5 = Enum.YLeaf(1, "md5")

    sha1 = Enum.YLeaf(2, "sha1")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3AuthenticationType2']


class Ospfv3DomainId(Enum):
    """
    Ospfv3DomainId (Enum Class)

    Ospfv3 domain id

    .. data:: type0005 = 5

    	Type 0x0005

    .. data:: type0105 = 261

    	Type 0x0105

    .. data:: type0205 = 517

    	Type 0x0205

    .. data:: type8005 = 32773

    	Type 0x8005

    """

    type0005 = Enum.YLeaf(5, "type0005")

    type0105 = Enum.YLeaf(261, "type0105")

    type0205 = Enum.YLeaf(517, "type0205")

    type8005 = Enum.YLeaf(32773, "type8005")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3DomainId']


class Ospfv3EigrpRoute(Enum):
    """
    Ospfv3EigrpRoute (Enum Class)

    Ospfv3 eigrp route

    .. data:: internal = 16384

    	EIGRP internal routes

    .. data:: external = 32768

    	EIGRP external routes

    """

    internal = Enum.YLeaf(16384, "internal")

    external = Enum.YLeaf(32768, "external")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3EigrpRoute']


class Ospfv3EncryptionAlgorithm(Enum):
    """
    Ospfv3EncryptionAlgorithm (Enum Class)

    Ospfv3 encryption algorithm

    .. data:: null = 0

    	Use NULL encryption

    .. data:: des = 1

    	Use the DES algorithm

    .. data:: Y_3des = 2

    	Use the triple DES algorithm

    .. data:: aes = 3

    	Use the AES algorithm

    .. data:: aes192 = 4

    	Use the 192-bit AES algorithm

    .. data:: aes256 = 5

    	Use the 256-bit AES algorithm

    """

    null = Enum.YLeaf(0, "null")

    des = Enum.YLeaf(1, "des")

    Y_3des = Enum.YLeaf(2, "3des")

    aes = Enum.YLeaf(3, "aes")

    aes192 = Enum.YLeaf(4, "aes192")

    aes256 = Enum.YLeaf(5, "aes256")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3EncryptionAlgorithm']


class Ospfv3ExternalRoute(Enum):
    """
    Ospfv3ExternalRoute (Enum Class)

    Ospfv3 external route

    .. data:: external1 = 8

    	External type 1 routes

    .. data:: external2 = 16

    	External type 2 routes

    .. data:: external = 24

    	External (type 1 and 2) routes

    """

    external1 = Enum.YLeaf(8, "external1")

    external2 = Enum.YLeaf(16, "external2")

    external = Enum.YLeaf(24, "external")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3ExternalRoute']


class Ospfv3FastReroute(Enum):
    """
    Ospfv3FastReroute (Enum Class)

    Ospfv3 fast reroute

    .. data:: none = 0

    	Disable

    .. data:: per_link = 1

    	Per link

    .. data:: per_prefix = 2

    	Per prefix

    """

    none = Enum.YLeaf(0, "none")

    per_link = Enum.YLeaf(1, "per-link")

    per_prefix = Enum.YLeaf(2, "per-prefix")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3FastReroute']


class Ospfv3FastReroutePriority(Enum):
    """
    Ospfv3FastReroutePriority (Enum Class)

    Ospfv3 fast reroute priority

    .. data:: critical = 0

    	Critical

    .. data:: high = 1

    	High

    .. data:: medium = 2

    	Medium

    .. data:: low = 3

    	Low

    """

    critical = Enum.YLeaf(0, "critical")

    high = Enum.YLeaf(1, "high")

    medium = Enum.YLeaf(2, "medium")

    low = Enum.YLeaf(3, "low")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3FastReroutePriority']


class Ospfv3FastRerouteTiebreakers(Enum):
    """
    Ospfv3FastRerouteTiebreakers (Enum Class)

    Ospfv3 fast reroute tiebreakers

    .. data:: downstream = 0

    	Downstream

    .. data:: line_card_disjoint = 1

    	LC Disjoint

    .. data:: lowest_metric = 2

    	Lowest metric

    .. data:: node_protect = 3

    	Node protection

    .. data:: primary_path = 4

    	Primary path

    .. data:: secondary_path = 5

    	Secondar path

    .. data:: srlg_disjoint = 6

    	SRLG

    """

    downstream = Enum.YLeaf(0, "downstream")

    line_card_disjoint = Enum.YLeaf(1, "line-card-disjoint")

    lowest_metric = Enum.YLeaf(2, "lowest-metric")

    node_protect = Enum.YLeaf(3, "node-protect")

    primary_path = Enum.YLeaf(4, "primary-path")

    secondary_path = Enum.YLeaf(5, "secondary-path")

    srlg_disjoint = Enum.YLeaf(6, "srlg-disjoint")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3FastRerouteTiebreakers']


class Ospfv3InternalRoute(Enum):
    """
    Ospfv3InternalRoute (Enum Class)

    Ospfv3 internal route

    .. data:: internal = 6

    	OSPFv3 internal routes

    """

    internal = Enum.YLeaf(6, "internal")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3InternalRoute']


class Ospfv3LogAdj(Enum):
    """
    Ospfv3LogAdj (Enum Class)

    Ospfv3 log adj

    .. data:: suppress = 0

    	No output

    .. data:: brief = 1

    	Limited output

    .. data:: detail = 2

    	Verbose output

    """

    suppress = Enum.YLeaf(0, "suppress")

    brief = Enum.YLeaf(1, "brief")

    detail = Enum.YLeaf(2, "detail")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3LogAdj']


class Ospfv3Metric(Enum):
    """
    Ospfv3Metric (Enum Class)

    Ospfv3 metric

    .. data:: type1 = 1

    	OSPFv3 external type 1 metrics

    .. data:: type2 = 2

    	OSPFv3 external type 2 metrics

    """

    type1 = Enum.YLeaf(1, "type1")

    type2 = Enum.YLeaf(2, "type2")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3Metric']


class Ospfv3Network(Enum):
    """
    Ospfv3Network (Enum Class)

    Ospfv3 network

    .. data:: broadcast = 1

    	Broadcast multi-access network

    .. data:: non_broadcast = 2

    	Non-broadcast multi-access network

    .. data:: point_to_point = 3

    	Point-to-point network

    .. data:: point_to_multipoint = 4

    	Point-to-multipoint network

    .. data:: non_broadcast_point_to_multipoint = 5

    	Non-broadcast point-to-multipoint network

    """

    broadcast = Enum.YLeaf(1, "broadcast")

    non_broadcast = Enum.YLeaf(2, "non-broadcast")

    point_to_point = Enum.YLeaf(3, "point-to-point")

    point_to_multipoint = Enum.YLeaf(4, "point-to-multipoint")

    non_broadcast_point_to_multipoint = Enum.YLeaf(5, "non-broadcast-point-to-multipoint")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3Network']


class Ospfv3Protocol(Enum):
    """
    Ospfv3Protocol (Enum Class)

    Ospfv3 protocol

    .. data:: all = 0

    	All

    .. data:: connected = 1

    	Connected

    .. data:: static = 3

    	Static

    .. data:: bgp = 4

    	BGP

    .. data:: isis = 6

    	ISIS

    .. data:: ospfv3 = 7

    	OSPFv3

    .. data:: eigrp = 8

    	EIGRP

    """

    all = Enum.YLeaf(0, "all")

    connected = Enum.YLeaf(1, "connected")

    static = Enum.YLeaf(3, "static")

    bgp = Enum.YLeaf(4, "bgp")

    isis = Enum.YLeaf(6, "isis")

    ospfv3 = Enum.YLeaf(7, "ospfv3")

    eigrp = Enum.YLeaf(8, "eigrp")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3Protocol']


class Ospfv3ProtocolType2(Enum):
    """
    Ospfv3ProtocolType2 (Enum Class)

    Ospfv3 protocol type2

    .. data:: connected = 1

    	Connected

    .. data:: static = 3

    	Static

    .. data:: bgp = 4

    	BGP

    .. data:: isis = 6

    	ISIS

    .. data:: ospfv3 = 7

    	OSPFv3

    .. data:: eigrp = 8

    	EIGRP

    .. data:: subscriber = 9

    	Subscriber

    .. data:: application = 10

    	Application

    .. data:: mobile = 11

    	Mobile

    """

    connected = Enum.YLeaf(1, "connected")

    static = Enum.YLeaf(3, "static")

    bgp = Enum.YLeaf(4, "bgp")

    isis = Enum.YLeaf(6, "isis")

    ospfv3 = Enum.YLeaf(7, "ospfv3")

    eigrp = Enum.YLeaf(8, "eigrp")

    subscriber = Enum.YLeaf(9, "subscriber")

    application = Enum.YLeaf(10, "application")

    mobile = Enum.YLeaf(11, "mobile")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3ProtocolType2']


class Ospfv3SubsequentAddressFamily(Enum):
    """
    Ospfv3SubsequentAddressFamily (Enum Class)

    Ospfv3 subsequent address family

    .. data:: unicast = 1

    	Unicast subsequent address family

    """

    unicast = Enum.YLeaf(1, "unicast")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3SubsequentAddressFamily']


class Ospfv3TraceBufSize(Enum):
    """
    Ospfv3TraceBufSize (Enum Class)

    Ospfv3 trace buf size

    .. data:: size0 = 0

    	Disable trace

    .. data:: size256 = 256

    	trace buffer size 256

    .. data:: size512 = 512

    	trace buffer size 512

    .. data:: size1024 = 1024

    	trace buffer size 1024

    .. data:: size2048 = 2048

    	trace buffer size 2048

    .. data:: size4096 = 4096

    	trace buffer size 4096

    .. data:: size8192 = 8192

    	trace buffer size 8192

    .. data:: size16384 = 16384

    	trace buffer size 16384

    .. data:: size32768 = 32768

    	trace buffer size 32768

    .. data:: size65536 = 65536

    	trace buffer size 65536

    """

    size0 = Enum.YLeaf(0, "size0")

    size256 = Enum.YLeaf(256, "size256")

    size512 = Enum.YLeaf(512, "size512")

    size1024 = Enum.YLeaf(1024, "size1024")

    size2048 = Enum.YLeaf(2048, "size2048")

    size4096 = Enum.YLeaf(4096, "size4096")

    size8192 = Enum.YLeaf(8192, "size8192")

    size16384 = Enum.YLeaf(16384, "size16384")

    size32768 = Enum.YLeaf(32768, "size32768")

    size65536 = Enum.YLeaf(65536, "size65536")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3TraceBufSize']


class Ospfv3bfdEnableMode(Enum):
    """
    Ospfv3bfdEnableMode (Enum Class)

    Ospfv3bfd enable mode

    .. data:: disable = 0

    	Disable Mode - Prevent inheritance

    .. data:: default = 1

    	Default Mode - Default BFD behavior

    .. data:: strict = 2

    	Strict Mode - Hold down adj until BFD sesion up

    """

    disable = Enum.YLeaf(0, "disable")

    default = Enum.YLeaf(1, "default")

    strict = Enum.YLeaf(2, "strict")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3bfdEnableMode']


class Ospfv3isisRoute(Enum):
    """
    Ospfv3isisRoute (Enum Class)

    Ospfv3isis route

    .. data:: level1 = 64

    	IS-IS level-1 routes

    .. data:: level2 = 128

    	IS-IS level-2 routes

    .. data:: level1_and2 = 192

    	IS-IS level-1 and level-2 routes

    """

    level1 = Enum.YLeaf(64, "level1")

    level2 = Enum.YLeaf(128, "level2")

    level1_and2 = Enum.YLeaf(192, "level1-and2")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3isisRoute']


class Ospfv3nsr(Enum):
    """
    Ospfv3nsr (Enum Class)

    Ospfv3nsr

    .. data:: true = 1

    	Enable non-stop routing

    .. data:: false = 2

    	Disable non-stop routing

    """

    true = Enum.YLeaf(1, "true")

    false = Enum.YLeaf(2, "false")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3nsr']


class Ospfv3nssaExternalRoute(Enum):
    """
    Ospfv3nssaExternalRoute (Enum Class)

    Ospfv3nssa external route

    .. data:: external1 = 4096

    	NSSA external type 1 routes

    .. data:: external2 = 8192

    	NSSA external type 2 routes

    .. data:: external = 12288

    	NSSA external (type 1 and 2) routes

    """

    external1 = Enum.YLeaf(4096, "external1")

    external2 = Enum.YLeaf(8192, "external2")

    external = Enum.YLeaf(12288, "external")


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3nssaExternalRoute']



class Ospfv3(_Entity_):
    """
    OSPFv3 configuration
    
    .. attribute:: processes
    
    	OSPFv3 processes
    	**type**\:  :py:class:`Processes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes>`
    
    .. attribute:: dns_name_lookup
    
    	Enable OSPFv3 router IDs as DNS names
    	**type**\: :py:class:`Empty<ydk.types.Empty>`
    
    

    """

    _prefix = 'ipv6-ospfv3-cfg'
    _revision = '2018-05-14'

    def __init__(self):
        if sys.version_info > (3,):
            super().__init__()
        else:
            super(Ospfv3, self).__init__()
        self._top_entity = None

        self.yang_name = "ospfv3"
        self.yang_parent_name = "Cisco-IOS-XR-ipv6-ospfv3-cfg"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_classes = OrderedDict([("processes", ("processes", Ospfv3.Processes))])
        self._leafs = OrderedDict([
            ('dns_name_lookup', (YLeaf(YType.empty, 'dns-name-lookup'), ['Empty'])),
        ])
        self.dns_name_lookup = None

        self.processes = Ospfv3.Processes()
        self.processes.parent = self
        self._children_name_map["processes"] = "processes"
        self._segment_path = lambda: "Cisco-IOS-XR-ipv6-ospfv3-cfg:ospfv3"
        self._is_frozen = True

    def __setattr__(self, name, value):
        self._perform_setattr(Ospfv3, ['dns_name_lookup'], name, value)


    class Processes(_Entity_):
        """
        OSPFv3 processes
        
        .. attribute:: process
        
        	An OSPFv3 process
        	**type**\: list of  		 :py:class:`Process <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process>`
        
        

        """

        _prefix = 'ipv6-ospfv3-cfg'
        _revision = '2018-05-14'

        def __init__(self):
            if sys.version_info > (3,):
                super().__init__()
            else:
                super(Ospfv3.Processes, self).__init__()

            self.yang_name = "processes"
            self.yang_parent_name = "ospfv3"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_classes = OrderedDict([("process", ("process", Ospfv3.Processes.Process))])
            self._leafs = OrderedDict()

            self.process = YList(self)
            self._segment_path = lambda: "processes"
            self._absolute_path = lambda: "Cisco-IOS-XR-ipv6-ospfv3-cfg:ospfv3/%s" % self._segment_path()
            self._is_frozen = True

        def __setattr__(self, name, value):
            self._perform_setattr(Ospfv3.Processes, [], name, value)


        class Process(_Entity_):
            """
            An OSPFv3 process
            
            .. attribute:: process_name  (key)
            
            	OSPFv3 process name
            	**type**\: str
            
            	**length:** 1..32
            
            .. attribute:: default_vrf
            
            	Default VRF related configuration
            	**type**\:  :py:class:`DefaultVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf>`
            
            .. attribute:: vrfs
            
            	VRF related configuration
            	**type**\:  :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs>`
            
            .. attribute:: af
            
            	Address Family (AF)
            	**type**\:  :py:class:`Af <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Af>`
            
            	**presence node**\: True
            
            .. attribute:: trace_bufs
            
            	Configuration to change size of trace buffer
            	**type**\:  :py:class:`TraceBufs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.TraceBufs>`
            
            .. attribute:: nsr
            
            	Enable non\-stop routing
            	**type**\:  :py:class:`Ospfv3nsr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nsr>`
            
            	**default value**\: true
            
            .. attribute:: protocol_shutdown
            
            	Enable protocol shutdown
            	**type**\: :py:class:`Empty<ydk.types.Empty>`
            
            

            """

            _prefix = 'ipv6-ospfv3-cfg'
            _revision = '2018-05-14'

            def __init__(self):
                if sys.version_info > (3,):
                    super().__init__()
                else:
                    super(Ospfv3.Processes.Process, self).__init__()

                self.yang_name = "process"
                self.yang_parent_name = "processes"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['process_name']
                self._child_classes = OrderedDict([("default-vrf", ("default_vrf", Ospfv3.Processes.Process.DefaultVrf)), ("vrfs", ("vrfs", Ospfv3.Processes.Process.Vrfs)), ("af", ("af", Ospfv3.Processes.Process.Af)), ("trace-bufs", ("trace_bufs", Ospfv3.Processes.Process.TraceBufs))])
                self._leafs = OrderedDict([
                    ('process_name', (YLeaf(YType.str, 'process-name'), ['str'])),
                    ('nsr', (YLeaf(YType.enumeration, 'nsr'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3nsr', '')])),
                    ('protocol_shutdown', (YLeaf(YType.empty, 'protocol-shutdown'), ['Empty'])),
                ])
                self.process_name = None
                self.nsr = None
                self.protocol_shutdown = None

                self.default_vrf = Ospfv3.Processes.Process.DefaultVrf()
                self.default_vrf.parent = self
                self._children_name_map["default_vrf"] = "default-vrf"

                self.vrfs = Ospfv3.Processes.Process.Vrfs()
                self.vrfs.parent = self
                self._children_name_map["vrfs"] = "vrfs"

                self.af = None
                self._children_name_map["af"] = "af"

                self.trace_bufs = Ospfv3.Processes.Process.TraceBufs()
                self.trace_bufs.parent = self
                self._children_name_map["trace_bufs"] = "trace-bufs"
                self._segment_path = lambda: "process" + "[process-name='" + str(self.process_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-ipv6-ospfv3-cfg:ospfv3/processes/%s" % self._segment_path()
                self._is_frozen = True

            def __setattr__(self, name, value):
                self._perform_setattr(Ospfv3.Processes.Process, ['process_name', 'nsr', 'protocol_shutdown'], name, value)


            class DefaultVrf(_Entity_):
                """
                Default VRF related configuration
                
                .. attribute:: ldp_sync
                
                	Enable/Disable MPLS LDP sync
                	**type**\: bool
                
                .. attribute:: prefix_suppression
                
                	Enable/disable prefix suppression on an interface
                	**type**\: bool
                
                .. attribute:: spf_prefix_priority_disable
                
                	SPF prefix prioritization disabled
                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: area_addresses
                
                	Area configuration
                	**type**\:  :py:class:`AreaAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses>`
                
                .. attribute:: timers
                
                	Adjust routing timers
                	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers>`
                
                .. attribute:: summary_prefixes
                
                	Summarize redistributed routes matching prefix/length
                	**type**\:  :py:class:`SummaryPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes>`
                
                .. attribute:: snmp
                
                	SNMP configuration
                	**type**\:  :py:class:`Snmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Snmp>`
                
                .. attribute:: fast_reroute
                
                	Fast\-reroute instance scoped parameters
                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute>`
                
                .. attribute:: retransmit_interval
                
                	Specify the transmit interval in seconds
                	**type**\: int
                
                	**range:** 1..65535
                
                	**units**\: second
                
                .. attribute:: distance
                
                	Define an administrative distance
                	**type**\:  :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Distance>`
                
                .. attribute:: passive
                
                	Enable/disable routing updates on an interface
                	**type**\: bool
                
                .. attribute:: default_metric
                
                	Set metric of redistributed routes
                	**type**\: int
                
                	**range:** 1..16777214
                
                .. attribute:: flood_reduction
                
                	Enable/disable flood reduction
                	**type**\: bool
                
                .. attribute:: maximum
                
                	Set OSPFv3 limits
                	**type**\:  :py:class:`Maximum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Maximum>`
                
                .. attribute:: redistributes
                
                	Redistribute information from another routing protocol
                	**type**\:  :py:class:`Redistributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes>`
                
                .. attribute:: ignore
                
                	Do not complain about a specified event
                	**type**\:  :py:class:`Ignore <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Ignore>`
                
                .. attribute:: distribute_list_out
                
                	Filter prefixes from RIB 
                	**type**\:  :py:class:`DistributeListOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut>`
                
                .. attribute:: distribute_list
                
                	Filter prefixes to/from RIB
                	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeList>`
                
                .. attribute:: hello_interval
                
                	Time between HELLO packets
                	**type**\: int
                
                	**range:** 1..65535
                
                	**units**\: second
                
                .. attribute:: stub_router
                
                	Stub router configuration
                	**type**\:  :py:class:`StubRouter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter>`
                
                .. attribute:: priority
                
                	Specify router priority
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: bfd
                
                	Configure BFD parameters
                	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Bfd>`
                
                .. attribute:: cost
                
                	Interface cost
                	**type**\: int
                
                	**range:** 1..65535
                
                .. attribute:: dead_interval
                
                	Interval after which a neighbor is declared dead (in seconds)
                	**type**\: int
                
                	**range:** 1..65535
                
                	**units**\: second
                
                .. attribute:: packet_size
                
                	Limit size of OSPFv3 packets
                	**type**\: int
                
                	**range:** 256..10000
                
                .. attribute:: instance
                
                	Instance ID
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: spf_prefix_priority_policy
                
                	Route policy for SPF prefix prioritization
                	**type**\: str
                
                .. attribute:: database_filter
                
                	Database filter
                	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter>`
                
                .. attribute:: router_id
                
                	Specify the router ID for this OSPFv3 process in IPv4 address format
                	**type**\: str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                .. attribute:: capability
                
                	OSPFv3 Capability
                	**type**\:  :py:class:`Capability <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Capability>`
                
                .. attribute:: network
                
                	Specify network type
                	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                
                .. attribute:: mtu_ignore
                
                	Enable/disable ignoring of MTU in DBD packets
                	**type**\: bool
                
                .. attribute:: log_adjacency_changes
                
                	Log changes in adjacency state
                	**type**\:  :py:class:`Ospfv3LogAdj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3LogAdj>`
                
                .. attribute:: authentication
                
                	Authenticate OSPFv3 packets
                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Authentication>`
                
                .. attribute:: demand_circuit
                
                	Enable/disable demand circuit operation
                	**type**\: bool
                
                .. attribute:: graceful_restart
                
                	Graceful restart configuration
                	**type**\:  :py:class:`GracefulRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.GracefulRestart>`
                
                .. attribute:: default_information
                
                	Control distribution of default information
                	**type**\:  :py:class:`DefaultInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DefaultInformation>`
                
                .. attribute:: process_scope
                
                	Process scope configuration
                	**type**\:  :py:class:`ProcessScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope>`
                
                .. attribute:: encryption
                
                	Encrypt and authenticate OSPFv3 packets
                	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Encryption>`
                
                .. attribute:: auto_cost
                
                	Calculate interface cost according to bandwidth
                	**type**\:  :py:class:`AutoCost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AutoCost>`
                
                	**presence node**\: True
                
                .. attribute:: transmit_delay
                
                	Specify the transmit delay in seconds
                	**type**\: int
                
                	**range:** 1..65535
                
                	**units**\: second
                
                

                """

                _prefix = 'ipv6-ospfv3-cfg'
                _revision = '2018-05-14'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Ospfv3.Processes.Process.DefaultVrf, self).__init__()

                    self.yang_name = "default-vrf"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("area-addresses", ("area_addresses", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses)), ("timers", ("timers", Ospfv3.Processes.Process.DefaultVrf.Timers)), ("summary-prefixes", ("summary_prefixes", Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes)), ("snmp", ("snmp", Ospfv3.Processes.Process.DefaultVrf.Snmp)), ("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.FastReroute)), ("distance", ("distance", Ospfv3.Processes.Process.DefaultVrf.Distance)), ("maximum", ("maximum", Ospfv3.Processes.Process.DefaultVrf.Maximum)), ("redistributes", ("redistributes", Ospfv3.Processes.Process.DefaultVrf.Redistributes)), ("ignore", ("ignore", Ospfv3.Processes.Process.DefaultVrf.Ignore)), ("distribute-list-out", ("distribute_list_out", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.DistributeList)), ("stub-router", ("stub_router", Ospfv3.Processes.Process.DefaultVrf.StubRouter)), ("bfd", ("bfd", Ospfv3.Processes.Process.DefaultVrf.Bfd)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter)), ("capability", ("capability", Ospfv3.Processes.Process.DefaultVrf.Capability)), ("authentication", ("authentication", Ospfv3.Processes.Process.DefaultVrf.Authentication)), ("graceful-restart", ("graceful_restart", Ospfv3.Processes.Process.DefaultVrf.GracefulRestart)), ("default-information", ("default_information", Ospfv3.Processes.Process.DefaultVrf.DefaultInformation)), ("process-scope", ("process_scope", Ospfv3.Processes.Process.DefaultVrf.ProcessScope)), ("encryption", ("encryption", Ospfv3.Processes.Process.DefaultVrf.Encryption)), ("auto-cost", ("auto_cost", Ospfv3.Processes.Process.DefaultVrf.AutoCost))])
                    self._leafs = OrderedDict([
                        ('ldp_sync', (YLeaf(YType.boolean, 'ldp-sync'), ['bool'])),
                        ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                        ('spf_prefix_priority_disable', (YLeaf(YType.empty, 'spf-prefix-priority-disable'), ['Empty'])),
                        ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                        ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                        ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                        ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                        ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                        ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                        ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                        ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                        ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                        ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                        ('spf_prefix_priority_policy', (YLeaf(YType.str, 'spf-prefix-priority-policy'), ['str'])),
                        ('router_id', (YLeaf(YType.str, 'router-id'), ['str'])),
                        ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                        ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                        ('log_adjacency_changes', (YLeaf(YType.enumeration, 'log-adjacency-changes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3LogAdj', '')])),
                        ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                        ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                    ])
                    self.ldp_sync = None
                    self.prefix_suppression = None
                    self.spf_prefix_priority_disable = None
                    self.retransmit_interval = None
                    self.passive = None
                    self.default_metric = None
                    self.flood_reduction = None
                    self.hello_interval = None
                    self.priority = None
                    self.cost = None
                    self.dead_interval = None
                    self.packet_size = None
                    self.instance = None
                    self.spf_prefix_priority_policy = None
                    self.router_id = None
                    self.network = None
                    self.mtu_ignore = None
                    self.log_adjacency_changes = None
                    self.demand_circuit = None
                    self.transmit_delay = None

                    self.area_addresses = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses()
                    self.area_addresses.parent = self
                    self._children_name_map["area_addresses"] = "area-addresses"

                    self.timers = Ospfv3.Processes.Process.DefaultVrf.Timers()
                    self.timers.parent = self
                    self._children_name_map["timers"] = "timers"

                    self.summary_prefixes = Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes()
                    self.summary_prefixes.parent = self
                    self._children_name_map["summary_prefixes"] = "summary-prefixes"

                    self.snmp = Ospfv3.Processes.Process.DefaultVrf.Snmp()
                    self.snmp.parent = self
                    self._children_name_map["snmp"] = "snmp"

                    self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.FastReroute()
                    self.fast_reroute.parent = self
                    self._children_name_map["fast_reroute"] = "fast-reroute"

                    self.distance = Ospfv3.Processes.Process.DefaultVrf.Distance()
                    self.distance.parent = self
                    self._children_name_map["distance"] = "distance"

                    self.maximum = Ospfv3.Processes.Process.DefaultVrf.Maximum()
                    self.maximum.parent = self
                    self._children_name_map["maximum"] = "maximum"

                    self.redistributes = Ospfv3.Processes.Process.DefaultVrf.Redistributes()
                    self.redistributes.parent = self
                    self._children_name_map["redistributes"] = "redistributes"

                    self.ignore = Ospfv3.Processes.Process.DefaultVrf.Ignore()
                    self.ignore.parent = self
                    self._children_name_map["ignore"] = "ignore"

                    self.distribute_list_out = Ospfv3.Processes.Process.DefaultVrf.DistributeListOut()
                    self.distribute_list_out.parent = self
                    self._children_name_map["distribute_list_out"] = "distribute-list-out"

                    self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.DistributeList()
                    self.distribute_list.parent = self
                    self._children_name_map["distribute_list"] = "distribute-list"

                    self.stub_router = Ospfv3.Processes.Process.DefaultVrf.StubRouter()
                    self.stub_router.parent = self
                    self._children_name_map["stub_router"] = "stub-router"

                    self.bfd = Ospfv3.Processes.Process.DefaultVrf.Bfd()
                    self.bfd.parent = self
                    self._children_name_map["bfd"] = "bfd"

                    self.database_filter = Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter()
                    self.database_filter.parent = self
                    self._children_name_map["database_filter"] = "database-filter"

                    self.capability = Ospfv3.Processes.Process.DefaultVrf.Capability()
                    self.capability.parent = self
                    self._children_name_map["capability"] = "capability"

                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.Authentication()
                    self.authentication.parent = self
                    self._children_name_map["authentication"] = "authentication"

                    self.graceful_restart = Ospfv3.Processes.Process.DefaultVrf.GracefulRestart()
                    self.graceful_restart.parent = self
                    self._children_name_map["graceful_restart"] = "graceful-restart"

                    self.default_information = Ospfv3.Processes.Process.DefaultVrf.DefaultInformation()
                    self.default_information.parent = self
                    self._children_name_map["default_information"] = "default-information"

                    self.process_scope = Ospfv3.Processes.Process.DefaultVrf.ProcessScope()
                    self.process_scope.parent = self
                    self._children_name_map["process_scope"] = "process-scope"

                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.Encryption()
                    self.encryption.parent = self
                    self._children_name_map["encryption"] = "encryption"

                    self.auto_cost = None
                    self._children_name_map["auto_cost"] = "auto-cost"
                    self._segment_path = lambda: "default-vrf"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf, ['ldp_sync', 'prefix_suppression', 'spf_prefix_priority_disable', 'retransmit_interval', 'passive', 'default_metric', 'flood_reduction', 'hello_interval', 'priority', 'cost', 'dead_interval', 'packet_size', 'instance', 'spf_prefix_priority_policy', 'router_id', 'network', 'mtu_ignore', 'log_adjacency_changes', 'demand_circuit', 'transmit_delay'], name, value)


                class AreaAddresses(_Entity_):
                    """
                    Area configuration
                    
                    .. attribute:: area_address
                    
                    	Configuration for a particular area
                    	**type**\: list of  		 :py:class:`AreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress>`
                    
                    .. attribute:: area_area_id
                    
                    	Configuration for a particular area
                    	**type**\: list of  		 :py:class:`AreaAreaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses, self).__init__()

                        self.yang_name = "area-addresses"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("area-address", ("area_address", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress)), ("area-area-id", ("area_area_id", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId))])
                        self._leafs = OrderedDict()

                        self.area_address = YList(self)
                        self.area_area_id = YList(self)
                        self._segment_path = lambda: "area-addresses"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses, [], name, value)


                    class AreaAddress(_Entity_):
                        """
                        Configuration for a particular area
                        
                        .. attribute:: address  (key)
                        
                        	Area ID if in IP address format
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: authentication
                        
                        	Authenticate OSPFv3 packets
                        	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication>`
                        
                        .. attribute:: bfd
                        
                        	Configure BFD parameters
                        	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd>`
                        
                        .. attribute:: ranges
                        
                        	Range configuration
                        	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges>`
                        
                        .. attribute:: encryption
                        
                        	Encrypt and authenticate OSPFv3 packets
                        	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption>`
                        
                        .. attribute:: nssa
                        
                        	Specify area as a NSSA area.  Allowed only in non\-backbone areas
                        	**type**\:  :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa>`
                        
                        .. attribute:: database_filter
                        
                        	Database filter
                        	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter>`
                        
                        .. attribute:: distribute_list
                        
                        	Filter prefixes to/from RIB
                        	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList>`
                        
                        .. attribute:: interfaces
                        
                        	OSPFv3 interfaces
                        	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces>`
                        
                        .. attribute:: area_scope
                        
                        	Area Scope Configuration
                        	**type**\:  :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope>`
                        
                        .. attribute:: sham_links
                        
                        	Sham Link sub\-mode
                        	**type**\:  :py:class:`ShamLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks>`
                        
                        .. attribute:: virtual_links
                        
                        	Virtual link sub\-mode
                        	**type**\:  :py:class:`VirtualLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks>`
                        
                        .. attribute:: stub
                        
                        	Specify area as a stub area.  Allowed only in non\-backbone areas
                        	**type**\: bool
                        
                        .. attribute:: packet_size
                        
                        	Limit size of OSPFv3 packets
                        	**type**\: int
                        
                        	**range:** 256..10000
                        
                        .. attribute:: instance
                        
                        	Instance ID
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: demand_circuit
                        
                        	Enable/disable demand circuit operation
                        	**type**\: bool
                        
                        .. attribute:: priority
                        
                        	Specify router priority
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: type7_translate_always
                        
                        	Translate Type 7 to Type 5, even if not elected NSSA translator
                        	**type**\: bool
                        
                        .. attribute:: prefix_suppression
                        
                        	Enable/disable prefix suppression on an interface
                        	**type**\: bool
                        
                        .. attribute:: enable
                        
                        	Enable OSPFv3 area
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: mtu_ignore
                        
                        	Enable/disable ignoring of MTU in DBD packets
                        	**type**\: bool
                        
                        .. attribute:: passive
                        
                        	Enable/disable routing updates on an interface
                        	**type**\: bool
                        
                        .. attribute:: hello_interval
                        
                        	Time between HELLO packets
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: dead_interval
                        
                        	Interval after which a neighbor is declared dead (in seconds)
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: default_cost
                        
                        	Set the summary default\-cost of a NSSA/stub area
                        	**type**\: int
                        
                        	**range:** 0..16777215
                        
                        .. attribute:: flood_reduction
                        
                        	Enable/disable flood reduction
                        	**type**\: bool
                        
                        .. attribute:: retransmit_interval
                        
                        	Specify the transmit interval in seconds
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: ldp_sync
                        
                        	Enable/Disable MPLS LDP sync
                        	**type**\: bool
                        
                        .. attribute:: network
                        
                        	Specify network type
                        	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                        
                        .. attribute:: transmit_delay
                        
                        	Specify the transmit delay in seconds
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: cost
                        
                        	Interface cost
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress, self).__init__()

                            self.yang_name = "area-address"
                            self.yang_parent_name = "area-addresses"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['address']
                            self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication)), ("bfd", ("bfd", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd)), ("ranges", ("ranges", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges)), ("encryption", ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption)), ("nssa", ("nssa", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList)), ("interfaces", ("interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces)), ("area-scope", ("area_scope", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope)), ("sham-links", ("sham_links", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks)), ("virtual-links", ("virtual_links", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks))])
                            self._leafs = OrderedDict([
                                ('address', (YLeaf(YType.str, 'address'), ['str'])),
                                ('stub', (YLeaf(YType.boolean, 'stub'), ['bool'])),
                                ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                                ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                                ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                                ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                ('type7_translate_always', (YLeaf(YType.boolean, 'type7-translate-always'), ['bool'])),
                                ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                                ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                                ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                                ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                ('default_cost', (YLeaf(YType.uint32, 'default-cost'), ['int'])),
                                ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                                ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                ('ldp_sync', (YLeaf(YType.boolean, 'ldp-sync'), ['bool'])),
                                ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                                ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                            ])
                            self.address = None
                            self.stub = None
                            self.packet_size = None
                            self.instance = None
                            self.demand_circuit = None
                            self.priority = None
                            self.type7_translate_always = None
                            self.prefix_suppression = None
                            self.enable = None
                            self.mtu_ignore = None
                            self.passive = None
                            self.hello_interval = None
                            self.dead_interval = None
                            self.default_cost = None
                            self.flood_reduction = None
                            self.retransmit_interval = None
                            self.ldp_sync = None
                            self.network = None
                            self.transmit_delay = None
                            self.cost = None

                            self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication()
                            self.authentication.parent = self
                            self._children_name_map["authentication"] = "authentication"

                            self.bfd = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd()
                            self.bfd.parent = self
                            self._children_name_map["bfd"] = "bfd"

                            self.ranges = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges()
                            self.ranges.parent = self
                            self._children_name_map["ranges"] = "ranges"

                            self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption()
                            self.encryption.parent = self
                            self._children_name_map["encryption"] = "encryption"

                            self.nssa = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa()
                            self.nssa.parent = self
                            self._children_name_map["nssa"] = "nssa"

                            self.database_filter = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter()
                            self.database_filter.parent = self
                            self._children_name_map["database_filter"] = "database-filter"

                            self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList()
                            self.distribute_list.parent = self
                            self._children_name_map["distribute_list"] = "distribute-list"

                            self.interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces()
                            self.interfaces.parent = self
                            self._children_name_map["interfaces"] = "interfaces"

                            self.area_scope = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope()
                            self.area_scope.parent = self
                            self._children_name_map["area_scope"] = "area-scope"

                            self.sham_links = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks()
                            self.sham_links.parent = self
                            self._children_name_map["sham_links"] = "sham-links"

                            self.virtual_links = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks()
                            self.virtual_links.parent = self
                            self._children_name_map["virtual_links"] = "virtual-links"
                            self._segment_path = lambda: "area-address" + "[address='" + str(self.address) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress, ['address', 'stub', 'packet_size', 'instance', 'demand_circuit', 'priority', 'type7_translate_always', 'prefix_suppression', 'enable', 'mtu_ignore', 'passive', 'hello_interval', 'dead_interval', 'default_cost', 'flood_reduction', 'retransmit_interval', 'ldp_sync', 'network', 'transmit_delay', 'cost'], name, value)


                        class Authentication(_Entity_):
                            """
                            Authenticate OSPFv3 packets
                            
                            .. attribute:: enable
                            
                            	Authenticate packets
                            	**type**\: bool
                            
                            .. attribute:: spi
                            
                            	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                            	**type**\: int
                            
                            	**range:** 256..4294967295
                            
                            .. attribute:: algorithm
                            
                            	Use the MD5 or SHA1 algorithm
                            	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                            
                            .. attribute:: password
                            
                            	Specify MD5 or SHA1 password
                            	**type**\: str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication, self).__init__()

                                self.yang_name = "authentication"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                    ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                    ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                    ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                ])
                                self.enable = None
                                self.spi = None
                                self.algorithm = None
                                self.password = None
                                self._segment_path = lambda: "authentication"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Authentication']['meta_info']


                        class Bfd(_Entity_):
                            """
                            Configure BFD parameters
                            
                            .. attribute:: detection_multiplier
                            
                            	Detect multiplier
                            	**type**\: int
                            
                            	**range:** 2..50
                            
                            .. attribute:: interval
                            
                            	Hello interval in milli\-seconds
                            	**type**\: int
                            
                            	**range:** 3..30000
                            
                            	**units**\: millisecond
                            
                            .. attribute:: fast_detect_mode
                            
                            	Enable or disable BFD fast detection
                            	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd, self).__init__()

                                self.yang_name = "bfd"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                    ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                    ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                                ])
                                self.detection_multiplier = None
                                self.interval = None
                                self.fast_detect_mode = None
                                self._segment_path = lambda: "bfd"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd, ['detection_multiplier', 'interval', 'fast_detect_mode'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Bfd']['meta_info']


                        class Ranges(_Entity_):
                            """
                            Range configuration
                            
                            .. attribute:: range
                            
                            	Summarize inter\-area routes matching prefix/length
                            	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges.Range>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges, self).__init__()

                                self.yang_name = "ranges"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("range", ("range", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges.Range))])
                                self._leafs = OrderedDict()

                                self.range = YList(self)
                                self._segment_path = lambda: "ranges"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges, [], name, value)


                            class Range(_Entity_):
                                """
                                Summarize inter\-area routes matching
                                prefix/length
                                
                                .. attribute:: prefix  (key)
                                
                                	IPv6 prefix format
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length  (key)
                                
                                	IPV6 prefix length
                                	**type**\: int
                                
                                	**range:** 0..128
                                
                                .. attribute:: not_advertise
                                
                                	Do not advertise address range
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: cost
                                
                                	Specified metric for this range
                                	**type**\: int
                                
                                	**range:** 1..16777214
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges.Range, self).__init__()

                                    self.yang_name = "range"
                                    self.yang_parent_name = "ranges"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['prefix','prefix_length']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', (YLeaf(YType.str, 'prefix'), ['str'])),
                                        ('prefix_length', (YLeaf(YType.uint8, 'prefix-length'), ['int'])),
                                        ('not_advertise', (YLeaf(YType.boolean, 'not-advertise'), ['bool'])),
                                        ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.not_advertise = None
                                    self.cost = None
                                    self._segment_path = lambda: "range" + "[prefix='" + str(self.prefix) + "']" + "[prefix-length='" + str(self.prefix_length) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges.Range, ['prefix', 'prefix_length', 'not_advertise', 'cost'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges.Range']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Ranges']['meta_info']


                        class Encryption(_Entity_):
                            """
                            Encrypt and authenticate OSPFv3 packets
                            
                            .. attribute:: enable
                            
                            	Authenticate packets
                            	**type**\: bool
                            
                            .. attribute:: spi
                            
                            	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                            	**type**\: int
                            
                            	**range:** 256..4294967295
                            
                            .. attribute:: encryption_algorithm
                            
                            	Specify the encryption algorithm
                            	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                            
                            .. attribute:: encryption_password
                            
                            	Encryption password
                            	**type**\: str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            .. attribute:: authentication_algorithm
                            
                            	Use the NULL, MD5 or SHA1 algorithm
                            	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                            
                            .. attribute:: authentication_password
                            
                            	Specify MD5 or SHA1 password
                            	**type**\: str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption, self).__init__()

                                self.yang_name = "encryption"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                    ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                    ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                    ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                    ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                    ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                ])
                                self.enable = None
                                self.spi = None
                                self.encryption_algorithm = None
                                self.encryption_password = None
                                self.authentication_algorithm = None
                                self.authentication_password = None
                                self._segment_path = lambda: "encryption"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Encryption']['meta_info']


                        class Nssa(_Entity_):
                            """
                            Specify area as a NSSA area.  Allowed only in
                            non\-backbone areas
                            
                            .. attribute:: no_redistribution
                            
                            	No redistribution into this NSSA area
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: default_info_originate
                            
                            	Originate Type 7 default into NSSA area
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: metric
                            
                            	Only valid with DefaultInfoOriginate
                            	**type**\: int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	Only valid with DefaultInfoOriginate
                            	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: no_summary
                            
                            	Do not send summary LSA into NSSA
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa, self).__init__()

                                self.yang_name = "nssa"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('no_redistribution', (YLeaf(YType.boolean, 'no-redistribution'), ['bool'])),
                                    ('default_info_originate', (YLeaf(YType.boolean, 'default-info-originate'), ['bool'])),
                                    ('metric', (YLeaf(YType.uint32, 'metric'), ['int'])),
                                    ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                    ('no_summary', (YLeaf(YType.empty, 'no-summary'), ['Empty'])),
                                ])
                                self.no_redistribution = None
                                self.default_info_originate = None
                                self.metric = None
                                self.metric_type = None
                                self.no_summary = None
                                self._segment_path = lambda: "nssa"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa, ['no_redistribution', 'default_info_originate', 'metric', 'metric_type', 'no_summary'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Nssa']['meta_info']


                        class DatabaseFilter(_Entity_):
                            """
                            Database filter
                            
                            .. attribute:: all
                            
                            	All
                            	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter, self).__init__()

                                self.yang_name = "database-filter"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All))])
                                self._leafs = OrderedDict()

                                self.all = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All()
                                self.all.parent = self
                                self._children_name_map["all"] = "all"
                                self._segment_path = lambda: "database-filter"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter, [], name, value)


                            class All(_Entity_):
                                """
                                All
                                
                                .. attribute:: out
                                
                                	Enable or disable database\-filter
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All, self).__init__()

                                    self.yang_name = "all"
                                    self.yang_parent_name = "database-filter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('out', (YLeaf(YType.boolean, 'out'), ['bool'])),
                                    ])
                                    self.out = None
                                    self._segment_path = lambda: "all"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All, ['out'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter.All']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DatabaseFilter']['meta_info']


                        class DistributeList(_Entity_):
                            """
                            Filter prefixes to/from RIB
                            
                            .. attribute:: in_
                            
                            	Filter prefixes installed to RIB
                            	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList, self).__init__()

                                self.yang_name = "distribute-list"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In))])
                                self._leafs = OrderedDict()

                                self.in_ = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In()
                                self.in_.parent = self
                                self._children_name_map["in_"] = "in"
                                self._segment_path = lambda: "distribute-list"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList, [], name, value)


                            class In(_Entity_):
                                """
                                Filter prefixes installed to RIB
                                
                                .. attribute:: prefix_list
                                
                                	Filter prefixes based on an IPv6 prefix\-list
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In, self).__init__()

                                    self.yang_name = "in"
                                    self.yang_parent_name = "distribute-list"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                    ])
                                    self.prefix_list = None
                                    self._segment_path = lambda: "in"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In, ['prefix_list'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList.In']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.DistributeList']['meta_info']


                        class Interfaces(_Entity_):
                            """
                            OSPFv3 interfaces
                            
                            .. attribute:: interface
                            
                            	OSPFv3 interface
                            	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces, self).__init__()

                                self.yang_name = "interfaces"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("interface", ("interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface))])
                                self._leafs = OrderedDict()

                                self.interface = YList(self)
                                self._segment_path = lambda: "interfaces"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces, [], name, value)


                            class Interface(_Entity_):
                                """
                                OSPFv3 interface
                                
                                .. attribute:: interface_name  (key)
                                
                                	Interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication>`
                                
                                .. attribute:: neighbors
                                
                                	Specify a neighbor router
                                	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption>`
                                
                                .. attribute:: bfd
                                
                                	Configure BFD parameters
                                	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd>`
                                
                                .. attribute:: database_filter
                                
                                	Database filter
                                	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter>`
                                
                                .. attribute:: distribute_list
                                
                                	Filter prefixes to/from RIB
                                	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList>`
                                
                                .. attribute:: enable
                                
                                	Enable OSPFv3 interface
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/disable flood reduction
                                	**type**\: bool
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: instance
                                
                                	Instance ID
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\: bool
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/disable ignoring of MTU in DBD packets
                                	**type**\: bool
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: passive
                                
                                	Enable/disable routing updates on an interface
                                	**type**\: bool
                                
                                .. attribute:: packet_size
                                
                                	Limit size of OSPFv3 packets
                                	**type**\: int
                                
                                	**range:** 256..10000
                                
                                .. attribute:: prefix_suppression
                                
                                	Enable/disable prefix suppression on an interface
                                	**type**\: bool
                                
                                .. attribute:: priority
                                
                                	Specify router priority
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: network
                                
                                	Specify network type
                                	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/disable demand circuit operation
                                	**type**\: bool
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface, self).__init__()

                                    self.yang_name = "interface"
                                    self.yang_parent_name = "interfaces"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['interface_name']
                                    self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication)), ("neighbors", ("neighbors", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors)), ("encryption", ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption)), ("bfd", ("bfd", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList)), ("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute))])
                                    self._leafs = OrderedDict([
                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                        ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                                        ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                        ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                        ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                                        ('ldp_sync', (YLeaf(YType.boolean, 'ldp-sync'), ['bool'])),
                                        ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                                        ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                        ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                        ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                                        ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                                        ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                                        ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                        ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                                        ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                                    ])
                                    self.interface_name = None
                                    self.enable = None
                                    self.dead_interval = None
                                    self.flood_reduction = None
                                    self.cost = None
                                    self.transmit_delay = None
                                    self.instance = None
                                    self.ldp_sync = None
                                    self.mtu_ignore = None
                                    self.retransmit_interval = None
                                    self.hello_interval = None
                                    self.passive = None
                                    self.packet_size = None
                                    self.prefix_suppression = None
                                    self.priority = None
                                    self.network = None
                                    self.demand_circuit = None

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"

                                    self.neighbors = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors()
                                    self.neighbors.parent = self
                                    self._children_name_map["neighbors"] = "neighbors"

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"

                                    self.bfd = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd()
                                    self.bfd.parent = self
                                    self._children_name_map["bfd"] = "bfd"

                                    self.database_filter = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter()
                                    self.database_filter.parent = self
                                    self._children_name_map["database_filter"] = "database-filter"

                                    self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList()
                                    self.distribute_list.parent = self
                                    self._children_name_map["distribute_list"] = "distribute-list"

                                    self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface, ['interface_name', 'enable', 'dead_interval', 'flood_reduction', 'cost', 'transmit_delay', 'instance', 'ldp_sync', 'mtu_ignore', 'retransmit_interval', 'hello_interval', 'passive', 'packet_size', 'prefix_suppression', 'priority', 'network', 'demand_circuit'], name, value)


                                class Authentication(_Entity_):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.algorithm = None
                                        self.password = None
                                        self._segment_path = lambda: "authentication"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication']['meta_info']


                                class Neighbors(_Entity_):
                                    """
                                    Specify a neighbor router
                                    
                                    .. attribute:: neighbor
                                    
                                    	IPv6 address
                                    	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors, self).__init__()

                                        self.yang_name = "neighbors"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("neighbor", ("neighbor", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor))])
                                        self._leafs = OrderedDict()

                                        self.neighbor = YList(self)
                                        self._segment_path = lambda: "neighbors"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors, [], name, value)


                                    class Neighbor(_Entity_):
                                        """
                                        IPv6 address
                                        
                                        .. attribute:: neighbor_address  (key)
                                        
                                        	IPV6 address
                                        	**type**\: str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: priority
                                        
                                        	OSPFv3 priority of non\-broadcast neighbor
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPFv3 dead\-router polling interval (in seconds)
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: cost
                                        
                                        	OSPFv3 cost for point\-to\-multipoint neighbor
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: database_filter
                                        
                                        	Filter OSPFv3 LSA during synchronization and flooding for point\-to\-multipoint neighbor
                                        	**type**\: bool
                                        
                                        .. attribute:: zone
                                        
                                        	Zone
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor, self).__init__()

                                            self.yang_name = "neighbor"
                                            self.yang_parent_name = "neighbors"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['neighbor_address']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('neighbor_address', (YLeaf(YType.str, 'neighbor-address'), ['str'])),
                                                ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                                ('poll_interval', (YLeaf(YType.uint32, 'poll-interval'), ['int'])),
                                                ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                                ('database_filter', (YLeaf(YType.boolean, 'database-filter'), ['bool'])),
                                                ('zone', (YLeaf(YType.str, 'zone'), ['str'])),
                                            ])
                                            self.neighbor_address = None
                                            self.priority = None
                                            self.poll_interval = None
                                            self.cost = None
                                            self.database_filter = None
                                            self.zone = None
                                            self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter', 'zone'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors']['meta_info']


                                class Encryption(_Entity_):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                            ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                            ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                            ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.encryption_algorithm = None
                                        self.encryption_password = None
                                        self.authentication_algorithm = None
                                        self.authentication_password = None
                                        self._segment_path = lambda: "encryption"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption']['meta_info']


                                class Bfd(_Entity_):
                                    """
                                    Configure BFD parameters
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval in milli\-seconds
                                    	**type**\: int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	Enable or disable BFD fast detection
                                    	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detect multiplier
                                    	**type**\: int
                                    
                                    	**range:** 2..50
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd, self).__init__()

                                        self.yang_name = "bfd"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                            ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                                            ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                        ])
                                        self.interval = None
                                        self.fast_detect_mode = None
                                        self.detection_multiplier = None
                                        self._segment_path = lambda: "bfd"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd, ['interval', 'fast_detect_mode', 'detection_multiplier'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd']['meta_info']


                                class DatabaseFilter(_Entity_):
                                    """
                                    Database filter
                                    
                                    .. attribute:: all
                                    
                                    	All
                                    	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter, self).__init__()

                                        self.yang_name = "database-filter"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All))])
                                        self._leafs = OrderedDict()

                                        self.all = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All()
                                        self.all.parent = self
                                        self._children_name_map["all"] = "all"
                                        self._segment_path = lambda: "database-filter"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter, [], name, value)


                                    class All(_Entity_):
                                        """
                                        All
                                        
                                        .. attribute:: out
                                        
                                        	Enable or disable database\-filter
                                        	**type**\: bool
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All, self).__init__()

                                            self.yang_name = "all"
                                            self.yang_parent_name = "database-filter"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('out', (YLeaf(YType.boolean, 'out'), ['bool'])),
                                            ])
                                            self.out = None
                                            self._segment_path = lambda: "all"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All, ['out'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter']['meta_info']


                                class DistributeList(_Entity_):
                                    """
                                    Filter prefixes to/from RIB
                                    
                                    .. attribute:: in_
                                    
                                    	Filter prefixes installed to RIB
                                    	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In))])
                                        self._leafs = OrderedDict()

                                        self.in_ = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In()
                                        self.in_.parent = self
                                        self._children_name_map["in_"] = "in"
                                        self._segment_path = lambda: "distribute-list"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList, [], name, value)


                                    class In(_Entity_):
                                        """
                                        Filter prefixes installed to RIB
                                        
                                        .. attribute:: prefix_list
                                        
                                        	Filter prefixes based on an IPv6 prefix\-list
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In, self).__init__()

                                            self.yang_name = "in"
                                            self.yang_parent_name = "distribute-list"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                            ])
                                            self.prefix_list = None
                                            self._segment_path = lambda: "in"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In, ['prefix_list'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList']['meta_info']


                                class FastReroute(_Entity_):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix))])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"

                                        self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._segment_path = lambda: "fast-reroute"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(_Entity_):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                            self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._segment_path = lambda: "per-link"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(_Entity_):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(_Entity_):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(_Entity_):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                            self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._segment_path = lambda: "per-prefix"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(_Entity_):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(_Entity_):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces.Interface']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.Interfaces']['meta_info']


                        class AreaScope(_Entity_):
                            """
                            Area Scope Configuration
                            
                            .. attribute:: fast_reroute
                            
                            	Fast\-reroute configuration
                            	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope, self).__init__()

                                self.yang_name = "area-scope"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute))])
                                self._leafs = OrderedDict()

                                self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute()
                                self.fast_reroute.parent = self
                                self._children_name_map["fast_reroute"] = "fast-reroute"
                                self._segment_path = lambda: "area-scope"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope, [], name, value)


                            class FastReroute(_Entity_):
                                """
                                Fast\-reroute configuration
                                
                                .. attribute:: per_link
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink>`
                                
                                .. attribute:: per_prefix
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix>`
                                
                                .. attribute:: fast_reroute_enable
                                
                                	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, self).__init__()

                                    self.yang_name = "fast-reroute"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix))])
                                    self._leafs = OrderedDict([
                                        ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                                    ])
                                    self.fast_reroute_enable = None

                                    self.per_link = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink()
                                    self.per_link.parent = self
                                    self._children_name_map["per_link"] = "per-link"

                                    self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix()
                                    self.per_prefix.parent = self
                                    self._children_name_map["per_prefix"] = "per-prefix"
                                    self._segment_path = lambda: "fast-reroute"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                class PerLink(_Entity_):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                    	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, self).__init__()

                                        self.yang_name = "per-link"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces))])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                        ])
                                        self.fast_reroute_use_candidate_only = None

                                        self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                        self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._segment_path = lambda: "per-link"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(_Entity_):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                            self._leafs = OrderedDict()

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(_Entity_):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                    class ExcludeInterfaces(_Entity_):
                                        """
                                        Fast\-reroute per\-link/per\-prefix exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup
                                        	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                            self._leafs = OrderedDict()

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(_Entity_):
                                            """
                                            Exclude an interface from becoming a backup
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink']['meta_info']


                                class PerPrefix(_Entity_):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                    	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, self).__init__()

                                        self.yang_name = "per-prefix"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                        ])
                                        self.fast_reroute_use_candidate_only = None

                                        self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                        self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._segment_path = lambda: "per-prefix"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(_Entity_):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                            self._leafs = OrderedDict()

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(_Entity_):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                    class ExcludeInterfaces(_Entity_):
                                        """
                                        Fast\-reroute per\-link/per\-prefix exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup
                                        	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                            self._leafs = OrderedDict()

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(_Entity_):
                                            """
                                            Exclude an interface from becoming a backup
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope.FastReroute']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.AreaScope']['meta_info']


                        class ShamLinks(_Entity_):
                            """
                            Sham Link sub\-mode
                            
                            .. attribute:: sham_link
                            
                            	ShamLink local and remote endpoints
                            	**type**\: list of  		 :py:class:`ShamLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks, self).__init__()

                                self.yang_name = "sham-links"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("sham-link", ("sham_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink))])
                                self._leafs = OrderedDict()

                                self.sham_link = YList(self)
                                self._segment_path = lambda: "sham-links"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks, [], name, value)


                            class ShamLink(_Entity_):
                                """
                                ShamLink local and remote endpoints
                                
                                .. attribute:: source_address  (key)
                                
                                	Local sham\-link endpoint
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: destination_address  (key)
                                
                                	Remote sham\-link endpoint
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption>`
                                
                                .. attribute:: enable
                                
                                	Enable sham link
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink, self).__init__()

                                    self.yang_name = "sham-link"
                                    self.yang_parent_name = "sham-links"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['source_address','destination_address']
                                    self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication)), ("encryption", ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption))])
                                    self._leafs = OrderedDict([
                                        ('source_address', (YLeaf(YType.str, 'source-address'), ['str'])),
                                        ('destination_address', (YLeaf(YType.str, 'destination-address'), ['str'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                        ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                        ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                        ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                    ])
                                    self.source_address = None
                                    self.destination_address = None
                                    self.enable = None
                                    self.hello_interval = None
                                    self.dead_interval = None
                                    self.retransmit_interval = None
                                    self.transmit_delay = None

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._segment_path = lambda: "sham-link" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink, ['source_address', 'destination_address', 'enable', 'hello_interval', 'dead_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(_Entity_):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "sham-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.algorithm = None
                                        self.password = None
                                        self._segment_path = lambda: "authentication"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication']['meta_info']


                                class Encryption(_Entity_):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "sham-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                            ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                            ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                            ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.encryption_algorithm = None
                                        self.encryption_password = None
                                        self.authentication_algorithm = None
                                        self.authentication_password = None
                                        self._segment_path = lambda: "encryption"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.ShamLinks']['meta_info']


                        class VirtualLinks(_Entity_):
                            """
                            Virtual link sub\-mode
                            
                            .. attribute:: virtual_link
                            
                            	Router ID of virtual link neighbor
                            	**type**\: list of  		 :py:class:`VirtualLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks, self).__init__()

                                self.yang_name = "virtual-links"
                                self.yang_parent_name = "area-address"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("virtual-link", ("virtual_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink))])
                                self._leafs = OrderedDict()

                                self.virtual_link = YList(self)
                                self._segment_path = lambda: "virtual-links"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks, [], name, value)


                            class VirtualLink(_Entity_):
                                """
                                Router ID of virtual link neighbor
                                
                                .. attribute:: virtual_link_address  (key)
                                
                                	Router ID of virtual link neighbor
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption>`
                                
                                .. attribute:: enable
                                
                                	Enabled virtual link
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink, self).__init__()

                                    self.yang_name = "virtual-link"
                                    self.yang_parent_name = "virtual-links"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['virtual_link_address']
                                    self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication)), ("encryption", ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption))])
                                    self._leafs = OrderedDict([
                                        ('virtual_link_address', (YLeaf(YType.str, 'virtual-link-address'), ['str'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                        ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                        ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                        ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                    ])
                                    self.virtual_link_address = None
                                    self.enable = None
                                    self.hello_interval = None
                                    self.dead_interval = None
                                    self.retransmit_interval = None
                                    self.transmit_delay = None

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._segment_path = lambda: "virtual-link" + "[virtual-link-address='" + str(self.virtual_link_address) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink, ['virtual_link_address', 'enable', 'hello_interval', 'dead_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(_Entity_):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "virtual-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.algorithm = None
                                        self.password = None
                                        self._segment_path = lambda: "authentication"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication']['meta_info']


                                class Encryption(_Entity_):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "virtual-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                            ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                            ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                            ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.encryption_algorithm = None
                                        self.encryption_password = None
                                        self.authentication_algorithm = None
                                        self.authentication_password = None
                                        self._segment_path = lambda: "encryption"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress.VirtualLinks']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAddress']['meta_info']


                    class AreaAreaId(_Entity_):
                        """
                        Configuration for a particular area
                        
                        .. attribute:: area_id  (key)
                        
                        	Area ID if in integer format
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: authentication
                        
                        	Authenticate OSPFv3 packets
                        	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication>`
                        
                        .. attribute:: bfd
                        
                        	Configure BFD parameters
                        	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd>`
                        
                        .. attribute:: ranges
                        
                        	Range configuration
                        	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges>`
                        
                        .. attribute:: encryption
                        
                        	Encrypt and authenticate OSPFv3 packets
                        	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption>`
                        
                        .. attribute:: nssa
                        
                        	Specify area as a NSSA area.  Allowed only in non\-backbone areas
                        	**type**\:  :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa>`
                        
                        .. attribute:: database_filter
                        
                        	Database filter
                        	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter>`
                        
                        .. attribute:: distribute_list
                        
                        	Filter prefixes to/from RIB
                        	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList>`
                        
                        .. attribute:: interfaces
                        
                        	OSPFv3 interfaces
                        	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces>`
                        
                        .. attribute:: area_scope
                        
                        	Area Scope Configuration
                        	**type**\:  :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope>`
                        
                        .. attribute:: sham_links
                        
                        	Sham Link sub\-mode
                        	**type**\:  :py:class:`ShamLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks>`
                        
                        .. attribute:: virtual_links
                        
                        	Virtual link sub\-mode
                        	**type**\:  :py:class:`VirtualLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks>`
                        
                        .. attribute:: stub
                        
                        	Specify area as a stub area.  Allowed only in non\-backbone areas
                        	**type**\: bool
                        
                        .. attribute:: packet_size
                        
                        	Limit size of OSPFv3 packets
                        	**type**\: int
                        
                        	**range:** 256..10000
                        
                        .. attribute:: instance
                        
                        	Instance ID
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: demand_circuit
                        
                        	Enable/disable demand circuit operation
                        	**type**\: bool
                        
                        .. attribute:: priority
                        
                        	Specify router priority
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: type7_translate_always
                        
                        	Translate Type 7 to Type 5, even if not elected NSSA translator
                        	**type**\: bool
                        
                        .. attribute:: prefix_suppression
                        
                        	Enable/disable prefix suppression on an interface
                        	**type**\: bool
                        
                        .. attribute:: enable
                        
                        	Enable OSPFv3 area
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: mtu_ignore
                        
                        	Enable/disable ignoring of MTU in DBD packets
                        	**type**\: bool
                        
                        .. attribute:: passive
                        
                        	Enable/disable routing updates on an interface
                        	**type**\: bool
                        
                        .. attribute:: hello_interval
                        
                        	Time between HELLO packets
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: dead_interval
                        
                        	Interval after which a neighbor is declared dead (in seconds)
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: default_cost
                        
                        	Set the summary default\-cost of a NSSA/stub area
                        	**type**\: int
                        
                        	**range:** 0..16777215
                        
                        .. attribute:: flood_reduction
                        
                        	Enable/disable flood reduction
                        	**type**\: bool
                        
                        .. attribute:: retransmit_interval
                        
                        	Specify the transmit interval in seconds
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: ldp_sync
                        
                        	Enable/Disable MPLS LDP sync
                        	**type**\: bool
                        
                        .. attribute:: network
                        
                        	Specify network type
                        	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                        
                        .. attribute:: transmit_delay
                        
                        	Specify the transmit delay in seconds
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        	**units**\: second
                        
                        .. attribute:: cost
                        
                        	Interface cost
                        	**type**\: int
                        
                        	**range:** 1..65535
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId, self).__init__()

                            self.yang_name = "area-area-id"
                            self.yang_parent_name = "area-addresses"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['area_id']
                            self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication)), ("bfd", ("bfd", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd)), ("ranges", ("ranges", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges)), ("encryption", ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption)), ("nssa", ("nssa", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList)), ("interfaces", ("interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces)), ("area-scope", ("area_scope", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope)), ("sham-links", ("sham_links", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks)), ("virtual-links", ("virtual_links", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks))])
                            self._leafs = OrderedDict([
                                ('area_id', (YLeaf(YType.uint32, 'area-id'), ['int'])),
                                ('stub', (YLeaf(YType.boolean, 'stub'), ['bool'])),
                                ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                                ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                                ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                                ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                ('type7_translate_always', (YLeaf(YType.boolean, 'type7-translate-always'), ['bool'])),
                                ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                                ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                                ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                                ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                ('default_cost', (YLeaf(YType.uint32, 'default-cost'), ['int'])),
                                ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                                ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                ('ldp_sync', (YLeaf(YType.boolean, 'ldp-sync'), ['bool'])),
                                ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                                ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                            ])
                            self.area_id = None
                            self.stub = None
                            self.packet_size = None
                            self.instance = None
                            self.demand_circuit = None
                            self.priority = None
                            self.type7_translate_always = None
                            self.prefix_suppression = None
                            self.enable = None
                            self.mtu_ignore = None
                            self.passive = None
                            self.hello_interval = None
                            self.dead_interval = None
                            self.default_cost = None
                            self.flood_reduction = None
                            self.retransmit_interval = None
                            self.ldp_sync = None
                            self.network = None
                            self.transmit_delay = None
                            self.cost = None

                            self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication()
                            self.authentication.parent = self
                            self._children_name_map["authentication"] = "authentication"

                            self.bfd = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd()
                            self.bfd.parent = self
                            self._children_name_map["bfd"] = "bfd"

                            self.ranges = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges()
                            self.ranges.parent = self
                            self._children_name_map["ranges"] = "ranges"

                            self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption()
                            self.encryption.parent = self
                            self._children_name_map["encryption"] = "encryption"

                            self.nssa = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa()
                            self.nssa.parent = self
                            self._children_name_map["nssa"] = "nssa"

                            self.database_filter = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter()
                            self.database_filter.parent = self
                            self._children_name_map["database_filter"] = "database-filter"

                            self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList()
                            self.distribute_list.parent = self
                            self._children_name_map["distribute_list"] = "distribute-list"

                            self.interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces()
                            self.interfaces.parent = self
                            self._children_name_map["interfaces"] = "interfaces"

                            self.area_scope = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope()
                            self.area_scope.parent = self
                            self._children_name_map["area_scope"] = "area-scope"

                            self.sham_links = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks()
                            self.sham_links.parent = self
                            self._children_name_map["sham_links"] = "sham-links"

                            self.virtual_links = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks()
                            self.virtual_links.parent = self
                            self._children_name_map["virtual_links"] = "virtual-links"
                            self._segment_path = lambda: "area-area-id" + "[area-id='" + str(self.area_id) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId, ['area_id', 'stub', 'packet_size', 'instance', 'demand_circuit', 'priority', 'type7_translate_always', 'prefix_suppression', 'enable', 'mtu_ignore', 'passive', 'hello_interval', 'dead_interval', 'default_cost', 'flood_reduction', 'retransmit_interval', 'ldp_sync', 'network', 'transmit_delay', 'cost'], name, value)


                        class Authentication(_Entity_):
                            """
                            Authenticate OSPFv3 packets
                            
                            .. attribute:: enable
                            
                            	Authenticate packets
                            	**type**\: bool
                            
                            .. attribute:: spi
                            
                            	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                            	**type**\: int
                            
                            	**range:** 256..4294967295
                            
                            .. attribute:: algorithm
                            
                            	Use the MD5 or SHA1 algorithm
                            	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                            
                            .. attribute:: password
                            
                            	Specify MD5 or SHA1 password
                            	**type**\: str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication, self).__init__()

                                self.yang_name = "authentication"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                    ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                    ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                    ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                ])
                                self.enable = None
                                self.spi = None
                                self.algorithm = None
                                self.password = None
                                self._segment_path = lambda: "authentication"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Authentication']['meta_info']


                        class Bfd(_Entity_):
                            """
                            Configure BFD parameters
                            
                            .. attribute:: detection_multiplier
                            
                            	Detect multiplier
                            	**type**\: int
                            
                            	**range:** 2..50
                            
                            .. attribute:: interval
                            
                            	Hello interval in milli\-seconds
                            	**type**\: int
                            
                            	**range:** 3..30000
                            
                            	**units**\: millisecond
                            
                            .. attribute:: fast_detect_mode
                            
                            	Enable or disable BFD fast detection
                            	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd, self).__init__()

                                self.yang_name = "bfd"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                    ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                    ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                                ])
                                self.detection_multiplier = None
                                self.interval = None
                                self.fast_detect_mode = None
                                self._segment_path = lambda: "bfd"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd, ['detection_multiplier', 'interval', 'fast_detect_mode'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Bfd']['meta_info']


                        class Ranges(_Entity_):
                            """
                            Range configuration
                            
                            .. attribute:: range
                            
                            	Summarize inter\-area routes matching prefix/length
                            	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges.Range>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges, self).__init__()

                                self.yang_name = "ranges"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("range", ("range", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges.Range))])
                                self._leafs = OrderedDict()

                                self.range = YList(self)
                                self._segment_path = lambda: "ranges"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges, [], name, value)


                            class Range(_Entity_):
                                """
                                Summarize inter\-area routes matching
                                prefix/length
                                
                                .. attribute:: prefix  (key)
                                
                                	IPv6 prefix format
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: prefix_length  (key)
                                
                                	IPV6 prefix length
                                	**type**\: int
                                
                                	**range:** 0..128
                                
                                .. attribute:: not_advertise
                                
                                	Do not advertise address range
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: cost
                                
                                	Specified metric for this range
                                	**type**\: int
                                
                                	**range:** 1..16777214
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges.Range, self).__init__()

                                    self.yang_name = "range"
                                    self.yang_parent_name = "ranges"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['prefix','prefix_length']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix', (YLeaf(YType.str, 'prefix'), ['str'])),
                                        ('prefix_length', (YLeaf(YType.uint8, 'prefix-length'), ['int'])),
                                        ('not_advertise', (YLeaf(YType.boolean, 'not-advertise'), ['bool'])),
                                        ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                    ])
                                    self.prefix = None
                                    self.prefix_length = None
                                    self.not_advertise = None
                                    self.cost = None
                                    self._segment_path = lambda: "range" + "[prefix='" + str(self.prefix) + "']" + "[prefix-length='" + str(self.prefix_length) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges.Range, ['prefix', 'prefix_length', 'not_advertise', 'cost'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges.Range']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Ranges']['meta_info']


                        class Encryption(_Entity_):
                            """
                            Encrypt and authenticate OSPFv3 packets
                            
                            .. attribute:: enable
                            
                            	Authenticate packets
                            	**type**\: bool
                            
                            .. attribute:: spi
                            
                            	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                            	**type**\: int
                            
                            	**range:** 256..4294967295
                            
                            .. attribute:: encryption_algorithm
                            
                            	Specify the encryption algorithm
                            	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                            
                            .. attribute:: encryption_password
                            
                            	Encryption password
                            	**type**\: str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            .. attribute:: authentication_algorithm
                            
                            	Use the NULL, MD5 or SHA1 algorithm
                            	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                            
                            .. attribute:: authentication_password
                            
                            	Specify MD5 or SHA1 password
                            	**type**\: str
                            
                            	**pattern:** (!.+)\|([^!].+)
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption, self).__init__()

                                self.yang_name = "encryption"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                    ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                    ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                    ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                    ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                    ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                ])
                                self.enable = None
                                self.spi = None
                                self.encryption_algorithm = None
                                self.encryption_password = None
                                self.authentication_algorithm = None
                                self.authentication_password = None
                                self._segment_path = lambda: "encryption"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Encryption']['meta_info']


                        class Nssa(_Entity_):
                            """
                            Specify area as a NSSA area.  Allowed only in
                            non\-backbone areas
                            
                            .. attribute:: no_redistribution
                            
                            	No redistribution into this NSSA area
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: default_info_originate
                            
                            	Originate Type 7 default into NSSA area
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: metric
                            
                            	Only valid with DefaultInfoOriginate
                            	**type**\: int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	Only valid with DefaultInfoOriginate
                            	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: no_summary
                            
                            	Do not send summary LSA into NSSA
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa, self).__init__()

                                self.yang_name = "nssa"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('no_redistribution', (YLeaf(YType.boolean, 'no-redistribution'), ['bool'])),
                                    ('default_info_originate', (YLeaf(YType.boolean, 'default-info-originate'), ['bool'])),
                                    ('metric', (YLeaf(YType.uint32, 'metric'), ['int'])),
                                    ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                    ('no_summary', (YLeaf(YType.empty, 'no-summary'), ['Empty'])),
                                ])
                                self.no_redistribution = None
                                self.default_info_originate = None
                                self.metric = None
                                self.metric_type = None
                                self.no_summary = None
                                self._segment_path = lambda: "nssa"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa, ['no_redistribution', 'default_info_originate', 'metric', 'metric_type', 'no_summary'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Nssa']['meta_info']


                        class DatabaseFilter(_Entity_):
                            """
                            Database filter
                            
                            .. attribute:: all
                            
                            	All
                            	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter, self).__init__()

                                self.yang_name = "database-filter"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All))])
                                self._leafs = OrderedDict()

                                self.all = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All()
                                self.all.parent = self
                                self._children_name_map["all"] = "all"
                                self._segment_path = lambda: "database-filter"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter, [], name, value)


                            class All(_Entity_):
                                """
                                All
                                
                                .. attribute:: out
                                
                                	Enable or disable database\-filter
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All, self).__init__()

                                    self.yang_name = "all"
                                    self.yang_parent_name = "database-filter"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('out', (YLeaf(YType.boolean, 'out'), ['bool'])),
                                    ])
                                    self.out = None
                                    self._segment_path = lambda: "all"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All, ['out'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter.All']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DatabaseFilter']['meta_info']


                        class DistributeList(_Entity_):
                            """
                            Filter prefixes to/from RIB
                            
                            .. attribute:: in_
                            
                            	Filter prefixes installed to RIB
                            	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList, self).__init__()

                                self.yang_name = "distribute-list"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In))])
                                self._leafs = OrderedDict()

                                self.in_ = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In()
                                self.in_.parent = self
                                self._children_name_map["in_"] = "in"
                                self._segment_path = lambda: "distribute-list"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList, [], name, value)


                            class In(_Entity_):
                                """
                                Filter prefixes installed to RIB
                                
                                .. attribute:: prefix_list
                                
                                	Filter prefixes based on an IPv6 prefix\-list
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In, self).__init__()

                                    self.yang_name = "in"
                                    self.yang_parent_name = "distribute-list"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                    ])
                                    self.prefix_list = None
                                    self._segment_path = lambda: "in"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In, ['prefix_list'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList.In']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.DistributeList']['meta_info']


                        class Interfaces(_Entity_):
                            """
                            OSPFv3 interfaces
                            
                            .. attribute:: interface
                            
                            	OSPFv3 interface
                            	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces, self).__init__()

                                self.yang_name = "interfaces"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("interface", ("interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface))])
                                self._leafs = OrderedDict()

                                self.interface = YList(self)
                                self._segment_path = lambda: "interfaces"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces, [], name, value)


                            class Interface(_Entity_):
                                """
                                OSPFv3 interface
                                
                                .. attribute:: interface_name  (key)
                                
                                	Interface to configure
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication>`
                                
                                .. attribute:: neighbors
                                
                                	Specify a neighbor router
                                	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption>`
                                
                                .. attribute:: bfd
                                
                                	Configure BFD parameters
                                	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd>`
                                
                                .. attribute:: database_filter
                                
                                	Database filter
                                	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter>`
                                
                                .. attribute:: distribute_list
                                
                                	Filter prefixes to/from RIB
                                	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList>`
                                
                                .. attribute:: enable
                                
                                	Enable OSPFv3 interface
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: flood_reduction
                                
                                	Enable/disable flood reduction
                                	**type**\: bool
                                
                                .. attribute:: cost
                                
                                	Interface cost
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: instance
                                
                                	Instance ID
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ldp_sync
                                
                                	Enable/Disable MPLS LDP sync
                                	**type**\: bool
                                
                                .. attribute:: mtu_ignore
                                
                                	Enable/disable ignoring of MTU in DBD packets
                                	**type**\: bool
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: passive
                                
                                	Enable/disable routing updates on an interface
                                	**type**\: bool
                                
                                .. attribute:: packet_size
                                
                                	Limit size of OSPFv3 packets
                                	**type**\: int
                                
                                	**range:** 256..10000
                                
                                .. attribute:: prefix_suppression
                                
                                	Enable/disable prefix suppression on an interface
                                	**type**\: bool
                                
                                .. attribute:: priority
                                
                                	Specify router priority
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: network
                                
                                	Specify network type
                                	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                                
                                .. attribute:: demand_circuit
                                
                                	Enable/disable demand circuit operation
                                	**type**\: bool
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface, self).__init__()

                                    self.yang_name = "interface"
                                    self.yang_parent_name = "interfaces"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['interface_name']
                                    self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication)), ("neighbors", ("neighbors", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors)), ("encryption", ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption)), ("bfd", ("bfd", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList)), ("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute))])
                                    self._leafs = OrderedDict([
                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                        ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                                        ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                        ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                        ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                                        ('ldp_sync', (YLeaf(YType.boolean, 'ldp-sync'), ['bool'])),
                                        ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                                        ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                        ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                        ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                                        ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                                        ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                                        ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                        ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                                        ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                                    ])
                                    self.interface_name = None
                                    self.enable = None
                                    self.dead_interval = None
                                    self.flood_reduction = None
                                    self.cost = None
                                    self.transmit_delay = None
                                    self.instance = None
                                    self.ldp_sync = None
                                    self.mtu_ignore = None
                                    self.retransmit_interval = None
                                    self.hello_interval = None
                                    self.passive = None
                                    self.packet_size = None
                                    self.prefix_suppression = None
                                    self.priority = None
                                    self.network = None
                                    self.demand_circuit = None

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"

                                    self.neighbors = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors()
                                    self.neighbors.parent = self
                                    self._children_name_map["neighbors"] = "neighbors"

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"

                                    self.bfd = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd()
                                    self.bfd.parent = self
                                    self._children_name_map["bfd"] = "bfd"

                                    self.database_filter = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter()
                                    self.database_filter.parent = self
                                    self._children_name_map["database_filter"] = "database-filter"

                                    self.distribute_list = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList()
                                    self.distribute_list.parent = self
                                    self._children_name_map["distribute_list"] = "distribute-list"

                                    self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface, ['interface_name', 'enable', 'dead_interval', 'flood_reduction', 'cost', 'transmit_delay', 'instance', 'ldp_sync', 'mtu_ignore', 'retransmit_interval', 'hello_interval', 'passive', 'packet_size', 'prefix_suppression', 'priority', 'network', 'demand_circuit'], name, value)


                                class Authentication(_Entity_):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.algorithm = None
                                        self.password = None
                                        self._segment_path = lambda: "authentication"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication']['meta_info']


                                class Neighbors(_Entity_):
                                    """
                                    Specify a neighbor router
                                    
                                    .. attribute:: neighbor
                                    
                                    	IPv6 address
                                    	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors, self).__init__()

                                        self.yang_name = "neighbors"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("neighbor", ("neighbor", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor))])
                                        self._leafs = OrderedDict()

                                        self.neighbor = YList(self)
                                        self._segment_path = lambda: "neighbors"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors, [], name, value)


                                    class Neighbor(_Entity_):
                                        """
                                        IPv6 address
                                        
                                        .. attribute:: neighbor_address  (key)
                                        
                                        	IPV6 address
                                        	**type**\: str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: priority
                                        
                                        	OSPFv3 priority of non\-broadcast neighbor
                                        	**type**\: int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: poll_interval
                                        
                                        	OSPFv3 dead\-router polling interval (in seconds)
                                        	**type**\: int
                                        
                                        	**range:** 0..65535
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: cost
                                        
                                        	OSPFv3 cost for point\-to\-multipoint neighbor
                                        	**type**\: int
                                        
                                        	**range:** 1..65535
                                        
                                        .. attribute:: database_filter
                                        
                                        	Filter OSPFv3 LSA during synchronization and flooding for point\-to\-multipoint neighbor
                                        	**type**\: bool
                                        
                                        .. attribute:: zone
                                        
                                        	Zone
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor, self).__init__()

                                            self.yang_name = "neighbor"
                                            self.yang_parent_name = "neighbors"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['neighbor_address']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('neighbor_address', (YLeaf(YType.str, 'neighbor-address'), ['str'])),
                                                ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                                ('poll_interval', (YLeaf(YType.uint32, 'poll-interval'), ['int'])),
                                                ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                                ('database_filter', (YLeaf(YType.boolean, 'database-filter'), ['bool'])),
                                                ('zone', (YLeaf(YType.str, 'zone'), ['str'])),
                                            ])
                                            self.neighbor_address = None
                                            self.priority = None
                                            self.poll_interval = None
                                            self.cost = None
                                            self.database_filter = None
                                            self.zone = None
                                            self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter', 'zone'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors']['meta_info']


                                class Encryption(_Entity_):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                            ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                            ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                            ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.encryption_algorithm = None
                                        self.encryption_password = None
                                        self.authentication_algorithm = None
                                        self.authentication_password = None
                                        self._segment_path = lambda: "encryption"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption']['meta_info']


                                class Bfd(_Entity_):
                                    """
                                    Configure BFD parameters
                                    
                                    .. attribute:: interval
                                    
                                    	Hello interval in milli\-seconds
                                    	**type**\: int
                                    
                                    	**range:** 3..30000
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: fast_detect_mode
                                    
                                    	Enable or disable BFD fast detection
                                    	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                    
                                    .. attribute:: detection_multiplier
                                    
                                    	Detect multiplier
                                    	**type**\: int
                                    
                                    	**range:** 2..50
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd, self).__init__()

                                        self.yang_name = "bfd"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                            ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                                            ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                        ])
                                        self.interval = None
                                        self.fast_detect_mode = None
                                        self.detection_multiplier = None
                                        self._segment_path = lambda: "bfd"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd, ['interval', 'fast_detect_mode', 'detection_multiplier'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd']['meta_info']


                                class DatabaseFilter(_Entity_):
                                    """
                                    Database filter
                                    
                                    .. attribute:: all
                                    
                                    	All
                                    	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter, self).__init__()

                                        self.yang_name = "database-filter"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All))])
                                        self._leafs = OrderedDict()

                                        self.all = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All()
                                        self.all.parent = self
                                        self._children_name_map["all"] = "all"
                                        self._segment_path = lambda: "database-filter"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter, [], name, value)


                                    class All(_Entity_):
                                        """
                                        All
                                        
                                        .. attribute:: out
                                        
                                        	Enable or disable database\-filter
                                        	**type**\: bool
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All, self).__init__()

                                            self.yang_name = "all"
                                            self.yang_parent_name = "database-filter"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('out', (YLeaf(YType.boolean, 'out'), ['bool'])),
                                            ])
                                            self.out = None
                                            self._segment_path = lambda: "all"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All, ['out'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter']['meta_info']


                                class DistributeList(_Entity_):
                                    """
                                    Filter prefixes to/from RIB
                                    
                                    .. attribute:: in_
                                    
                                    	Filter prefixes installed to RIB
                                    	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList, self).__init__()

                                        self.yang_name = "distribute-list"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In))])
                                        self._leafs = OrderedDict()

                                        self.in_ = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In()
                                        self.in_.parent = self
                                        self._children_name_map["in_"] = "in"
                                        self._segment_path = lambda: "distribute-list"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList, [], name, value)


                                    class In(_Entity_):
                                        """
                                        Filter prefixes installed to RIB
                                        
                                        .. attribute:: prefix_list
                                        
                                        	Filter prefixes based on an IPv6 prefix\-list
                                        	**type**\: str
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In, self).__init__()

                                            self.yang_name = "in"
                                            self.yang_parent_name = "distribute-list"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                            ])
                                            self.prefix_list = None
                                            self._segment_path = lambda: "in"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In, ['prefix_list'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList']['meta_info']


                                class FastReroute(_Entity_):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix))])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"

                                        self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._segment_path = lambda: "fast-reroute"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(_Entity_):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                            self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._segment_path = lambda: "per-link"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(_Entity_):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(_Entity_):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(_Entity_):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                            self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._segment_path = lambda: "per-prefix"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(_Entity_):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(_Entity_):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces.Interface']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.Interfaces']['meta_info']


                        class AreaScope(_Entity_):
                            """
                            Area Scope Configuration
                            
                            .. attribute:: fast_reroute
                            
                            	Fast\-reroute configuration
                            	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope, self).__init__()

                                self.yang_name = "area-scope"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute))])
                                self._leafs = OrderedDict()

                                self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute()
                                self.fast_reroute.parent = self
                                self._children_name_map["fast_reroute"] = "fast-reroute"
                                self._segment_path = lambda: "area-scope"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope, [], name, value)


                            class FastReroute(_Entity_):
                                """
                                Fast\-reroute configuration
                                
                                .. attribute:: per_link
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink>`
                                
                                .. attribute:: per_prefix
                                
                                	Fast\-reroute per\-link configuration
                                	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix>`
                                
                                .. attribute:: fast_reroute_enable
                                
                                	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, self).__init__()

                                    self.yang_name = "fast-reroute"
                                    self.yang_parent_name = "area-scope"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix))])
                                    self._leafs = OrderedDict([
                                        ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                                    ])
                                    self.fast_reroute_enable = None

                                    self.per_link = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink()
                                    self.per_link.parent = self
                                    self._children_name_map["per_link"] = "per-link"

                                    self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix()
                                    self.per_prefix.parent = self
                                    self._children_name_map["per_prefix"] = "per-prefix"
                                    self._segment_path = lambda: "fast-reroute"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                class PerLink(_Entity_):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                    	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, self).__init__()

                                        self.yang_name = "per-link"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces))])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                        ])
                                        self.fast_reroute_use_candidate_only = None

                                        self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                        self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._segment_path = lambda: "per-link"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(_Entity_):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                            self._leafs = OrderedDict()

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(_Entity_):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                    class ExcludeInterfaces(_Entity_):
                                        """
                                        Fast\-reroute per\-link/per\-prefix exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup
                                        	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                            self._leafs = OrderedDict()

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(_Entity_):
                                            """
                                            Exclude an interface from becoming a backup
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink']['meta_info']


                                class PerPrefix(_Entity_):
                                    """
                                    Fast\-reroute per\-link configuration
                                    
                                    .. attribute:: fast_reroute_use_candidate_only
                                    
                                    	Use only interfaces on the candidate list as a backup path
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: candidate_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                    	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                    
                                    .. attribute:: exclude_interfaces
                                    
                                    	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                    	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, self).__init__()

                                        self.yang_name = "per-prefix"
                                        self.yang_parent_name = "fast-reroute"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                        ])
                                        self.fast_reroute_use_candidate_only = None

                                        self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                        self.candidate_interfaces.parent = self
                                        self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                        self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                        self.exclude_interfaces.parent = self
                                        self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                        self._segment_path = lambda: "per-prefix"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                    class CandidateInterfaces(_Entity_):
                                        """
                                        Fast\-reroute per\-link/per\-prefix candidate
                                        interface configuration
                                        
                                        .. attribute:: candidate_interface
                                        
                                        	Candidate backup interface
                                        	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                            self.yang_name = "candidate-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                            self._leafs = OrderedDict()

                                            self.candidate_interface = YList(self)
                                            self._segment_path = lambda: "candidate-interfaces"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                        class CandidateInterface(_Entity_):
                                            """
                                            Candidate backup interface
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                self.yang_name = "candidate-interface"
                                                self.yang_parent_name = "candidate-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                    class ExcludeInterfaces(_Entity_):
                                        """
                                        Fast\-reroute per\-link/per\-prefix exclude
                                        interface configuration
                                        
                                        .. attribute:: exclude_interface
                                        
                                        	Exclude an interface from becoming a backup
                                        	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                            self.yang_name = "exclude-interfaces"
                                            self.yang_parent_name = "per-prefix"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                            self._leafs = OrderedDict()

                                            self.exclude_interface = YList(self)
                                            self._segment_path = lambda: "exclude-interfaces"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                        class ExcludeInterface(_Entity_):
                                            """
                                            Exclude an interface from becoming a backup
                                            
                                            .. attribute:: interface_name  (key)
                                            
                                            	Interface
                                            	**type**\: str
                                            
                                            	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                self.yang_name = "exclude-interface"
                                                self.yang_parent_name = "exclude-interfaces"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['interface_name']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                ])
                                                self.interface_name = None
                                                self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.AreaScope']['meta_info']


                        class ShamLinks(_Entity_):
                            """
                            Sham Link sub\-mode
                            
                            .. attribute:: sham_link
                            
                            	ShamLink local and remote endpoints
                            	**type**\: list of  		 :py:class:`ShamLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks, self).__init__()

                                self.yang_name = "sham-links"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("sham-link", ("sham_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink))])
                                self._leafs = OrderedDict()

                                self.sham_link = YList(self)
                                self._segment_path = lambda: "sham-links"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks, [], name, value)


                            class ShamLink(_Entity_):
                                """
                                ShamLink local and remote endpoints
                                
                                .. attribute:: source_address  (key)
                                
                                	Local sham\-link endpoint
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: destination_address  (key)
                                
                                	Remote sham\-link endpoint
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption>`
                                
                                .. attribute:: enable
                                
                                	Enable sham link
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink, self).__init__()

                                    self.yang_name = "sham-link"
                                    self.yang_parent_name = "sham-links"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['source_address','destination_address']
                                    self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication)), ("encryption", ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption))])
                                    self._leafs = OrderedDict([
                                        ('source_address', (YLeaf(YType.str, 'source-address'), ['str'])),
                                        ('destination_address', (YLeaf(YType.str, 'destination-address'), ['str'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                        ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                        ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                        ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                    ])
                                    self.source_address = None
                                    self.destination_address = None
                                    self.enable = None
                                    self.hello_interval = None
                                    self.dead_interval = None
                                    self.retransmit_interval = None
                                    self.transmit_delay = None

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._segment_path = lambda: "sham-link" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink, ['source_address', 'destination_address', 'enable', 'hello_interval', 'dead_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(_Entity_):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "sham-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.algorithm = None
                                        self.password = None
                                        self._segment_path = lambda: "authentication"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication']['meta_info']


                                class Encryption(_Entity_):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "sham-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                            ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                            ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                            ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.encryption_algorithm = None
                                        self.encryption_password = None
                                        self.authentication_algorithm = None
                                        self.authentication_password = None
                                        self._segment_path = lambda: "encryption"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.ShamLinks']['meta_info']


                        class VirtualLinks(_Entity_):
                            """
                            Virtual link sub\-mode
                            
                            .. attribute:: virtual_link
                            
                            	Router ID of virtual link neighbor
                            	**type**\: list of  		 :py:class:`VirtualLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks, self).__init__()

                                self.yang_name = "virtual-links"
                                self.yang_parent_name = "area-area-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("virtual-link", ("virtual_link", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink))])
                                self._leafs = OrderedDict()

                                self.virtual_link = YList(self)
                                self._segment_path = lambda: "virtual-links"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks, [], name, value)


                            class VirtualLink(_Entity_):
                                """
                                Router ID of virtual link neighbor
                                
                                .. attribute:: virtual_link_address  (key)
                                
                                	Router ID of virtual link neighbor
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: authentication
                                
                                	Authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication>`
                                
                                .. attribute:: encryption
                                
                                	Encrypt and authenticate OSPFv3 packets
                                	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption>`
                                
                                .. attribute:: enable
                                
                                	Enabled virtual link
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: hello_interval
                                
                                	Time between HELLO packets
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: dead_interval
                                
                                	Interval after which a neighbor is declared dead (in seconds)
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: retransmit_interval
                                
                                	Specify the transmit interval in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                .. attribute:: transmit_delay
                                
                                	Specify the transmit delay in seconds
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink, self).__init__()

                                    self.yang_name = "virtual-link"
                                    self.yang_parent_name = "virtual-links"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['virtual_link_address']
                                    self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication)), ("encryption", ("encryption", Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption))])
                                    self._leafs = OrderedDict([
                                        ('virtual_link_address', (YLeaf(YType.str, 'virtual-link-address'), ['str'])),
                                        ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                        ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                        ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                        ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                        ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                    ])
                                    self.virtual_link_address = None
                                    self.enable = None
                                    self.hello_interval = None
                                    self.dead_interval = None
                                    self.retransmit_interval = None
                                    self.transmit_delay = None

                                    self.authentication = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication()
                                    self.authentication.parent = self
                                    self._children_name_map["authentication"] = "authentication"

                                    self.encryption = Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption()
                                    self.encryption.parent = self
                                    self._children_name_map["encryption"] = "encryption"
                                    self._segment_path = lambda: "virtual-link" + "[virtual-link-address='" + str(self.virtual_link_address) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink, ['virtual_link_address', 'enable', 'hello_interval', 'dead_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                class Authentication(_Entity_):
                                    """
                                    Authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: algorithm
                                    
                                    	Use the MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                    
                                    .. attribute:: password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication, self).__init__()

                                        self.yang_name = "authentication"
                                        self.yang_parent_name = "virtual-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.algorithm = None
                                        self.password = None
                                        self._segment_path = lambda: "authentication"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication']['meta_info']


                                class Encryption(_Entity_):
                                    """
                                    Encrypt and authenticate OSPFv3 packets
                                    
                                    .. attribute:: enable
                                    
                                    	Authenticate packets
                                    	**type**\: bool
                                    
                                    .. attribute:: spi
                                    
                                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                    	**type**\: int
                                    
                                    	**range:** 256..4294967295
                                    
                                    .. attribute:: encryption_algorithm
                                    
                                    	Specify the encryption algorithm
                                    	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                    
                                    .. attribute:: encryption_password
                                    
                                    	Encryption password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: authentication_algorithm
                                    
                                    	Use the NULL, MD5 or SHA1 algorithm
                                    	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                    
                                    .. attribute:: authentication_password
                                    
                                    	Specify MD5 or SHA1 password
                                    	**type**\: str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption, self).__init__()

                                        self.yang_name = "encryption"
                                        self.yang_parent_name = "virtual-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                            ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                            ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                            ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                            ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                        ])
                                        self.enable = None
                                        self.spi = None
                                        self.encryption_algorithm = None
                                        self.encryption_password = None
                                        self.authentication_algorithm = None
                                        self.authentication_password = None
                                        self._segment_path = lambda: "encryption"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId.VirtualLinks']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses.AreaAreaId']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AreaAddresses']['meta_info']


                class Timers(_Entity_):
                    """
                    Adjust routing timers
                    
                    .. attribute:: pacing
                    
                    	Pacing timers
                    	**type**\:  :py:class:`Pacing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing>`
                    
                    .. attribute:: lsa_timers
                    
                    	LSA timers
                    	**type**\:  :py:class:`LsaTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers>`
                    
                    .. attribute:: throttle
                    
                    	Throttle timers
                    	**type**\:  :py:class:`Throttle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Timers, self).__init__()

                        self.yang_name = "timers"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("pacing", ("pacing", Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing)), ("lsa-timers", ("lsa_timers", Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers)), ("throttle", ("throttle", Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle))])
                        self._leafs = OrderedDict()

                        self.pacing = Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing()
                        self.pacing.parent = self
                        self._children_name_map["pacing"] = "pacing"

                        self.lsa_timers = Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers()
                        self.lsa_timers.parent = self
                        self._children_name_map["lsa_timers"] = "lsa-timers"

                        self.throttle = Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle()
                        self.throttle.parent = self
                        self._children_name_map["throttle"] = "throttle"
                        self._segment_path = lambda: "timers"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers, [], name, value)


                    class Pacing(_Entity_):
                        """
                        Pacing timers
                        
                        .. attribute:: flood
                        
                        	The minimum interval in milliseconds to pace limit flooding on interface
                        	**type**\: int
                        
                        	**range:** 5..100
                        
                        	**units**\: millisecond
                        
                        .. attribute:: retransmission
                        
                        	The minimum interval in msec between neighbor retransmissions
                        	**type**\: int
                        
                        	**range:** 5..100
                        
                        .. attribute:: lsa_group
                        
                        	Interval in seconds at which LSAs are grouped and refreshed, checksummed, or aged
                        	**type**\: int
                        
                        	**range:** 10..1800
                        
                        	**units**\: second
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing, self).__init__()

                            self.yang_name = "pacing"
                            self.yang_parent_name = "timers"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('flood', (YLeaf(YType.uint32, 'flood'), ['int'])),
                                ('retransmission', (YLeaf(YType.uint32, 'retransmission'), ['int'])),
                                ('lsa_group', (YLeaf(YType.uint32, 'lsa-group'), ['int'])),
                            ])
                            self.flood = None
                            self.retransmission = None
                            self.lsa_group = None
                            self._segment_path = lambda: "pacing"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing, ['flood', 'retransmission', 'lsa_group'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Timers.Pacing']['meta_info']


                    class LsaTimers(_Entity_):
                        """
                        LSA timers
                        
                        .. attribute:: arrival
                        
                        	The minimum interval in milliseconds between accepting the same LSA
                        	**type**\: int
                        
                        	**range:** 0..60000
                        
                        	**units**\: millisecond
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers, self).__init__()

                            self.yang_name = "lsa-timers"
                            self.yang_parent_name = "timers"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('arrival', (YLeaf(YType.uint32, 'arrival'), ['int'])),
                            ])
                            self.arrival = None
                            self._segment_path = lambda: "lsa-timers"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers, ['arrival'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Timers.LsaTimers']['meta_info']


                    class Throttle(_Entity_):
                        """
                        Throttle timers
                        
                        .. attribute:: lsa
                        
                        	LSA throttle timers for all types of OSPF LSAs
                        	**type**\:  :py:class:`Lsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa>`
                        
                        .. attribute:: spf
                        
                        	SPF throttle timers
                        	**type**\:  :py:class:`Spf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle, self).__init__()

                            self.yang_name = "throttle"
                            self.yang_parent_name = "timers"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("lsa", ("lsa", Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa)), ("spf", ("spf", Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf))])
                            self._leafs = OrderedDict()

                            self.lsa = Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa()
                            self.lsa.parent = self
                            self._children_name_map["lsa"] = "lsa"

                            self.spf = Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf()
                            self.spf.parent = self
                            self._children_name_map["spf"] = "spf"
                            self._segment_path = lambda: "throttle"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle, [], name, value)


                        class Lsa(_Entity_):
                            """
                            LSA throttle timers for all types of OSPF LSAs
                            
                            .. attribute:: first_delay
                            
                            	Delay to generate first occurrence of LSA in milliseconds
                            	**type**\: int
                            
                            	**range:** 0..600000
                            
                            	**units**\: millisecond
                            
                            .. attribute:: minimum_delay
                            
                            	Minimum delay between originating the same LSA in milliseconds
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            .. attribute:: maximum_delay
                            
                            	Maximum delay between originating the same LSA in milliseconds
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            	**units**\: millisecond
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa, self).__init__()

                                self.yang_name = "lsa"
                                self.yang_parent_name = "throttle"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('first_delay', (YLeaf(YType.uint32, 'first-delay'), ['int'])),
                                    ('minimum_delay', (YLeaf(YType.uint32, 'minimum-delay'), ['int'])),
                                    ('maximum_delay', (YLeaf(YType.uint32, 'maximum-delay'), ['int'])),
                                ])
                                self.first_delay = None
                                self.minimum_delay = None
                                self.maximum_delay = None
                                self._segment_path = lambda: "lsa"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa, ['first_delay', 'minimum_delay', 'maximum_delay'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Lsa']['meta_info']


                        class Spf(_Entity_):
                            """
                            SPF throttle timers
                            
                            .. attribute:: first_delay
                            
                            	Initial delay between receiving a change and starting SPF in ms
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            .. attribute:: minimum_delay
                            
                            	Minimum hold time between consecutive SPF calculations in ms
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            .. attribute:: maximum_delay
                            
                            	Maximum wait time between consecutive SPF calculations in ms
                            	**type**\: int
                            
                            	**range:** 1..600000
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf, self).__init__()

                                self.yang_name = "spf"
                                self.yang_parent_name = "throttle"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('first_delay', (YLeaf(YType.uint32, 'first-delay'), ['int'])),
                                    ('minimum_delay', (YLeaf(YType.uint32, 'minimum-delay'), ['int'])),
                                    ('maximum_delay', (YLeaf(YType.uint32, 'maximum-delay'), ['int'])),
                                ])
                                self.first_delay = None
                                self.minimum_delay = None
                                self.maximum_delay = None
                                self._segment_path = lambda: "spf"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf, ['first_delay', 'minimum_delay', 'maximum_delay'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle.Spf']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Timers.Throttle']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Timers']['meta_info']


                class SummaryPrefixes(_Entity_):
                    """
                    Summarize redistributed routes matching
                    prefix/length
                    
                    .. attribute:: summary_prefix
                    
                    	IPv6 address
                    	**type**\: list of  		 :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefix>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes, self).__init__()

                        self.yang_name = "summary-prefixes"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("summary-prefix", ("summary_prefix", Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefix))])
                        self._leafs = OrderedDict()

                        self.summary_prefix = YList(self)
                        self._segment_path = lambda: "summary-prefixes"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes, [], name, value)


                    class SummaryPrefix(_Entity_):
                        """
                        IPv6 address
                        
                        .. attribute:: prefix  (key)
                        
                        	IPv6 prefix string format
                        	**type**\: str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: prefix_length  (key)
                        
                        	IPV6 prefix length
                        	**type**\: int
                        
                        	**range:** 0..128
                        
                        .. attribute:: not_advertise
                        
                        	Suppress routes matching prefix/length
                        	**type**\: bool
                        
                        .. attribute:: tag
                        
                        	Tag
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefix, self).__init__()

                            self.yang_name = "summary-prefix"
                            self.yang_parent_name = "summary-prefixes"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['prefix','prefix_length']
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('prefix', (YLeaf(YType.str, 'prefix'), ['str'])),
                                ('prefix_length', (YLeaf(YType.uint8, 'prefix-length'), ['int'])),
                                ('not_advertise', (YLeaf(YType.boolean, 'not-advertise'), ['bool'])),
                                ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                            ])
                            self.prefix = None
                            self.prefix_length = None
                            self.not_advertise = None
                            self.tag = None
                            self._segment_path = lambda: "summary-prefix" + "[prefix='" + str(self.prefix) + "']" + "[prefix-length='" + str(self.prefix_length) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefix, ['prefix', 'prefix_length', 'not_advertise', 'tag'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes.SummaryPrefix']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.SummaryPrefixes']['meta_info']


                class Snmp(_Entity_):
                    """
                    SNMP configuration
                    
                    .. attribute:: trap_rate_limit
                    
                    	SNMP trap rate configuration
                    	**type**\:  :py:class:`TrapRateLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit>`
                    
                    .. attribute:: context
                    
                    	SNMP context configuration
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Snmp, self).__init__()

                        self.yang_name = "snmp"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("trap-rate-limit", ("trap_rate_limit", Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit))])
                        self._leafs = OrderedDict([
                            ('context', (YLeaf(YType.str, 'context'), ['str'])),
                        ])
                        self.context = None

                        self.trap_rate_limit = Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit()
                        self.trap_rate_limit.parent = self
                        self._children_name_map["trap_rate_limit"] = "trap-rate-limit"
                        self._segment_path = lambda: "snmp"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Snmp, ['context'], name, value)


                    class TrapRateLimit(_Entity_):
                        """
                        SNMP trap rate configuration
                        
                        .. attribute:: window_size
                        
                        	Trap rate limit sliding window size
                        	**type**\: int
                        
                        	**range:** 2..60
                        
                        .. attribute:: max_window_traps
                        
                        	Max number of traps sent in window time
                        	**type**\: int
                        
                        	**range:** 0..300
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit, self).__init__()

                            self.yang_name = "trap-rate-limit"
                            self.yang_parent_name = "snmp"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('window_size', (YLeaf(YType.uint32, 'window-size'), ['int'])),
                                ('max_window_traps', (YLeaf(YType.uint32, 'max-window-traps'), ['int'])),
                            ])
                            self.window_size = None
                            self.max_window_traps = None
                            self._segment_path = lambda: "trap-rate-limit"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit, ['window_size', 'max_window_traps'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Snmp.TrapRateLimit']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Snmp']['meta_info']


                class FastReroute(_Entity_):
                    """
                    Fast\-reroute instance scoped parameters
                    
                    .. attribute:: per_link
                    
                    	Fast\-reroute per\-link global configuration
                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink>`
                    
                    .. attribute:: per_prefix
                    
                    	Fast\-reroute per\-prefix global configuration
                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.FastReroute, self).__init__()

                        self.yang_name = "fast-reroute"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix))])
                        self._leafs = OrderedDict()

                        self.per_link = Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink()
                        self.per_link.parent = self
                        self._children_name_map["per_link"] = "per-link"

                        self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix()
                        self.per_prefix.parent = self
                        self._children_name_map["per_prefix"] = "per-prefix"
                        self._segment_path = lambda: "fast-reroute"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.FastReroute, [], name, value)


                    class PerLink(_Entity_):
                        """
                        Fast\-reroute per\-link global configuration
                        
                        .. attribute:: priority
                        
                        	Fast\-reroute per\-link/per\-prefix priority\-limit command
                        	**type**\:  :py:class:`Ospfv3FastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroutePriority>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink, self).__init__()

                            self.yang_name = "per-link"
                            self.yang_parent_name = "fast-reroute"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('priority', (YLeaf(YType.enumeration, 'priority'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroutePriority', '')])),
                            ])
                            self.priority = None
                            self._segment_path = lambda: "per-link"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink, ['priority'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerLink']['meta_info']


                    class PerPrefix(_Entity_):
                        """
                        Fast\-reroute per\-prefix global configuration
                        
                        .. attribute:: tiebreakers
                        
                        	Fast\-reroute tiebreakers configurations
                        	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers>`
                        
                        .. attribute:: load_sharing_disable
                        
                        	Disable load sharing between multiple backups
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: priority
                        
                        	Fast\-reroute per\-link/per\-prefix priority\-limit command
                        	**type**\:  :py:class:`Ospfv3FastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroutePriority>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix, self).__init__()

                            self.yang_name = "per-prefix"
                            self.yang_parent_name = "fast-reroute"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("tiebreakers", ("tiebreakers", Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers))])
                            self._leafs = OrderedDict([
                                ('load_sharing_disable', (YLeaf(YType.empty, 'load-sharing-disable'), ['Empty'])),
                                ('priority', (YLeaf(YType.enumeration, 'priority'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroutePriority', '')])),
                            ])
                            self.load_sharing_disable = None
                            self.priority = None

                            self.tiebreakers = Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers()
                            self.tiebreakers.parent = self
                            self._children_name_map["tiebreakers"] = "tiebreakers"
                            self._segment_path = lambda: "per-prefix"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix, ['load_sharing_disable', 'priority'], name, value)


                        class Tiebreakers(_Entity_):
                            """
                            Fast\-reroute tiebreakers configurations
                            
                            .. attribute:: tiebreaker
                            
                            	Fast\-reroute tiebreakers configuration
                            	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                self.yang_name = "tiebreakers"
                                self.yang_parent_name = "per-prefix"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                self._leafs = OrderedDict()

                                self.tiebreaker = YList(self)
                                self._segment_path = lambda: "tiebreakers"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                            class Tiebreaker(_Entity_):
                                """
                                Fast\-reroute tiebreakers configuration
                                
                                .. attribute:: tiebreaker_type  (key)
                                
                                	Tiebreaker type
                                	**type**\:  :py:class:`Ospfv3FastRerouteTiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastRerouteTiebreakers>`
                                
                                .. attribute:: tiebreaker_index
                                
                                	Index value for a tiebreaker
                                	**type**\: int
                                
                                	**range:** 1..255
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                    self.yang_name = "tiebreaker"
                                    self.yang_parent_name = "tiebreakers"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['tiebreaker_type']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('tiebreaker_type', (YLeaf(YType.enumeration, 'tiebreaker-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastRerouteTiebreakers', '')])),
                                        ('tiebreaker_index', (YLeaf(YType.uint32, 'tiebreaker-index'), ['int'])),
                                    ])
                                    self.tiebreaker_type = None
                                    self.tiebreaker_index = None
                                    self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix.Tiebreakers']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.FastReroute.PerPrefix']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.FastReroute']['meta_info']


                class Distance(_Entity_):
                    """
                    Define an administrative distance
                    
                    .. attribute:: ospfv3
                    
                    	OSPFv3 administrative distance
                    	**type**\:  :py:class:`Ospfv3_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3_>`
                    
                    .. attribute:: administrative
                    
                    	Define an administrative distance
                    	**type**\: int
                    
                    	**range:** 1..255
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Distance, self).__init__()

                        self.yang_name = "distance"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("ospfv3", ("ospfv3", Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3_))])
                        self._leafs = OrderedDict([
                            ('administrative', (YLeaf(YType.uint32, 'administrative'), ['int'])),
                        ])
                        self.administrative = None

                        self.ospfv3 = Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3_()
                        self.ospfv3.parent = self
                        self._children_name_map["ospfv3"] = "ospfv3"
                        self._segment_path = lambda: "distance"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Distance, ['administrative'], name, value)


                    class Ospfv3_(_Entity_):
                        """
                        OSPFv3 administrative distance
                        
                        .. attribute:: intra_area
                        
                        	Distance for intra\-area routes
                        	**type**\: int
                        
                        	**range:** 1..255
                        
                        .. attribute:: inter_area
                        
                        	Distance for inter\-area routes
                        	**type**\: int
                        
                        	**range:** 1..255
                        
                        .. attribute:: external
                        
                        	Distance for external type 5 and type 7 routes
                        	**type**\: int
                        
                        	**range:** 1..255
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3_, self).__init__()

                            self.yang_name = "ospfv3"
                            self.yang_parent_name = "distance"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('intra_area', (YLeaf(YType.uint32, 'intra-area'), ['int'])),
                                ('inter_area', (YLeaf(YType.uint32, 'inter-area'), ['int'])),
                                ('external', (YLeaf(YType.uint32, 'external'), ['int'])),
                            ])
                            self.intra_area = None
                            self.inter_area = None
                            self.external = None
                            self._segment_path = lambda: "ospfv3"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3_, ['intra_area', 'inter_area', 'external'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Distance.Ospfv3_']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Distance']['meta_info']


                class Maximum(_Entity_):
                    """
                    Set OSPFv3 limits
                    
                    .. attribute:: redistributed_prefixes
                    
                    	Limit number of redistributed prefixes
                    	**type**\:  :py:class:`RedistributedPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes>`
                    
                    .. attribute:: interfaces
                    
                    	Specify maximum number of interfaces
                    	**type**\: int
                    
                    	**range:** 1..4294967295
                    
                    .. attribute:: paths
                    
                    	Specify maximum number of paths per route
                    	**type**\: int
                    
                    	**range:** 1..64
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Maximum, self).__init__()

                        self.yang_name = "maximum"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("redistributed-prefixes", ("redistributed_prefixes", Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes))])
                        self._leafs = OrderedDict([
                            ('interfaces', (YLeaf(YType.uint32, 'interfaces'), ['int'])),
                            ('paths', (YLeaf(YType.uint32, 'paths'), ['int'])),
                        ])
                        self.interfaces = None
                        self.paths = None

                        self.redistributed_prefixes = Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes()
                        self.redistributed_prefixes.parent = self
                        self._children_name_map["redistributed_prefixes"] = "redistributed-prefixes"
                        self._segment_path = lambda: "maximum"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Maximum, ['interfaces', 'paths'], name, value)


                    class RedistributedPrefixes(_Entity_):
                        """
                        Limit number of redistributed prefixes
                        
                        .. attribute:: prefixes
                        
                        	Maximum number of prefixes redistributed to protocol
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: threshold
                        
                        	Threshold value (%) at which to generate a warning message
                        	**type**\: int
                        
                        	**range:** 1..100
                        
                        .. attribute:: warning_only
                        
                        	Only give warning message when limit is exceeded
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes, self).__init__()

                            self.yang_name = "redistributed-prefixes"
                            self.yang_parent_name = "maximum"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('prefixes', (YLeaf(YType.uint32, 'prefixes'), ['int'])),
                                ('threshold', (YLeaf(YType.uint32, 'threshold'), ['int'])),
                                ('warning_only', (YLeaf(YType.empty, 'warning-only'), ['Empty'])),
                            ])
                            self.prefixes = None
                            self.threshold = None
                            self.warning_only = None
                            self._segment_path = lambda: "redistributed-prefixes"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes, ['prefixes', 'threshold', 'warning_only'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Maximum.RedistributedPrefixes']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Maximum']['meta_info']


                class Redistributes(_Entity_):
                    """
                    Redistribute information from another routing
                    protocol
                    
                    .. attribute:: redistribute
                    
                    	Redistribute information from another routing protocol
                    	**type**\: list of  		 :py:class:`Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Redistributes, self).__init__()

                        self.yang_name = "redistributes"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("redistribute", ("redistribute", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute))])
                        self._leafs = OrderedDict()

                        self.redistribute = YList(self)
                        self._segment_path = lambda: "redistributes"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes, [], name, value)


                    class Redistribute(_Entity_):
                        """
                        Redistribute information from another routing
                        protocol
                        
                        .. attribute:: protocol_name  (key)
                        
                        	Protocol
                        	**type**\:  :py:class:`Ospfv3ProtocolType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ProtocolType2>`
                        
                        .. attribute:: connected_or_static_or_subscriber_or_mobile
                        
                        	connected or static or subscriber or mobile
                        	**type**\:  :py:class:`ConnectedOrStaticOrSubscriberOrMobile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: bgp
                        
                        	bgp
                        	**type**\: list of  		 :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Bgp>`
                        
                        .. attribute:: ospfv3_or_isis_or_application
                        
                        	ospfv3 or isis or application
                        	**type**\: list of  		 :py:class:`Ospfv3OrIsisOrApplication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication>`
                        
                        .. attribute:: eigrp
                        
                        	eigrp
                        	**type**\: list of  		 :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Eigrp>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute, self).__init__()

                            self.yang_name = "redistribute"
                            self.yang_parent_name = "redistributes"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['protocol_name']
                            self._child_classes = OrderedDict([("connected-or-static-or-subscriber-or-mobile", ("connected_or_static_or_subscriber_or_mobile", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile)), ("bgp", ("bgp", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Bgp)), ("ospfv3-or-isis-or-application", ("ospfv3_or_isis_or_application", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication)), ("eigrp", ("eigrp", Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Eigrp))])
                            self._leafs = OrderedDict([
                                ('protocol_name', (YLeaf(YType.enumeration, 'protocol-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ProtocolType2', '')])),
                            ])
                            self.protocol_name = None

                            self.connected_or_static_or_subscriber_or_mobile = None
                            self._children_name_map["connected_or_static_or_subscriber_or_mobile"] = "connected-or-static-or-subscriber-or-mobile"

                            self.bgp = YList(self)
                            self.ospfv3_or_isis_or_application = YList(self)
                            self.eigrp = YList(self)
                            self._segment_path = lambda: "redistribute" + "[protocol-name='" + str(self.protocol_name) + "']"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute, ['protocol_name'], name, value)


                        class ConnectedOrStaticOrSubscriberOrMobile(_Entity_):
                            """
                            connected or static or subscriber or mobile
                            
                            .. attribute:: internal_route_type
                            
                            	Redistribute OSPFv3 routes
                            	**type**\:  :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                            
                            .. attribute:: default_metric
                            
                            	OSPFv3 default metric
                            	**type**\: int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 exterior metric type for redistributed routes
                            	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: tag
                            
                            	Tag for routes redistributed into OSPFv3
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to redistribution
                            	**type**\: str
                            
                            .. attribute:: external_route_type
                            
                            	Redistribute OSPFv3 external routes
                            	**type**\:  :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                            
                            .. attribute:: nssa_external_route_type
                            
                            	Redistribute OSPFv3 NSSA external routes
                            	**type**\:  :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                            
                            .. attribute:: redistribute_route
                            
                            	Redistribution of OSPFv3 routes
                            	**type**\: bool
                            
                            .. attribute:: isis_route_type
                            
                            	ISIS route type
                            	**type**\:  :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                            
                            .. attribute:: eigrp_route_type
                            
                            	EIGRP route type
                            	**type**\:  :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                            
                            .. attribute:: preserve_med
                            
                            	Preserve (Multi\-Exit Discriminator) of BGP routes
                            	**type**\: bool
                            
                            .. attribute:: bgp_preserve_default_info
                            
                            	Preserve Metric and Metric Type ofBGP Default Route
                            	**type**\: bool
                            
                            .. attribute:: use_rib_metric
                            
                            	Use metric from RIB for redistributed routes
                            	**type**\: bool
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile, self).__init__()

                                self.yang_name = "connected-or-static-or-subscriber-or-mobile"
                                self.yang_parent_name = "redistribute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('internal_route_type', (YLeaf(YType.enumeration, 'internal-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3InternalRoute', '')])),
                                    ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                    ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                    ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                    ('external_route_type', (YLeaf(YType.enumeration, 'external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ExternalRoute', '')])),
                                    ('nssa_external_route_type', (YLeaf(YType.enumeration, 'nssa-external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3nssaExternalRoute', '')])),
                                    ('redistribute_route', (YLeaf(YType.boolean, 'redistribute-route'), ['bool'])),
                                    ('isis_route_type', (YLeaf(YType.enumeration, 'isis-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3isisRoute', '')])),
                                    ('eigrp_route_type', (YLeaf(YType.enumeration, 'eigrp-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EigrpRoute', '')])),
                                    ('preserve_med', (YLeaf(YType.boolean, 'preserve-med'), ['bool'])),
                                    ('bgp_preserve_default_info', (YLeaf(YType.boolean, 'bgp-preserve-default-info'), ['bool'])),
                                    ('use_rib_metric', (YLeaf(YType.boolean, 'use-rib-metric'), ['bool'])),
                                ])
                                self.internal_route_type = None
                                self.default_metric = None
                                self.metric_type = None
                                self.tag = None
                                self.route_policy_name = None
                                self.external_route_type = None
                                self.nssa_external_route_type = None
                                self.redistribute_route = None
                                self.isis_route_type = None
                                self.eigrp_route_type = None
                                self.preserve_med = None
                                self.bgp_preserve_default_info = None
                                self.use_rib_metric = None
                                self._segment_path = lambda: "connected-or-static-or-subscriber-or-mobile"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile, ['internal_route_type', 'default_metric', 'metric_type', 'tag', 'route_policy_name', 'external_route_type', 'nssa_external_route_type', 'redistribute_route', 'isis_route_type', 'eigrp_route_type', 'preserve_med', 'bgp_preserve_default_info', 'use_rib_metric'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile']['meta_info']


                        class Bgp(_Entity_):
                            """
                            bgp
                            
                            .. attribute:: as_xx  (key)
                            
                            	4\-byte AS number in asdot (X.Y) format \- first half (X)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: as_yy  (key)
                            
                            	4\-byte AS number in asdot (X.Y) format \- second half (Y), or 2\-byte AS number, or 4\-byte AS number in asplain format
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: internal_route_type
                            
                            	Redistribute OSPFv3 routes
                            	**type**\:  :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                            
                            .. attribute:: default_metric
                            
                            	OSPFv3 default metric
                            	**type**\: int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 exterior metric type for redistributed routes
                            	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: tag
                            
                            	Tag for routes redistributed into OSPFv3
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to redistribution
                            	**type**\: str
                            
                            .. attribute:: external_route_type
                            
                            	Redistribute OSPFv3 external routes
                            	**type**\:  :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                            
                            .. attribute:: nssa_external_route_type
                            
                            	Redistribute OSPFv3 NSSA external routes
                            	**type**\:  :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                            
                            .. attribute:: redistribute_route
                            
                            	Redistribution of OSPFv3 routes
                            	**type**\: bool
                            
                            .. attribute:: isis_route_type
                            
                            	ISIS route type
                            	**type**\:  :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                            
                            .. attribute:: eigrp_route_type
                            
                            	EIGRP route type
                            	**type**\:  :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                            
                            .. attribute:: preserve_med
                            
                            	Preserve (Multi\-Exit Discriminator) of BGP routes
                            	**type**\: bool
                            
                            .. attribute:: bgp_preserve_default_info
                            
                            	Preserve Metric and Metric Type ofBGP Default Route
                            	**type**\: bool
                            
                            .. attribute:: use_rib_metric
                            
                            	Use metric from RIB for redistributed routes
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Bgp, self).__init__()

                                self.yang_name = "bgp"
                                self.yang_parent_name = "redistribute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['as_xx','as_yy']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                    ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                    ('internal_route_type', (YLeaf(YType.enumeration, 'internal-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3InternalRoute', '')])),
                                    ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                    ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                    ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                    ('external_route_type', (YLeaf(YType.enumeration, 'external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ExternalRoute', '')])),
                                    ('nssa_external_route_type', (YLeaf(YType.enumeration, 'nssa-external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3nssaExternalRoute', '')])),
                                    ('redistribute_route', (YLeaf(YType.boolean, 'redistribute-route'), ['bool'])),
                                    ('isis_route_type', (YLeaf(YType.enumeration, 'isis-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3isisRoute', '')])),
                                    ('eigrp_route_type', (YLeaf(YType.enumeration, 'eigrp-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EigrpRoute', '')])),
                                    ('preserve_med', (YLeaf(YType.boolean, 'preserve-med'), ['bool'])),
                                    ('bgp_preserve_default_info', (YLeaf(YType.boolean, 'bgp-preserve-default-info'), ['bool'])),
                                    ('use_rib_metric', (YLeaf(YType.boolean, 'use-rib-metric'), ['bool'])),
                                ])
                                self.as_xx = None
                                self.as_yy = None
                                self.internal_route_type = None
                                self.default_metric = None
                                self.metric_type = None
                                self.tag = None
                                self.route_policy_name = None
                                self.external_route_type = None
                                self.nssa_external_route_type = None
                                self.redistribute_route = None
                                self.isis_route_type = None
                                self.eigrp_route_type = None
                                self.preserve_med = None
                                self.bgp_preserve_default_info = None
                                self.use_rib_metric = None
                                self._segment_path = lambda: "bgp" + "[as-xx='" + str(self.as_xx) + "']" + "[as-yy='" + str(self.as_yy) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Bgp, ['as_xx', 'as_yy', 'internal_route_type', 'default_metric', 'metric_type', 'tag', 'route_policy_name', 'external_route_type', 'nssa_external_route_type', 'redistribute_route', 'isis_route_type', 'eigrp_route_type', 'preserve_med', 'bgp_preserve_default_info', 'use_rib_metric'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Bgp']['meta_info']


                        class Ospfv3OrIsisOrApplication(_Entity_):
                            """
                            ospfv3 or isis or application
                            
                            .. attribute:: process_name  (key)
                            
                            	ISIS process name if protocol is ISIS, or OSPFv3 process name if protocol is OSPFv3
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: internal_route_type
                            
                            	Redistribute OSPFv3 routes
                            	**type**\:  :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                            
                            .. attribute:: default_metric
                            
                            	OSPFv3 default metric
                            	**type**\: int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 exterior metric type for redistributed routes
                            	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: tag
                            
                            	Tag for routes redistributed into OSPFv3
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to redistribution
                            	**type**\: str
                            
                            .. attribute:: external_route_type
                            
                            	Redistribute OSPFv3 external routes
                            	**type**\:  :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                            
                            .. attribute:: nssa_external_route_type
                            
                            	Redistribute OSPFv3 NSSA external routes
                            	**type**\:  :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                            
                            .. attribute:: redistribute_route
                            
                            	Redistribution of OSPFv3 routes
                            	**type**\: bool
                            
                            .. attribute:: isis_route_type
                            
                            	ISIS route type
                            	**type**\:  :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                            
                            .. attribute:: eigrp_route_type
                            
                            	EIGRP route type
                            	**type**\:  :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                            
                            .. attribute:: preserve_med
                            
                            	Preserve (Multi\-Exit Discriminator) of BGP routes
                            	**type**\: bool
                            
                            .. attribute:: bgp_preserve_default_info
                            
                            	Preserve Metric and Metric Type ofBGP Default Route
                            	**type**\: bool
                            
                            .. attribute:: use_rib_metric
                            
                            	Use metric from RIB for redistributed routes
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication, self).__init__()

                                self.yang_name = "ospfv3-or-isis-or-application"
                                self.yang_parent_name = "redistribute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['process_name']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('process_name', (YLeaf(YType.str, 'process-name'), ['str'])),
                                    ('internal_route_type', (YLeaf(YType.enumeration, 'internal-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3InternalRoute', '')])),
                                    ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                    ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                    ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                    ('external_route_type', (YLeaf(YType.enumeration, 'external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ExternalRoute', '')])),
                                    ('nssa_external_route_type', (YLeaf(YType.enumeration, 'nssa-external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3nssaExternalRoute', '')])),
                                    ('redistribute_route', (YLeaf(YType.boolean, 'redistribute-route'), ['bool'])),
                                    ('isis_route_type', (YLeaf(YType.enumeration, 'isis-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3isisRoute', '')])),
                                    ('eigrp_route_type', (YLeaf(YType.enumeration, 'eigrp-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EigrpRoute', '')])),
                                    ('preserve_med', (YLeaf(YType.boolean, 'preserve-med'), ['bool'])),
                                    ('bgp_preserve_default_info', (YLeaf(YType.boolean, 'bgp-preserve-default-info'), ['bool'])),
                                    ('use_rib_metric', (YLeaf(YType.boolean, 'use-rib-metric'), ['bool'])),
                                ])
                                self.process_name = None
                                self.internal_route_type = None
                                self.default_metric = None
                                self.metric_type = None
                                self.tag = None
                                self.route_policy_name = None
                                self.external_route_type = None
                                self.nssa_external_route_type = None
                                self.redistribute_route = None
                                self.isis_route_type = None
                                self.eigrp_route_type = None
                                self.preserve_med = None
                                self.bgp_preserve_default_info = None
                                self.use_rib_metric = None
                                self._segment_path = lambda: "ospfv3-or-isis-or-application" + "[process-name='" + str(self.process_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication, ['process_name', 'internal_route_type', 'default_metric', 'metric_type', 'tag', 'route_policy_name', 'external_route_type', 'nssa_external_route_type', 'redistribute_route', 'isis_route_type', 'eigrp_route_type', 'preserve_med', 'bgp_preserve_default_info', 'use_rib_metric'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication']['meta_info']


                        class Eigrp(_Entity_):
                            """
                            eigrp
                            
                            .. attribute:: as_xx  (key)
                            
                            	4\-byte AS number in asdot (X.Y) format \- first half (X)
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: internal_route_type
                            
                            	Redistribute OSPFv3 routes
                            	**type**\:  :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                            
                            .. attribute:: default_metric
                            
                            	OSPFv3 default metric
                            	**type**\: int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 exterior metric type for redistributed routes
                            	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                            
                            .. attribute:: tag
                            
                            	Tag for routes redistributed into OSPFv3
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to redistribution
                            	**type**\: str
                            
                            .. attribute:: external_route_type
                            
                            	Redistribute OSPFv3 external routes
                            	**type**\:  :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                            
                            .. attribute:: nssa_external_route_type
                            
                            	Redistribute OSPFv3 NSSA external routes
                            	**type**\:  :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                            
                            .. attribute:: redistribute_route
                            
                            	Redistribution of OSPFv3 routes
                            	**type**\: bool
                            
                            .. attribute:: isis_route_type
                            
                            	ISIS route type
                            	**type**\:  :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                            
                            .. attribute:: eigrp_route_type
                            
                            	EIGRP route type
                            	**type**\:  :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                            
                            .. attribute:: preserve_med
                            
                            	Preserve (Multi\-Exit Discriminator) of BGP routes
                            	**type**\: bool
                            
                            .. attribute:: bgp_preserve_default_info
                            
                            	Preserve Metric and Metric Type ofBGP Default Route
                            	**type**\: bool
                            
                            .. attribute:: use_rib_metric
                            
                            	Use metric from RIB for redistributed routes
                            	**type**\: bool
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Eigrp, self).__init__()

                                self.yang_name = "eigrp"
                                self.yang_parent_name = "redistribute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['as_xx']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                    ('internal_route_type', (YLeaf(YType.enumeration, 'internal-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3InternalRoute', '')])),
                                    ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                    ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                    ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                    ('external_route_type', (YLeaf(YType.enumeration, 'external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ExternalRoute', '')])),
                                    ('nssa_external_route_type', (YLeaf(YType.enumeration, 'nssa-external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3nssaExternalRoute', '')])),
                                    ('redistribute_route', (YLeaf(YType.boolean, 'redistribute-route'), ['bool'])),
                                    ('isis_route_type', (YLeaf(YType.enumeration, 'isis-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3isisRoute', '')])),
                                    ('eigrp_route_type', (YLeaf(YType.enumeration, 'eigrp-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EigrpRoute', '')])),
                                    ('preserve_med', (YLeaf(YType.boolean, 'preserve-med'), ['bool'])),
                                    ('bgp_preserve_default_info', (YLeaf(YType.boolean, 'bgp-preserve-default-info'), ['bool'])),
                                    ('use_rib_metric', (YLeaf(YType.boolean, 'use-rib-metric'), ['bool'])),
                                ])
                                self.as_xx = None
                                self.internal_route_type = None
                                self.default_metric = None
                                self.metric_type = None
                                self.tag = None
                                self.route_policy_name = None
                                self.external_route_type = None
                                self.nssa_external_route_type = None
                                self.redistribute_route = None
                                self.isis_route_type = None
                                self.eigrp_route_type = None
                                self.preserve_med = None
                                self.bgp_preserve_default_info = None
                                self.use_rib_metric = None
                                self._segment_path = lambda: "eigrp" + "[as-xx='" + str(self.as_xx) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Eigrp, ['as_xx', 'internal_route_type', 'default_metric', 'metric_type', 'tag', 'route_policy_name', 'external_route_type', 'nssa_external_route_type', 'redistribute_route', 'isis_route_type', 'eigrp_route_type', 'preserve_med', 'bgp_preserve_default_info', 'use_rib_metric'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute.Eigrp']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Redistributes.Redistribute']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Redistributes']['meta_info']


                class Ignore(_Entity_):
                    """
                    Do not complain about a specified event
                    
                    .. attribute:: lsa
                    
                    	Do not complain upon receiving LSA of the specified type
                    	**type**\:  :py:class:`Lsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Ignore, self).__init__()

                        self.yang_name = "ignore"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("lsa", ("lsa", Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa))])
                        self._leafs = OrderedDict()

                        self.lsa = Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa()
                        self.lsa.parent = self
                        self._children_name_map["lsa"] = "lsa"
                        self._segment_path = lambda: "ignore"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Ignore, [], name, value)


                    class Lsa(_Entity_):
                        """
                        Do not complain upon receiving LSA of the
                        specified type
                        
                        .. attribute:: mospf
                        
                        	Enable ignore of MOSPF type 6 LSA
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa, self).__init__()

                            self.yang_name = "lsa"
                            self.yang_parent_name = "ignore"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('mospf', (YLeaf(YType.empty, 'mospf'), ['Empty'])),
                            ])
                            self.mospf = None
                            self._segment_path = lambda: "lsa"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa, ['mospf'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Ignore.Lsa']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Ignore']['meta_info']


                class DistributeListOut(_Entity_):
                    """
                    Filter prefixes from RIB 
                    
                    .. attribute:: distribute_outs
                    
                    	Filter generated type\-5 LSAs
                    	**type**\:  :py:class:`DistributeOuts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut, self).__init__()

                        self.yang_name = "distribute-list-out"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("distribute-outs", ("distribute_outs", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts))])
                        self._leafs = OrderedDict()

                        self.distribute_outs = Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts()
                        self.distribute_outs.parent = self
                        self._children_name_map["distribute_outs"] = "distribute-outs"
                        self._segment_path = lambda: "distribute-list-out"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut, [], name, value)


                    class DistributeOuts(_Entity_):
                        """
                        Filter generated type\-5 LSAs
                        
                        .. attribute:: distribute_out
                        
                        	Filter generated type\-5 LSAs
                        	**type**\: list of  		 :py:class:`DistributeOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts, self).__init__()

                            self.yang_name = "distribute-outs"
                            self.yang_parent_name = "distribute-list-out"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("distribute-out", ("distribute_out", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut))])
                            self._leafs = OrderedDict()

                            self.distribute_out = YList(self)
                            self._segment_path = lambda: "distribute-outs"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts, [], name, value)


                        class DistributeOut(_Entity_):
                            """
                            Filter generated type\-5 LSAs
                            
                            .. attribute:: protocol_name  (key)
                            
                            	none
                            	**type**\:  :py:class:`Ospfv3Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Protocol>`
                            
                            .. attribute:: all_or_connected_or_static_prefix_list
                            
                            	Prefix\-list name
                            	**type**\: str
                            
                            .. attribute:: bgp
                            
                            	bgp
                            	**type**\: list of  		 :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp>`
                            
                            .. attribute:: ospfv3_or_isis
                            
                            	ospfv3 or isis
                            	**type**\: list of  		 :py:class:`Ospfv3OrIsis <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis>`
                            
                            .. attribute:: eigrp
                            
                            	eigrp
                            	**type**\: list of  		 :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut, self).__init__()

                                self.yang_name = "distribute-out"
                                self.yang_parent_name = "distribute-outs"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['protocol_name']
                                self._child_classes = OrderedDict([("bgp", ("bgp", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp)), ("ospfv3-or-isis", ("ospfv3_or_isis", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis)), ("eigrp", ("eigrp", Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp))])
                                self._leafs = OrderedDict([
                                    ('protocol_name', (YLeaf(YType.enumeration, 'protocol-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Protocol', '')])),
                                    ('all_or_connected_or_static_prefix_list', (YLeaf(YType.str, 'all-or-connected-or-static-prefix-list'), ['str'])),
                                ])
                                self.protocol_name = None
                                self.all_or_connected_or_static_prefix_list = None

                                self.bgp = YList(self)
                                self.ospfv3_or_isis = YList(self)
                                self.eigrp = YList(self)
                                self._segment_path = lambda: "distribute-out" + "[protocol-name='" + str(self.protocol_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut, ['protocol_name', 'all_or_connected_or_static_prefix_list'], name, value)


                            class Bgp(_Entity_):
                                """
                                bgp
                                
                                .. attribute:: as_xx  (key)
                                
                                	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: as_yy  (key)
                                
                                	4\-byte AS number in asdot (X.Y) format \- second half (Y), or 2\-byte AS number, or 4\-byte AS number in asplain format
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: prefix_list
                                
                                	Prefix\-list name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp, self).__init__()

                                    self.yang_name = "bgp"
                                    self.yang_parent_name = "distribute-out"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['as_xx','as_yy']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                        ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                        ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                    ])
                                    self.as_xx = None
                                    self.as_yy = None
                                    self.prefix_list = None
                                    self._segment_path = lambda: "bgp" + "[as-xx='" + str(self.as_xx) + "']" + "[as-yy='" + str(self.as_yy) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp, ['as_xx', 'as_yy', 'prefix_list'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp']['meta_info']


                            class Ospfv3OrIsis(_Entity_):
                                """
                                ospfv3 or isis
                                
                                .. attribute:: process_name  (key)
                                
                                	If ISIS or OSPFv3, specify the instance name
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: prefix_list
                                
                                	Prefix\-list name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis, self).__init__()

                                    self.yang_name = "ospfv3-or-isis"
                                    self.yang_parent_name = "distribute-out"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['process_name']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('process_name', (YLeaf(YType.str, 'process-name'), ['str'])),
                                        ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                    ])
                                    self.process_name = None
                                    self.prefix_list = None
                                    self._segment_path = lambda: "ospfv3-or-isis" + "[process-name='" + str(self.process_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis, ['process_name', 'prefix_list'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis']['meta_info']


                            class Eigrp(_Entity_):
                                """
                                eigrp
                                
                                .. attribute:: as_xx  (key)
                                
                                	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                	**type**\: int
                                
                                	**range:** 1..65535
                                
                                .. attribute:: prefix_list
                                
                                	Prefix\-list name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp, self).__init__()

                                    self.yang_name = "eigrp"
                                    self.yang_parent_name = "distribute-out"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['as_xx']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                        ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                    ])
                                    self.as_xx = None
                                    self.prefix_list = None
                                    self._segment_path = lambda: "eigrp" + "[as-xx='" + str(self.as_xx) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp, ['as_xx', 'prefix_list'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts.DistributeOut']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DistributeListOut.DistributeOuts']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DistributeListOut']['meta_info']


                class DistributeList(_Entity_):
                    """
                    Filter prefixes to/from RIB
                    
                    .. attribute:: in_
                    
                    	Filter prefixes installed to RIB
                    	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DistributeList.In>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.DistributeList, self).__init__()

                        self.yang_name = "distribute-list"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.DefaultVrf.DistributeList.In))])
                        self._leafs = OrderedDict()

                        self.in_ = Ospfv3.Processes.Process.DefaultVrf.DistributeList.In()
                        self.in_.parent = self
                        self._children_name_map["in_"] = "in"
                        self._segment_path = lambda: "distribute-list"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeList, [], name, value)


                    class In(_Entity_):
                        """
                        Filter prefixes installed to RIB
                        
                        .. attribute:: prefix_list
                        
                        	Filter prefixes based on an IPv6 prefix\-list
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.DistributeList.In, self).__init__()

                            self.yang_name = "in"
                            self.yang_parent_name = "distribute-list"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                            ])
                            self.prefix_list = None
                            self._segment_path = lambda: "in"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DistributeList.In, ['prefix_list'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DistributeList.In']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DistributeList']['meta_info']


                class StubRouter(_Entity_):
                    """
                    Stub router configuration
                    
                    .. attribute:: rbit
                    
                    	Stub router R\-bit configuration
                    	**type**\:  :py:class:`Rbit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: v6bit
                    
                    	Stub router V6\-bit configuration
                    	**type**\:  :py:class:`V6bit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: max_metric
                    
                    	Stub router max\-metric configuration
                    	**type**\:  :py:class:`MaxMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.StubRouter, self).__init__()

                        self.yang_name = "stub-router"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("rbit", ("rbit", Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit)), ("v6bit", ("v6bit", Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit)), ("max-metric", ("max_metric", Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric))])
                        self._leafs = OrderedDict()

                        self.rbit = None
                        self._children_name_map["rbit"] = "rbit"

                        self.v6bit = None
                        self._children_name_map["v6bit"] = "v6bit"

                        self.max_metric = None
                        self._children_name_map["max_metric"] = "max-metric"
                        self._segment_path = lambda: "stub-router"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter, [], name, value)


                    class Rbit(_Entity_):
                        """
                        Stub router R\-bit configuration
                        
                        .. attribute:: on_switchover
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: always
                        
                        	Unconditionally enter stub router operational state
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: on_startup
                        
                        	Enter stub router operational state on startup
                        	**type**\:  :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup>`
                        
                        .. attribute:: include_stub
                        
                        	Advertise stub links with maximum metric in stub router mode
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: on_proc_migration
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: on_proc_restart
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit, self).__init__()

                            self.yang_name = "rbit"
                            self.yang_parent_name = "stub-router"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("on-startup", ("on_startup", Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup))])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('on_switchover', (YLeaf(YType.uint32, 'on-switchover'), ['int'])),
                                ('always', (YLeaf(YType.empty, 'always'), ['Empty'])),
                                ('include_stub', (YLeaf(YType.empty, 'include-stub'), ['Empty'])),
                                ('on_proc_migration', (YLeaf(YType.uint32, 'on-proc-migration'), ['int'])),
                                ('on_proc_restart', (YLeaf(YType.uint32, 'on-proc-restart'), ['int'])),
                            ])
                            self.on_switchover = None
                            self.always = None
                            self.include_stub = None
                            self.on_proc_migration = None
                            self.on_proc_restart = None

                            self.on_startup = Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup()
                            self.on_startup.parent = self
                            self._children_name_map["on_startup"] = "on-startup"
                            self._segment_path = lambda: "rbit"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit, ['on_switchover', 'always', 'include_stub', 'on_proc_migration', 'on_proc_restart'], name, value)


                        class OnStartup(_Entity_):
                            """
                            Enter stub router operational state on startup
                            
                            .. attribute:: wait_for_bgp
                            
                            	Wait until BGP converges (only applicable to default VRF)
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: wait_time
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup, self).__init__()

                                self.yang_name = "on-startup"
                                self.yang_parent_name = "rbit"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('wait_for_bgp', (YLeaf(YType.boolean, 'wait-for-bgp'), ['bool'])),
                                    ('wait_time', (YLeaf(YType.uint32, 'wait-time'), ['int'])),
                                ])
                                self.wait_for_bgp = None
                                self.wait_time = None
                                self._segment_path = lambda: "on-startup"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit.OnStartup']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.StubRouter.Rbit']['meta_info']


                    class V6bit(_Entity_):
                        """
                        Stub router V6\-bit configuration
                        
                        .. attribute:: on_switchover
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: always
                        
                        	Unconditionally enter stub router operational state
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: on_startup
                        
                        	Enter stub router operational state on startup
                        	**type**\:  :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit.OnStartup>`
                        
                        .. attribute:: on_proc_migration
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: on_proc_restart
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit, self).__init__()

                            self.yang_name = "v6bit"
                            self.yang_parent_name = "stub-router"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("on-startup", ("on_startup", Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit.OnStartup))])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('on_switchover', (YLeaf(YType.uint32, 'on-switchover'), ['int'])),
                                ('always', (YLeaf(YType.empty, 'always'), ['Empty'])),
                                ('on_proc_migration', (YLeaf(YType.uint32, 'on-proc-migration'), ['int'])),
                                ('on_proc_restart', (YLeaf(YType.uint32, 'on-proc-restart'), ['int'])),
                            ])
                            self.on_switchover = None
                            self.always = None
                            self.on_proc_migration = None
                            self.on_proc_restart = None

                            self.on_startup = Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit.OnStartup()
                            self.on_startup.parent = self
                            self._children_name_map["on_startup"] = "on-startup"
                            self._segment_path = lambda: "v6bit"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit, ['on_switchover', 'always', 'on_proc_migration', 'on_proc_restart'], name, value)


                        class OnStartup(_Entity_):
                            """
                            Enter stub router operational state on startup
                            
                            .. attribute:: wait_for_bgp
                            
                            	Wait until BGP converges (only applicable to default VRF)
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: wait_time
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit.OnStartup, self).__init__()

                                self.yang_name = "on-startup"
                                self.yang_parent_name = "v6bit"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('wait_for_bgp', (YLeaf(YType.boolean, 'wait-for-bgp'), ['bool'])),
                                    ('wait_time', (YLeaf(YType.uint32, 'wait-time'), ['int'])),
                                ])
                                self.wait_for_bgp = None
                                self.wait_time = None
                                self._segment_path = lambda: "on-startup"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit.OnStartup']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.StubRouter.V6bit']['meta_info']


                    class MaxMetric(_Entity_):
                        """
                        Stub router max\-metric configuration
                        
                        .. attribute:: external_lsa
                        
                        	Advertise external LSAs with modified metric in stub router mode
                        	**type**\: int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 16711680
                        
                        .. attribute:: summary_lsa
                        
                        	Advertise summary LSAs with modified metric in stub router mode
                        	**type**\: int
                        
                        	**range:** 1..16777214
                        
                        	**default value**\: 16711680
                        
                        .. attribute:: on_switchover
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: always
                        
                        	Unconditionally enter stub router operational state
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: on_startup
                        
                        	Enter stub router operational state on startup
                        	**type**\:  :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup>`
                        
                        .. attribute:: include_stub
                        
                        	Advertise stub links with maximum metric in stub router mode
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: on_proc_migration
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        .. attribute:: on_proc_restart
                        
                        	Time (in seconds) to stay in stub router operational state
                        	**type**\: int
                        
                        	**range:** 5..86400
                        
                        	**units**\: second
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric, self).__init__()

                            self.yang_name = "max-metric"
                            self.yang_parent_name = "stub-router"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("on-startup", ("on_startup", Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup))])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('external_lsa', (YLeaf(YType.uint32, 'external-lsa'), ['int'])),
                                ('summary_lsa', (YLeaf(YType.uint32, 'summary-lsa'), ['int'])),
                                ('on_switchover', (YLeaf(YType.uint32, 'on-switchover'), ['int'])),
                                ('always', (YLeaf(YType.empty, 'always'), ['Empty'])),
                                ('include_stub', (YLeaf(YType.empty, 'include-stub'), ['Empty'])),
                                ('on_proc_migration', (YLeaf(YType.uint32, 'on-proc-migration'), ['int'])),
                                ('on_proc_restart', (YLeaf(YType.uint32, 'on-proc-restart'), ['int'])),
                            ])
                            self.external_lsa = None
                            self.summary_lsa = None
                            self.on_switchover = None
                            self.always = None
                            self.include_stub = None
                            self.on_proc_migration = None
                            self.on_proc_restart = None

                            self.on_startup = Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup()
                            self.on_startup.parent = self
                            self._children_name_map["on_startup"] = "on-startup"
                            self._segment_path = lambda: "max-metric"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric, ['external_lsa', 'summary_lsa', 'on_switchover', 'always', 'include_stub', 'on_proc_migration', 'on_proc_restart'], name, value)


                        class OnStartup(_Entity_):
                            """
                            Enter stub router operational state on startup
                            
                            .. attribute:: wait_for_bgp
                            
                            	Wait until BGP converges (only applicable to default VRF)
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: wait_time
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup, self).__init__()

                                self.yang_name = "on-startup"
                                self.yang_parent_name = "max-metric"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('wait_for_bgp', (YLeaf(YType.boolean, 'wait-for-bgp'), ['bool'])),
                                    ('wait_time', (YLeaf(YType.uint32, 'wait-time'), ['int'])),
                                ])
                                self.wait_for_bgp = None
                                self.wait_time = None
                                self._segment_path = lambda: "on-startup"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric.OnStartup']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.StubRouter.MaxMetric']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.StubRouter']['meta_info']


                class Bfd(_Entity_):
                    """
                    Configure BFD parameters
                    
                    .. attribute:: interval
                    
                    	Hello interval in milli\-seconds
                    	**type**\: int
                    
                    	**range:** 3..30000
                    
                    	**units**\: millisecond
                    
                    .. attribute:: detection_multiplier
                    
                    	Detect multiplier
                    	**type**\: int
                    
                    	**range:** 2..50
                    
                    .. attribute:: fast_detect_mode
                    
                    	Enable or disable BFD fast detection
                    	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Bfd, self).__init__()

                        self.yang_name = "bfd"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                            ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                            ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                        ])
                        self.interval = None
                        self.detection_multiplier = None
                        self.fast_detect_mode = None
                        self._segment_path = lambda: "bfd"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Bfd']['meta_info']


                class DatabaseFilter(_Entity_):
                    """
                    Database filter
                    
                    .. attribute:: all
                    
                    	All
                    	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter, self).__init__()

                        self.yang_name = "database-filter"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All))])
                        self._leafs = OrderedDict()

                        self.all = Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All()
                        self.all.parent = self
                        self._children_name_map["all"] = "all"
                        self._segment_path = lambda: "database-filter"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter, [], name, value)


                    class All(_Entity_):
                        """
                        All
                        
                        .. attribute:: out
                        
                        	Enable out
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All, self).__init__()

                            self.yang_name = "all"
                            self.yang_parent_name = "database-filter"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('out', (YLeaf(YType.empty, 'out'), ['Empty'])),
                            ])
                            self.out = None
                            self._segment_path = lambda: "all"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All, ['out'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter.All']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DatabaseFilter']['meta_info']


                class Capability(_Entity_):
                    """
                    OSPFv3 Capability
                    
                    .. attribute:: type7_prefer
                    
                    	NSSA capability to prefer Type 7 over Type 5
                    	**type**\: bool
                    
                    .. attribute:: vrf_lite
                    
                    	Enable VRF Lite
                    	**type**\: bool
                    
                    .. attribute:: type7_translate_zero_forwarding_addr
                    
                    	Enable capability to translate LSAs with fwd addr
                    	**type**\: bool
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Capability, self).__init__()

                        self.yang_name = "capability"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('type7_prefer', (YLeaf(YType.boolean, 'type7-prefer'), ['bool'])),
                            ('vrf_lite', (YLeaf(YType.boolean, 'vrf-lite'), ['bool'])),
                            ('type7_translate_zero_forwarding_addr', (YLeaf(YType.boolean, 'type7-translate-zero-forwarding-addr'), ['bool'])),
                        ])
                        self.type7_prefer = None
                        self.vrf_lite = None
                        self.type7_translate_zero_forwarding_addr = None
                        self._segment_path = lambda: "capability"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Capability, ['type7_prefer', 'vrf_lite', 'type7_translate_zero_forwarding_addr'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Capability']['meta_info']


                class Authentication(_Entity_):
                    """
                    Authenticate OSPFv3 packets
                    
                    .. attribute:: enable
                    
                    	Authenticate packets
                    	**type**\: bool
                    
                    .. attribute:: spi
                    
                    	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                    	**type**\: int
                    
                    	**range:** 256..4294967295
                    
                    .. attribute:: algorithm
                    
                    	Use the MD5 or SHA1 algorithm
                    	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                    
                    .. attribute:: password
                    
                    	Specify MD5 or SHA1 password
                    	**type**\: str
                    
                    	**pattern:** (!.+)\|([^!].+)
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Authentication, self).__init__()

                        self.yang_name = "authentication"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                            ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                            ('password', (YLeaf(YType.str, 'password'), ['str'])),
                        ])
                        self.enable = None
                        self.spi = None
                        self.algorithm = None
                        self.password = None
                        self._segment_path = lambda: "authentication"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Authentication']['meta_info']


                class GracefulRestart(_Entity_):
                    """
                    Graceful restart configuration
                    
                    .. attribute:: interval
                    
                    	Minimum interval between graceful restarts (seconds)
                    	**type**\: int
                    
                    	**range:** 90..3600
                    
                    	**units**\: second
                    
                    .. attribute:: strict_lsa_checking
                    
                    	Terminate graceful restart helper mode if LSA changed
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: helper
                    
                    	Disable router's helper support
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: enable
                    
                    	Enable graceful restart
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: lifetime
                    
                    	Maximum route lifetime following restart (seconds)
                    	**type**\: int
                    
                    	**range:** 90..1800
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.GracefulRestart, self).__init__()

                        self.yang_name = "graceful-restart"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                            ('strict_lsa_checking', (YLeaf(YType.empty, 'strict-lsa-checking'), ['Empty'])),
                            ('helper', (YLeaf(YType.empty, 'helper'), ['Empty'])),
                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                            ('lifetime', (YLeaf(YType.uint32, 'lifetime'), ['int'])),
                        ])
                        self.interval = None
                        self.strict_lsa_checking = None
                        self.helper = None
                        self.enable = None
                        self.lifetime = None
                        self._segment_path = lambda: "graceful-restart"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.GracefulRestart, ['interval', 'strict_lsa_checking', 'helper', 'enable', 'lifetime'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.GracefulRestart']['meta_info']


                class DefaultInformation(_Entity_):
                    """
                    Control distribution of default information
                    
                    .. attribute:: originate
                    
                    	Distribute a default route
                    	**type**\:  :py:class:`Originate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.DefaultInformation.Originate>`
                    
                    	**presence node**\: True
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.DefaultInformation, self).__init__()

                        self.yang_name = "default-information"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("originate", ("originate", Ospfv3.Processes.Process.DefaultVrf.DefaultInformation.Originate))])
                        self._leafs = OrderedDict()

                        self.originate = None
                        self._children_name_map["originate"] = "originate"
                        self._segment_path = lambda: "default-information"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DefaultInformation, [], name, value)


                    class Originate(_Entity_):
                        """
                        Distribute a default route
                        
                        .. attribute:: always
                        
                        	Always advertise default route
                        	**type**\: bool
                        
                        	**mandatory**\: True
                        
                        .. attribute:: metric
                        
                        	OSPFv3 default metric
                        	**type**\: int
                        
                        	**range:** 0..16777214
                        
                        .. attribute:: metric_type
                        
                        	OSPFv3 metric type for default routes
                        	**type**\: int
                        
                        	**range:** 1..2
                        
                        .. attribute:: tag
                        
                        	Tag for default route
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: route_policy_name
                        
                        	Route policy to default\-information origination
                        	**type**\: str
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.DefaultInformation.Originate, self).__init__()

                            self.yang_name = "originate"
                            self.yang_parent_name = "default-information"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('always', (YLeaf(YType.boolean, 'always'), ['bool'])),
                                ('metric', (YLeaf(YType.uint32, 'metric'), ['int'])),
                                ('metric_type', (YLeaf(YType.uint32, 'metric-type'), ['int'])),
                                ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                            ])
                            self.always = None
                            self.metric = None
                            self.metric_type = None
                            self.tag = None
                            self.route_policy_name = None
                            self._segment_path = lambda: "originate"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.DefaultInformation.Originate, ['always', 'metric', 'metric_type', 'tag', 'route_policy_name'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DefaultInformation.Originate']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.DefaultInformation']['meta_info']


                class ProcessScope(_Entity_):
                    """
                    Process scope configuration
                    
                    .. attribute:: fast_reroute
                    
                    	Fast\-reroute configuration
                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute>`
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope, self).__init__()

                        self.yang_name = "process-scope"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute))])
                        self._leafs = OrderedDict()

                        self.fast_reroute = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute()
                        self.fast_reroute.parent = self
                        self._children_name_map["fast_reroute"] = "fast-reroute"
                        self._segment_path = lambda: "process-scope"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope, [], name, value)


                    class FastReroute(_Entity_):
                        """
                        Fast\-reroute configuration
                        
                        .. attribute:: per_link
                        
                        	Fast\-reroute per\-link configuration
                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink>`
                        
                        .. attribute:: per_prefix
                        
                        	Fast\-reroute per\-link configuration
                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix>`
                        
                        .. attribute:: fast_reroute_enable
                        
                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                        	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute, self).__init__()

                            self.yang_name = "fast-reroute"
                            self.yang_parent_name = "process-scope"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix))])
                            self._leafs = OrderedDict([
                                ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                            ])
                            self.fast_reroute_enable = None

                            self.per_link = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink()
                            self.per_link.parent = self
                            self._children_name_map["per_link"] = "per-link"

                            self.per_prefix = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix()
                            self.per_prefix.parent = self
                            self._children_name_map["per_prefix"] = "per-prefix"
                            self._segment_path = lambda: "fast-reroute"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute, ['fast_reroute_enable'], name, value)


                        class PerLink(_Entity_):
                            """
                            Fast\-reroute per\-link configuration
                            
                            .. attribute:: fast_reroute_use_candidate_only
                            
                            	Use only interfaces on the candidate list as a backup path
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: candidate_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces>`
                            
                            .. attribute:: exclude_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink, self).__init__()

                                self.yang_name = "per-link"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces))])
                                self._leafs = OrderedDict([
                                    ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                ])
                                self.fast_reroute_use_candidate_only = None

                                self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces()
                                self.candidate_interfaces.parent = self
                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces()
                                self.exclude_interfaces.parent = self
                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                self._segment_path = lambda: "per-link"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                            class CandidateInterfaces(_Entity_):
                                """
                                Fast\-reroute per\-link/per\-prefix candidate
                                interface configuration
                                
                                .. attribute:: candidate_interface
                                
                                	Candidate backup interface
                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                    self.yang_name = "candidate-interfaces"
                                    self.yang_parent_name = "per-link"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                    self._leafs = OrderedDict()

                                    self.candidate_interface = YList(self)
                                    self._segment_path = lambda: "candidate-interfaces"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                class CandidateInterface(_Entity_):
                                    """
                                    Candidate backup interface
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                        self.yang_name = "candidate-interface"
                                        self.yang_parent_name = "candidate-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                            class ExcludeInterfaces(_Entity_):
                                """
                                Fast\-reroute per\-link/per\-prefix exclude
                                interface configuration
                                
                                .. attribute:: exclude_interface
                                
                                	Exclude an interface from becoming a backup
                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                    self.yang_name = "exclude-interfaces"
                                    self.yang_parent_name = "per-link"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                    self._leafs = OrderedDict()

                                    self.exclude_interface = YList(self)
                                    self._segment_path = lambda: "exclude-interfaces"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                class ExcludeInterface(_Entity_):
                                    """
                                    Exclude an interface from becoming a backup
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                        self.yang_name = "exclude-interface"
                                        self.yang_parent_name = "exclude-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerLink']['meta_info']


                        class PerPrefix(_Entity_):
                            """
                            Fast\-reroute per\-link configuration
                            
                            .. attribute:: fast_reroute_use_candidate_only
                            
                            	Use only interfaces on the candidate list as a backup path
                            	**type**\: bool
                            
                            	**default value**\: false
                            
                            .. attribute:: candidate_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces>`
                            
                            .. attribute:: exclude_interfaces
                            
                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix, self).__init__()

                                self.yang_name = "per-prefix"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                self._leafs = OrderedDict([
                                    ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                ])
                                self.fast_reroute_use_candidate_only = None

                                self.candidate_interfaces = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces()
                                self.candidate_interfaces.parent = self
                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                self.exclude_interfaces = Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                self.exclude_interfaces.parent = self
                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                self._segment_path = lambda: "per-prefix"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                            class CandidateInterfaces(_Entity_):
                                """
                                Fast\-reroute per\-link/per\-prefix candidate
                                interface configuration
                                
                                .. attribute:: candidate_interface
                                
                                	Candidate backup interface
                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                    self.yang_name = "candidate-interfaces"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                    self._leafs = OrderedDict()

                                    self.candidate_interface = YList(self)
                                    self._segment_path = lambda: "candidate-interfaces"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                class CandidateInterface(_Entity_):
                                    """
                                    Candidate backup interface
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                        self.yang_name = "candidate-interface"
                                        self.yang_parent_name = "candidate-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                            class ExcludeInterfaces(_Entity_):
                                """
                                Fast\-reroute per\-link/per\-prefix exclude
                                interface configuration
                                
                                .. attribute:: exclude_interface
                                
                                	Exclude an interface from becoming a backup
                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                    self.yang_name = "exclude-interfaces"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                    self._leafs = OrderedDict()

                                    self.exclude_interface = YList(self)
                                    self._segment_path = lambda: "exclude-interfaces"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                class ExcludeInterface(_Entity_):
                                    """
                                    Exclude an interface from becoming a backup
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                        self.yang_name = "exclude-interface"
                                        self.yang_parent_name = "exclude-interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                        ])
                                        self.interface_name = None
                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute.PerPrefix']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope.FastReroute']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.ProcessScope']['meta_info']


                class Encryption(_Entity_):
                    """
                    Encrypt and authenticate OSPFv3 packets
                    
                    .. attribute:: enable
                    
                    	Authenticate packets
                    	**type**\: bool
                    
                    .. attribute:: spi
                    
                    	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                    	**type**\: int
                    
                    	**range:** 256..4294967295
                    
                    .. attribute:: encryption_algorithm
                    
                    	Specify the encryption algorithm
                    	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                    
                    .. attribute:: encryption_password
                    
                    	Encryption password
                    	**type**\: str
                    
                    	**pattern:** (!.+)\|([^!].+)
                    
                    .. attribute:: authentication_algorithm
                    
                    	Use the NULL, MD5 or SHA1 algorithm
                    	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                    
                    .. attribute:: authentication_password
                    
                    	Specify MD5 or SHA1 password
                    	**type**\: str
                    
                    	**pattern:** (!.+)\|([^!].+)
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.Encryption, self).__init__()

                        self.yang_name = "encryption"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                            ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                            ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                            ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                            ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                            ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                        ])
                        self.enable = None
                        self.spi = None
                        self.encryption_algorithm = None
                        self.encryption_password = None
                        self.authentication_algorithm = None
                        self.authentication_password = None
                        self._segment_path = lambda: "encryption"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.Encryption']['meta_info']


                class AutoCost(_Entity_):
                    """
                    Calculate interface cost according to bandwidth
                    
                    .. attribute:: disable
                    
                    	Specify 'true' to assign cost based on interface type
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: reference_bandwidth
                    
                    	Specify reference bandwidth for cost computations in terms of Mbits per second
                    	**type**\: int
                    
                    	**range:** 1..4294967
                    
                    	**units**\: Mbit/s
                    
                    

                    This class is a :ref:`presence class<presence-class>`

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.DefaultVrf.AutoCost, self).__init__()

                        self.yang_name = "auto-cost"
                        self.yang_parent_name = "default-vrf"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_classes = OrderedDict([])
                        self.is_presence_container = True
                        self._leafs = OrderedDict([
                            ('disable', (YLeaf(YType.empty, 'disable'), ['Empty'])),
                            ('reference_bandwidth', (YLeaf(YType.uint32, 'reference-bandwidth'), ['int'])),
                        ])
                        self.disable = None
                        self.reference_bandwidth = None
                        self._segment_path = lambda: "auto-cost"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.DefaultVrf.AutoCost, ['disable', 'reference_bandwidth'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf.AutoCost']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                    return meta._meta_table['Ospfv3.Processes.Process.DefaultVrf']['meta_info']


            class Vrfs(_Entity_):
                """
                VRF related configuration
                
                .. attribute:: vrf
                
                	Configuration for a particular OSPF VRF
                	**type**\: list of  		 :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf>`
                
                

                """

                _prefix = 'ipv6-ospfv3-cfg'
                _revision = '2018-05-14'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Ospfv3.Processes.Process.Vrfs, self).__init__()

                    self.yang_name = "vrfs"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("vrf", ("vrf", Ospfv3.Processes.Process.Vrfs.Vrf))])
                    self._leafs = OrderedDict()

                    self.vrf = YList(self)
                    self._segment_path = lambda: "vrfs"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs, [], name, value)


                class Vrf(_Entity_):
                    """
                    Configuration for a particular OSPF VRF
                    
                    .. attribute:: vrf_name  (key)
                    
                    	Name for this VRF
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: domain_id
                    
                    	OSPFv3 Domain ID
                    	**type**\:  :py:class:`DomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DomainId>`
                    
                    .. attribute:: snmpvrf_trap
                    
                    	Enable SNMP trap configuration in a VRF
                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                    
                    .. attribute:: prefix_suppression
                    
                    	Enable/disable prefix suppression on an interface
                    	**type**\: bool
                    
                    .. attribute:: area_addresses
                    
                    	Area configuration
                    	**type**\:  :py:class:`AreaAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses>`
                    
                    .. attribute:: timers
                    
                    	Adjust routing timers
                    	**type**\:  :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers>`
                    
                    .. attribute:: summary_prefixes
                    
                    	Summarize redistributed routes matching prefix/length
                    	**type**\:  :py:class:`SummaryPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes>`
                    
                    .. attribute:: snmp
                    
                    	SNMP configuration
                    	**type**\:  :py:class:`Snmp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Snmp>`
                    
                    .. attribute:: fast_reroute
                    
                    	Fast\-reroute instance scoped parameters
                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute>`
                    
                    .. attribute:: retransmit_interval
                    
                    	Specify the transmit interval in seconds
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    .. attribute:: distance
                    
                    	Define an administrative distance
                    	**type**\:  :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Distance>`
                    
                    .. attribute:: passive
                    
                    	Enable/disable routing updates on an interface
                    	**type**\: bool
                    
                    .. attribute:: default_metric
                    
                    	Set metric of redistributed routes
                    	**type**\: int
                    
                    	**range:** 1..16777214
                    
                    .. attribute:: flood_reduction
                    
                    	Enable/disable flood reduction
                    	**type**\: bool
                    
                    .. attribute:: maximum
                    
                    	Set OSPFv3 limits
                    	**type**\:  :py:class:`Maximum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Maximum>`
                    
                    .. attribute:: redistributes
                    
                    	Redistribute information from another routing protocol
                    	**type**\:  :py:class:`Redistributes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes>`
                    
                    .. attribute:: ignore
                    
                    	Do not complain about a specified event
                    	**type**\:  :py:class:`Ignore <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Ignore>`
                    
                    .. attribute:: distribute_list_out
                    
                    	Filter prefixes from RIB 
                    	**type**\:  :py:class:`DistributeListOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut>`
                    
                    .. attribute:: distribute_list
                    
                    	Filter prefixes to/from RIB
                    	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList>`
                    
                    .. attribute:: hello_interval
                    
                    	Time between HELLO packets
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    .. attribute:: stub_router
                    
                    	Stub router configuration
                    	**type**\:  :py:class:`StubRouter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter>`
                    
                    .. attribute:: priority
                    
                    	Specify router priority
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: bfd
                    
                    	Configure BFD parameters
                    	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Bfd>`
                    
                    .. attribute:: cost
                    
                    	Interface cost
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    .. attribute:: dead_interval
                    
                    	Interval after which a neighbor is declared dead (in seconds)
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    .. attribute:: packet_size
                    
                    	Limit size of OSPFv3 packets
                    	**type**\: int
                    
                    	**range:** 256..10000
                    
                    .. attribute:: instance
                    
                    	Instance ID
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: spf_prefix_priority_policy
                    
                    	Route policy for SPF prefix prioritization
                    	**type**\: str
                    
                    .. attribute:: database_filter
                    
                    	Database filter
                    	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter>`
                    
                    .. attribute:: router_id
                    
                    	Specify the router ID for this OSPFv3 process in IPv4 address format
                    	**type**\: str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    .. attribute:: capability
                    
                    	OSPFv3 Capability
                    	**type**\:  :py:class:`Capability <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Capability>`
                    
                    .. attribute:: network
                    
                    	Specify network type
                    	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                    
                    .. attribute:: mtu_ignore
                    
                    	Enable/disable ignoring of MTU in DBD packets
                    	**type**\: bool
                    
                    .. attribute:: log_adjacency_changes
                    
                    	Log changes in adjacency state
                    	**type**\:  :py:class:`Ospfv3LogAdj <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3LogAdj>`
                    
                    .. attribute:: authentication
                    
                    	Authenticate OSPFv3 packets
                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Authentication>`
                    
                    .. attribute:: demand_circuit
                    
                    	Enable/disable demand circuit operation
                    	**type**\: bool
                    
                    .. attribute:: graceful_restart
                    
                    	Graceful restart configuration
                    	**type**\:  :py:class:`GracefulRestart <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart>`
                    
                    .. attribute:: default_information
                    
                    	Control distribution of default information
                    	**type**\:  :py:class:`DefaultInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation>`
                    
                    .. attribute:: process_scope
                    
                    	Process scope configuration
                    	**type**\:  :py:class:`ProcessScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope>`
                    
                    .. attribute:: encryption
                    
                    	Encrypt and authenticate OSPFv3 packets
                    	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Encryption>`
                    
                    .. attribute:: auto_cost
                    
                    	Calculate interface cost according to bandwidth
                    	**type**\:  :py:class:`AutoCost <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AutoCost>`
                    
                    	**presence node**\: True
                    
                    .. attribute:: transmit_delay
                    
                    	Specify the transmit delay in seconds
                    	**type**\: int
                    
                    	**range:** 1..65535
                    
                    	**units**\: second
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.Vrfs.Vrf, self).__init__()

                        self.yang_name = "vrf"
                        self.yang_parent_name = "vrfs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['vrf_name']
                        self._child_classes = OrderedDict([("domain-id", ("domain_id", Ospfv3.Processes.Process.Vrfs.Vrf.DomainId)), ("area-addresses", ("area_addresses", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses)), ("timers", ("timers", Ospfv3.Processes.Process.Vrfs.Vrf.Timers)), ("summary-prefixes", ("summary_prefixes", Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes)), ("snmp", ("snmp", Ospfv3.Processes.Process.Vrfs.Vrf.Snmp)), ("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute)), ("distance", ("distance", Ospfv3.Processes.Process.Vrfs.Vrf.Distance)), ("maximum", ("maximum", Ospfv3.Processes.Process.Vrfs.Vrf.Maximum)), ("redistributes", ("redistributes", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes)), ("ignore", ("ignore", Ospfv3.Processes.Process.Vrfs.Vrf.Ignore)), ("distribute-list-out", ("distribute_list_out", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList)), ("stub-router", ("stub_router", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter)), ("bfd", ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.Bfd)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter)), ("capability", ("capability", Ospfv3.Processes.Process.Vrfs.Vrf.Capability)), ("authentication", ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.Authentication)), ("graceful-restart", ("graceful_restart", Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart)), ("default-information", ("default_information", Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation)), ("process-scope", ("process_scope", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope)), ("encryption", ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.Encryption)), ("auto-cost", ("auto_cost", Ospfv3.Processes.Process.Vrfs.Vrf.AutoCost))])
                        self._leafs = OrderedDict([
                            ('vrf_name', (YLeaf(YType.str, 'vrf-name'), ['str'])),
                            ('snmpvrf_trap', (YLeaf(YType.empty, 'snmpvrf-trap'), ['Empty'])),
                            ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                            ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                            ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                            ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                            ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                            ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                            ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                            ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                            ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                            ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                            ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                            ('spf_prefix_priority_policy', (YLeaf(YType.str, 'spf-prefix-priority-policy'), ['str'])),
                            ('router_id', (YLeaf(YType.str, 'router-id'), ['str'])),
                            ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                            ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                            ('log_adjacency_changes', (YLeaf(YType.enumeration, 'log-adjacency-changes'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3LogAdj', '')])),
                            ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                            ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                        ])
                        self.vrf_name = None
                        self.snmpvrf_trap = None
                        self.prefix_suppression = None
                        self.retransmit_interval = None
                        self.passive = None
                        self.default_metric = None
                        self.flood_reduction = None
                        self.hello_interval = None
                        self.priority = None
                        self.cost = None
                        self.dead_interval = None
                        self.packet_size = None
                        self.instance = None
                        self.spf_prefix_priority_policy = None
                        self.router_id = None
                        self.network = None
                        self.mtu_ignore = None
                        self.log_adjacency_changes = None
                        self.demand_circuit = None
                        self.transmit_delay = None

                        self.domain_id = Ospfv3.Processes.Process.Vrfs.Vrf.DomainId()
                        self.domain_id.parent = self
                        self._children_name_map["domain_id"] = "domain-id"

                        self.area_addresses = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses()
                        self.area_addresses.parent = self
                        self._children_name_map["area_addresses"] = "area-addresses"

                        self.timers = Ospfv3.Processes.Process.Vrfs.Vrf.Timers()
                        self.timers.parent = self
                        self._children_name_map["timers"] = "timers"

                        self.summary_prefixes = Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes()
                        self.summary_prefixes.parent = self
                        self._children_name_map["summary_prefixes"] = "summary-prefixes"

                        self.snmp = Ospfv3.Processes.Process.Vrfs.Vrf.Snmp()
                        self.snmp.parent = self
                        self._children_name_map["snmp"] = "snmp"

                        self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute()
                        self.fast_reroute.parent = self
                        self._children_name_map["fast_reroute"] = "fast-reroute"

                        self.distance = Ospfv3.Processes.Process.Vrfs.Vrf.Distance()
                        self.distance.parent = self
                        self._children_name_map["distance"] = "distance"

                        self.maximum = Ospfv3.Processes.Process.Vrfs.Vrf.Maximum()
                        self.maximum.parent = self
                        self._children_name_map["maximum"] = "maximum"

                        self.redistributes = Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes()
                        self.redistributes.parent = self
                        self._children_name_map["redistributes"] = "redistributes"

                        self.ignore = Ospfv3.Processes.Process.Vrfs.Vrf.Ignore()
                        self.ignore.parent = self
                        self._children_name_map["ignore"] = "ignore"

                        self.distribute_list_out = Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut()
                        self.distribute_list_out.parent = self
                        self._children_name_map["distribute_list_out"] = "distribute-list-out"

                        self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList()
                        self.distribute_list.parent = self
                        self._children_name_map["distribute_list"] = "distribute-list"

                        self.stub_router = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter()
                        self.stub_router.parent = self
                        self._children_name_map["stub_router"] = "stub-router"

                        self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.Bfd()
                        self.bfd.parent = self
                        self._children_name_map["bfd"] = "bfd"

                        self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter()
                        self.database_filter.parent = self
                        self._children_name_map["database_filter"] = "database-filter"

                        self.capability = Ospfv3.Processes.Process.Vrfs.Vrf.Capability()
                        self.capability.parent = self
                        self._children_name_map["capability"] = "capability"

                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.Authentication()
                        self.authentication.parent = self
                        self._children_name_map["authentication"] = "authentication"

                        self.graceful_restart = Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart()
                        self.graceful_restart.parent = self
                        self._children_name_map["graceful_restart"] = "graceful-restart"

                        self.default_information = Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation()
                        self.default_information.parent = self
                        self._children_name_map["default_information"] = "default-information"

                        self.process_scope = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope()
                        self.process_scope.parent = self
                        self._children_name_map["process_scope"] = "process-scope"

                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.Encryption()
                        self.encryption.parent = self
                        self._children_name_map["encryption"] = "encryption"

                        self.auto_cost = None
                        self._children_name_map["auto_cost"] = "auto-cost"
                        self._segment_path = lambda: "vrf" + "[vrf-name='" + str(self.vrf_name) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf, ['vrf_name', 'snmpvrf_trap', 'prefix_suppression', 'retransmit_interval', 'passive', 'default_metric', 'flood_reduction', 'hello_interval', 'priority', 'cost', 'dead_interval', 'packet_size', 'instance', 'spf_prefix_priority_policy', 'router_id', 'network', 'mtu_ignore', 'log_adjacency_changes', 'demand_circuit', 'transmit_delay'], name, value)


                    class DomainId(_Entity_):
                        """
                        OSPFv3 Domain ID
                        
                        .. attribute:: secondary_domain_ids
                        
                        	Secondary domain ID Table
                        	**type**\:  :py:class:`SecondaryDomainIds <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds>`
                        
                        .. attribute:: primary_domain_id
                        
                        	OSPF Primary domain ID
                        	**type**\:  :py:class:`PrimaryDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId, self).__init__()

                            self.yang_name = "domain-id"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("secondary-domain-ids", ("secondary_domain_ids", Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds)), ("primary-domain-id", ("primary_domain_id", Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId))])
                            self._leafs = OrderedDict()

                            self.secondary_domain_ids = Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds()
                            self.secondary_domain_ids.parent = self
                            self._children_name_map["secondary_domain_ids"] = "secondary-domain-ids"

                            self.primary_domain_id = Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId()
                            self.primary_domain_id.parent = self
                            self._children_name_map["primary_domain_id"] = "primary-domain-id"
                            self._segment_path = lambda: "domain-id"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId, [], name, value)


                        class SecondaryDomainIds(_Entity_):
                            """
                            Secondary domain ID Table
                            
                            .. attribute:: secondary_domain_id
                            
                            	OSPF Secondary domain ID
                            	**type**\: list of  		 :py:class:`SecondaryDomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds, self).__init__()

                                self.yang_name = "secondary-domain-ids"
                                self.yang_parent_name = "domain-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("secondary-domain-id", ("secondary_domain_id", Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId))])
                                self._leafs = OrderedDict()

                                self.secondary_domain_id = YList(self)
                                self._segment_path = lambda: "secondary-domain-ids"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds, [], name, value)


                            class SecondaryDomainId(_Entity_):
                                """
                                OSPF Secondary domain ID
                                
                                .. attribute:: domain_id_type  (key)
                                
                                	Secondary domain ID type
                                	**type**\:  :py:class:`Ospfv3DomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3DomainId>`
                                
                                .. attribute:: domain_id_name  (key)
                                
                                	Secondary domain ID value
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId, self).__init__()

                                    self.yang_name = "secondary-domain-id"
                                    self.yang_parent_name = "secondary-domain-ids"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['domain_id_type','domain_id_name']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('domain_id_type', (YLeaf(YType.enumeration, 'domain-id-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3DomainId', '')])),
                                        ('domain_id_name', (YLeaf(YType.str, 'domain-id-name'), ['str'])),
                                    ])
                                    self.domain_id_type = None
                                    self.domain_id_name = None
                                    self._segment_path = lambda: "secondary-domain-id" + "[domain-id-type='" + str(self.domain_id_type) + "']" + "[domain-id-name='" + str(self.domain_id_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId, ['domain_id_type', 'domain_id_name'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds.SecondaryDomainId']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.SecondaryDomainIds']['meta_info']


                        class PrimaryDomainId(_Entity_):
                            """
                            OSPF Primary domain ID
                            
                            .. attribute:: domain_id_type
                            
                            	Primary domain ID type
                            	**type**\:  :py:class:`Ospfv3DomainId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3DomainId>`
                            
                            .. attribute:: domain_id_name
                            
                            	Primary domain ID value
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId, self).__init__()

                                self.yang_name = "primary-domain-id"
                                self.yang_parent_name = "domain-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('domain_id_type', (YLeaf(YType.enumeration, 'domain-id-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3DomainId', '')])),
                                    ('domain_id_name', (YLeaf(YType.str, 'domain-id-name'), ['str'])),
                                ])
                                self.domain_id_type = None
                                self.domain_id_name = None
                                self._segment_path = lambda: "primary-domain-id"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId, ['domain_id_type', 'domain_id_name'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DomainId.PrimaryDomainId']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DomainId']['meta_info']


                    class AreaAddresses(_Entity_):
                        """
                        Area configuration
                        
                        .. attribute:: area_address
                        
                        	Configuration for a particular area
                        	**type**\: list of  		 :py:class:`AreaAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress>`
                        
                        .. attribute:: area_area_id
                        
                        	Configuration for a particular area
                        	**type**\: list of  		 :py:class:`AreaAreaId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses, self).__init__()

                            self.yang_name = "area-addresses"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("area-address", ("area_address", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress)), ("area-area-id", ("area_area_id", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId))])
                            self._leafs = OrderedDict()

                            self.area_address = YList(self)
                            self.area_area_id = YList(self)
                            self._segment_path = lambda: "area-addresses"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses, [], name, value)


                        class AreaAddress(_Entity_):
                            """
                            Configuration for a particular area
                            
                            .. attribute:: address  (key)
                            
                            	Area ID if in IP address format
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: authentication
                            
                            	Authenticate OSPFv3 packets
                            	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication>`
                            
                            .. attribute:: bfd
                            
                            	Configure BFD parameters
                            	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd>`
                            
                            .. attribute:: ranges
                            
                            	Range configuration
                            	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges>`
                            
                            .. attribute:: encryption
                            
                            	Encrypt and authenticate OSPFv3 packets
                            	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption>`
                            
                            .. attribute:: nssa
                            
                            	Specify area as a NSSA area.  Allowed only in non\-backbone areas
                            	**type**\:  :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa>`
                            
                            .. attribute:: database_filter
                            
                            	Database filter
                            	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter>`
                            
                            .. attribute:: distribute_list
                            
                            	Filter prefixes to/from RIB
                            	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList>`
                            
                            .. attribute:: interfaces
                            
                            	OSPFv3 interfaces
                            	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces>`
                            
                            .. attribute:: area_scope
                            
                            	Area Scope Configuration
                            	**type**\:  :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope>`
                            
                            .. attribute:: sham_links
                            
                            	Sham Link sub\-mode
                            	**type**\:  :py:class:`ShamLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks>`
                            
                            .. attribute:: virtual_links
                            
                            	Virtual link sub\-mode
                            	**type**\:  :py:class:`VirtualLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks>`
                            
                            .. attribute:: stub
                            
                            	Specify area as a stub area.  Allowed only in non\-backbone areas
                            	**type**\: bool
                            
                            .. attribute:: packet_size
                            
                            	Limit size of OSPFv3 packets
                            	**type**\: int
                            
                            	**range:** 256..10000
                            
                            .. attribute:: instance
                            
                            	Instance ID
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: demand_circuit
                            
                            	Enable/disable demand circuit operation
                            	**type**\: bool
                            
                            .. attribute:: priority
                            
                            	Specify router priority
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: type7_translate_always
                            
                            	Translate Type 7 to Type 5, even if not elected NSSA translator
                            	**type**\: bool
                            
                            .. attribute:: prefix_suppression
                            
                            	Enable/disable prefix suppression on an interface
                            	**type**\: bool
                            
                            .. attribute:: enable
                            
                            	Enable OSPFv3 area
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: mtu_ignore
                            
                            	Enable/disable ignoring of MTU in DBD packets
                            	**type**\: bool
                            
                            .. attribute:: passive
                            
                            	Enable/disable routing updates on an interface
                            	**type**\: bool
                            
                            .. attribute:: hello_interval
                            
                            	Time between HELLO packets
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: dead_interval
                            
                            	Interval after which a neighbor is declared dead (in seconds)
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: default_cost
                            
                            	Set the summary default\-cost of a NSSA/stub area
                            	**type**\: int
                            
                            	**range:** 0..16777215
                            
                            .. attribute:: flood_reduction
                            
                            	Enable/disable flood reduction
                            	**type**\: bool
                            
                            .. attribute:: retransmit_interval
                            
                            	Specify the transmit interval in seconds
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: ldp_sync
                            
                            	Enable/Disable MPLS LDP sync
                            	**type**\: bool
                            
                            .. attribute:: network
                            
                            	Specify network type
                            	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                            
                            .. attribute:: transmit_delay
                            
                            	Specify the transmit delay in seconds
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: cost
                            
                            	Interface cost
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress, self).__init__()

                                self.yang_name = "area-address"
                                self.yang_parent_name = "area-addresses"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['address']
                                self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication)), ("bfd", ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd)), ("ranges", ("ranges", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges)), ("encryption", ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption)), ("nssa", ("nssa", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList)), ("interfaces", ("interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces)), ("area-scope", ("area_scope", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope)), ("sham-links", ("sham_links", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks)), ("virtual-links", ("virtual_links", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks))])
                                self._leafs = OrderedDict([
                                    ('address', (YLeaf(YType.str, 'address'), ['str'])),
                                    ('stub', (YLeaf(YType.boolean, 'stub'), ['bool'])),
                                    ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                                    ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                                    ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                                    ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                    ('type7_translate_always', (YLeaf(YType.boolean, 'type7-translate-always'), ['bool'])),
                                    ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                    ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                                    ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                                    ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                    ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                    ('default_cost', (YLeaf(YType.uint32, 'default-cost'), ['int'])),
                                    ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                                    ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                    ('ldp_sync', (YLeaf(YType.boolean, 'ldp-sync'), ['bool'])),
                                    ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                                    ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                    ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                ])
                                self.address = None
                                self.stub = None
                                self.packet_size = None
                                self.instance = None
                                self.demand_circuit = None
                                self.priority = None
                                self.type7_translate_always = None
                                self.prefix_suppression = None
                                self.enable = None
                                self.mtu_ignore = None
                                self.passive = None
                                self.hello_interval = None
                                self.dead_interval = None
                                self.default_cost = None
                                self.flood_reduction = None
                                self.retransmit_interval = None
                                self.ldp_sync = None
                                self.network = None
                                self.transmit_delay = None
                                self.cost = None

                                self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication()
                                self.authentication.parent = self
                                self._children_name_map["authentication"] = "authentication"

                                self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd()
                                self.bfd.parent = self
                                self._children_name_map["bfd"] = "bfd"

                                self.ranges = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges()
                                self.ranges.parent = self
                                self._children_name_map["ranges"] = "ranges"

                                self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption()
                                self.encryption.parent = self
                                self._children_name_map["encryption"] = "encryption"

                                self.nssa = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa()
                                self.nssa.parent = self
                                self._children_name_map["nssa"] = "nssa"

                                self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter()
                                self.database_filter.parent = self
                                self._children_name_map["database_filter"] = "database-filter"

                                self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList()
                                self.distribute_list.parent = self
                                self._children_name_map["distribute_list"] = "distribute-list"

                                self.interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces()
                                self.interfaces.parent = self
                                self._children_name_map["interfaces"] = "interfaces"

                                self.area_scope = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope()
                                self.area_scope.parent = self
                                self._children_name_map["area_scope"] = "area-scope"

                                self.sham_links = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks()
                                self.sham_links.parent = self
                                self._children_name_map["sham_links"] = "sham-links"

                                self.virtual_links = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks()
                                self.virtual_links.parent = self
                                self._children_name_map["virtual_links"] = "virtual-links"
                                self._segment_path = lambda: "area-address" + "[address='" + str(self.address) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress, ['address', 'stub', 'packet_size', 'instance', 'demand_circuit', 'priority', 'type7_translate_always', 'prefix_suppression', 'enable', 'mtu_ignore', 'passive', 'hello_interval', 'dead_interval', 'default_cost', 'flood_reduction', 'retransmit_interval', 'ldp_sync', 'network', 'transmit_delay', 'cost'], name, value)


                            class Authentication(_Entity_):
                                """
                                Authenticate OSPFv3 packets
                                
                                .. attribute:: enable
                                
                                	Authenticate packets
                                	**type**\: bool
                                
                                .. attribute:: spi
                                
                                	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                	**type**\: int
                                
                                	**range:** 256..4294967295
                                
                                .. attribute:: algorithm
                                
                                	Use the MD5 or SHA1 algorithm
                                	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                
                                .. attribute:: password
                                
                                	Specify MD5 or SHA1 password
                                	**type**\: str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication, self).__init__()

                                    self.yang_name = "authentication"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                        ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                        ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                        ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                    ])
                                    self.enable = None
                                    self.spi = None
                                    self.algorithm = None
                                    self.password = None
                                    self._segment_path = lambda: "authentication"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Authentication']['meta_info']


                            class Bfd(_Entity_):
                                """
                                Configure BFD parameters
                                
                                .. attribute:: detection_multiplier
                                
                                	Detect multiplier
                                	**type**\: int
                                
                                	**range:** 2..50
                                
                                .. attribute:: interval
                                
                                	Hello interval in milli\-seconds
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: fast_detect_mode
                                
                                	Enable or disable BFD fast detection
                                	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd, self).__init__()

                                    self.yang_name = "bfd"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                        ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                        ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                                    ])
                                    self.detection_multiplier = None
                                    self.interval = None
                                    self.fast_detect_mode = None
                                    self._segment_path = lambda: "bfd"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd, ['detection_multiplier', 'interval', 'fast_detect_mode'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Bfd']['meta_info']


                            class Ranges(_Entity_):
                                """
                                Range configuration
                                
                                .. attribute:: range
                                
                                	Summarize inter\-area routes matching prefix/length
                                	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges.Range>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges, self).__init__()

                                    self.yang_name = "ranges"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("range", ("range", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges.Range))])
                                    self._leafs = OrderedDict()

                                    self.range = YList(self)
                                    self._segment_path = lambda: "ranges"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges, [], name, value)


                                class Range(_Entity_):
                                    """
                                    Summarize inter\-area routes matching
                                    prefix/length
                                    
                                    .. attribute:: prefix  (key)
                                    
                                    	IPv6 prefix format
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length  (key)
                                    
                                    	IPV6 prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..128
                                    
                                    .. attribute:: not_advertise
                                    
                                    	Do not advertise address range
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: cost
                                    
                                    	Specified metric for this range
                                    	**type**\: int
                                    
                                    	**range:** 1..16777214
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges.Range, self).__init__()

                                        self.yang_name = "range"
                                        self.yang_parent_name = "ranges"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['prefix','prefix_length']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', (YLeaf(YType.str, 'prefix'), ['str'])),
                                            ('prefix_length', (YLeaf(YType.uint8, 'prefix-length'), ['int'])),
                                            ('not_advertise', (YLeaf(YType.boolean, 'not-advertise'), ['bool'])),
                                            ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.not_advertise = None
                                        self.cost = None
                                        self._segment_path = lambda: "range" + "[prefix='" + str(self.prefix) + "']" + "[prefix-length='" + str(self.prefix_length) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges.Range, ['prefix', 'prefix_length', 'not_advertise', 'cost'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges.Range']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Ranges']['meta_info']


                            class Encryption(_Entity_):
                                """
                                Encrypt and authenticate OSPFv3 packets
                                
                                .. attribute:: enable
                                
                                	Authenticate packets
                                	**type**\: bool
                                
                                .. attribute:: spi
                                
                                	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                	**type**\: int
                                
                                	**range:** 256..4294967295
                                
                                .. attribute:: encryption_algorithm
                                
                                	Specify the encryption algorithm
                                	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                
                                .. attribute:: encryption_password
                                
                                	Encryption password
                                	**type**\: str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: authentication_algorithm
                                
                                	Use the NULL, MD5 or SHA1 algorithm
                                	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                
                                .. attribute:: authentication_password
                                
                                	Specify MD5 or SHA1 password
                                	**type**\: str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption, self).__init__()

                                    self.yang_name = "encryption"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                        ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                        ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                        ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                        ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                        ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                    ])
                                    self.enable = None
                                    self.spi = None
                                    self.encryption_algorithm = None
                                    self.encryption_password = None
                                    self.authentication_algorithm = None
                                    self.authentication_password = None
                                    self._segment_path = lambda: "encryption"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Encryption']['meta_info']


                            class Nssa(_Entity_):
                                """
                                Specify area as a NSSA area.  Allowed only in
                                non\-backbone areas
                                
                                .. attribute:: no_redistribution
                                
                                	No redistribution into this NSSA area
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_info_originate
                                
                                	Originate Type 7 default into NSSA area
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: metric
                                
                                	Only valid with DefaultInfoOriginate
                                	**type**\: int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: metric_type
                                
                                	Only valid with DefaultInfoOriginate
                                	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: no_summary
                                
                                	Do not send summary LSA into NSSA
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa, self).__init__()

                                    self.yang_name = "nssa"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('no_redistribution', (YLeaf(YType.boolean, 'no-redistribution'), ['bool'])),
                                        ('default_info_originate', (YLeaf(YType.boolean, 'default-info-originate'), ['bool'])),
                                        ('metric', (YLeaf(YType.uint32, 'metric'), ['int'])),
                                        ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                        ('no_summary', (YLeaf(YType.empty, 'no-summary'), ['Empty'])),
                                    ])
                                    self.no_redistribution = None
                                    self.default_info_originate = None
                                    self.metric = None
                                    self.metric_type = None
                                    self.no_summary = None
                                    self._segment_path = lambda: "nssa"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa, ['no_redistribution', 'default_info_originate', 'metric', 'metric_type', 'no_summary'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Nssa']['meta_info']


                            class DatabaseFilter(_Entity_):
                                """
                                Database filter
                                
                                .. attribute:: all
                                
                                	All
                                	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter, self).__init__()

                                    self.yang_name = "database-filter"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All))])
                                    self._leafs = OrderedDict()

                                    self.all = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All()
                                    self.all.parent = self
                                    self._children_name_map["all"] = "all"
                                    self._segment_path = lambda: "database-filter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter, [], name, value)


                                class All(_Entity_):
                                    """
                                    All
                                    
                                    .. attribute:: out
                                    
                                    	Enable or disable database\-filter
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All, self).__init__()

                                        self.yang_name = "all"
                                        self.yang_parent_name = "database-filter"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('out', (YLeaf(YType.boolean, 'out'), ['bool'])),
                                        ])
                                        self.out = None
                                        self._segment_path = lambda: "all"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All, ['out'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter.All']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DatabaseFilter']['meta_info']


                            class DistributeList(_Entity_):
                                """
                                Filter prefixes to/from RIB
                                
                                .. attribute:: in_
                                
                                	Filter prefixes installed to RIB
                                	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList, self).__init__()

                                    self.yang_name = "distribute-list"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In))])
                                    self._leafs = OrderedDict()

                                    self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In()
                                    self.in_.parent = self
                                    self._children_name_map["in_"] = "in"
                                    self._segment_path = lambda: "distribute-list"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList, [], name, value)


                                class In(_Entity_):
                                    """
                                    Filter prefixes installed to RIB
                                    
                                    .. attribute:: prefix_list
                                    
                                    	Filter prefixes based on an IPv6 prefix\-list
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In, self).__init__()

                                        self.yang_name = "in"
                                        self.yang_parent_name = "distribute-list"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                        ])
                                        self.prefix_list = None
                                        self._segment_path = lambda: "in"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In, ['prefix_list'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList.In']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.DistributeList']['meta_info']


                            class Interfaces(_Entity_):
                                """
                                OSPFv3 interfaces
                                
                                .. attribute:: interface
                                
                                	OSPFv3 interface
                                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces, self).__init__()

                                    self.yang_name = "interfaces"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("interface", ("interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface))])
                                    self._leafs = OrderedDict()

                                    self.interface = YList(self)
                                    self._segment_path = lambda: "interfaces"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces, [], name, value)


                                class Interface(_Entity_):
                                    """
                                    OSPFv3 interface
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface to configure
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication>`
                                    
                                    .. attribute:: neighbors
                                    
                                    	Specify a neighbor router
                                    	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption>`
                                    
                                    .. attribute:: bfd
                                    
                                    	Configure BFD parameters
                                    	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd>`
                                    
                                    .. attribute:: database_filter
                                    
                                    	Database filter
                                    	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter>`
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter prefixes to/from RIB
                                    	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enable OSPFv3 interface
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: flood_reduction
                                    
                                    	Enable/disable flood reduction
                                    	**type**\: bool
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: instance
                                    
                                    	Instance ID
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: ldp_sync
                                    
                                    	Enable/Disable MPLS LDP sync
                                    	**type**\: bool
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/disable ignoring of MTU in DBD packets
                                    	**type**\: bool
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: passive
                                    
                                    	Enable/disable routing updates on an interface
                                    	**type**\: bool
                                    
                                    .. attribute:: packet_size
                                    
                                    	Limit size of OSPFv3 packets
                                    	**type**\: int
                                    
                                    	**range:** 256..10000
                                    
                                    .. attribute:: prefix_suppression
                                    
                                    	Enable/disable prefix suppression on an interface
                                    	**type**\: bool
                                    
                                    .. attribute:: priority
                                    
                                    	Specify router priority
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: network
                                    
                                    	Specify network type
                                    	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                                    
                                    .. attribute:: demand_circuit
                                    
                                    	Enable/disable demand circuit operation
                                    	**type**\: bool
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface, self).__init__()

                                        self.yang_name = "interface"
                                        self.yang_parent_name = "interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication)), ("neighbors", ("neighbors", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors)), ("encryption", ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption)), ("bfd", ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList)), ("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute))])
                                        self._leafs = OrderedDict([
                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                            ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                                            ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                            ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                            ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                                            ('ldp_sync', (YLeaf(YType.boolean, 'ldp-sync'), ['bool'])),
                                            ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                                            ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                            ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                            ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                                            ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                                            ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                                            ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                            ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                                            ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                                        ])
                                        self.interface_name = None
                                        self.enable = None
                                        self.dead_interval = None
                                        self.flood_reduction = None
                                        self.cost = None
                                        self.transmit_delay = None
                                        self.instance = None
                                        self.ldp_sync = None
                                        self.mtu_ignore = None
                                        self.retransmit_interval = None
                                        self.hello_interval = None
                                        self.passive = None
                                        self.packet_size = None
                                        self.prefix_suppression = None
                                        self.priority = None
                                        self.network = None
                                        self.demand_circuit = None

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"

                                        self.neighbors = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors()
                                        self.neighbors.parent = self
                                        self._children_name_map["neighbors"] = "neighbors"

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"

                                        self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd()
                                        self.bfd.parent = self
                                        self._children_name_map["bfd"] = "bfd"

                                        self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter()
                                        self.database_filter.parent = self
                                        self._children_name_map["database_filter"] = "database-filter"

                                        self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList()
                                        self.distribute_list.parent = self
                                        self._children_name_map["distribute_list"] = "distribute-list"

                                        self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute()
                                        self.fast_reroute.parent = self
                                        self._children_name_map["fast_reroute"] = "fast-reroute"
                                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface, ['interface_name', 'enable', 'dead_interval', 'flood_reduction', 'cost', 'transmit_delay', 'instance', 'ldp_sync', 'mtu_ignore', 'retransmit_interval', 'hello_interval', 'passive', 'packet_size', 'prefix_suppression', 'priority', 'network', 'demand_circuit'], name, value)


                                    class Authentication(_Entity_):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                                ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.algorithm = None
                                            self.password = None
                                            self._segment_path = lambda: "authentication"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Authentication']['meta_info']


                                    class Neighbors(_Entity_):
                                        """
                                        Specify a neighbor router
                                        
                                        .. attribute:: neighbor
                                        
                                        	IPv6 address
                                        	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors, self).__init__()

                                            self.yang_name = "neighbors"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("neighbor", ("neighbor", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor))])
                                            self._leafs = OrderedDict()

                                            self.neighbor = YList(self)
                                            self._segment_path = lambda: "neighbors"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors, [], name, value)


                                        class Neighbor(_Entity_):
                                            """
                                            IPv6 address
                                            
                                            .. attribute:: neighbor_address  (key)
                                            
                                            	IPV6 address
                                            	**type**\: str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: priority
                                            
                                            	OSPFv3 priority of non\-broadcast neighbor
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPFv3 dead\-router polling interval (in seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            .. attribute:: cost
                                            
                                            	OSPFv3 cost for point\-to\-multipoint neighbor
                                            	**type**\: int
                                            
                                            	**range:** 1..65535
                                            
                                            .. attribute:: database_filter
                                            
                                            	Filter OSPFv3 LSA during synchronization and flooding for point\-to\-multipoint neighbor
                                            	**type**\: bool
                                            
                                            .. attribute:: zone
                                            
                                            	Zone
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor, self).__init__()

                                                self.yang_name = "neighbor"
                                                self.yang_parent_name = "neighbors"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['neighbor_address']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_address', (YLeaf(YType.str, 'neighbor-address'), ['str'])),
                                                    ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                                    ('poll_interval', (YLeaf(YType.uint32, 'poll-interval'), ['int'])),
                                                    ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                                    ('database_filter', (YLeaf(YType.boolean, 'database-filter'), ['bool'])),
                                                    ('zone', (YLeaf(YType.str, 'zone'), ['str'])),
                                                ])
                                                self.neighbor_address = None
                                                self.priority = None
                                                self.poll_interval = None
                                                self.cost = None
                                                self.database_filter = None
                                                self.zone = None
                                                self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter', 'zone'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors.Neighbor']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Neighbors']['meta_info']


                                    class Encryption(_Entity_):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                                ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                                ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                                ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.encryption_algorithm = None
                                            self.encryption_password = None
                                            self.authentication_algorithm = None
                                            self.authentication_password = None
                                            self._segment_path = lambda: "encryption"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Encryption']['meta_info']


                                    class Bfd(_Entity_):
                                        """
                                        Configure BFD parameters
                                        
                                        .. attribute:: interval
                                        
                                        	Hello interval in milli\-seconds
                                        	**type**\: int
                                        
                                        	**range:** 3..30000
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: fast_detect_mode
                                        
                                        	Enable or disable BFD fast detection
                                        	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                        
                                        .. attribute:: detection_multiplier
                                        
                                        	Detect multiplier
                                        	**type**\: int
                                        
                                        	**range:** 2..50
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd, self).__init__()

                                            self.yang_name = "bfd"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                                ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                                                ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                            ])
                                            self.interval = None
                                            self.fast_detect_mode = None
                                            self.detection_multiplier = None
                                            self._segment_path = lambda: "bfd"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd, ['interval', 'fast_detect_mode', 'detection_multiplier'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.Bfd']['meta_info']


                                    class DatabaseFilter(_Entity_):
                                        """
                                        Database filter
                                        
                                        .. attribute:: all
                                        
                                        	All
                                        	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter, self).__init__()

                                            self.yang_name = "database-filter"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All))])
                                            self._leafs = OrderedDict()

                                            self.all = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All()
                                            self.all.parent = self
                                            self._children_name_map["all"] = "all"
                                            self._segment_path = lambda: "database-filter"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter, [], name, value)


                                        class All(_Entity_):
                                            """
                                            All
                                            
                                            .. attribute:: out
                                            
                                            	Enable or disable database\-filter
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All, self).__init__()

                                                self.yang_name = "all"
                                                self.yang_parent_name = "database-filter"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('out', (YLeaf(YType.boolean, 'out'), ['bool'])),
                                                ])
                                                self.out = None
                                                self._segment_path = lambda: "all"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All, ['out'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter.All']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DatabaseFilter']['meta_info']


                                    class DistributeList(_Entity_):
                                        """
                                        Filter prefixes to/from RIB
                                        
                                        .. attribute:: in_
                                        
                                        	Filter prefixes installed to RIB
                                        	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList, self).__init__()

                                            self.yang_name = "distribute-list"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In))])
                                            self._leafs = OrderedDict()

                                            self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In()
                                            self.in_.parent = self
                                            self._children_name_map["in_"] = "in"
                                            self._segment_path = lambda: "distribute-list"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList, [], name, value)


                                        class In(_Entity_):
                                            """
                                            Filter prefixes installed to RIB
                                            
                                            .. attribute:: prefix_list
                                            
                                            	Filter prefixes based on an IPv6 prefix\-list
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In, self).__init__()

                                                self.yang_name = "in"
                                                self.yang_parent_name = "distribute-list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                                ])
                                                self.prefix_list = None
                                                self._segment_path = lambda: "in"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In, ['prefix_list'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList.In']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.DistributeList']['meta_info']


                                    class FastReroute(_Entity_):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix>`
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute, self).__init__()

                                            self.yang_name = "fast-reroute"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                                            ])
                                            self.fast_reroute_enable = None

                                            self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self._children_name_map["per_link"] = "per-link"

                                            self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self
                                            self._children_name_map["per_prefix"] = "per-prefix"
                                            self._segment_path = lambda: "fast-reroute"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute, ['fast_reroute_enable'], name, value)


                                        class PerLink(_Entity_):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink, self).__init__()

                                                self.yang_name = "per-link"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces))])
                                                self._leafs = OrderedDict([
                                                    ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                                ])
                                                self.fast_reroute_use_candidate_only = None

                                                self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                                self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._segment_path = lambda: "per-link"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(_Entity_):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(_Entity_):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2018-05-14'

                                                    def __init__(self):
                                                        if sys.version_info > (3,):
                                                            super().__init__()
                                                        else:
                                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                        self._is_frozen = True

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(_Entity_):
                                                """
                                                Fast\-reroute per\-link/per\-prefix exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(_Entity_):
                                                    """
                                                    Exclude an interface from becoming a backup
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2018-05-14'

                                                    def __init__(self):
                                                        if sys.version_info > (3,):
                                                            super().__init__()
                                                        else:
                                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                        self._is_frozen = True

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerLink']['meta_info']


                                        class PerPrefix(_Entity_):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix, self).__init__()

                                                self.yang_name = "per-prefix"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces))])
                                                self._leafs = OrderedDict([
                                                    ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                                ])
                                                self.fast_reroute_use_candidate_only = None

                                                self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                                self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._segment_path = lambda: "per-prefix"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(_Entity_):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(_Entity_):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2018-05-14'

                                                    def __init__(self):
                                                        if sys.version_info > (3,):
                                                            super().__init__()
                                                        else:
                                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                        self._is_frozen = True

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(_Entity_):
                                                """
                                                Fast\-reroute per\-link/per\-prefix exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(_Entity_):
                                                    """
                                                    Exclude an interface from becoming a backup
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2018-05-14'

                                                    def __init__(self):
                                                        if sys.version_info > (3,):
                                                            super().__init__()
                                                        else:
                                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                        self._is_frozen = True

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute.PerPrefix']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface.FastReroute']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces.Interface']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.Interfaces']['meta_info']


                            class AreaScope(_Entity_):
                                """
                                Area Scope Configuration
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope, self).__init__()

                                    self.yang_name = "area-scope"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute))])
                                    self._leafs = OrderedDict()

                                    self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._segment_path = lambda: "area-scope"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope, [], name, value)


                                class FastReroute(_Entity_):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix))])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"

                                        self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._segment_path = lambda: "fast-reroute"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(_Entity_):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                            self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._segment_path = lambda: "per-link"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(_Entity_):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(_Entity_):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(_Entity_):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                            self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._segment_path = lambda: "per-prefix"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(_Entity_):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(_Entity_):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute.PerPrefix']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope.FastReroute']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.AreaScope']['meta_info']


                            class ShamLinks(_Entity_):
                                """
                                Sham Link sub\-mode
                                
                                .. attribute:: sham_link
                                
                                	ShamLink local and remote endpoints
                                	**type**\: list of  		 :py:class:`ShamLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks, self).__init__()

                                    self.yang_name = "sham-links"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("sham-link", ("sham_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink))])
                                    self._leafs = OrderedDict()

                                    self.sham_link = YList(self)
                                    self._segment_path = lambda: "sham-links"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks, [], name, value)


                                class ShamLink(_Entity_):
                                    """
                                    ShamLink local and remote endpoints
                                    
                                    .. attribute:: source_address  (key)
                                    
                                    	Local sham\-link endpoint
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: destination_address  (key)
                                    
                                    	Remote sham\-link endpoint
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enable sham link
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink, self).__init__()

                                        self.yang_name = "sham-link"
                                        self.yang_parent_name = "sham-links"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['source_address','destination_address']
                                        self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication)), ("encryption", ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption))])
                                        self._leafs = OrderedDict([
                                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str'])),
                                            ('destination_address', (YLeaf(YType.str, 'destination-address'), ['str'])),
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                            ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                            ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                            ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                        ])
                                        self.source_address = None
                                        self.destination_address = None
                                        self.enable = None
                                        self.hello_interval = None
                                        self.dead_interval = None
                                        self.retransmit_interval = None
                                        self.transmit_delay = None

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._segment_path = lambda: "sham-link" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink, ['source_address', 'destination_address', 'enable', 'hello_interval', 'dead_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(_Entity_):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "sham-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                                ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.algorithm = None
                                            self.password = None
                                            self._segment_path = lambda: "authentication"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Authentication']['meta_info']


                                    class Encryption(_Entity_):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "sham-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                                ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                                ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                                ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.encryption_algorithm = None
                                            self.encryption_password = None
                                            self.authentication_algorithm = None
                                            self.authentication_password = None
                                            self._segment_path = lambda: "encryption"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink.Encryption']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks.ShamLink']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.ShamLinks']['meta_info']


                            class VirtualLinks(_Entity_):
                                """
                                Virtual link sub\-mode
                                
                                .. attribute:: virtual_link
                                
                                	Router ID of virtual link neighbor
                                	**type**\: list of  		 :py:class:`VirtualLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks, self).__init__()

                                    self.yang_name = "virtual-links"
                                    self.yang_parent_name = "area-address"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("virtual-link", ("virtual_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink))])
                                    self._leafs = OrderedDict()

                                    self.virtual_link = YList(self)
                                    self._segment_path = lambda: "virtual-links"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks, [], name, value)


                                class VirtualLink(_Entity_):
                                    """
                                    Router ID of virtual link neighbor
                                    
                                    .. attribute:: virtual_link_address  (key)
                                    
                                    	Router ID of virtual link neighbor
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enabled virtual link
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink, self).__init__()

                                        self.yang_name = "virtual-link"
                                        self.yang_parent_name = "virtual-links"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['virtual_link_address']
                                        self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication)), ("encryption", ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption))])
                                        self._leafs = OrderedDict([
                                            ('virtual_link_address', (YLeaf(YType.str, 'virtual-link-address'), ['str'])),
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                            ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                            ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                            ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                        ])
                                        self.virtual_link_address = None
                                        self.enable = None
                                        self.hello_interval = None
                                        self.dead_interval = None
                                        self.retransmit_interval = None
                                        self.transmit_delay = None

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._segment_path = lambda: "virtual-link" + "[virtual-link-address='" + str(self.virtual_link_address) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink, ['virtual_link_address', 'enable', 'hello_interval', 'dead_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(_Entity_):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "virtual-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                                ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.algorithm = None
                                            self.password = None
                                            self._segment_path = lambda: "authentication"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Authentication']['meta_info']


                                    class Encryption(_Entity_):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "virtual-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                                ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                                ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                                ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.encryption_algorithm = None
                                            self.encryption_password = None
                                            self.authentication_algorithm = None
                                            self.authentication_password = None
                                            self._segment_path = lambda: "encryption"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink.Encryption']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks.VirtualLink']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress.VirtualLinks']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAddress']['meta_info']


                        class AreaAreaId(_Entity_):
                            """
                            Configuration for a particular area
                            
                            .. attribute:: area_id  (key)
                            
                            	Area ID if in integer format
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: authentication
                            
                            	Authenticate OSPFv3 packets
                            	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication>`
                            
                            .. attribute:: bfd
                            
                            	Configure BFD parameters
                            	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd>`
                            
                            .. attribute:: ranges
                            
                            	Range configuration
                            	**type**\:  :py:class:`Ranges <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges>`
                            
                            .. attribute:: encryption
                            
                            	Encrypt and authenticate OSPFv3 packets
                            	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption>`
                            
                            .. attribute:: nssa
                            
                            	Specify area as a NSSA area.  Allowed only in non\-backbone areas
                            	**type**\:  :py:class:`Nssa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa>`
                            
                            .. attribute:: database_filter
                            
                            	Database filter
                            	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter>`
                            
                            .. attribute:: distribute_list
                            
                            	Filter prefixes to/from RIB
                            	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList>`
                            
                            .. attribute:: interfaces
                            
                            	OSPFv3 interfaces
                            	**type**\:  :py:class:`Interfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces>`
                            
                            .. attribute:: area_scope
                            
                            	Area Scope Configuration
                            	**type**\:  :py:class:`AreaScope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope>`
                            
                            .. attribute:: sham_links
                            
                            	Sham Link sub\-mode
                            	**type**\:  :py:class:`ShamLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks>`
                            
                            .. attribute:: virtual_links
                            
                            	Virtual link sub\-mode
                            	**type**\:  :py:class:`VirtualLinks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks>`
                            
                            .. attribute:: stub
                            
                            	Specify area as a stub area.  Allowed only in non\-backbone areas
                            	**type**\: bool
                            
                            .. attribute:: packet_size
                            
                            	Limit size of OSPFv3 packets
                            	**type**\: int
                            
                            	**range:** 256..10000
                            
                            .. attribute:: instance
                            
                            	Instance ID
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: demand_circuit
                            
                            	Enable/disable demand circuit operation
                            	**type**\: bool
                            
                            .. attribute:: priority
                            
                            	Specify router priority
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: type7_translate_always
                            
                            	Translate Type 7 to Type 5, even if not elected NSSA translator
                            	**type**\: bool
                            
                            .. attribute:: prefix_suppression
                            
                            	Enable/disable prefix suppression on an interface
                            	**type**\: bool
                            
                            .. attribute:: enable
                            
                            	Enable OSPFv3 area
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: mtu_ignore
                            
                            	Enable/disable ignoring of MTU in DBD packets
                            	**type**\: bool
                            
                            .. attribute:: passive
                            
                            	Enable/disable routing updates on an interface
                            	**type**\: bool
                            
                            .. attribute:: hello_interval
                            
                            	Time between HELLO packets
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: dead_interval
                            
                            	Interval after which a neighbor is declared dead (in seconds)
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: default_cost
                            
                            	Set the summary default\-cost of a NSSA/stub area
                            	**type**\: int
                            
                            	**range:** 0..16777215
                            
                            .. attribute:: flood_reduction
                            
                            	Enable/disable flood reduction
                            	**type**\: bool
                            
                            .. attribute:: retransmit_interval
                            
                            	Specify the transmit interval in seconds
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: ldp_sync
                            
                            	Enable/Disable MPLS LDP sync
                            	**type**\: bool
                            
                            .. attribute:: network
                            
                            	Specify network type
                            	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                            
                            .. attribute:: transmit_delay
                            
                            	Specify the transmit delay in seconds
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            	**units**\: second
                            
                            .. attribute:: cost
                            
                            	Interface cost
                            	**type**\: int
                            
                            	**range:** 1..65535
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId, self).__init__()

                                self.yang_name = "area-area-id"
                                self.yang_parent_name = "area-addresses"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['area_id']
                                self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication)), ("bfd", ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd)), ("ranges", ("ranges", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges)), ("encryption", ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption)), ("nssa", ("nssa", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList)), ("interfaces", ("interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces)), ("area-scope", ("area_scope", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope)), ("sham-links", ("sham_links", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks)), ("virtual-links", ("virtual_links", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks))])
                                self._leafs = OrderedDict([
                                    ('area_id', (YLeaf(YType.uint32, 'area-id'), ['int'])),
                                    ('stub', (YLeaf(YType.boolean, 'stub'), ['bool'])),
                                    ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                                    ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                                    ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                                    ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                    ('type7_translate_always', (YLeaf(YType.boolean, 'type7-translate-always'), ['bool'])),
                                    ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                                    ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                    ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                                    ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                                    ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                    ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                    ('default_cost', (YLeaf(YType.uint32, 'default-cost'), ['int'])),
                                    ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                                    ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                    ('ldp_sync', (YLeaf(YType.boolean, 'ldp-sync'), ['bool'])),
                                    ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                                    ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                    ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                ])
                                self.area_id = None
                                self.stub = None
                                self.packet_size = None
                                self.instance = None
                                self.demand_circuit = None
                                self.priority = None
                                self.type7_translate_always = None
                                self.prefix_suppression = None
                                self.enable = None
                                self.mtu_ignore = None
                                self.passive = None
                                self.hello_interval = None
                                self.dead_interval = None
                                self.default_cost = None
                                self.flood_reduction = None
                                self.retransmit_interval = None
                                self.ldp_sync = None
                                self.network = None
                                self.transmit_delay = None
                                self.cost = None

                                self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication()
                                self.authentication.parent = self
                                self._children_name_map["authentication"] = "authentication"

                                self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd()
                                self.bfd.parent = self
                                self._children_name_map["bfd"] = "bfd"

                                self.ranges = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges()
                                self.ranges.parent = self
                                self._children_name_map["ranges"] = "ranges"

                                self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption()
                                self.encryption.parent = self
                                self._children_name_map["encryption"] = "encryption"

                                self.nssa = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa()
                                self.nssa.parent = self
                                self._children_name_map["nssa"] = "nssa"

                                self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter()
                                self.database_filter.parent = self
                                self._children_name_map["database_filter"] = "database-filter"

                                self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList()
                                self.distribute_list.parent = self
                                self._children_name_map["distribute_list"] = "distribute-list"

                                self.interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces()
                                self.interfaces.parent = self
                                self._children_name_map["interfaces"] = "interfaces"

                                self.area_scope = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope()
                                self.area_scope.parent = self
                                self._children_name_map["area_scope"] = "area-scope"

                                self.sham_links = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks()
                                self.sham_links.parent = self
                                self._children_name_map["sham_links"] = "sham-links"

                                self.virtual_links = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks()
                                self.virtual_links.parent = self
                                self._children_name_map["virtual_links"] = "virtual-links"
                                self._segment_path = lambda: "area-area-id" + "[area-id='" + str(self.area_id) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId, ['area_id', 'stub', 'packet_size', 'instance', 'demand_circuit', 'priority', 'type7_translate_always', 'prefix_suppression', 'enable', 'mtu_ignore', 'passive', 'hello_interval', 'dead_interval', 'default_cost', 'flood_reduction', 'retransmit_interval', 'ldp_sync', 'network', 'transmit_delay', 'cost'], name, value)


                            class Authentication(_Entity_):
                                """
                                Authenticate OSPFv3 packets
                                
                                .. attribute:: enable
                                
                                	Authenticate packets
                                	**type**\: bool
                                
                                .. attribute:: spi
                                
                                	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                	**type**\: int
                                
                                	**range:** 256..4294967295
                                
                                .. attribute:: algorithm
                                
                                	Use the MD5 or SHA1 algorithm
                                	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                
                                .. attribute:: password
                                
                                	Specify MD5 or SHA1 password
                                	**type**\: str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication, self).__init__()

                                    self.yang_name = "authentication"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                        ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                        ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                        ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                    ])
                                    self.enable = None
                                    self.spi = None
                                    self.algorithm = None
                                    self.password = None
                                    self._segment_path = lambda: "authentication"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Authentication']['meta_info']


                            class Bfd(_Entity_):
                                """
                                Configure BFD parameters
                                
                                .. attribute:: detection_multiplier
                                
                                	Detect multiplier
                                	**type**\: int
                                
                                	**range:** 2..50
                                
                                .. attribute:: interval
                                
                                	Hello interval in milli\-seconds
                                	**type**\: int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: fast_detect_mode
                                
                                	Enable or disable BFD fast detection
                                	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd, self).__init__()

                                    self.yang_name = "bfd"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                        ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                        ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                                    ])
                                    self.detection_multiplier = None
                                    self.interval = None
                                    self.fast_detect_mode = None
                                    self._segment_path = lambda: "bfd"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd, ['detection_multiplier', 'interval', 'fast_detect_mode'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Bfd']['meta_info']


                            class Ranges(_Entity_):
                                """
                                Range configuration
                                
                                .. attribute:: range
                                
                                	Summarize inter\-area routes matching prefix/length
                                	**type**\: list of  		 :py:class:`Range <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges.Range>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges, self).__init__()

                                    self.yang_name = "ranges"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("range", ("range", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges.Range))])
                                    self._leafs = OrderedDict()

                                    self.range = YList(self)
                                    self._segment_path = lambda: "ranges"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges, [], name, value)


                                class Range(_Entity_):
                                    """
                                    Summarize inter\-area routes matching
                                    prefix/length
                                    
                                    .. attribute:: prefix  (key)
                                    
                                    	IPv6 prefix format
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: prefix_length  (key)
                                    
                                    	IPV6 prefix length
                                    	**type**\: int
                                    
                                    	**range:** 0..128
                                    
                                    .. attribute:: not_advertise
                                    
                                    	Do not advertise address range
                                    	**type**\: bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: cost
                                    
                                    	Specified metric for this range
                                    	**type**\: int
                                    
                                    	**range:** 1..16777214
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges.Range, self).__init__()

                                        self.yang_name = "range"
                                        self.yang_parent_name = "ranges"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['prefix','prefix_length']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix', (YLeaf(YType.str, 'prefix'), ['str'])),
                                            ('prefix_length', (YLeaf(YType.uint8, 'prefix-length'), ['int'])),
                                            ('not_advertise', (YLeaf(YType.boolean, 'not-advertise'), ['bool'])),
                                            ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                        ])
                                        self.prefix = None
                                        self.prefix_length = None
                                        self.not_advertise = None
                                        self.cost = None
                                        self._segment_path = lambda: "range" + "[prefix='" + str(self.prefix) + "']" + "[prefix-length='" + str(self.prefix_length) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges.Range, ['prefix', 'prefix_length', 'not_advertise', 'cost'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges.Range']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Ranges']['meta_info']


                            class Encryption(_Entity_):
                                """
                                Encrypt and authenticate OSPFv3 packets
                                
                                .. attribute:: enable
                                
                                	Authenticate packets
                                	**type**\: bool
                                
                                .. attribute:: spi
                                
                                	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                	**type**\: int
                                
                                	**range:** 256..4294967295
                                
                                .. attribute:: encryption_algorithm
                                
                                	Specify the encryption algorithm
                                	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                
                                .. attribute:: encryption_password
                                
                                	Encryption password
                                	**type**\: str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                .. attribute:: authentication_algorithm
                                
                                	Use the NULL, MD5 or SHA1 algorithm
                                	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                
                                .. attribute:: authentication_password
                                
                                	Specify MD5 or SHA1 password
                                	**type**\: str
                                
                                	**pattern:** (!.+)\|([^!].+)
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption, self).__init__()

                                    self.yang_name = "encryption"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                        ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                        ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                        ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                        ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                        ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                    ])
                                    self.enable = None
                                    self.spi = None
                                    self.encryption_algorithm = None
                                    self.encryption_password = None
                                    self.authentication_algorithm = None
                                    self.authentication_password = None
                                    self._segment_path = lambda: "encryption"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Encryption']['meta_info']


                            class Nssa(_Entity_):
                                """
                                Specify area as a NSSA area.  Allowed only in
                                non\-backbone areas
                                
                                .. attribute:: no_redistribution
                                
                                	No redistribution into this NSSA area
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: default_info_originate
                                
                                	Originate Type 7 default into NSSA area
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: metric
                                
                                	Only valid with DefaultInfoOriginate
                                	**type**\: int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: metric_type
                                
                                	Only valid with DefaultInfoOriginate
                                	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: no_summary
                                
                                	Do not send summary LSA into NSSA
                                	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa, self).__init__()

                                    self.yang_name = "nssa"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('no_redistribution', (YLeaf(YType.boolean, 'no-redistribution'), ['bool'])),
                                        ('default_info_originate', (YLeaf(YType.boolean, 'default-info-originate'), ['bool'])),
                                        ('metric', (YLeaf(YType.uint32, 'metric'), ['int'])),
                                        ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                        ('no_summary', (YLeaf(YType.empty, 'no-summary'), ['Empty'])),
                                    ])
                                    self.no_redistribution = None
                                    self.default_info_originate = None
                                    self.metric = None
                                    self.metric_type = None
                                    self.no_summary = None
                                    self._segment_path = lambda: "nssa"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa, ['no_redistribution', 'default_info_originate', 'metric', 'metric_type', 'no_summary'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Nssa']['meta_info']


                            class DatabaseFilter(_Entity_):
                                """
                                Database filter
                                
                                .. attribute:: all
                                
                                	All
                                	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter, self).__init__()

                                    self.yang_name = "database-filter"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All))])
                                    self._leafs = OrderedDict()

                                    self.all = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All()
                                    self.all.parent = self
                                    self._children_name_map["all"] = "all"
                                    self._segment_path = lambda: "database-filter"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter, [], name, value)


                                class All(_Entity_):
                                    """
                                    All
                                    
                                    .. attribute:: out
                                    
                                    	Enable or disable database\-filter
                                    	**type**\: bool
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All, self).__init__()

                                        self.yang_name = "all"
                                        self.yang_parent_name = "database-filter"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('out', (YLeaf(YType.boolean, 'out'), ['bool'])),
                                        ])
                                        self.out = None
                                        self._segment_path = lambda: "all"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All, ['out'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter.All']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DatabaseFilter']['meta_info']


                            class DistributeList(_Entity_):
                                """
                                Filter prefixes to/from RIB
                                
                                .. attribute:: in_
                                
                                	Filter prefixes installed to RIB
                                	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList, self).__init__()

                                    self.yang_name = "distribute-list"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In))])
                                    self._leafs = OrderedDict()

                                    self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In()
                                    self.in_.parent = self
                                    self._children_name_map["in_"] = "in"
                                    self._segment_path = lambda: "distribute-list"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList, [], name, value)


                                class In(_Entity_):
                                    """
                                    Filter prefixes installed to RIB
                                    
                                    .. attribute:: prefix_list
                                    
                                    	Filter prefixes based on an IPv6 prefix\-list
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In, self).__init__()

                                        self.yang_name = "in"
                                        self.yang_parent_name = "distribute-list"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                        ])
                                        self.prefix_list = None
                                        self._segment_path = lambda: "in"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In, ['prefix_list'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList.In']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.DistributeList']['meta_info']


                            class Interfaces(_Entity_):
                                """
                                OSPFv3 interfaces
                                
                                .. attribute:: interface
                                
                                	OSPFv3 interface
                                	**type**\: list of  		 :py:class:`Interface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces, self).__init__()

                                    self.yang_name = "interfaces"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("interface", ("interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface))])
                                    self._leafs = OrderedDict()

                                    self.interface = YList(self)
                                    self._segment_path = lambda: "interfaces"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces, [], name, value)


                                class Interface(_Entity_):
                                    """
                                    OSPFv3 interface
                                    
                                    .. attribute:: interface_name  (key)
                                    
                                    	Interface to configure
                                    	**type**\: str
                                    
                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication>`
                                    
                                    .. attribute:: neighbors
                                    
                                    	Specify a neighbor router
                                    	**type**\:  :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption>`
                                    
                                    .. attribute:: bfd
                                    
                                    	Configure BFD parameters
                                    	**type**\:  :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd>`
                                    
                                    .. attribute:: database_filter
                                    
                                    	Database filter
                                    	**type**\:  :py:class:`DatabaseFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter>`
                                    
                                    .. attribute:: distribute_list
                                    
                                    	Filter prefixes to/from RIB
                                    	**type**\:  :py:class:`DistributeList <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enable OSPFv3 interface
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: flood_reduction
                                    
                                    	Enable/disable flood reduction
                                    	**type**\: bool
                                    
                                    .. attribute:: cost
                                    
                                    	Interface cost
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: instance
                                    
                                    	Instance ID
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: ldp_sync
                                    
                                    	Enable/Disable MPLS LDP sync
                                    	**type**\: bool
                                    
                                    .. attribute:: mtu_ignore
                                    
                                    	Enable/disable ignoring of MTU in DBD packets
                                    	**type**\: bool
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: passive
                                    
                                    	Enable/disable routing updates on an interface
                                    	**type**\: bool
                                    
                                    .. attribute:: packet_size
                                    
                                    	Limit size of OSPFv3 packets
                                    	**type**\: int
                                    
                                    	**range:** 256..10000
                                    
                                    .. attribute:: prefix_suppression
                                    
                                    	Enable/disable prefix suppression on an interface
                                    	**type**\: bool
                                    
                                    .. attribute:: priority
                                    
                                    	Specify router priority
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: network
                                    
                                    	Specify network type
                                    	**type**\:  :py:class:`Ospfv3Network <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Network>`
                                    
                                    .. attribute:: demand_circuit
                                    
                                    	Enable/disable demand circuit operation
                                    	**type**\: bool
                                    
                                    .. attribute:: fast_reroute
                                    
                                    	Fast\-reroute configuration
                                    	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface, self).__init__()

                                        self.yang_name = "interface"
                                        self.yang_parent_name = "interfaces"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['interface_name']
                                        self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication)), ("neighbors", ("neighbors", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors)), ("encryption", ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption)), ("bfd", ("bfd", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd)), ("database-filter", ("database_filter", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter)), ("distribute-list", ("distribute_list", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList)), ("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute))])
                                        self._leafs = OrderedDict([
                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                            ('flood_reduction', (YLeaf(YType.boolean, 'flood-reduction'), ['bool'])),
                                            ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                            ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                            ('instance', (YLeaf(YType.uint32, 'instance'), ['int'])),
                                            ('ldp_sync', (YLeaf(YType.boolean, 'ldp-sync'), ['bool'])),
                                            ('mtu_ignore', (YLeaf(YType.boolean, 'mtu-ignore'), ['bool'])),
                                            ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                            ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                            ('passive', (YLeaf(YType.boolean, 'passive'), ['bool'])),
                                            ('packet_size', (YLeaf(YType.uint32, 'packet-size'), ['int'])),
                                            ('prefix_suppression', (YLeaf(YType.boolean, 'prefix-suppression'), ['bool'])),
                                            ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                            ('network', (YLeaf(YType.enumeration, 'network'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Network', '')])),
                                            ('demand_circuit', (YLeaf(YType.boolean, 'demand-circuit'), ['bool'])),
                                        ])
                                        self.interface_name = None
                                        self.enable = None
                                        self.dead_interval = None
                                        self.flood_reduction = None
                                        self.cost = None
                                        self.transmit_delay = None
                                        self.instance = None
                                        self.ldp_sync = None
                                        self.mtu_ignore = None
                                        self.retransmit_interval = None
                                        self.hello_interval = None
                                        self.passive = None
                                        self.packet_size = None
                                        self.prefix_suppression = None
                                        self.priority = None
                                        self.network = None
                                        self.demand_circuit = None

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"

                                        self.neighbors = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors()
                                        self.neighbors.parent = self
                                        self._children_name_map["neighbors"] = "neighbors"

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"

                                        self.bfd = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd()
                                        self.bfd.parent = self
                                        self._children_name_map["bfd"] = "bfd"

                                        self.database_filter = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter()
                                        self.database_filter.parent = self
                                        self._children_name_map["database_filter"] = "database-filter"

                                        self.distribute_list = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList()
                                        self.distribute_list.parent = self
                                        self._children_name_map["distribute_list"] = "distribute-list"

                                        self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute()
                                        self.fast_reroute.parent = self
                                        self._children_name_map["fast_reroute"] = "fast-reroute"
                                        self._segment_path = lambda: "interface" + "[interface-name='" + str(self.interface_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface, ['interface_name', 'enable', 'dead_interval', 'flood_reduction', 'cost', 'transmit_delay', 'instance', 'ldp_sync', 'mtu_ignore', 'retransmit_interval', 'hello_interval', 'passive', 'packet_size', 'prefix_suppression', 'priority', 'network', 'demand_circuit'], name, value)


                                    class Authentication(_Entity_):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                                ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.algorithm = None
                                            self.password = None
                                            self._segment_path = lambda: "authentication"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Authentication']['meta_info']


                                    class Neighbors(_Entity_):
                                        """
                                        Specify a neighbor router
                                        
                                        .. attribute:: neighbor
                                        
                                        	IPv6 address
                                        	**type**\: list of  		 :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors, self).__init__()

                                            self.yang_name = "neighbors"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("neighbor", ("neighbor", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor))])
                                            self._leafs = OrderedDict()

                                            self.neighbor = YList(self)
                                            self._segment_path = lambda: "neighbors"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors, [], name, value)


                                        class Neighbor(_Entity_):
                                            """
                                            IPv6 address
                                            
                                            .. attribute:: neighbor_address  (key)
                                            
                                            	IPV6 address
                                            	**type**\: str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: priority
                                            
                                            	OSPFv3 priority of non\-broadcast neighbor
                                            	**type**\: int
                                            
                                            	**range:** 0..255
                                            
                                            .. attribute:: poll_interval
                                            
                                            	OSPFv3 dead\-router polling interval (in seconds)
                                            	**type**\: int
                                            
                                            	**range:** 0..65535
                                            
                                            	**units**\: second
                                            
                                            .. attribute:: cost
                                            
                                            	OSPFv3 cost for point\-to\-multipoint neighbor
                                            	**type**\: int
                                            
                                            	**range:** 1..65535
                                            
                                            .. attribute:: database_filter
                                            
                                            	Filter OSPFv3 LSA during synchronization and flooding for point\-to\-multipoint neighbor
                                            	**type**\: bool
                                            
                                            .. attribute:: zone
                                            
                                            	Zone
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor, self).__init__()

                                                self.yang_name = "neighbor"
                                                self.yang_parent_name = "neighbors"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = ['neighbor_address']
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('neighbor_address', (YLeaf(YType.str, 'neighbor-address'), ['str'])),
                                                    ('priority', (YLeaf(YType.uint32, 'priority'), ['int'])),
                                                    ('poll_interval', (YLeaf(YType.uint32, 'poll-interval'), ['int'])),
                                                    ('cost', (YLeaf(YType.uint32, 'cost'), ['int'])),
                                                    ('database_filter', (YLeaf(YType.boolean, 'database-filter'), ['bool'])),
                                                    ('zone', (YLeaf(YType.str, 'zone'), ['str'])),
                                                ])
                                                self.neighbor_address = None
                                                self.priority = None
                                                self.poll_interval = None
                                                self.cost = None
                                                self.database_filter = None
                                                self.zone = None
                                                self._segment_path = lambda: "neighbor" + "[neighbor-address='" + str(self.neighbor_address) + "']"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor, ['neighbor_address', 'priority', 'poll_interval', 'cost', 'database_filter', 'zone'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors.Neighbor']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Neighbors']['meta_info']


                                    class Encryption(_Entity_):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                                ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                                ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                                ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.encryption_algorithm = None
                                            self.encryption_password = None
                                            self.authentication_algorithm = None
                                            self.authentication_password = None
                                            self._segment_path = lambda: "encryption"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Encryption']['meta_info']


                                    class Bfd(_Entity_):
                                        """
                                        Configure BFD parameters
                                        
                                        .. attribute:: interval
                                        
                                        	Hello interval in milli\-seconds
                                        	**type**\: int
                                        
                                        	**range:** 3..30000
                                        
                                        	**units**\: millisecond
                                        
                                        .. attribute:: fast_detect_mode
                                        
                                        	Enable or disable BFD fast detection
                                        	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                                        
                                        .. attribute:: detection_multiplier
                                        
                                        	Detect multiplier
                                        	**type**\: int
                                        
                                        	**range:** 2..50
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd, self).__init__()

                                            self.yang_name = "bfd"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                                ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                                                ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                            ])
                                            self.interval = None
                                            self.fast_detect_mode = None
                                            self.detection_multiplier = None
                                            self._segment_path = lambda: "bfd"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd, ['interval', 'fast_detect_mode', 'detection_multiplier'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.Bfd']['meta_info']


                                    class DatabaseFilter(_Entity_):
                                        """
                                        Database filter
                                        
                                        .. attribute:: all
                                        
                                        	All
                                        	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter, self).__init__()

                                            self.yang_name = "database-filter"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All))])
                                            self._leafs = OrderedDict()

                                            self.all = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All()
                                            self.all.parent = self
                                            self._children_name_map["all"] = "all"
                                            self._segment_path = lambda: "database-filter"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter, [], name, value)


                                        class All(_Entity_):
                                            """
                                            All
                                            
                                            .. attribute:: out
                                            
                                            	Enable or disable database\-filter
                                            	**type**\: bool
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All, self).__init__()

                                                self.yang_name = "all"
                                                self.yang_parent_name = "database-filter"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('out', (YLeaf(YType.boolean, 'out'), ['bool'])),
                                                ])
                                                self.out = None
                                                self._segment_path = lambda: "all"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All, ['out'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter.All']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DatabaseFilter']['meta_info']


                                    class DistributeList(_Entity_):
                                        """
                                        Filter prefixes to/from RIB
                                        
                                        .. attribute:: in_
                                        
                                        	Filter prefixes installed to RIB
                                        	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList, self).__init__()

                                            self.yang_name = "distribute-list"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In))])
                                            self._leafs = OrderedDict()

                                            self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In()
                                            self.in_.parent = self
                                            self._children_name_map["in_"] = "in"
                                            self._segment_path = lambda: "distribute-list"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList, [], name, value)


                                        class In(_Entity_):
                                            """
                                            Filter prefixes installed to RIB
                                            
                                            .. attribute:: prefix_list
                                            
                                            	Filter prefixes based on an IPv6 prefix\-list
                                            	**type**\: str
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In, self).__init__()

                                                self.yang_name = "in"
                                                self.yang_parent_name = "distribute-list"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([])
                                                self._leafs = OrderedDict([
                                                    ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                                ])
                                                self.prefix_list = None
                                                self._segment_path = lambda: "in"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In, ['prefix_list'], name, value)

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList.In']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.DistributeList']['meta_info']


                                    class FastReroute(_Entity_):
                                        """
                                        Fast\-reroute configuration
                                        
                                        .. attribute:: per_link
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink>`
                                        
                                        .. attribute:: per_prefix
                                        
                                        	Fast\-reroute per\-link configuration
                                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix>`
                                        
                                        .. attribute:: fast_reroute_enable
                                        
                                        	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                        	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute, self).__init__()

                                            self.yang_name = "fast-reroute"
                                            self.yang_parent_name = "interface"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                                            ])
                                            self.fast_reroute_enable = None

                                            self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink()
                                            self.per_link.parent = self
                                            self._children_name_map["per_link"] = "per-link"

                                            self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix()
                                            self.per_prefix.parent = self
                                            self._children_name_map["per_prefix"] = "per-prefix"
                                            self._segment_path = lambda: "fast-reroute"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute, ['fast_reroute_enable'], name, value)


                                        class PerLink(_Entity_):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink, self).__init__()

                                                self.yang_name = "per-link"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces))])
                                                self._leafs = OrderedDict([
                                                    ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                                ])
                                                self.fast_reroute_use_candidate_only = None

                                                self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                                self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._segment_path = lambda: "per-link"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(_Entity_):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(_Entity_):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2018-05-14'

                                                    def __init__(self):
                                                        if sys.version_info > (3,):
                                                            super().__init__()
                                                        else:
                                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                        self._is_frozen = True

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(_Entity_):
                                                """
                                                Fast\-reroute per\-link/per\-prefix exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-link"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(_Entity_):
                                                    """
                                                    Exclude an interface from becoming a backup
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2018-05-14'

                                                    def __init__(self):
                                                        if sys.version_info > (3,):
                                                            super().__init__()
                                                        else:
                                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                        self._is_frozen = True

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerLink']['meta_info']


                                        class PerPrefix(_Entity_):
                                            """
                                            Fast\-reroute per\-link configuration
                                            
                                            .. attribute:: fast_reroute_use_candidate_only
                                            
                                            	Use only interfaces on the candidate list as a backup path
                                            	**type**\: bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: candidate_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                            	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces>`
                                            
                                            .. attribute:: exclude_interfaces
                                            
                                            	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                            	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix, self).__init__()

                                                self.yang_name = "per-prefix"
                                                self.yang_parent_name = "fast-reroute"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces))])
                                                self._leafs = OrderedDict([
                                                    ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                                ])
                                                self.fast_reroute_use_candidate_only = None

                                                self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces()
                                                self.candidate_interfaces.parent = self
                                                self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                                self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces()
                                                self.exclude_interfaces.parent = self
                                                self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                                self._segment_path = lambda: "per-prefix"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                            class CandidateInterfaces(_Entity_):
                                                """
                                                Fast\-reroute per\-link/per\-prefix candidate
                                                interface configuration
                                                
                                                .. attribute:: candidate_interface
                                                
                                                	Candidate backup interface
                                                	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                    self.yang_name = "candidate-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.candidate_interface = YList(self)
                                                    self._segment_path = lambda: "candidate-interfaces"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                                class CandidateInterface(_Entity_):
                                                    """
                                                    Candidate backup interface
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2018-05-14'

                                                    def __init__(self):
                                                        if sys.version_info > (3,):
                                                            super().__init__()
                                                        else:
                                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                        self.yang_name = "candidate-interface"
                                                        self.yang_parent_name = "candidate-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                        self._is_frozen = True

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                            class ExcludeInterfaces(_Entity_):
                                                """
                                                Fast\-reroute per\-link/per\-prefix exclude
                                                interface configuration
                                                
                                                .. attribute:: exclude_interface
                                                
                                                	Exclude an interface from becoming a backup
                                                	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                    self.yang_name = "exclude-interfaces"
                                                    self.yang_parent_name = "per-prefix"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = []
                                                    self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                    self._leafs = OrderedDict()

                                                    self.exclude_interface = YList(self)
                                                    self._segment_path = lambda: "exclude-interfaces"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                                class ExcludeInterface(_Entity_):
                                                    """
                                                    Exclude an interface from becoming a backup
                                                    
                                                    .. attribute:: interface_name  (key)
                                                    
                                                    	Interface
                                                    	**type**\: str
                                                    
                                                    	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                    
                                                    

                                                    """

                                                    _prefix = 'ipv6-ospfv3-cfg'
                                                    _revision = '2018-05-14'

                                                    def __init__(self):
                                                        if sys.version_info > (3,):
                                                            super().__init__()
                                                        else:
                                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                        self.yang_name = "exclude-interface"
                                                        self.yang_parent_name = "exclude-interfaces"
                                                        self.is_top_level_class = False
                                                        self.has_list_ancestor = True
                                                        self.ylist_key_names = ['interface_name']
                                                        self._child_classes = OrderedDict([])
                                                        self._leafs = OrderedDict([
                                                            ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                        ])
                                                        self.interface_name = None
                                                        self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                        self._is_frozen = True

                                                    def __setattr__(self, name, value):
                                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                    @staticmethod
                                                    def _meta_info():
                                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute.PerPrefix']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface.FastReroute']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces.Interface']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.Interfaces']['meta_info']


                            class AreaScope(_Entity_):
                                """
                                Area Scope Configuration
                                
                                .. attribute:: fast_reroute
                                
                                	Fast\-reroute configuration
                                	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope, self).__init__()

                                    self.yang_name = "area-scope"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute))])
                                    self._leafs = OrderedDict()

                                    self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute()
                                    self.fast_reroute.parent = self
                                    self._children_name_map["fast_reroute"] = "fast-reroute"
                                    self._segment_path = lambda: "area-scope"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope, [], name, value)


                                class FastReroute(_Entity_):
                                    """
                                    Fast\-reroute configuration
                                    
                                    .. attribute:: per_link
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink>`
                                    
                                    .. attribute:: per_prefix
                                    
                                    	Fast\-reroute per\-link configuration
                                    	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix>`
                                    
                                    .. attribute:: fast_reroute_enable
                                    
                                    	Enable/Disable Fast\-reroute per\-link or per\-prefix
                                    	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, self).__init__()

                                        self.yang_name = "fast-reroute"
                                        self.yang_parent_name = "area-scope"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix))])
                                        self._leafs = OrderedDict([
                                            ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                                        ])
                                        self.fast_reroute_enable = None

                                        self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink()
                                        self.per_link.parent = self
                                        self._children_name_map["per_link"] = "per-link"

                                        self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix()
                                        self.per_prefix.parent = self
                                        self._children_name_map["per_prefix"] = "per-prefix"
                                        self._segment_path = lambda: "fast-reroute"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute, ['fast_reroute_enable'], name, value)


                                    class PerLink(_Entity_):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, self).__init__()

                                            self.yang_name = "per-link"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                            self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._segment_path = lambda: "per-link"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(_Entity_):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-link"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(_Entity_):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerLink']['meta_info']


                                    class PerPrefix(_Entity_):
                                        """
                                        Fast\-reroute per\-link configuration
                                        
                                        .. attribute:: fast_reroute_use_candidate_only
                                        
                                        	Use only interfaces on the candidate list as a backup path
                                        	**type**\: bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: candidate_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                        	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                        
                                        .. attribute:: exclude_interfaces
                                        
                                        	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                        	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, self).__init__()

                                            self.yang_name = "per-prefix"
                                            self.yang_parent_name = "fast-reroute"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                            self._leafs = OrderedDict([
                                                ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                            ])
                                            self.fast_reroute_use_candidate_only = None

                                            self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces()
                                            self.candidate_interfaces.parent = self
                                            self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                            self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                            self.exclude_interfaces.parent = self
                                            self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                            self._segment_path = lambda: "per-prefix"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                        class CandidateInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix candidate
                                            interface configuration
                                            
                                            .. attribute:: candidate_interface
                                            
                                            	Candidate backup interface
                                            	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                                self.yang_name = "candidate-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                                self._leafs = OrderedDict()

                                                self.candidate_interface = YList(self)
                                                self._segment_path = lambda: "candidate-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                            class CandidateInterface(_Entity_):
                                                """
                                                Candidate backup interface
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                                    self.yang_name = "candidate-interface"
                                                    self.yang_parent_name = "candidate-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                        class ExcludeInterfaces(_Entity_):
                                            """
                                            Fast\-reroute per\-link/per\-prefix exclude
                                            interface configuration
                                            
                                            .. attribute:: exclude_interface
                                            
                                            	Exclude an interface from becoming a backup
                                            	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                            
                                            

                                            """

                                            _prefix = 'ipv6-ospfv3-cfg'
                                            _revision = '2018-05-14'

                                            def __init__(self):
                                                if sys.version_info > (3,):
                                                    super().__init__()
                                                else:
                                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                                self.yang_name = "exclude-interfaces"
                                                self.yang_parent_name = "per-prefix"
                                                self.is_top_level_class = False
                                                self.has_list_ancestor = True
                                                self.ylist_key_names = []
                                                self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                                self._leafs = OrderedDict()

                                                self.exclude_interface = YList(self)
                                                self._segment_path = lambda: "exclude-interfaces"
                                                self._is_frozen = True

                                            def __setattr__(self, name, value):
                                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                            class ExcludeInterface(_Entity_):
                                                """
                                                Exclude an interface from becoming a backup
                                                
                                                .. attribute:: interface_name  (key)
                                                
                                                	Interface
                                                	**type**\: str
                                                
                                                	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                                
                                                

                                                """

                                                _prefix = 'ipv6-ospfv3-cfg'
                                                _revision = '2018-05-14'

                                                def __init__(self):
                                                    if sys.version_info > (3,):
                                                        super().__init__()
                                                    else:
                                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                                    self.yang_name = "exclude-interface"
                                                    self.yang_parent_name = "exclude-interfaces"
                                                    self.is_top_level_class = False
                                                    self.has_list_ancestor = True
                                                    self.ylist_key_names = ['interface_name']
                                                    self._child_classes = OrderedDict([])
                                                    self._leafs = OrderedDict([
                                                        ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                                    ])
                                                    self.interface_name = None
                                                    self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                                    self._is_frozen = True

                                                def __setattr__(self, name, value):
                                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                                @staticmethod
                                                def _meta_info():
                                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute.PerPrefix']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope.FastReroute']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.AreaScope']['meta_info']


                            class ShamLinks(_Entity_):
                                """
                                Sham Link sub\-mode
                                
                                .. attribute:: sham_link
                                
                                	ShamLink local and remote endpoints
                                	**type**\: list of  		 :py:class:`ShamLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks, self).__init__()

                                    self.yang_name = "sham-links"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("sham-link", ("sham_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink))])
                                    self._leafs = OrderedDict()

                                    self.sham_link = YList(self)
                                    self._segment_path = lambda: "sham-links"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks, [], name, value)


                                class ShamLink(_Entity_):
                                    """
                                    ShamLink local and remote endpoints
                                    
                                    .. attribute:: source_address  (key)
                                    
                                    	Local sham\-link endpoint
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: destination_address  (key)
                                    
                                    	Remote sham\-link endpoint
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enable sham link
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink, self).__init__()

                                        self.yang_name = "sham-link"
                                        self.yang_parent_name = "sham-links"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['source_address','destination_address']
                                        self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication)), ("encryption", ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption))])
                                        self._leafs = OrderedDict([
                                            ('source_address', (YLeaf(YType.str, 'source-address'), ['str'])),
                                            ('destination_address', (YLeaf(YType.str, 'destination-address'), ['str'])),
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                            ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                            ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                            ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                        ])
                                        self.source_address = None
                                        self.destination_address = None
                                        self.enable = None
                                        self.hello_interval = None
                                        self.dead_interval = None
                                        self.retransmit_interval = None
                                        self.transmit_delay = None

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._segment_path = lambda: "sham-link" + "[source-address='" + str(self.source_address) + "']" + "[destination-address='" + str(self.destination_address) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink, ['source_address', 'destination_address', 'enable', 'hello_interval', 'dead_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(_Entity_):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "sham-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                                ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.algorithm = None
                                            self.password = None
                                            self._segment_path = lambda: "authentication"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Authentication']['meta_info']


                                    class Encryption(_Entity_):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "sham-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                                ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                                ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                                ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.encryption_algorithm = None
                                            self.encryption_password = None
                                            self.authentication_algorithm = None
                                            self.authentication_password = None
                                            self._segment_path = lambda: "encryption"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink.Encryption']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks.ShamLink']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.ShamLinks']['meta_info']


                            class VirtualLinks(_Entity_):
                                """
                                Virtual link sub\-mode
                                
                                .. attribute:: virtual_link
                                
                                	Router ID of virtual link neighbor
                                	**type**\: list of  		 :py:class:`VirtualLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks, self).__init__()

                                    self.yang_name = "virtual-links"
                                    self.yang_parent_name = "area-area-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("virtual-link", ("virtual_link", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink))])
                                    self._leafs = OrderedDict()

                                    self.virtual_link = YList(self)
                                    self._segment_path = lambda: "virtual-links"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks, [], name, value)


                                class VirtualLink(_Entity_):
                                    """
                                    Router ID of virtual link neighbor
                                    
                                    .. attribute:: virtual_link_address  (key)
                                    
                                    	Router ID of virtual link neighbor
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: authentication
                                    
                                    	Authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication>`
                                    
                                    .. attribute:: encryption
                                    
                                    	Encrypt and authenticate OSPFv3 packets
                                    	**type**\:  :py:class:`Encryption <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enabled virtual link
                                    	**type**\: :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: hello_interval
                                    
                                    	Time between HELLO packets
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: dead_interval
                                    
                                    	Interval after which a neighbor is declared dead (in seconds)
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: retransmit_interval
                                    
                                    	Specify the transmit interval in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: transmit_delay
                                    
                                    	Specify the transmit delay in seconds
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    	**units**\: second
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink, self).__init__()

                                        self.yang_name = "virtual-link"
                                        self.yang_parent_name = "virtual-links"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['virtual_link_address']
                                        self._child_classes = OrderedDict([("authentication", ("authentication", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication)), ("encryption", ("encryption", Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption))])
                                        self._leafs = OrderedDict([
                                            ('virtual_link_address', (YLeaf(YType.str, 'virtual-link-address'), ['str'])),
                                            ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                            ('hello_interval', (YLeaf(YType.uint32, 'hello-interval'), ['int'])),
                                            ('dead_interval', (YLeaf(YType.uint32, 'dead-interval'), ['int'])),
                                            ('retransmit_interval', (YLeaf(YType.uint32, 'retransmit-interval'), ['int'])),
                                            ('transmit_delay', (YLeaf(YType.uint32, 'transmit-delay'), ['int'])),
                                        ])
                                        self.virtual_link_address = None
                                        self.enable = None
                                        self.hello_interval = None
                                        self.dead_interval = None
                                        self.retransmit_interval = None
                                        self.transmit_delay = None

                                        self.authentication = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication()
                                        self.authentication.parent = self
                                        self._children_name_map["authentication"] = "authentication"

                                        self.encryption = Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption()
                                        self.encryption.parent = self
                                        self._children_name_map["encryption"] = "encryption"
                                        self._segment_path = lambda: "virtual-link" + "[virtual-link-address='" + str(self.virtual_link_address) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink, ['virtual_link_address', 'enable', 'hello_interval', 'dead_interval', 'retransmit_interval', 'transmit_delay'], name, value)


                                    class Authentication(_Entity_):
                                        """
                                        Authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: algorithm
                                        
                                        	Use the MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                                        
                                        .. attribute:: password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication, self).__init__()

                                            self.yang_name = "authentication"
                                            self.yang_parent_name = "virtual-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                                ('password', (YLeaf(YType.str, 'password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.algorithm = None
                                            self.password = None
                                            self._segment_path = lambda: "authentication"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Authentication']['meta_info']


                                    class Encryption(_Entity_):
                                        """
                                        Encrypt and authenticate OSPFv3 packets
                                        
                                        .. attribute:: enable
                                        
                                        	Authenticate packets
                                        	**type**\: bool
                                        
                                        .. attribute:: spi
                                        
                                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                                        	**type**\: int
                                        
                                        	**range:** 256..4294967295
                                        
                                        .. attribute:: encryption_algorithm
                                        
                                        	Specify the encryption algorithm
                                        	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                                        
                                        .. attribute:: encryption_password
                                        
                                        	Encryption password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        .. attribute:: authentication_algorithm
                                        
                                        	Use the NULL, MD5 or SHA1 algorithm
                                        	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                                        
                                        .. attribute:: authentication_password
                                        
                                        	Specify MD5 or SHA1 password
                                        	**type**\: str
                                        
                                        	**pattern:** (!.+)\|([^!].+)
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption, self).__init__()

                                            self.yang_name = "encryption"
                                            self.yang_parent_name = "virtual-link"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                                ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                                ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                                ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                                ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                                            ])
                                            self.enable = None
                                            self.spi = None
                                            self.encryption_algorithm = None
                                            self.encryption_password = None
                                            self.authentication_algorithm = None
                                            self.authentication_password = None
                                            self._segment_path = lambda: "encryption"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink.Encryption']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks.VirtualLink']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId.VirtualLinks']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses.AreaAreaId']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AreaAddresses']['meta_info']


                    class Timers(_Entity_):
                        """
                        Adjust routing timers
                        
                        .. attribute:: pacing
                        
                        	Pacing timers
                        	**type**\:  :py:class:`Pacing <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing>`
                        
                        .. attribute:: lsa_timers
                        
                        	LSA timers
                        	**type**\:  :py:class:`LsaTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers>`
                        
                        .. attribute:: throttle
                        
                        	Throttle timers
                        	**type**\:  :py:class:`Throttle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers, self).__init__()

                            self.yang_name = "timers"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("pacing", ("pacing", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing)), ("lsa-timers", ("lsa_timers", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers)), ("throttle", ("throttle", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle))])
                            self._leafs = OrderedDict()

                            self.pacing = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing()
                            self.pacing.parent = self
                            self._children_name_map["pacing"] = "pacing"

                            self.lsa_timers = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers()
                            self.lsa_timers.parent = self
                            self._children_name_map["lsa_timers"] = "lsa-timers"

                            self.throttle = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle()
                            self.throttle.parent = self
                            self._children_name_map["throttle"] = "throttle"
                            self._segment_path = lambda: "timers"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers, [], name, value)


                        class Pacing(_Entity_):
                            """
                            Pacing timers
                            
                            .. attribute:: flood
                            
                            	The minimum interval in milliseconds to pace limit flooding on interface
                            	**type**\: int
                            
                            	**range:** 5..100
                            
                            	**units**\: millisecond
                            
                            .. attribute:: retransmission
                            
                            	The minimum interval in msec between neighbor retransmissions
                            	**type**\: int
                            
                            	**range:** 5..100
                            
                            .. attribute:: lsa_group
                            
                            	Interval in seconds at which LSAs are grouped and refreshed, checksummed, or aged
                            	**type**\: int
                            
                            	**range:** 10..1800
                            
                            	**units**\: second
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing, self).__init__()

                                self.yang_name = "pacing"
                                self.yang_parent_name = "timers"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('flood', (YLeaf(YType.uint32, 'flood'), ['int'])),
                                    ('retransmission', (YLeaf(YType.uint32, 'retransmission'), ['int'])),
                                    ('lsa_group', (YLeaf(YType.uint32, 'lsa-group'), ['int'])),
                                ])
                                self.flood = None
                                self.retransmission = None
                                self.lsa_group = None
                                self._segment_path = lambda: "pacing"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing, ['flood', 'retransmission', 'lsa_group'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Pacing']['meta_info']


                        class LsaTimers(_Entity_):
                            """
                            LSA timers
                            
                            .. attribute:: arrival
                            
                            	The minimum interval in milliseconds between accepting the same LSA
                            	**type**\: int
                            
                            	**range:** 0..60000
                            
                            	**units**\: millisecond
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers, self).__init__()

                                self.yang_name = "lsa-timers"
                                self.yang_parent_name = "timers"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('arrival', (YLeaf(YType.uint32, 'arrival'), ['int'])),
                                ])
                                self.arrival = None
                                self._segment_path = lambda: "lsa-timers"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers, ['arrival'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Timers.LsaTimers']['meta_info']


                        class Throttle(_Entity_):
                            """
                            Throttle timers
                            
                            .. attribute:: lsa
                            
                            	LSA throttle timers for all types of OSPF LSAs
                            	**type**\:  :py:class:`Lsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa>`
                            
                            .. attribute:: spf
                            
                            	SPF throttle timers
                            	**type**\:  :py:class:`Spf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle, self).__init__()

                                self.yang_name = "throttle"
                                self.yang_parent_name = "timers"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("lsa", ("lsa", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa)), ("spf", ("spf", Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf))])
                                self._leafs = OrderedDict()

                                self.lsa = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa()
                                self.lsa.parent = self
                                self._children_name_map["lsa"] = "lsa"

                                self.spf = Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf()
                                self.spf.parent = self
                                self._children_name_map["spf"] = "spf"
                                self._segment_path = lambda: "throttle"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle, [], name, value)


                            class Lsa(_Entity_):
                                """
                                LSA throttle timers for all types of OSPF LSAs
                                
                                .. attribute:: first_delay
                                
                                	Delay to generate first occurrence of LSA in milliseconds
                                	**type**\: int
                                
                                	**range:** 0..600000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: minimum_delay
                                
                                	Minimum delay between originating the same LSA in milliseconds
                                	**type**\: int
                                
                                	**range:** 1..600000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: maximum_delay
                                
                                	Maximum delay between originating the same LSA in milliseconds
                                	**type**\: int
                                
                                	**range:** 1..600000
                                
                                	**units**\: millisecond
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa, self).__init__()

                                    self.yang_name = "lsa"
                                    self.yang_parent_name = "throttle"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('first_delay', (YLeaf(YType.uint32, 'first-delay'), ['int'])),
                                        ('minimum_delay', (YLeaf(YType.uint32, 'minimum-delay'), ['int'])),
                                        ('maximum_delay', (YLeaf(YType.uint32, 'maximum-delay'), ['int'])),
                                    ])
                                    self.first_delay = None
                                    self.minimum_delay = None
                                    self.maximum_delay = None
                                    self._segment_path = lambda: "lsa"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa, ['first_delay', 'minimum_delay', 'maximum_delay'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Lsa']['meta_info']


                            class Spf(_Entity_):
                                """
                                SPF throttle timers
                                
                                .. attribute:: first_delay
                                
                                	Initial delay between receiving a change and starting SPF in ms
                                	**type**\: int
                                
                                	**range:** 1..600000
                                
                                .. attribute:: minimum_delay
                                
                                	Minimum hold time between consecutive SPF calculations in ms
                                	**type**\: int
                                
                                	**range:** 1..600000
                                
                                .. attribute:: maximum_delay
                                
                                	Maximum wait time between consecutive SPF calculations in ms
                                	**type**\: int
                                
                                	**range:** 1..600000
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf, self).__init__()

                                    self.yang_name = "spf"
                                    self.yang_parent_name = "throttle"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('first_delay', (YLeaf(YType.uint32, 'first-delay'), ['int'])),
                                        ('minimum_delay', (YLeaf(YType.uint32, 'minimum-delay'), ['int'])),
                                        ('maximum_delay', (YLeaf(YType.uint32, 'maximum-delay'), ['int'])),
                                    ])
                                    self.first_delay = None
                                    self.minimum_delay = None
                                    self.maximum_delay = None
                                    self._segment_path = lambda: "spf"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf, ['first_delay', 'minimum_delay', 'maximum_delay'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle.Spf']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Timers.Throttle']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Timers']['meta_info']


                    class SummaryPrefixes(_Entity_):
                        """
                        Summarize redistributed routes matching
                        prefix/length
                        
                        .. attribute:: summary_prefix
                        
                        	IPv6 address
                        	**type**\: list of  		 :py:class:`SummaryPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefix>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes, self).__init__()

                            self.yang_name = "summary-prefixes"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("summary-prefix", ("summary_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefix))])
                            self._leafs = OrderedDict()

                            self.summary_prefix = YList(self)
                            self._segment_path = lambda: "summary-prefixes"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes, [], name, value)


                        class SummaryPrefix(_Entity_):
                            """
                            IPv6 address
                            
                            .. attribute:: prefix  (key)
                            
                            	IPv6 prefix string format
                            	**type**\: str
                            
                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                            
                            .. attribute:: prefix_length  (key)
                            
                            	IPV6 prefix length
                            	**type**\: int
                            
                            	**range:** 0..128
                            
                            .. attribute:: not_advertise
                            
                            	Suppress routes matching prefix/length
                            	**type**\: bool
                            
                            .. attribute:: tag
                            
                            	Tag
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefix, self).__init__()

                                self.yang_name = "summary-prefix"
                                self.yang_parent_name = "summary-prefixes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['prefix','prefix_length']
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('prefix', (YLeaf(YType.str, 'prefix'), ['str'])),
                                    ('prefix_length', (YLeaf(YType.uint8, 'prefix-length'), ['int'])),
                                    ('not_advertise', (YLeaf(YType.boolean, 'not-advertise'), ['bool'])),
                                    ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                ])
                                self.prefix = None
                                self.prefix_length = None
                                self.not_advertise = None
                                self.tag = None
                                self._segment_path = lambda: "summary-prefix" + "[prefix='" + str(self.prefix) + "']" + "[prefix-length='" + str(self.prefix_length) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefix, ['prefix', 'prefix_length', 'not_advertise', 'tag'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes.SummaryPrefix']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.SummaryPrefixes']['meta_info']


                    class Snmp(_Entity_):
                        """
                        SNMP configuration
                        
                        .. attribute:: trap_rate_limit
                        
                        	SNMP trap rate configuration
                        	**type**\:  :py:class:`TrapRateLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit>`
                        
                        .. attribute:: context
                        
                        	SNMP context configuration
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Snmp, self).__init__()

                            self.yang_name = "snmp"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("trap-rate-limit", ("trap_rate_limit", Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit))])
                            self._leafs = OrderedDict([
                                ('context', (YLeaf(YType.str, 'context'), ['str'])),
                            ])
                            self.context = None

                            self.trap_rate_limit = Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit()
                            self.trap_rate_limit.parent = self
                            self._children_name_map["trap_rate_limit"] = "trap-rate-limit"
                            self._segment_path = lambda: "snmp"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Snmp, ['context'], name, value)


                        class TrapRateLimit(_Entity_):
                            """
                            SNMP trap rate configuration
                            
                            .. attribute:: window_size
                            
                            	Trap rate limit sliding window size
                            	**type**\: int
                            
                            	**range:** 2..60
                            
                            .. attribute:: max_window_traps
                            
                            	Max number of traps sent in window time
                            	**type**\: int
                            
                            	**range:** 0..300
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit, self).__init__()

                                self.yang_name = "trap-rate-limit"
                                self.yang_parent_name = "snmp"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('window_size', (YLeaf(YType.uint32, 'window-size'), ['int'])),
                                    ('max_window_traps', (YLeaf(YType.uint32, 'max-window-traps'), ['int'])),
                                ])
                                self.window_size = None
                                self.max_window_traps = None
                                self._segment_path = lambda: "trap-rate-limit"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit, ['window_size', 'max_window_traps'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Snmp.TrapRateLimit']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Snmp']['meta_info']


                    class FastReroute(_Entity_):
                        """
                        Fast\-reroute instance scoped parameters
                        
                        .. attribute:: per_link
                        
                        	Fast\-reroute per\-link global configuration
                        	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink>`
                        
                        .. attribute:: per_prefix
                        
                        	Fast\-reroute per\-prefix global configuration
                        	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute, self).__init__()

                            self.yang_name = "fast-reroute"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix))])
                            self._leafs = OrderedDict()

                            self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink()
                            self.per_link.parent = self
                            self._children_name_map["per_link"] = "per-link"

                            self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix()
                            self.per_prefix.parent = self
                            self._children_name_map["per_prefix"] = "per-prefix"
                            self._segment_path = lambda: "fast-reroute"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute, [], name, value)


                        class PerLink(_Entity_):
                            """
                            Fast\-reroute per\-link global configuration
                            
                            .. attribute:: priority
                            
                            	Fast\-reroute per\-link/per\-prefix priority\-limit command
                            	**type**\:  :py:class:`Ospfv3FastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroutePriority>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink, self).__init__()

                                self.yang_name = "per-link"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('priority', (YLeaf(YType.enumeration, 'priority'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroutePriority', '')])),
                                ])
                                self.priority = None
                                self._segment_path = lambda: "per-link"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink, ['priority'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerLink']['meta_info']


                        class PerPrefix(_Entity_):
                            """
                            Fast\-reroute per\-prefix global configuration
                            
                            .. attribute:: tiebreakers
                            
                            	Fast\-reroute tiebreakers configurations
                            	**type**\:  :py:class:`Tiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers>`
                            
                            .. attribute:: load_sharing_disable
                            
                            	Disable load sharing between multiple backups
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: priority
                            
                            	Fast\-reroute per\-link/per\-prefix priority\-limit command
                            	**type**\:  :py:class:`Ospfv3FastReroutePriority <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroutePriority>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix, self).__init__()

                                self.yang_name = "per-prefix"
                                self.yang_parent_name = "fast-reroute"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("tiebreakers", ("tiebreakers", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers))])
                                self._leafs = OrderedDict([
                                    ('load_sharing_disable', (YLeaf(YType.empty, 'load-sharing-disable'), ['Empty'])),
                                    ('priority', (YLeaf(YType.enumeration, 'priority'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroutePriority', '')])),
                                ])
                                self.load_sharing_disable = None
                                self.priority = None

                                self.tiebreakers = Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers()
                                self.tiebreakers.parent = self
                                self._children_name_map["tiebreakers"] = "tiebreakers"
                                self._segment_path = lambda: "per-prefix"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix, ['load_sharing_disable', 'priority'], name, value)


                            class Tiebreakers(_Entity_):
                                """
                                Fast\-reroute tiebreakers configurations
                                
                                .. attribute:: tiebreaker
                                
                                	Fast\-reroute tiebreakers configuration
                                	**type**\: list of  		 :py:class:`Tiebreaker <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers, self).__init__()

                                    self.yang_name = "tiebreakers"
                                    self.yang_parent_name = "per-prefix"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("tiebreaker", ("tiebreaker", Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker))])
                                    self._leafs = OrderedDict()

                                    self.tiebreaker = YList(self)
                                    self._segment_path = lambda: "tiebreakers"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers, [], name, value)


                                class Tiebreaker(_Entity_):
                                    """
                                    Fast\-reroute tiebreakers configuration
                                    
                                    .. attribute:: tiebreaker_type  (key)
                                    
                                    	Tiebreaker type
                                    	**type**\:  :py:class:`Ospfv3FastRerouteTiebreakers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastRerouteTiebreakers>`
                                    
                                    .. attribute:: tiebreaker_index
                                    
                                    	Index value for a tiebreaker
                                    	**type**\: int
                                    
                                    	**range:** 1..255
                                    
                                    	**mandatory**\: True
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, self).__init__()

                                        self.yang_name = "tiebreaker"
                                        self.yang_parent_name = "tiebreakers"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['tiebreaker_type']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('tiebreaker_type', (YLeaf(YType.enumeration, 'tiebreaker-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastRerouteTiebreakers', '')])),
                                            ('tiebreaker_index', (YLeaf(YType.uint32, 'tiebreaker-index'), ['int'])),
                                        ])
                                        self.tiebreaker_type = None
                                        self.tiebreaker_index = None
                                        self._segment_path = lambda: "tiebreaker" + "[tiebreaker-type='" + str(self.tiebreaker_type) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker, ['tiebreaker_type', 'tiebreaker_index'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers.Tiebreaker']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix.Tiebreakers']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute.PerPrefix']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.FastReroute']['meta_info']


                    class Distance(_Entity_):
                        """
                        Define an administrative distance
                        
                        .. attribute:: ospfv3
                        
                        	OSPFv3 administrative distance
                        	**type**\:  :py:class:`Ospfv3_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3_>`
                        
                        .. attribute:: administrative
                        
                        	Define an administrative distance
                        	**type**\: int
                        
                        	**range:** 1..255
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Distance, self).__init__()

                            self.yang_name = "distance"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("ospfv3", ("ospfv3", Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3_))])
                            self._leafs = OrderedDict([
                                ('administrative', (YLeaf(YType.uint32, 'administrative'), ['int'])),
                            ])
                            self.administrative = None

                            self.ospfv3 = Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3_()
                            self.ospfv3.parent = self
                            self._children_name_map["ospfv3"] = "ospfv3"
                            self._segment_path = lambda: "distance"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Distance, ['administrative'], name, value)


                        class Ospfv3_(_Entity_):
                            """
                            OSPFv3 administrative distance
                            
                            .. attribute:: intra_area
                            
                            	Distance for intra\-area routes
                            	**type**\: int
                            
                            	**range:** 1..255
                            
                            .. attribute:: inter_area
                            
                            	Distance for inter\-area routes
                            	**type**\: int
                            
                            	**range:** 1..255
                            
                            .. attribute:: external
                            
                            	Distance for external type 5 and type 7 routes
                            	**type**\: int
                            
                            	**range:** 1..255
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3_, self).__init__()

                                self.yang_name = "ospfv3"
                                self.yang_parent_name = "distance"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('intra_area', (YLeaf(YType.uint32, 'intra-area'), ['int'])),
                                    ('inter_area', (YLeaf(YType.uint32, 'inter-area'), ['int'])),
                                    ('external', (YLeaf(YType.uint32, 'external'), ['int'])),
                                ])
                                self.intra_area = None
                                self.inter_area = None
                                self.external = None
                                self._segment_path = lambda: "ospfv3"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3_, ['intra_area', 'inter_area', 'external'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Distance.Ospfv3_']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Distance']['meta_info']


                    class Maximum(_Entity_):
                        """
                        Set OSPFv3 limits
                        
                        .. attribute:: redistributed_prefixes
                        
                        	Limit number of redistributed prefixes
                        	**type**\:  :py:class:`RedistributedPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes>`
                        
                        .. attribute:: interfaces
                        
                        	Specify maximum number of interfaces
                        	**type**\: int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: paths
                        
                        	Specify maximum number of paths per route
                        	**type**\: int
                        
                        	**range:** 1..64
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Maximum, self).__init__()

                            self.yang_name = "maximum"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("redistributed-prefixes", ("redistributed_prefixes", Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes))])
                            self._leafs = OrderedDict([
                                ('interfaces', (YLeaf(YType.uint32, 'interfaces'), ['int'])),
                                ('paths', (YLeaf(YType.uint32, 'paths'), ['int'])),
                            ])
                            self.interfaces = None
                            self.paths = None

                            self.redistributed_prefixes = Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes()
                            self.redistributed_prefixes.parent = self
                            self._children_name_map["redistributed_prefixes"] = "redistributed-prefixes"
                            self._segment_path = lambda: "maximum"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Maximum, ['interfaces', 'paths'], name, value)


                        class RedistributedPrefixes(_Entity_):
                            """
                            Limit number of redistributed prefixes
                            
                            .. attribute:: prefixes
                            
                            	Maximum number of prefixes redistributed to protocol
                            	**type**\: int
                            
                            	**range:** 1..4294967295
                            
                            .. attribute:: threshold
                            
                            	Threshold value (%) at which to generate a warning message
                            	**type**\: int
                            
                            	**range:** 1..100
                            
                            .. attribute:: warning_only
                            
                            	Only give warning message when limit is exceeded
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes, self).__init__()

                                self.yang_name = "redistributed-prefixes"
                                self.yang_parent_name = "maximum"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('prefixes', (YLeaf(YType.uint32, 'prefixes'), ['int'])),
                                    ('threshold', (YLeaf(YType.uint32, 'threshold'), ['int'])),
                                    ('warning_only', (YLeaf(YType.empty, 'warning-only'), ['Empty'])),
                                ])
                                self.prefixes = None
                                self.threshold = None
                                self.warning_only = None
                                self._segment_path = lambda: "redistributed-prefixes"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes, ['prefixes', 'threshold', 'warning_only'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Maximum.RedistributedPrefixes']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Maximum']['meta_info']


                    class Redistributes(_Entity_):
                        """
                        Redistribute information from another routing
                        protocol
                        
                        .. attribute:: redistribute
                        
                        	Redistribute information from another routing protocol
                        	**type**\: list of  		 :py:class:`Redistribute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes, self).__init__()

                            self.yang_name = "redistributes"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("redistribute", ("redistribute", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute))])
                            self._leafs = OrderedDict()

                            self.redistribute = YList(self)
                            self._segment_path = lambda: "redistributes"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes, [], name, value)


                        class Redistribute(_Entity_):
                            """
                            Redistribute information from another routing
                            protocol
                            
                            .. attribute:: protocol_name  (key)
                            
                            	Protocol
                            	**type**\:  :py:class:`Ospfv3ProtocolType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ProtocolType2>`
                            
                            .. attribute:: connected_or_static_or_subscriber_or_mobile
                            
                            	connected or static or subscriber or mobile
                            	**type**\:  :py:class:`ConnectedOrStaticOrSubscriberOrMobile <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile>`
                            
                            	**presence node**\: True
                            
                            .. attribute:: bgp
                            
                            	bgp
                            	**type**\: list of  		 :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Bgp>`
                            
                            .. attribute:: ospfv3_or_isis_or_application
                            
                            	ospfv3 or isis or application
                            	**type**\: list of  		 :py:class:`Ospfv3OrIsisOrApplication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication>`
                            
                            .. attribute:: eigrp
                            
                            	eigrp
                            	**type**\: list of  		 :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Eigrp>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute, self).__init__()

                                self.yang_name = "redistribute"
                                self.yang_parent_name = "redistributes"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = ['protocol_name']
                                self._child_classes = OrderedDict([("connected-or-static-or-subscriber-or-mobile", ("connected_or_static_or_subscriber_or_mobile", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile)), ("bgp", ("bgp", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Bgp)), ("ospfv3-or-isis-or-application", ("ospfv3_or_isis_or_application", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication)), ("eigrp", ("eigrp", Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Eigrp))])
                                self._leafs = OrderedDict([
                                    ('protocol_name', (YLeaf(YType.enumeration, 'protocol-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ProtocolType2', '')])),
                                ])
                                self.protocol_name = None

                                self.connected_or_static_or_subscriber_or_mobile = None
                                self._children_name_map["connected_or_static_or_subscriber_or_mobile"] = "connected-or-static-or-subscriber-or-mobile"

                                self.bgp = YList(self)
                                self.ospfv3_or_isis_or_application = YList(self)
                                self.eigrp = YList(self)
                                self._segment_path = lambda: "redistribute" + "[protocol-name='" + str(self.protocol_name) + "']"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute, ['protocol_name'], name, value)


                            class ConnectedOrStaticOrSubscriberOrMobile(_Entity_):
                                """
                                connected or static or subscriber or mobile
                                
                                .. attribute:: internal_route_type
                                
                                	Redistribute OSPFv3 routes
                                	**type**\:  :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                                
                                .. attribute:: default_metric
                                
                                	OSPFv3 default metric
                                	**type**\: int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: metric_type
                                
                                	OSPFv3 exterior metric type for redistributed routes
                                	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: tag
                                
                                	Tag for routes redistributed into OSPFv3
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: route_policy_name
                                
                                	Route policy to redistribution
                                	**type**\: str
                                
                                .. attribute:: external_route_type
                                
                                	Redistribute OSPFv3 external routes
                                	**type**\:  :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                                
                                .. attribute:: nssa_external_route_type
                                
                                	Redistribute OSPFv3 NSSA external routes
                                	**type**\:  :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                                
                                .. attribute:: redistribute_route
                                
                                	Redistribution of OSPFv3 routes
                                	**type**\: bool
                                
                                .. attribute:: isis_route_type
                                
                                	ISIS route type
                                	**type**\:  :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:  :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                                
                                .. attribute:: preserve_med
                                
                                	Preserve (Multi\-Exit Discriminator) of BGP routes
                                	**type**\: bool
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type ofBGP Default Route
                                	**type**\: bool
                                
                                .. attribute:: use_rib_metric
                                
                                	Use metric from RIB for redistributed routes
                                	**type**\: bool
                                
                                

                                This class is a :ref:`presence class<presence-class>`

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile, self).__init__()

                                    self.yang_name = "connected-or-static-or-subscriber-or-mobile"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self.is_presence_container = True
                                    self._leafs = OrderedDict([
                                        ('internal_route_type', (YLeaf(YType.enumeration, 'internal-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3InternalRoute', '')])),
                                        ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                        ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                        ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                        ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                        ('external_route_type', (YLeaf(YType.enumeration, 'external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ExternalRoute', '')])),
                                        ('nssa_external_route_type', (YLeaf(YType.enumeration, 'nssa-external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3nssaExternalRoute', '')])),
                                        ('redistribute_route', (YLeaf(YType.boolean, 'redistribute-route'), ['bool'])),
                                        ('isis_route_type', (YLeaf(YType.enumeration, 'isis-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3isisRoute', '')])),
                                        ('eigrp_route_type', (YLeaf(YType.enumeration, 'eigrp-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EigrpRoute', '')])),
                                        ('preserve_med', (YLeaf(YType.boolean, 'preserve-med'), ['bool'])),
                                        ('bgp_preserve_default_info', (YLeaf(YType.boolean, 'bgp-preserve-default-info'), ['bool'])),
                                        ('use_rib_metric', (YLeaf(YType.boolean, 'use-rib-metric'), ['bool'])),
                                    ])
                                    self.internal_route_type = None
                                    self.default_metric = None
                                    self.metric_type = None
                                    self.tag = None
                                    self.route_policy_name = None
                                    self.external_route_type = None
                                    self.nssa_external_route_type = None
                                    self.redistribute_route = None
                                    self.isis_route_type = None
                                    self.eigrp_route_type = None
                                    self.preserve_med = None
                                    self.bgp_preserve_default_info = None
                                    self.use_rib_metric = None
                                    self._segment_path = lambda: "connected-or-static-or-subscriber-or-mobile"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile, ['internal_route_type', 'default_metric', 'metric_type', 'tag', 'route_policy_name', 'external_route_type', 'nssa_external_route_type', 'redistribute_route', 'isis_route_type', 'eigrp_route_type', 'preserve_med', 'bgp_preserve_default_info', 'use_rib_metric'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.ConnectedOrStaticOrSubscriberOrMobile']['meta_info']


                            class Bgp(_Entity_):
                                """
                                bgp
                                
                                .. attribute:: as_xx  (key)
                                
                                	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: as_yy  (key)
                                
                                	4\-byte AS number in asdot (X.Y) format \- second half (Y), or 2\-byte AS number, or 4\-byte AS number in asplain format
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: internal_route_type
                                
                                	Redistribute OSPFv3 routes
                                	**type**\:  :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                                
                                .. attribute:: default_metric
                                
                                	OSPFv3 default metric
                                	**type**\: int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: metric_type
                                
                                	OSPFv3 exterior metric type for redistributed routes
                                	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: tag
                                
                                	Tag for routes redistributed into OSPFv3
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: route_policy_name
                                
                                	Route policy to redistribution
                                	**type**\: str
                                
                                .. attribute:: external_route_type
                                
                                	Redistribute OSPFv3 external routes
                                	**type**\:  :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                                
                                .. attribute:: nssa_external_route_type
                                
                                	Redistribute OSPFv3 NSSA external routes
                                	**type**\:  :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                                
                                .. attribute:: redistribute_route
                                
                                	Redistribution of OSPFv3 routes
                                	**type**\: bool
                                
                                .. attribute:: isis_route_type
                                
                                	ISIS route type
                                	**type**\:  :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:  :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                                
                                .. attribute:: preserve_med
                                
                                	Preserve (Multi\-Exit Discriminator) of BGP routes
                                	**type**\: bool
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type ofBGP Default Route
                                	**type**\: bool
                                
                                .. attribute:: use_rib_metric
                                
                                	Use metric from RIB for redistributed routes
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Bgp, self).__init__()

                                    self.yang_name = "bgp"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['as_xx','as_yy']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                        ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                        ('internal_route_type', (YLeaf(YType.enumeration, 'internal-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3InternalRoute', '')])),
                                        ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                        ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                        ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                        ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                        ('external_route_type', (YLeaf(YType.enumeration, 'external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ExternalRoute', '')])),
                                        ('nssa_external_route_type', (YLeaf(YType.enumeration, 'nssa-external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3nssaExternalRoute', '')])),
                                        ('redistribute_route', (YLeaf(YType.boolean, 'redistribute-route'), ['bool'])),
                                        ('isis_route_type', (YLeaf(YType.enumeration, 'isis-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3isisRoute', '')])),
                                        ('eigrp_route_type', (YLeaf(YType.enumeration, 'eigrp-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EigrpRoute', '')])),
                                        ('preserve_med', (YLeaf(YType.boolean, 'preserve-med'), ['bool'])),
                                        ('bgp_preserve_default_info', (YLeaf(YType.boolean, 'bgp-preserve-default-info'), ['bool'])),
                                        ('use_rib_metric', (YLeaf(YType.boolean, 'use-rib-metric'), ['bool'])),
                                    ])
                                    self.as_xx = None
                                    self.as_yy = None
                                    self.internal_route_type = None
                                    self.default_metric = None
                                    self.metric_type = None
                                    self.tag = None
                                    self.route_policy_name = None
                                    self.external_route_type = None
                                    self.nssa_external_route_type = None
                                    self.redistribute_route = None
                                    self.isis_route_type = None
                                    self.eigrp_route_type = None
                                    self.preserve_med = None
                                    self.bgp_preserve_default_info = None
                                    self.use_rib_metric = None
                                    self._segment_path = lambda: "bgp" + "[as-xx='" + str(self.as_xx) + "']" + "[as-yy='" + str(self.as_yy) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Bgp, ['as_xx', 'as_yy', 'internal_route_type', 'default_metric', 'metric_type', 'tag', 'route_policy_name', 'external_route_type', 'nssa_external_route_type', 'redistribute_route', 'isis_route_type', 'eigrp_route_type', 'preserve_med', 'bgp_preserve_default_info', 'use_rib_metric'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Bgp']['meta_info']


                            class Ospfv3OrIsisOrApplication(_Entity_):
                                """
                                ospfv3 or isis or application
                                
                                .. attribute:: process_name  (key)
                                
                                	ISIS process name if protocol is ISIS, or OSPFv3 process name if protocol is OSPFv3
                                	**type**\: str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: internal_route_type
                                
                                	Redistribute OSPFv3 routes
                                	**type**\:  :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                                
                                .. attribute:: default_metric
                                
                                	OSPFv3 default metric
                                	**type**\: int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: metric_type
                                
                                	OSPFv3 exterior metric type for redistributed routes
                                	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: tag
                                
                                	Tag for routes redistributed into OSPFv3
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: route_policy_name
                                
                                	Route policy to redistribution
                                	**type**\: str
                                
                                .. attribute:: external_route_type
                                
                                	Redistribute OSPFv3 external routes
                                	**type**\:  :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                                
                                .. attribute:: nssa_external_route_type
                                
                                	Redistribute OSPFv3 NSSA external routes
                                	**type**\:  :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                                
                                .. attribute:: redistribute_route
                                
                                	Redistribution of OSPFv3 routes
                                	**type**\: bool
                                
                                .. attribute:: isis_route_type
                                
                                	ISIS route type
                                	**type**\:  :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:  :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                                
                                .. attribute:: preserve_med
                                
                                	Preserve (Multi\-Exit Discriminator) of BGP routes
                                	**type**\: bool
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type ofBGP Default Route
                                	**type**\: bool
                                
                                .. attribute:: use_rib_metric
                                
                                	Use metric from RIB for redistributed routes
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication, self).__init__()

                                    self.yang_name = "ospfv3-or-isis-or-application"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['process_name']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('process_name', (YLeaf(YType.str, 'process-name'), ['str'])),
                                        ('internal_route_type', (YLeaf(YType.enumeration, 'internal-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3InternalRoute', '')])),
                                        ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                        ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                        ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                        ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                        ('external_route_type', (YLeaf(YType.enumeration, 'external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ExternalRoute', '')])),
                                        ('nssa_external_route_type', (YLeaf(YType.enumeration, 'nssa-external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3nssaExternalRoute', '')])),
                                        ('redistribute_route', (YLeaf(YType.boolean, 'redistribute-route'), ['bool'])),
                                        ('isis_route_type', (YLeaf(YType.enumeration, 'isis-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3isisRoute', '')])),
                                        ('eigrp_route_type', (YLeaf(YType.enumeration, 'eigrp-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EigrpRoute', '')])),
                                        ('preserve_med', (YLeaf(YType.boolean, 'preserve-med'), ['bool'])),
                                        ('bgp_preserve_default_info', (YLeaf(YType.boolean, 'bgp-preserve-default-info'), ['bool'])),
                                        ('use_rib_metric', (YLeaf(YType.boolean, 'use-rib-metric'), ['bool'])),
                                    ])
                                    self.process_name = None
                                    self.internal_route_type = None
                                    self.default_metric = None
                                    self.metric_type = None
                                    self.tag = None
                                    self.route_policy_name = None
                                    self.external_route_type = None
                                    self.nssa_external_route_type = None
                                    self.redistribute_route = None
                                    self.isis_route_type = None
                                    self.eigrp_route_type = None
                                    self.preserve_med = None
                                    self.bgp_preserve_default_info = None
                                    self.use_rib_metric = None
                                    self._segment_path = lambda: "ospfv3-or-isis-or-application" + "[process-name='" + str(self.process_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication, ['process_name', 'internal_route_type', 'default_metric', 'metric_type', 'tag', 'route_policy_name', 'external_route_type', 'nssa_external_route_type', 'redistribute_route', 'isis_route_type', 'eigrp_route_type', 'preserve_med', 'bgp_preserve_default_info', 'use_rib_metric'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Ospfv3OrIsisOrApplication']['meta_info']


                            class Eigrp(_Entity_):
                                """
                                eigrp
                                
                                .. attribute:: as_xx  (key)
                                
                                	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: internal_route_type
                                
                                	Redistribute OSPFv3 routes
                                	**type**\:  :py:class:`Ospfv3InternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3InternalRoute>`
                                
                                .. attribute:: default_metric
                                
                                	OSPFv3 default metric
                                	**type**\: int
                                
                                	**range:** 0..16777214
                                
                                .. attribute:: metric_type
                                
                                	OSPFv3 exterior metric type for redistributed routes
                                	**type**\:  :py:class:`Ospfv3Metric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Metric>`
                                
                                .. attribute:: tag
                                
                                	Tag for routes redistributed into OSPFv3
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: route_policy_name
                                
                                	Route policy to redistribution
                                	**type**\: str
                                
                                .. attribute:: external_route_type
                                
                                	Redistribute OSPFv3 external routes
                                	**type**\:  :py:class:`Ospfv3ExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3ExternalRoute>`
                                
                                .. attribute:: nssa_external_route_type
                                
                                	Redistribute OSPFv3 NSSA external routes
                                	**type**\:  :py:class:`Ospfv3nssaExternalRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3nssaExternalRoute>`
                                
                                .. attribute:: redistribute_route
                                
                                	Redistribution of OSPFv3 routes
                                	**type**\: bool
                                
                                .. attribute:: isis_route_type
                                
                                	ISIS route type
                                	**type**\:  :py:class:`Ospfv3isisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3isisRoute>`
                                
                                .. attribute:: eigrp_route_type
                                
                                	EIGRP route type
                                	**type**\:  :py:class:`Ospfv3EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EigrpRoute>`
                                
                                .. attribute:: preserve_med
                                
                                	Preserve (Multi\-Exit Discriminator) of BGP routes
                                	**type**\: bool
                                
                                .. attribute:: bgp_preserve_default_info
                                
                                	Preserve Metric and Metric Type ofBGP Default Route
                                	**type**\: bool
                                
                                .. attribute:: use_rib_metric
                                
                                	Use metric from RIB for redistributed routes
                                	**type**\: bool
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Eigrp, self).__init__()

                                    self.yang_name = "eigrp"
                                    self.yang_parent_name = "redistribute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['as_xx']
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                        ('internal_route_type', (YLeaf(YType.enumeration, 'internal-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3InternalRoute', '')])),
                                        ('default_metric', (YLeaf(YType.uint32, 'default-metric'), ['int'])),
                                        ('metric_type', (YLeaf(YType.enumeration, 'metric-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Metric', '')])),
                                        ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                        ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                        ('external_route_type', (YLeaf(YType.enumeration, 'external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3ExternalRoute', '')])),
                                        ('nssa_external_route_type', (YLeaf(YType.enumeration, 'nssa-external-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3nssaExternalRoute', '')])),
                                        ('redistribute_route', (YLeaf(YType.boolean, 'redistribute-route'), ['bool'])),
                                        ('isis_route_type', (YLeaf(YType.enumeration, 'isis-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3isisRoute', '')])),
                                        ('eigrp_route_type', (YLeaf(YType.enumeration, 'eigrp-route-type'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EigrpRoute', '')])),
                                        ('preserve_med', (YLeaf(YType.boolean, 'preserve-med'), ['bool'])),
                                        ('bgp_preserve_default_info', (YLeaf(YType.boolean, 'bgp-preserve-default-info'), ['bool'])),
                                        ('use_rib_metric', (YLeaf(YType.boolean, 'use-rib-metric'), ['bool'])),
                                    ])
                                    self.as_xx = None
                                    self.internal_route_type = None
                                    self.default_metric = None
                                    self.metric_type = None
                                    self.tag = None
                                    self.route_policy_name = None
                                    self.external_route_type = None
                                    self.nssa_external_route_type = None
                                    self.redistribute_route = None
                                    self.isis_route_type = None
                                    self.eigrp_route_type = None
                                    self.preserve_med = None
                                    self.bgp_preserve_default_info = None
                                    self.use_rib_metric = None
                                    self._segment_path = lambda: "eigrp" + "[as-xx='" + str(self.as_xx) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Eigrp, ['as_xx', 'internal_route_type', 'default_metric', 'metric_type', 'tag', 'route_policy_name', 'external_route_type', 'nssa_external_route_type', 'redistribute_route', 'isis_route_type', 'eigrp_route_type', 'preserve_med', 'bgp_preserve_default_info', 'use_rib_metric'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute.Eigrp']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes.Redistribute']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Redistributes']['meta_info']


                    class Ignore(_Entity_):
                        """
                        Do not complain about a specified event
                        
                        .. attribute:: lsa
                        
                        	Do not complain upon receiving LSA of the specified type
                        	**type**\:  :py:class:`Lsa <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Ignore, self).__init__()

                            self.yang_name = "ignore"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("lsa", ("lsa", Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa))])
                            self._leafs = OrderedDict()

                            self.lsa = Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa()
                            self.lsa.parent = self
                            self._children_name_map["lsa"] = "lsa"
                            self._segment_path = lambda: "ignore"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Ignore, [], name, value)


                        class Lsa(_Entity_):
                            """
                            Do not complain upon receiving LSA of the
                            specified type
                            
                            .. attribute:: mospf
                            
                            	Enable ignore of MOSPF type 6 LSA
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa, self).__init__()

                                self.yang_name = "lsa"
                                self.yang_parent_name = "ignore"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('mospf', (YLeaf(YType.empty, 'mospf'), ['Empty'])),
                                ])
                                self.mospf = None
                                self._segment_path = lambda: "lsa"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa, ['mospf'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Ignore.Lsa']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Ignore']['meta_info']


                    class DistributeListOut(_Entity_):
                        """
                        Filter prefixes from RIB 
                        
                        .. attribute:: distribute_outs
                        
                        	Filter generated type\-5 LSAs
                        	**type**\:  :py:class:`DistributeOuts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut, self).__init__()

                            self.yang_name = "distribute-list-out"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("distribute-outs", ("distribute_outs", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts))])
                            self._leafs = OrderedDict()

                            self.distribute_outs = Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts()
                            self.distribute_outs.parent = self
                            self._children_name_map["distribute_outs"] = "distribute-outs"
                            self._segment_path = lambda: "distribute-list-out"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut, [], name, value)


                        class DistributeOuts(_Entity_):
                            """
                            Filter generated type\-5 LSAs
                            
                            .. attribute:: distribute_out
                            
                            	Filter generated type\-5 LSAs
                            	**type**\: list of  		 :py:class:`DistributeOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts, self).__init__()

                                self.yang_name = "distribute-outs"
                                self.yang_parent_name = "distribute-list-out"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("distribute-out", ("distribute_out", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut))])
                                self._leafs = OrderedDict()

                                self.distribute_out = YList(self)
                                self._segment_path = lambda: "distribute-outs"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts, [], name, value)


                            class DistributeOut(_Entity_):
                                """
                                Filter generated type\-5 LSAs
                                
                                .. attribute:: protocol_name  (key)
                                
                                	none
                                	**type**\:  :py:class:`Ospfv3Protocol <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Protocol>`
                                
                                .. attribute:: all_or_connected_or_static_prefix_list
                                
                                	Prefix\-list name
                                	**type**\: str
                                
                                .. attribute:: bgp
                                
                                	bgp
                                	**type**\: list of  		 :py:class:`Bgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp>`
                                
                                .. attribute:: ospfv3_or_isis
                                
                                	ospfv3 or isis
                                	**type**\: list of  		 :py:class:`Ospfv3OrIsis <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis>`
                                
                                .. attribute:: eigrp
                                
                                	eigrp
                                	**type**\: list of  		 :py:class:`Eigrp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut, self).__init__()

                                    self.yang_name = "distribute-out"
                                    self.yang_parent_name = "distribute-outs"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = ['protocol_name']
                                    self._child_classes = OrderedDict([("bgp", ("bgp", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp)), ("ospfv3-or-isis", ("ospfv3_or_isis", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis)), ("eigrp", ("eigrp", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp))])
                                    self._leafs = OrderedDict([
                                        ('protocol_name', (YLeaf(YType.enumeration, 'protocol-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Protocol', '')])),
                                        ('all_or_connected_or_static_prefix_list', (YLeaf(YType.str, 'all-or-connected-or-static-prefix-list'), ['str'])),
                                    ])
                                    self.protocol_name = None
                                    self.all_or_connected_or_static_prefix_list = None

                                    self.bgp = YList(self)
                                    self.ospfv3_or_isis = YList(self)
                                    self.eigrp = YList(self)
                                    self._segment_path = lambda: "distribute-out" + "[protocol-name='" + str(self.protocol_name) + "']"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut, ['protocol_name', 'all_or_connected_or_static_prefix_list'], name, value)


                                class Bgp(_Entity_):
                                    """
                                    bgp
                                    
                                    .. attribute:: as_xx  (key)
                                    
                                    	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: as_yy  (key)
                                    
                                    	4\-byte AS number in asdot (X.Y) format \- second half (Y), or 2\-byte AS number, or 4\-byte AS number in asplain format
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: prefix_list
                                    
                                    	Prefix\-list name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp, self).__init__()

                                        self.yang_name = "bgp"
                                        self.yang_parent_name = "distribute-out"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['as_xx','as_yy']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('as_yy', (YLeaf(YType.uint32, 'as-yy'), ['int'])),
                                            ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                        ])
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.prefix_list = None
                                        self._segment_path = lambda: "bgp" + "[as-xx='" + str(self.as_xx) + "']" + "[as-yy='" + str(self.as_yy) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp, ['as_xx', 'as_yy', 'prefix_list'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Bgp']['meta_info']


                                class Ospfv3OrIsis(_Entity_):
                                    """
                                    ospfv3 or isis
                                    
                                    .. attribute:: process_name  (key)
                                    
                                    	If ISIS or OSPFv3, specify the instance name
                                    	**type**\: str
                                    
                                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                    
                                    .. attribute:: prefix_list
                                    
                                    	Prefix\-list name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis, self).__init__()

                                        self.yang_name = "ospfv3-or-isis"
                                        self.yang_parent_name = "distribute-out"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['process_name']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('process_name', (YLeaf(YType.str, 'process-name'), ['str'])),
                                            ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                        ])
                                        self.process_name = None
                                        self.prefix_list = None
                                        self._segment_path = lambda: "ospfv3-or-isis" + "[process-name='" + str(self.process_name) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis, ['process_name', 'prefix_list'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Ospfv3OrIsis']['meta_info']


                                class Eigrp(_Entity_):
                                    """
                                    eigrp
                                    
                                    .. attribute:: as_xx  (key)
                                    
                                    	4\-byte AS number in asdot (X.Y) format \- first half (X)
                                    	**type**\: int
                                    
                                    	**range:** 1..65535
                                    
                                    .. attribute:: prefix_list
                                    
                                    	Prefix\-list name
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp, self).__init__()

                                        self.yang_name = "eigrp"
                                        self.yang_parent_name = "distribute-out"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = ['as_xx']
                                        self._child_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('as_xx', (YLeaf(YType.uint32, 'as-xx'), ['int'])),
                                            ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                        ])
                                        self.as_xx = None
                                        self.prefix_list = None
                                        self._segment_path = lambda: "eigrp" + "[as-xx='" + str(self.as_xx) + "']"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp, ['as_xx', 'prefix_list'], name, value)

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut.Eigrp']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts.DistributeOut']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut.DistributeOuts']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DistributeListOut']['meta_info']


                    class DistributeList(_Entity_):
                        """
                        Filter prefixes to/from RIB
                        
                        .. attribute:: in_
                        
                        	Filter prefixes installed to RIB
                        	**type**\:  :py:class:`In <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList, self).__init__()

                            self.yang_name = "distribute-list"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("in", ("in_", Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In))])
                            self._leafs = OrderedDict()

                            self.in_ = Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In()
                            self.in_.parent = self
                            self._children_name_map["in_"] = "in"
                            self._segment_path = lambda: "distribute-list"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList, [], name, value)


                        class In(_Entity_):
                            """
                            Filter prefixes installed to RIB
                            
                            .. attribute:: prefix_list
                            
                            	Filter prefixes based on an IPv6 prefix\-list
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In, self).__init__()

                                self.yang_name = "in"
                                self.yang_parent_name = "distribute-list"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('prefix_list', (YLeaf(YType.str, 'prefix-list'), ['str'])),
                                ])
                                self.prefix_list = None
                                self._segment_path = lambda: "in"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In, ['prefix_list'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList.In']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DistributeList']['meta_info']


                    class StubRouter(_Entity_):
                        """
                        Stub router configuration
                        
                        .. attribute:: rbit
                        
                        	Stub router R\-bit configuration
                        	**type**\:  :py:class:`Rbit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: v6bit
                        
                        	Stub router V6\-bit configuration
                        	**type**\:  :py:class:`V6bit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit>`
                        
                        	**presence node**\: True
                        
                        .. attribute:: max_metric
                        
                        	Stub router max\-metric configuration
                        	**type**\:  :py:class:`MaxMetric <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric>`
                        
                        	**presence node**\: True
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter, self).__init__()

                            self.yang_name = "stub-router"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("rbit", ("rbit", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit)), ("v6bit", ("v6bit", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit)), ("max-metric", ("max_metric", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric))])
                            self._leafs = OrderedDict()

                            self.rbit = None
                            self._children_name_map["rbit"] = "rbit"

                            self.v6bit = None
                            self._children_name_map["v6bit"] = "v6bit"

                            self.max_metric = None
                            self._children_name_map["max_metric"] = "max-metric"
                            self._segment_path = lambda: "stub-router"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter, [], name, value)


                        class Rbit(_Entity_):
                            """
                            Stub router R\-bit configuration
                            
                            .. attribute:: on_switchover
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: always
                            
                            	Unconditionally enter stub router operational state
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: on_startup
                            
                            	Enter stub router operational state on startup
                            	**type**\:  :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup>`
                            
                            .. attribute:: include_stub
                            
                            	Advertise stub links with maximum metric in stub router mode
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: on_proc_migration
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: on_proc_restart
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit, self).__init__()

                                self.yang_name = "rbit"
                                self.yang_parent_name = "stub-router"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("on-startup", ("on_startup", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup))])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('on_switchover', (YLeaf(YType.uint32, 'on-switchover'), ['int'])),
                                    ('always', (YLeaf(YType.empty, 'always'), ['Empty'])),
                                    ('include_stub', (YLeaf(YType.empty, 'include-stub'), ['Empty'])),
                                    ('on_proc_migration', (YLeaf(YType.uint32, 'on-proc-migration'), ['int'])),
                                    ('on_proc_restart', (YLeaf(YType.uint32, 'on-proc-restart'), ['int'])),
                                ])
                                self.on_switchover = None
                                self.always = None
                                self.include_stub = None
                                self.on_proc_migration = None
                                self.on_proc_restart = None

                                self.on_startup = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup()
                                self.on_startup.parent = self
                                self._children_name_map["on_startup"] = "on-startup"
                                self._segment_path = lambda: "rbit"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit, ['on_switchover', 'always', 'include_stub', 'on_proc_migration', 'on_proc_restart'], name, value)


                            class OnStartup(_Entity_):
                                """
                                Enter stub router operational state on startup
                                
                                .. attribute:: wait_for_bgp
                                
                                	Wait until BGP converges (only applicable to default VRF)
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: wait_time
                                
                                	Time (in seconds) to stay in stub router operational state
                                	**type**\: int
                                
                                	**range:** 5..86400
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup, self).__init__()

                                    self.yang_name = "on-startup"
                                    self.yang_parent_name = "rbit"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('wait_for_bgp', (YLeaf(YType.boolean, 'wait-for-bgp'), ['bool'])),
                                        ('wait_time', (YLeaf(YType.uint32, 'wait-time'), ['int'])),
                                    ])
                                    self.wait_for_bgp = None
                                    self.wait_time = None
                                    self._segment_path = lambda: "on-startup"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit.OnStartup']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.Rbit']['meta_info']


                        class V6bit(_Entity_):
                            """
                            Stub router V6\-bit configuration
                            
                            .. attribute:: on_switchover
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: always
                            
                            	Unconditionally enter stub router operational state
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: on_startup
                            
                            	Enter stub router operational state on startup
                            	**type**\:  :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit.OnStartup>`
                            
                            .. attribute:: on_proc_migration
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: on_proc_restart
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit, self).__init__()

                                self.yang_name = "v6bit"
                                self.yang_parent_name = "stub-router"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("on-startup", ("on_startup", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit.OnStartup))])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('on_switchover', (YLeaf(YType.uint32, 'on-switchover'), ['int'])),
                                    ('always', (YLeaf(YType.empty, 'always'), ['Empty'])),
                                    ('on_proc_migration', (YLeaf(YType.uint32, 'on-proc-migration'), ['int'])),
                                    ('on_proc_restart', (YLeaf(YType.uint32, 'on-proc-restart'), ['int'])),
                                ])
                                self.on_switchover = None
                                self.always = None
                                self.on_proc_migration = None
                                self.on_proc_restart = None

                                self.on_startup = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit.OnStartup()
                                self.on_startup.parent = self
                                self._children_name_map["on_startup"] = "on-startup"
                                self._segment_path = lambda: "v6bit"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit, ['on_switchover', 'always', 'on_proc_migration', 'on_proc_restart'], name, value)


                            class OnStartup(_Entity_):
                                """
                                Enter stub router operational state on startup
                                
                                .. attribute:: wait_for_bgp
                                
                                	Wait until BGP converges (only applicable to default VRF)
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: wait_time
                                
                                	Time (in seconds) to stay in stub router operational state
                                	**type**\: int
                                
                                	**range:** 5..86400
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit.OnStartup, self).__init__()

                                    self.yang_name = "on-startup"
                                    self.yang_parent_name = "v6bit"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('wait_for_bgp', (YLeaf(YType.boolean, 'wait-for-bgp'), ['bool'])),
                                        ('wait_time', (YLeaf(YType.uint32, 'wait-time'), ['int'])),
                                    ])
                                    self.wait_for_bgp = None
                                    self.wait_time = None
                                    self._segment_path = lambda: "on-startup"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit.OnStartup']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.V6bit']['meta_info']


                        class MaxMetric(_Entity_):
                            """
                            Stub router max\-metric configuration
                            
                            .. attribute:: external_lsa
                            
                            	Advertise external LSAs with modified metric in stub router mode
                            	**type**\: int
                            
                            	**range:** 1..16777214
                            
                            	**default value**\: 16711680
                            
                            .. attribute:: summary_lsa
                            
                            	Advertise summary LSAs with modified metric in stub router mode
                            	**type**\: int
                            
                            	**range:** 1..16777214
                            
                            	**default value**\: 16711680
                            
                            .. attribute:: on_switchover
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: always
                            
                            	Unconditionally enter stub router operational state
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: on_startup
                            
                            	Enter stub router operational state on startup
                            	**type**\:  :py:class:`OnStartup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup>`
                            
                            .. attribute:: include_stub
                            
                            	Advertise stub links with maximum metric in stub router mode
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: on_proc_migration
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            .. attribute:: on_proc_restart
                            
                            	Time (in seconds) to stay in stub router operational state
                            	**type**\: int
                            
                            	**range:** 5..86400
                            
                            	**units**\: second
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric, self).__init__()

                                self.yang_name = "max-metric"
                                self.yang_parent_name = "stub-router"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("on-startup", ("on_startup", Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup))])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('external_lsa', (YLeaf(YType.uint32, 'external-lsa'), ['int'])),
                                    ('summary_lsa', (YLeaf(YType.uint32, 'summary-lsa'), ['int'])),
                                    ('on_switchover', (YLeaf(YType.uint32, 'on-switchover'), ['int'])),
                                    ('always', (YLeaf(YType.empty, 'always'), ['Empty'])),
                                    ('include_stub', (YLeaf(YType.empty, 'include-stub'), ['Empty'])),
                                    ('on_proc_migration', (YLeaf(YType.uint32, 'on-proc-migration'), ['int'])),
                                    ('on_proc_restart', (YLeaf(YType.uint32, 'on-proc-restart'), ['int'])),
                                ])
                                self.external_lsa = None
                                self.summary_lsa = None
                                self.on_switchover = None
                                self.always = None
                                self.include_stub = None
                                self.on_proc_migration = None
                                self.on_proc_restart = None

                                self.on_startup = Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup()
                                self.on_startup.parent = self
                                self._children_name_map["on_startup"] = "on-startup"
                                self._segment_path = lambda: "max-metric"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric, ['external_lsa', 'summary_lsa', 'on_switchover', 'always', 'include_stub', 'on_proc_migration', 'on_proc_restart'], name, value)


                            class OnStartup(_Entity_):
                                """
                                Enter stub router operational state on startup
                                
                                .. attribute:: wait_for_bgp
                                
                                	Wait until BGP converges (only applicable to default VRF)
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: wait_time
                                
                                	Time (in seconds) to stay in stub router operational state
                                	**type**\: int
                                
                                	**range:** 5..86400
                                
                                	**units**\: second
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup, self).__init__()

                                    self.yang_name = "on-startup"
                                    self.yang_parent_name = "max-metric"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('wait_for_bgp', (YLeaf(YType.boolean, 'wait-for-bgp'), ['bool'])),
                                        ('wait_time', (YLeaf(YType.uint32, 'wait-time'), ['int'])),
                                    ])
                                    self.wait_for_bgp = None
                                    self.wait_time = None
                                    self._segment_path = lambda: "on-startup"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup, ['wait_for_bgp', 'wait_time'], name, value)

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric.OnStartup']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter.MaxMetric']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.StubRouter']['meta_info']


                    class Bfd(_Entity_):
                        """
                        Configure BFD parameters
                        
                        .. attribute:: interval
                        
                        	Hello interval in milli\-seconds
                        	**type**\: int
                        
                        	**range:** 3..30000
                        
                        	**units**\: millisecond
                        
                        .. attribute:: detection_multiplier
                        
                        	Detect multiplier
                        	**type**\: int
                        
                        	**range:** 2..50
                        
                        .. attribute:: fast_detect_mode
                        
                        	Enable or disable BFD fast detection
                        	**type**\:  :py:class:`Ospfv3bfdEnableMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3bfdEnableMode>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Bfd, self).__init__()

                            self.yang_name = "bfd"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                ('detection_multiplier', (YLeaf(YType.uint32, 'detection-multiplier'), ['int'])),
                                ('fast_detect_mode', (YLeaf(YType.enumeration, 'fast-detect-mode'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3bfdEnableMode', '')])),
                            ])
                            self.interval = None
                            self.detection_multiplier = None
                            self.fast_detect_mode = None
                            self._segment_path = lambda: "bfd"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Bfd, ['interval', 'detection_multiplier', 'fast_detect_mode'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Bfd']['meta_info']


                    class DatabaseFilter(_Entity_):
                        """
                        Database filter
                        
                        .. attribute:: all
                        
                        	All
                        	**type**\:  :py:class:`All <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter, self).__init__()

                            self.yang_name = "database-filter"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("all", ("all", Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All))])
                            self._leafs = OrderedDict()

                            self.all = Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All()
                            self.all.parent = self
                            self._children_name_map["all"] = "all"
                            self._segment_path = lambda: "database-filter"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter, [], name, value)


                        class All(_Entity_):
                            """
                            All
                            
                            .. attribute:: out
                            
                            	Enable out
                            	**type**\: :py:class:`Empty<ydk.types.Empty>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All, self).__init__()

                                self.yang_name = "all"
                                self.yang_parent_name = "database-filter"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('out', (YLeaf(YType.empty, 'out'), ['Empty'])),
                                ])
                                self.out = None
                                self._segment_path = lambda: "all"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All, ['out'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter.All']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DatabaseFilter']['meta_info']


                    class Capability(_Entity_):
                        """
                        OSPFv3 Capability
                        
                        .. attribute:: type7_prefer
                        
                        	NSSA capability to prefer Type 7 over Type 5
                        	**type**\: bool
                        
                        .. attribute:: vrf_lite
                        
                        	Enable VRF Lite
                        	**type**\: bool
                        
                        .. attribute:: type7_translate_zero_forwarding_addr
                        
                        	Enable capability to translate LSAs with fwd addr
                        	**type**\: bool
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Capability, self).__init__()

                            self.yang_name = "capability"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('type7_prefer', (YLeaf(YType.boolean, 'type7-prefer'), ['bool'])),
                                ('vrf_lite', (YLeaf(YType.boolean, 'vrf-lite'), ['bool'])),
                                ('type7_translate_zero_forwarding_addr', (YLeaf(YType.boolean, 'type7-translate-zero-forwarding-addr'), ['bool'])),
                            ])
                            self.type7_prefer = None
                            self.vrf_lite = None
                            self.type7_translate_zero_forwarding_addr = None
                            self._segment_path = lambda: "capability"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Capability, ['type7_prefer', 'vrf_lite', 'type7_translate_zero_forwarding_addr'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Capability']['meta_info']


                    class Authentication(_Entity_):
                        """
                        Authenticate OSPFv3 packets
                        
                        .. attribute:: enable
                        
                        	Authenticate packets
                        	**type**\: bool
                        
                        .. attribute:: spi
                        
                        	Use IPSec AH authentication. Specify the Security Parameter Index (SPI) value
                        	**type**\: int
                        
                        	**range:** 256..4294967295
                        
                        .. attribute:: algorithm
                        
                        	Use the MD5 or SHA1 algorithm
                        	**type**\:  :py:class:`Ospfv3Authentication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3Authentication>`
                        
                        .. attribute:: password
                        
                        	Specify MD5 or SHA1 password
                        	**type**\: str
                        
                        	**pattern:** (!.+)\|([^!].+)
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Authentication, self).__init__()

                            self.yang_name = "authentication"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                ('algorithm', (YLeaf(YType.enumeration, 'algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3Authentication', '')])),
                                ('password', (YLeaf(YType.str, 'password'), ['str'])),
                            ])
                            self.enable = None
                            self.spi = None
                            self.algorithm = None
                            self.password = None
                            self._segment_path = lambda: "authentication"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Authentication, ['enable', 'spi', 'algorithm', 'password'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Authentication']['meta_info']


                    class GracefulRestart(_Entity_):
                        """
                        Graceful restart configuration
                        
                        .. attribute:: interval
                        
                        	Minimum interval between graceful restarts (seconds)
                        	**type**\: int
                        
                        	**range:** 90..3600
                        
                        	**units**\: second
                        
                        .. attribute:: strict_lsa_checking
                        
                        	Terminate graceful restart helper mode if LSA changed
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: helper
                        
                        	Disable router's helper support
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: enable
                        
                        	Enable graceful restart
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: lifetime
                        
                        	Maximum route lifetime following restart (seconds)
                        	**type**\: int
                        
                        	**range:** 90..1800
                        
                        	**units**\: second
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart, self).__init__()

                            self.yang_name = "graceful-restart"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interval', (YLeaf(YType.uint32, 'interval'), ['int'])),
                                ('strict_lsa_checking', (YLeaf(YType.empty, 'strict-lsa-checking'), ['Empty'])),
                                ('helper', (YLeaf(YType.empty, 'helper'), ['Empty'])),
                                ('enable', (YLeaf(YType.empty, 'enable'), ['Empty'])),
                                ('lifetime', (YLeaf(YType.uint32, 'lifetime'), ['int'])),
                            ])
                            self.interval = None
                            self.strict_lsa_checking = None
                            self.helper = None
                            self.enable = None
                            self.lifetime = None
                            self._segment_path = lambda: "graceful-restart"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart, ['interval', 'strict_lsa_checking', 'helper', 'enable', 'lifetime'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.GracefulRestart']['meta_info']


                    class DefaultInformation(_Entity_):
                        """
                        Control distribution of default information
                        
                        .. attribute:: originate
                        
                        	Distribute a default route
                        	**type**\:  :py:class:`Originate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation.Originate>`
                        
                        	**presence node**\: True
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation, self).__init__()

                            self.yang_name = "default-information"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("originate", ("originate", Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation.Originate))])
                            self._leafs = OrderedDict()

                            self.originate = None
                            self._children_name_map["originate"] = "originate"
                            self._segment_path = lambda: "default-information"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation, [], name, value)


                        class Originate(_Entity_):
                            """
                            Distribute a default route
                            
                            .. attribute:: always
                            
                            	Always advertise default route
                            	**type**\: bool
                            
                            	**mandatory**\: True
                            
                            .. attribute:: metric
                            
                            	OSPFv3 default metric
                            	**type**\: int
                            
                            	**range:** 0..16777214
                            
                            .. attribute:: metric_type
                            
                            	OSPFv3 metric type for default routes
                            	**type**\: int
                            
                            	**range:** 1..2
                            
                            .. attribute:: tag
                            
                            	Tag for default route
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: route_policy_name
                            
                            	Route policy to default\-information origination
                            	**type**\: str
                            
                            

                            This class is a :ref:`presence class<presence-class>`

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation.Originate, self).__init__()

                                self.yang_name = "originate"
                                self.yang_parent_name = "default-information"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([])
                                self.is_presence_container = True
                                self._leafs = OrderedDict([
                                    ('always', (YLeaf(YType.boolean, 'always'), ['bool'])),
                                    ('metric', (YLeaf(YType.uint32, 'metric'), ['int'])),
                                    ('metric_type', (YLeaf(YType.uint32, 'metric-type'), ['int'])),
                                    ('tag', (YLeaf(YType.uint32, 'tag'), ['int'])),
                                    ('route_policy_name', (YLeaf(YType.str, 'route-policy-name'), ['str'])),
                                ])
                                self.always = None
                                self.metric = None
                                self.metric_type = None
                                self.tag = None
                                self.route_policy_name = None
                                self._segment_path = lambda: "originate"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation.Originate, ['always', 'metric', 'metric_type', 'tag', 'route_policy_name'], name, value)

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation.Originate']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.DefaultInformation']['meta_info']


                    class ProcessScope(_Entity_):
                        """
                        Process scope configuration
                        
                        .. attribute:: fast_reroute
                        
                        	Fast\-reroute configuration
                        	**type**\:  :py:class:`FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute>`
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope, self).__init__()

                            self.yang_name = "process-scope"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([("fast-reroute", ("fast_reroute", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute))])
                            self._leafs = OrderedDict()

                            self.fast_reroute = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute()
                            self.fast_reroute.parent = self
                            self._children_name_map["fast_reroute"] = "fast-reroute"
                            self._segment_path = lambda: "process-scope"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope, [], name, value)


                        class FastReroute(_Entity_):
                            """
                            Fast\-reroute configuration
                            
                            .. attribute:: per_link
                            
                            	Fast\-reroute per\-link configuration
                            	**type**\:  :py:class:`PerLink <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink>`
                            
                            .. attribute:: per_prefix
                            
                            	Fast\-reroute per\-link configuration
                            	**type**\:  :py:class:`PerPrefix <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix>`
                            
                            .. attribute:: fast_reroute_enable
                            
                            	Enable/Disable Fast\-reroute per\-link or per\-prefix
                            	**type**\:  :py:class:`Ospfv3FastReroute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3FastReroute>`
                            
                            

                            """

                            _prefix = 'ipv6-ospfv3-cfg'
                            _revision = '2018-05-14'

                            def __init__(self):
                                if sys.version_info > (3,):
                                    super().__init__()
                                else:
                                    super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute, self).__init__()

                                self.yang_name = "fast-reroute"
                                self.yang_parent_name = "process-scope"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_classes = OrderedDict([("per-link", ("per_link", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink)), ("per-prefix", ("per_prefix", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix))])
                                self._leafs = OrderedDict([
                                    ('fast_reroute_enable', (YLeaf(YType.enumeration, 'fast-reroute-enable'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3FastReroute', '')])),
                                ])
                                self.fast_reroute_enable = None

                                self.per_link = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink()
                                self.per_link.parent = self
                                self._children_name_map["per_link"] = "per-link"

                                self.per_prefix = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix()
                                self.per_prefix.parent = self
                                self._children_name_map["per_prefix"] = "per-prefix"
                                self._segment_path = lambda: "fast-reroute"
                                self._is_frozen = True

                            def __setattr__(self, name, value):
                                self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute, ['fast_reroute_enable'], name, value)


                            class PerLink(_Entity_):
                                """
                                Fast\-reroute per\-link configuration
                                
                                .. attribute:: fast_reroute_use_candidate_only
                                
                                	Use only interfaces on the candidate list as a backup path
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: candidate_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces>`
                                
                                .. attribute:: exclude_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink, self).__init__()

                                    self.yang_name = "per-link"
                                    self.yang_parent_name = "fast-reroute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces))])
                                    self._leafs = OrderedDict([
                                        ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                    ])
                                    self.fast_reroute_use_candidate_only = None

                                    self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces()
                                    self.candidate_interfaces.parent = self
                                    self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                    self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces()
                                    self.exclude_interfaces.parent = self
                                    self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                    self._segment_path = lambda: "per-link"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink, ['fast_reroute_use_candidate_only'], name, value)


                                class CandidateInterfaces(_Entity_):
                                    """
                                    Fast\-reroute per\-link/per\-prefix candidate
                                    interface configuration
                                    
                                    .. attribute:: candidate_interface
                                    
                                    	Candidate backup interface
                                    	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, self).__init__()

                                        self.yang_name = "candidate-interfaces"
                                        self.yang_parent_name = "per-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface))])
                                        self._leafs = OrderedDict()

                                        self.candidate_interface = YList(self)
                                        self._segment_path = lambda: "candidate-interfaces"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces, [], name, value)


                                    class CandidateInterface(_Entity_):
                                        """
                                        Candidate backup interface
                                        
                                        .. attribute:: interface_name  (key)
                                        
                                        	Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, self).__init__()

                                            self.yang_name = "candidate-interface"
                                            self.yang_parent_name = "candidate-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['interface_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                            ])
                                            self.interface_name = None
                                            self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces.CandidateInterface']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.CandidateInterfaces']['meta_info']


                                class ExcludeInterfaces(_Entity_):
                                    """
                                    Fast\-reroute per\-link/per\-prefix exclude
                                    interface configuration
                                    
                                    .. attribute:: exclude_interface
                                    
                                    	Exclude an interface from becoming a backup
                                    	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, self).__init__()

                                        self.yang_name = "exclude-interfaces"
                                        self.yang_parent_name = "per-link"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface))])
                                        self._leafs = OrderedDict()

                                        self.exclude_interface = YList(self)
                                        self._segment_path = lambda: "exclude-interfaces"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces, [], name, value)


                                    class ExcludeInterface(_Entity_):
                                        """
                                        Exclude an interface from becoming a backup
                                        
                                        .. attribute:: interface_name  (key)
                                        
                                        	Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                            self.yang_name = "exclude-interface"
                                            self.yang_parent_name = "exclude-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['interface_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                            ])
                                            self.interface_name = None
                                            self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink.ExcludeInterfaces']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerLink']['meta_info']


                            class PerPrefix(_Entity_):
                                """
                                Fast\-reroute per\-link configuration
                                
                                .. attribute:: fast_reroute_use_candidate_only
                                
                                	Use only interfaces on the candidate list as a backup path
                                	**type**\: bool
                                
                                	**default value**\: false
                                
                                .. attribute:: candidate_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix candidate interface configuration
                                	**type**\:  :py:class:`CandidateInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces>`
                                
                                .. attribute:: exclude_interfaces
                                
                                	Fast\-reroute per\-link/per\-prefix exclude interface configuration
                                	**type**\:  :py:class:`ExcludeInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces>`
                                
                                

                                """

                                _prefix = 'ipv6-ospfv3-cfg'
                                _revision = '2018-05-14'

                                def __init__(self):
                                    if sys.version_info > (3,):
                                        super().__init__()
                                    else:
                                        super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix, self).__init__()

                                    self.yang_name = "per-prefix"
                                    self.yang_parent_name = "fast-reroute"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_classes = OrderedDict([("candidate-interfaces", ("candidate_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces)), ("exclude-interfaces", ("exclude_interfaces", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces))])
                                    self._leafs = OrderedDict([
                                        ('fast_reroute_use_candidate_only', (YLeaf(YType.boolean, 'fast-reroute-use-candidate-only'), ['bool'])),
                                    ])
                                    self.fast_reroute_use_candidate_only = None

                                    self.candidate_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces()
                                    self.candidate_interfaces.parent = self
                                    self._children_name_map["candidate_interfaces"] = "candidate-interfaces"

                                    self.exclude_interfaces = Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces()
                                    self.exclude_interfaces.parent = self
                                    self._children_name_map["exclude_interfaces"] = "exclude-interfaces"
                                    self._segment_path = lambda: "per-prefix"
                                    self._is_frozen = True

                                def __setattr__(self, name, value):
                                    self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix, ['fast_reroute_use_candidate_only'], name, value)


                                class CandidateInterfaces(_Entity_):
                                    """
                                    Fast\-reroute per\-link/per\-prefix candidate
                                    interface configuration
                                    
                                    .. attribute:: candidate_interface
                                    
                                    	Candidate backup interface
                                    	**type**\: list of  		 :py:class:`CandidateInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, self).__init__()

                                        self.yang_name = "candidate-interfaces"
                                        self.yang_parent_name = "per-prefix"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("candidate-interface", ("candidate_interface", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface))])
                                        self._leafs = OrderedDict()

                                        self.candidate_interface = YList(self)
                                        self._segment_path = lambda: "candidate-interfaces"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces, [], name, value)


                                    class CandidateInterface(_Entity_):
                                        """
                                        Candidate backup interface
                                        
                                        .. attribute:: interface_name  (key)
                                        
                                        	Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, self).__init__()

                                            self.yang_name = "candidate-interface"
                                            self.yang_parent_name = "candidate-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['interface_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                            ])
                                            self.interface_name = None
                                            self._segment_path = lambda: "candidate-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface, ['interface_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces.CandidateInterface']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.CandidateInterfaces']['meta_info']


                                class ExcludeInterfaces(_Entity_):
                                    """
                                    Fast\-reroute per\-link/per\-prefix exclude
                                    interface configuration
                                    
                                    .. attribute:: exclude_interface
                                    
                                    	Exclude an interface from becoming a backup
                                    	**type**\: list of  		 :py:class:`ExcludeInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface>`
                                    
                                    

                                    """

                                    _prefix = 'ipv6-ospfv3-cfg'
                                    _revision = '2018-05-14'

                                    def __init__(self):
                                        if sys.version_info > (3,):
                                            super().__init__()
                                        else:
                                            super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, self).__init__()

                                        self.yang_name = "exclude-interfaces"
                                        self.yang_parent_name = "per-prefix"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_classes = OrderedDict([("exclude-interface", ("exclude_interface", Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface))])
                                        self._leafs = OrderedDict()

                                        self.exclude_interface = YList(self)
                                        self._segment_path = lambda: "exclude-interfaces"
                                        self._is_frozen = True

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces, [], name, value)


                                    class ExcludeInterface(_Entity_):
                                        """
                                        Exclude an interface from becoming a backup
                                        
                                        .. attribute:: interface_name  (key)
                                        
                                        	Interface
                                        	**type**\: str
                                        
                                        	**pattern:** [a\-zA\-Z0\-9.\_/\-]+
                                        
                                        

                                        """

                                        _prefix = 'ipv6-ospfv3-cfg'
                                        _revision = '2018-05-14'

                                        def __init__(self):
                                            if sys.version_info > (3,):
                                                super().__init__()
                                            else:
                                                super(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, self).__init__()

                                            self.yang_name = "exclude-interface"
                                            self.yang_parent_name = "exclude-interfaces"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = ['interface_name']
                                            self._child_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('interface_name', (YLeaf(YType.str, 'interface-name'), ['str'])),
                                            ])
                                            self.interface_name = None
                                            self._segment_path = lambda: "exclude-interface" + "[interface-name='" + str(self.interface_name) + "']"
                                            self._is_frozen = True

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface, ['interface_name'], name, value)

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces.ExcludeInterface']['meta_info']

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix.ExcludeInterfaces']['meta_info']

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute.PerPrefix']['meta_info']

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                                return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope.FastReroute']['meta_info']

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.ProcessScope']['meta_info']


                    class Encryption(_Entity_):
                        """
                        Encrypt and authenticate OSPFv3 packets
                        
                        .. attribute:: enable
                        
                        	Authenticate packets
                        	**type**\: bool
                        
                        .. attribute:: spi
                        
                        	Use IPSec ESP authentication. Specify the Security Parameter Index (SPI) value
                        	**type**\: int
                        
                        	**range:** 256..4294967295
                        
                        .. attribute:: encryption_algorithm
                        
                        	Specify the encryption algorithm
                        	**type**\:  :py:class:`Ospfv3EncryptionAlgorithm <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3EncryptionAlgorithm>`
                        
                        .. attribute:: encryption_password
                        
                        	Encryption password
                        	**type**\: str
                        
                        	**pattern:** (!.+)\|([^!].+)
                        
                        .. attribute:: authentication_algorithm
                        
                        	Use the NULL, MD5 or SHA1 algorithm
                        	**type**\:  :py:class:`Ospfv3AuthenticationType2 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AuthenticationType2>`
                        
                        .. attribute:: authentication_password
                        
                        	Specify MD5 or SHA1 password
                        	**type**\: str
                        
                        	**pattern:** (!.+)\|([^!].+)
                        
                        

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.Encryption, self).__init__()

                            self.yang_name = "encryption"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('enable', (YLeaf(YType.boolean, 'enable'), ['bool'])),
                                ('spi', (YLeaf(YType.uint32, 'spi'), ['int'])),
                                ('encryption_algorithm', (YLeaf(YType.enumeration, 'encryption-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3EncryptionAlgorithm', '')])),
                                ('encryption_password', (YLeaf(YType.str, 'encryption-password'), ['str'])),
                                ('authentication_algorithm', (YLeaf(YType.enumeration, 'authentication-algorithm'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AuthenticationType2', '')])),
                                ('authentication_password', (YLeaf(YType.str, 'authentication-password'), ['str'])),
                            ])
                            self.enable = None
                            self.spi = None
                            self.encryption_algorithm = None
                            self.encryption_password = None
                            self.authentication_algorithm = None
                            self.authentication_password = None
                            self._segment_path = lambda: "encryption"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.Encryption, ['enable', 'spi', 'encryption_algorithm', 'encryption_password', 'authentication_algorithm', 'authentication_password'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.Encryption']['meta_info']


                    class AutoCost(_Entity_):
                        """
                        Calculate interface cost according to bandwidth
                        
                        .. attribute:: disable
                        
                        	Specify 'true' to assign cost based on interface type
                        	**type**\: :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: reference_bandwidth
                        
                        	Specify reference bandwidth for cost computations in terms of Mbits per second
                        	**type**\: int
                        
                        	**range:** 1..4294967
                        
                        	**units**\: Mbit/s
                        
                        

                        This class is a :ref:`presence class<presence-class>`

                        """

                        _prefix = 'ipv6-ospfv3-cfg'
                        _revision = '2018-05-14'

                        def __init__(self):
                            if sys.version_info > (3,):
                                super().__init__()
                            else:
                                super(Ospfv3.Processes.Process.Vrfs.Vrf.AutoCost, self).__init__()

                            self.yang_name = "auto-cost"
                            self.yang_parent_name = "vrf"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_classes = OrderedDict([])
                            self.is_presence_container = True
                            self._leafs = OrderedDict([
                                ('disable', (YLeaf(YType.empty, 'disable'), ['Empty'])),
                                ('reference_bandwidth', (YLeaf(YType.uint32, 'reference-bandwidth'), ['int'])),
                            ])
                            self.disable = None
                            self.reference_bandwidth = None
                            self._segment_path = lambda: "auto-cost"
                            self._is_frozen = True

                        def __setattr__(self, name, value):
                            self._perform_setattr(Ospfv3.Processes.Process.Vrfs.Vrf.AutoCost, ['disable', 'reference_bandwidth'], name, value)

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                            return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf.AutoCost']['meta_info']

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.Vrfs.Vrf']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                    return meta._meta_table['Ospfv3.Processes.Process.Vrfs']['meta_info']


            class Af(_Entity_):
                """
                Address Family (AF)
                
                .. attribute:: af_name
                
                	Address Family (AF) identifier
                	**type**\:  :py:class:`Ospfv3AddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3AddressFamily>`
                
                	**mandatory**\: True
                
                .. attribute:: saf_name
                
                	Subsequent Address Family (SAF) identifier
                	**type**\:  :py:class:`Ospfv3SubsequentAddressFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3SubsequentAddressFamily>`
                
                

                This class is a :ref:`presence class<presence-class>`

                """

                _prefix = 'ipv6-ospfv3-cfg'
                _revision = '2018-05-14'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Ospfv3.Processes.Process.Af, self).__init__()

                    self.yang_name = "af"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([])
                    self.is_presence_container = True
                    self._leafs = OrderedDict([
                        ('af_name', (YLeaf(YType.enumeration, 'af-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3AddressFamily', '')])),
                        ('saf_name', (YLeaf(YType.enumeration, 'saf-name'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3SubsequentAddressFamily', '')])),
                    ])
                    self.af_name = None
                    self.saf_name = None
                    self._segment_path = lambda: "af"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospfv3.Processes.Process.Af, ['af_name', 'saf_name'], name, value)

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                    return meta._meta_table['Ospfv3.Processes.Process.Af']['meta_info']


            class TraceBufs(_Entity_):
                """
                Configuration to change size of trace buffer
                
                .. attribute:: trace_buf
                
                	Changes the size of the specified trace buffer
                	**type**\: list of  		 :py:class:`TraceBuf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3.Processes.Process.TraceBufs.TraceBuf>`
                
                

                """

                _prefix = 'ipv6-ospfv3-cfg'
                _revision = '2018-05-14'

                def __init__(self):
                    if sys.version_info > (3,):
                        super().__init__()
                    else:
                        super(Ospfv3.Processes.Process.TraceBufs, self).__init__()

                    self.yang_name = "trace-bufs"
                    self.yang_parent_name = "process"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_classes = OrderedDict([("trace-buf", ("trace_buf", Ospfv3.Processes.Process.TraceBufs.TraceBuf))])
                    self._leafs = OrderedDict()

                    self.trace_buf = YList(self)
                    self._segment_path = lambda: "trace-bufs"
                    self._is_frozen = True

                def __setattr__(self, name, value):
                    self._perform_setattr(Ospfv3.Processes.Process.TraceBufs, [], name, value)


                class TraceBuf(_Entity_):
                    """
                    Changes the size of the specified trace
                    buffer
                    
                    .. attribute:: trace_buf_name  (key)
                    
                    	Name for this trace buffer
                    	**type**\: str
                    
                    	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                    
                    .. attribute:: bufsize
                    
                    	Buffer size
                    	**type**\:  :py:class:`Ospfv3TraceBufSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg.Ospfv3TraceBufSize>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'ipv6-ospfv3-cfg'
                    _revision = '2018-05-14'

                    def __init__(self):
                        if sys.version_info > (3,):
                            super().__init__()
                        else:
                            super(Ospfv3.Processes.Process.TraceBufs.TraceBuf, self).__init__()

                        self.yang_name = "trace-buf"
                        self.yang_parent_name = "trace-bufs"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['trace_buf_name']
                        self._child_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('trace_buf_name', (YLeaf(YType.str, 'trace-buf-name'), ['str'])),
                            ('bufsize', (YLeaf(YType.enumeration, 'bufsize'), [('ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv6_ospfv3_cfg', 'Ospfv3TraceBufSize', '')])),
                        ])
                        self.trace_buf_name = None
                        self.bufsize = None
                        self._segment_path = lambda: "trace-buf" + "[trace-buf-name='" + str(self.trace_buf_name) + "']"
                        self._is_frozen = True

                    def __setattr__(self, name, value):
                        self._perform_setattr(Ospfv3.Processes.Process.TraceBufs.TraceBuf, ['trace_buf_name', 'bufsize'], name, value)

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                        return meta._meta_table['Ospfv3.Processes.Process.TraceBufs.TraceBuf']['meta_info']

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                    return meta._meta_table['Ospfv3.Processes.Process.TraceBufs']['meta_info']

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
                return meta._meta_table['Ospfv3.Processes.Process']['meta_info']

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
            return meta._meta_table['Ospfv3.Processes']['meta_info']

    def clone_ptr(self):
        self._top_entity = Ospfv3()
        return self._top_entity

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv6_ospfv3_cfg as meta
        return meta._meta_table['Ospfv3']['meta_info']


