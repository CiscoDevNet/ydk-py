""" Cisco_IOS_XR_ipv4_bgp_cfg 

This module contains a collection of YANG definitions
for Cisco IOS\-XR ipv4\-bgp package configuration.

This module contains definitions
for the following management objects\:
  bgp\: BGP configuration commands
  bmp\-servers\: bmp servers

This YANG module augments the
  Cisco\-IOS\-XR\-infra\-rsi\-cfg,
  Cisco\-IOS\-XR\-snmp\-agent\-cfg
modules with configuration data.

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError



class BgpAdvRtEnum(Enum):
    """
    BgpAdvRtEnum

    Bgp adv rt

    .. data:: bgp_regular_rt = 0

    	Regular RT type

    .. data:: bgp_stitching_rt = 1

    	Stitching RT type

    """

    bgp_regular_rt = 0

    bgp_stitching_rt = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpAdvRtEnum']


class BgpAfEncapsulationEnum(Enum):
    """
    BgpAfEncapsulationEnum

    Bgp af encapsulation

    .. data:: vx_lan = 1

    	VxLAN encapsulation type

    """

    vx_lan = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpAfEncapsulationEnum']


class BgpAigpCfgEnum(Enum):
    """
    BgpAigpCfgEnum

    Bgp aigp cfg

    .. data:: enable = 1

    	Enable AIGP

    .. data:: disable = 2

    	Disable AIGP

    """

    enable = 1

    disable = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpAigpCfgEnum']


class BgpAigpCfgPoiEnum(Enum):
    """
    BgpAigpCfgPoiEnum

    Bgp aigp cfg poi

    .. data:: pre_best_path = 1

    	AIGP Pre-bestpath POI

    .. data:: igp_cost = 2

    	AIGP igp-cost POI

    """

    pre_best_path = 1

    igp_cost = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpAigpCfgPoiEnum']


class BgpBfdEnableModeEnum(Enum):
    """
    BgpBfdEnableModeEnum

    Bgp bfd enable mode

    .. data:: disable = 0

    	Disable Mode - Prevent inheritance

    .. data:: default = 1

    	Default Mode - Default BFD behavior

    .. data:: strict = 2

    	Strict Mode - Hold down adj until BFD session

    	up

    """

    disable = 0

    default = 1

    strict = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpBfdEnableModeEnum']


class BgpClusterIdEnum(Enum):
    """
    BgpClusterIdEnum

    Bgp cluster id

    .. data:: number = 1

    	Number

    .. data:: ipv4_address = 2

    	IPv4 Address

    """

    number = 1

    ipv4_address = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpClusterIdEnum']


class BgpEbgpSendDmzEnableModeEnum(Enum):
    """
    BgpEbgpSendDmzEnableModeEnum

    Bgp ebgp send dmz enable mode

    .. data:: disable = 0

    	Disable Mode - Prevent inheritance

    .. data:: default = 1

    	Default Mode - Send dmz link bandwidth value to

    	ebgp neighbor

    .. data:: cumulative = 2

    	Strict Mode - Send cumulative dmz link

    	bandwidth value to ebgp neighbor

    """

    disable = 0

    default = 1

    cumulative = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpEbgpSendDmzEnableModeEnum']


class BgpFlowspecValidationCfgEnum(Enum):
    """
    BgpFlowspecValidationCfgEnum

    Bgp flowspec validation cfg

    .. data:: enable = 1

    	Enable Flowspec validation

    .. data:: disable = 2

    	Disable Flowspec validation

    .. data:: redirect_nexhop_disable = 3

    	Disable Flowspec redirect nexthop validation

    """

    enable = 1

    disable = 2

    redirect_nexhop_disable = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpFlowspecValidationCfgEnum']


class BgpMvpnSfsSelectEnum(Enum):
    """
    BgpMvpnSfsSelectEnum

    Bgp mvpn sfs select

    .. data:: all_paths = 1

    	Select all paths as single forwarder PE

    .. data:: highest_ip_address = 2

    	Select PE with highest address as single

    	forwarder PE

    """

    all_paths = 1

    highest_ip_address = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpMvpnSfsSelectEnum']


class BgpOrfEnum(Enum):
    """
    BgpOrfEnum

    Bgp orf

    .. data:: none = 0

    	No capability to send or receive

    .. data:: receive = 1

    	Receive ORF capability

    .. data:: send = 2

    	Send ORF capability

    .. data:: both = 3

    	Send and receive ORF capability

    """

    none = 0

    receive = 1

    send = 2

    both = 3


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpOrfEnum']


class BgpReorgOptEnum(Enum):
    """
    BgpReorgOptEnum

    Bgp reorg opt

    .. data:: bgp_cfg_adv = 1

    	Advertise translated routes

    .. data:: bgp_cfg_adv_reorg = 2

    	Advertise Reorig routes

    .. data:: bgp_cfg_adv_disable = 3

    	Disable adv of routes

    .. data:: bgp_cfg_adv_local = 4

    	Advertise local routes

    .. data:: bgp_cfg_adv_def_vrf_imp_disable = 5

    	Disable adv of Def VRF Imported routes

    .. data:: bgp_cfg_adv_vrf_re_imp_disable = 6

    	Disable adv of VRF ReImported routes

    """

    bgp_cfg_adv = 1

    bgp_cfg_adv_reorg = 2

    bgp_cfg_adv_disable = 3

    bgp_cfg_adv_local = 4

    bgp_cfg_adv_def_vrf_imp_disable = 5

    bgp_cfg_adv_vrf_re_imp_disable = 6


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpReorgOptEnum']


class BgpRouteDistinguisherEnum(Enum):
    """
    BgpRouteDistinguisherEnum

    Bgp route distinguisher

    .. data:: auto = 1

    	Automatically assigned

    .. data:: as_ = 2

    	AS format RD

    .. data:: four_byte_as = 3

    	4-byte AS format RD

    .. data:: ipv4_address = 4

    	IPv4 address format RD

    """

    auto = 1

    as_ = 2

    four_byte_as = 3

    ipv4_address = 4


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpRouteDistinguisherEnum']


class BgpRpkiTransportEnum(Enum):
    """
    BgpRpkiTransportEnum

    Bgp rpki transport

    .. data:: tcp = 0

    	TCP Transport

    .. data:: ssh = 1

    	SSH Transport

    """

    tcp = 0

    ssh = 1


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpRpkiTransportEnum']


class BgpSendMcastAttrCfgEnum(Enum):
    """
    BgpSendMcastAttrCfgEnum

    Bgp send mcast attr cfg

    .. data:: enable = 1

    	Enable SendMcastAttr

    .. data:: disable = 2

    	Disable SendMcastAttr

    """

    enable = 1

    disable = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpSendMcastAttrCfgEnum']


class BgpSignalEnum(Enum):
    """
    BgpSignalEnum

    Bgp signal

    .. data:: bgp_disable = 1

    	Signalling BGP disable

    .. data:: ldp_disable = 2

    	Signalling LDP disable

    """

    bgp_disable = 1

    ldp_disable = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpSignalEnum']


class BgpSiteOfOriginEnum(Enum):
    """
    BgpSiteOfOriginEnum

    Bgp site of origin

    .. data:: as_ = 0

    	AS format SoO

    .. data:: ipv4_address = 1

    	IPv4 address format SoO

    .. data:: four_byte_as = 2

    	4-byte AS format SoO

    """

    as_ = 0

    ipv4_address = 1

    four_byte_as = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpSiteOfOriginEnum']


class BgpTcpModeEnum(Enum):
    """
    BgpTcpModeEnum

    Bgp tcp mode

    .. data:: either = 0

    	Either active or passive mode

    .. data:: active_only = 1

    	Active mode only

    .. data:: passive_only = 2

    	Passive mode only

    """

    either = 0

    active_only = 1

    passive_only = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpTcpModeEnum']


class BgpVrfRouteTargetEnum(Enum):
    """
    BgpVrfRouteTargetEnum

    Bgp vrf route target

    .. data:: as_ = 0

    	AS format RT

    .. data:: ipv4_address = 1

    	IPv4 address format RT

    .. data:: four_byte_as = 2

    	4-byte AS format RT

    """

    as_ = 0

    ipv4_address = 1

    four_byte_as = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BgpVrfRouteTargetEnum']


class BmpPolicySelectEnum(Enum):
    """
    BmpPolicySelectEnum

    Bmp policy select

    .. data:: pre_policy = 1

    	Pickup routes before policy application

    .. data:: post_policy = 2

    	Pickup routes after policy application

    """

    pre_policy = 1

    post_policy = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BmpPolicySelectEnum']


class BmpRouteDirectionEnum(Enum):
    """
    BmpRouteDirectionEnum

    Bmp route direction

    .. data:: inbound = 1

    	Pickup routes at inbound direction from peer

    .. data:: outbound = 2

    	Pickup routes at outbound direction to peer

    """

    inbound = 1

    outbound = 2


    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BmpRouteDirectionEnum']



class Bgp(object):
    """
    BGP configuration commands
    
    .. attribute:: instance
    
    	BGP instance configuration commands
    	**type**\: list of    :py:class:`Instance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance>`
    
    

    """

    _prefix = 'ipv4-bgp-cfg'
    _revision = '2015-08-27'

    def __init__(self):
        self.instance = YList()
        self.instance.parent = self
        self.instance.name = 'instance'


    class Instance(object):
        """
        BGP instance configuration commands
        
        .. attribute:: instance_name  <key>
        
        	Instance Name. For Default instance use \- default
        	**type**\:  str
        
        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
        
        .. attribute:: instance_as
        
        	Autonomous system
        	**type**\: list of    :py:class:`InstanceAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs>`
        
        

        """

        _prefix = 'ipv4-bgp-cfg'
        _revision = '2015-08-27'

        def __init__(self):
            self.parent = None
            self.instance_name = None
            self.instance_as = YList()
            self.instance_as.parent = self
            self.instance_as.name = 'instance_as'


        class InstanceAs(object):
            """
            Autonomous system
            
            .. attribute:: as_  <key>
            
            	Higher 16 bits of 4\-byte Autonomous system number
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: four_byte_as
            
            	4\-byte Autonomous system
            	**type**\: list of    :py:class:`FourByteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs>`
            
            

            """

            _prefix = 'ipv4-bgp-cfg'
            _revision = '2015-08-27'

            def __init__(self):
                self.parent = None
                self.as_ = None
                self.four_byte_as = YList()
                self.four_byte_as.parent = self
                self.four_byte_as.name = 'four_byte_as'


            class FourByteAs(object):
                """
                4\-byte Autonomous system
                
                .. attribute:: as_  <key>
                
                	2\-byte or 4\-byte Autonomous system number
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: bgp_running
                
                	Enable BGP. Deletion of this object causes deletion of all the objects under FourByteAS associated with this object
                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                
                .. attribute:: default_vrf
                
                	Global default config
                	**type**\:   :py:class:`DefaultVrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf>`
                
                .. attribute:: vrfs
                
                	VRF config
                	**type**\:   :py:class:`Vrfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs>`
                
                

                """

                _prefix = 'ipv4-bgp-cfg'
                _revision = '2015-08-27'

                def __init__(self):
                    self.parent = None
                    self.as_ = None
                    self.bgp_running = None
                    self.default_vrf = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf()
                    self.default_vrf.parent = self
                    self.vrfs = Bgp.Instance.InstanceAs.FourByteAs.Vrfs()
                    self.vrfs.parent = self


                class Vrfs(object):
                    """
                    VRF config
                    
                    .. attribute:: vrf
                    
                    	VRF config
                    	**type**\: list of    :py:class:`Vrf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf>`
                    
                    

                    """

                    _prefix = 'ipv4-bgp-cfg'
                    _revision = '2015-08-27'

                    def __init__(self):
                        self.parent = None
                        self.vrf = YList()
                        self.vrf.parent = self
                        self.vrf.name = 'vrf'


                    class Vrf(object):
                        """
                        VRF config
                        
                        .. attribute:: vrf_name  <key>
                        
                        	VRF name
                        	**type**\:  str
                        
                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                        
                        .. attribute:: vrf_global
                        
                        	VRF attribute config
                        	**type**\:   :py:class:`VrfGlobal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal>`
                        
                        .. attribute:: vrf_neighbors
                        
                        	BGP VRF peer
                        	**type**\:   :py:class:`VrfNeighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors>`
                        
                        

                        """

                        _prefix = 'ipv4-bgp-cfg'
                        _revision = '2015-08-27'

                        def __init__(self):
                            self.parent = None
                            self.vrf_name = None
                            self.vrf_global = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal()
                            self.vrf_global.parent = self
                            self.vrf_neighbors = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors()
                            self.vrf_neighbors.parent = self


                        class VrfGlobal(object):
                            """
                            VRF attribute config
                            
                            .. attribute:: best_path_aigp_ignore
                            
                            	Change default route selection criteria to ignore AIGP unless both paths whichare compared have AIGP attribute
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_as_multipath_relax
                            
                            	Change default multi\-route selection criteria to relax as\-path checking \- only require same aspath length
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_as_path_length
                            
                            	Change default route selection criteria to ignore AS path length
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_confederation_paths
                            
                            	Change default route selection criteria and allow the comparing of MED among confederation paths
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_cost_community
                            
                            	Change default route selection criteria to ignore cost community comparison
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_med_always
                            
                            	Change default route selection criteria and allow comparing of MED from different neighbors
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_med_missing
                            
                            	Treat missing MED as the least preferred one
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: best_path_router_id
                            
                            	Change default route selection criteria and compare router\-id for identical EBGP paths
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: bfd
                            
                            	BFD configuration
                            	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.Bfd>`
                            
                            .. attribute:: default_info_originate
                            
                            	Control distribution of default information
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: default_metric
                            
                            	Default redistributed metric
                            	**type**\:  int
                            
                            	**range:** 1..4294967295
                            
                            .. attribute:: disable_auto_soft_reset
                            
                            	Disable automatic soft peer reset on policy reconfiguration
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: disable_enforce_first_as
                            
                            	Disable enforce the first AS for EBGP routes
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: disable_fast_external_fallover
                            
                            	Disable immediate reset session if a link to a directly connected external peer goes down
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: disable_msg_log
                            
                            	Disable inbound and outbound messagelogging for all neighbors under the vrf
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: disable_neighbor_logging
                            
                            	Disable neighbor change logging
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: exists
                            
                            	Create this VRF. Deletion of this object causes deletion of all the objects under VRF associated with this object
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: global_timers
                            
                            	Adjust routing timers
                            	**type**\:   :py:class:`GlobalTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.GlobalTimers>`
                            
                            .. attribute:: igp_redist_internal
                            
                            	Allow redistribution of iBGP into IGPs (dangerous)
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: local_preference
                            
                            	Configure default local preference
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**default value**\: 100
                            
                            .. attribute:: mpls_activated_interfaces
                            
                            	Configure list of MPLS activated interfaces
                            	**type**\:   :py:class:`MplsActivatedInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces>`
                            
                            .. attribute:: multi_path_as_path_ignore_onwards
                            
                            	Change default multi\-route selection criteria to ignore everything onwards as\-path check
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: receive_socket_buffer_sizes
                            
                            	Set socket and BGP receive buffer sizes
                            	**type**\:   :py:class:`ReceiveSocketBufferSizes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.ReceiveSocketBufferSizes>`
                            
                            .. attribute:: route_distinguisher
                            
                            	Route distinguisher
                            	**type**\:   :py:class:`RouteDistinguisher <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.RouteDistinguisher>`
                            
                            .. attribute:: router_id
                            
                            	Configure Router\-id
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**default value**\: 0.0.0.0
                            
                            .. attribute:: send_socket_buffer_sizes
                            
                            	set socket parameters
                            	**type**\:   :py:class:`SendSocketBufferSizes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.SendSocketBufferSizes>`
                            
                            .. attribute:: vrf_global_afs
                            
                            	Global VRF\-specific configuration
                            	**type**\:   :py:class:`VrfGlobalAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.best_path_aigp_ignore = None
                                self.best_path_as_multipath_relax = None
                                self.best_path_as_path_length = None
                                self.best_path_confederation_paths = None
                                self.best_path_cost_community = None
                                self.best_path_med_always = None
                                self.best_path_med_missing = None
                                self.best_path_router_id = None
                                self.bfd = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.Bfd()
                                self.bfd.parent = self
                                self.default_info_originate = None
                                self.default_metric = None
                                self.disable_auto_soft_reset = None
                                self.disable_enforce_first_as = None
                                self.disable_fast_external_fallover = None
                                self.disable_msg_log = None
                                self.disable_neighbor_logging = None
                                self.exists = None
                                self.global_timers = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.GlobalTimers()
                                self.global_timers.parent = self
                                self.igp_redist_internal = None
                                self.local_preference = None
                                self.mpls_activated_interfaces = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces()
                                self.mpls_activated_interfaces.parent = self
                                self.multi_path_as_path_ignore_onwards = None
                                self.receive_socket_buffer_sizes = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.ReceiveSocketBufferSizes()
                                self.receive_socket_buffer_sizes.parent = self
                                self.route_distinguisher = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.RouteDistinguisher()
                                self.route_distinguisher.parent = self
                                self.router_id = None
                                self.send_socket_buffer_sizes = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.SendSocketBufferSizes()
                                self.send_socket_buffer_sizes.parent = self
                                self.vrf_global_afs = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs()
                                self.vrf_global_afs.parent = self


                            class RouteDistinguisher(object):
                                """
                                Route distinguisher
                                
                                .. attribute:: address
                                
                                	IP address
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: address_index
                                
                                	IP address index
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: as_
                                
                                	AS number
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: as_index
                                
                                	ASN Index
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: as_xx
                                
                                	AS number
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: type
                                
                                	Type of RD
                                	**type**\:   :py:class:`BgpRouteDistinguisherEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpRouteDistinguisherEnum>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.address = None
                                    self.address_index = None
                                    self.as_ = None
                                    self.as_index = None
                                    self.as_xx = None
                                    self.type = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:route-distinguisher'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.address is not None:
                                        return True

                                    if self.address_index is not None:
                                        return True

                                    if self.as_ is not None:
                                        return True

                                    if self.as_index is not None:
                                        return True

                                    if self.as_xx is not None:
                                        return True

                                    if self.type is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.RouteDistinguisher']['meta_info']


                            class VrfGlobalAfs(object):
                                """
                                Global VRF\-specific configuration
                                
                                .. attribute:: vrf_global_af
                                
                                	Global VRF AF\-specific configuration
                                	**type**\: list of    :py:class:`VrfGlobalAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.vrf_global_af = YList()
                                    self.vrf_global_af.parent = self
                                    self.vrf_global_af.name = 'vrf_global_af'


                                class VrfGlobalAf(object):
                                    """
                                    Global VRF AF\-specific configuration
                                    
                                    .. attribute:: af_name  <key>
                                    
                                    	Address family
                                    	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                    
                                    .. attribute:: additional_paths_receive
                                    
                                    	Advertise additional paths Receive capability
                                    	**type**\:   :py:class:`BgpafAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpafAdditionalPathsCfgEnum>`
                                    
                                    .. attribute:: additional_paths_selection
                                    
                                    	Configure additional paths selection
                                    	**type**\:   :py:class:`AdditionalPathsSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AdditionalPathsSelection>`
                                    
                                    .. attribute:: additional_paths_send
                                    
                                    	Advertise additional paths Send capability
                                    	**type**\:   :py:class:`BgpafAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpafAdditionalPathsCfgEnum>`
                                    
                                    .. attribute:: advertise_local_labeled_route_safi_unicast
                                    
                                    	Enable/disable advertisement of routes with local\-label via Unicast SAFI
                                    	**type**\:   :py:class:`BgpAdvertiseLocalLabeledRouteCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfgEnum>`
                                    
                                    .. attribute:: aggregate_addresses
                                    
                                    	Configure BGP aggregate entries
                                    	**type**\:   :py:class:`AggregateAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses>`
                                    
                                    .. attribute:: allocate_label
                                    
                                    	Label allocation policy
                                    	**type**\:   :py:class:`AllocateLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AllocateLabel>`
                                    
                                    .. attribute:: allow_vpn_default_originate
                                    
                                    	TRUE to send default orig route to VPN neighborFALSE to not send default originate route 
                                    	**type**\:  bool
                                    
                                    .. attribute:: attribute_download
                                    
                                    	Attribute download configuration
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: best_external
                                    
                                    	TRUE to enable BE FALSE to disable BE inheritance from a parent
                                    	**type**\:  bool
                                    
                                    .. attribute:: connected_routes
                                    
                                    	Redistribute connected routes
                                    	**type**\:   :py:class:`ConnectedRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ConnectedRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: dampening
                                    
                                    	Enable route\-flap dampening
                                    	**type**\:   :py:class:`Dampening <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Dampening>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: disable_as_path_loop_check
                                    
                                    	Disable outbound AS Path loop check
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: distance
                                    
                                    	Define an administrative distance
                                    	**type**\:   :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Distance>`
                                    
                                    .. attribute:: dynamic_med_interval
                                    
                                    	Update generation delay (in minutes) after a MED change
                                    	**type**\:  int
                                    
                                    	**range:** 0..10
                                    
                                    	**units**\: minute
                                    
                                    	**default value**\: 10
                                    
                                    .. attribute:: ebgp
                                    
                                    	Use eBGP multipaths
                                    	**type**\:   :py:class:`Ebgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ebgp>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: eibgp
                                    
                                    	Use eiBGP multipaths
                                    	**type**\:   :py:class:`Eibgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Eibgp>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: eigrp_routes
                                    
                                    	Redistribute information for EIGRP routes
                                    	**type**\:   :py:class:`EigrpRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes>`
                                    
                                    .. attribute:: enable
                                    
                                    	Enable the address family. Deletion of this object causes deletion of all the objects under GlobalAF/VRFGlobalAF associated with this object 
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: ibgp
                                    
                                    	Use iBGP multipaths
                                    	**type**\:   :py:class:`Ibgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ibgp>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: label_mode
                                    
                                    	BGP 6PE/MPLS\-VPN label allocation mode
                                    	**type**\:   :py:class:`LabelMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LabelMode>`
                                    
                                    .. attribute:: lisp_routes
                                    
                                    	Redistribute lisp routes
                                    	**type**\:   :py:class:`LispRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LispRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: mobile_routes
                                    
                                    	Redistribute mobile routes
                                    	**type**\:   :py:class:`MobileRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.MobileRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: mvpn
                                    
                                    	MVPN configurations
                                    	**type**\:   :py:class:`Mvpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Mvpn>`
                                    
                                    .. attribute:: next_hop_resolution_prefix_length_minimum
                                    
                                    	Minimum prefix\-length for nexthop resolution
                                    	**type**\:  int
                                    
                                    	**range:** 0..128
                                    
                                    	**default value**\: 0
                                    
                                    .. attribute:: ospf_routes
                                    
                                    	Redistribute information for OSPF routes
                                    	**type**\:   :py:class:`OspfRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes>`
                                    
                                    .. attribute:: permanent_network
                                    
                                    	Route policy for permanent networks
                                    	**type**\:  str
                                    
                                    .. attribute:: reset_weight_on_import
                                    
                                    	TRUE to reset weight on import. FALSE to not reset and to prevent inheritance from a parent
                                    	**type**\:  bool
                                    
                                    .. attribute:: rip_routes
                                    
                                    	Redistribute RIP routes
                                    	**type**\:   :py:class:`RipRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.RipRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: rt_download
                                    
                                    	Route\-Target download configuration
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: sourced_networks
                                    
                                    	Specify a network to announce via BGP
                                    	**type**\:   :py:class:`SourcedNetworks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks>`
                                    
                                    .. attribute:: static_routes
                                    
                                    	Redistribute static routes
                                    	**type**\:   :py:class:`StaticRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.StaticRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: subscriber_routes
                                    
                                    	Redistribute subscriber routes
                                    	**type**\:   :py:class:`SubscriberRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SubscriberRoutes>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: table_policy
                                    
                                    	Configure policy for installation of routes to RIB
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.af_name = None
                                        self.additional_paths_receive = None
                                        self.additional_paths_selection = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AdditionalPathsSelection()
                                        self.additional_paths_selection.parent = self
                                        self.additional_paths_send = None
                                        self.advertise_local_labeled_route_safi_unicast = None
                                        self.aggregate_addresses = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses()
                                        self.aggregate_addresses.parent = self
                                        self.allocate_label = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AllocateLabel()
                                        self.allocate_label.parent = self
                                        self.allow_vpn_default_originate = None
                                        self.attribute_download = None
                                        self.best_external = None
                                        self.connected_routes = None
                                        self.dampening = None
                                        self.disable_as_path_loop_check = None
                                        self.distance = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Distance()
                                        self.distance.parent = self
                                        self.dynamic_med_interval = None
                                        self.ebgp = None
                                        self.eibgp = None
                                        self.eigrp_routes = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes()
                                        self.eigrp_routes.parent = self
                                        self.enable = None
                                        self.ibgp = None
                                        self.label_mode = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LabelMode()
                                        self.label_mode.parent = self
                                        self.lisp_routes = None
                                        self.mobile_routes = None
                                        self.mvpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Mvpn()
                                        self.mvpn.parent = self
                                        self.next_hop_resolution_prefix_length_minimum = None
                                        self.ospf_routes = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes()
                                        self.ospf_routes.parent = self
                                        self.permanent_network = None
                                        self.reset_weight_on_import = None
                                        self.rip_routes = None
                                        self.rt_download = None
                                        self.sourced_networks = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks()
                                        self.sourced_networks.parent = self
                                        self.static_routes = None
                                        self.subscriber_routes = None
                                        self.table_policy = None


                                    class Mvpn(object):
                                        """
                                        MVPN configurations
                                        
                                        .. attribute:: single_forwarder_selection
                                        
                                        	Select MVPN single forwarder selection
                                        	**type**\:   :py:class:`BgpMvpnSfsSelectEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpMvpnSfsSelectEnum>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.single_forwarder_selection = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:mvpn'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.single_forwarder_selection is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Mvpn']['meta_info']


                                    class Ebgp(object):
                                        """
                                        Use eBGP multipaths
                                        
                                        .. attribute:: order_by_igp_metric
                                        
                                        	Order candidate multipaths by IGP metric
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: paths_value
                                        
                                        	Number of paths
                                        	**type**\:  int
                                        
                                        	**range:** 2..32
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: selective
                                        
                                        	Allow multipaths only from marked neighbors
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: unequal_cost
                                        
                                        	UNUSED
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.order_by_igp_metric = None
                                            self.paths_value = None
                                            self.selective = None
                                            self.unequal_cost = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ebgp'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.order_by_igp_metric is not None:
                                                return True

                                            if self.paths_value is not None:
                                                return True

                                            if self.selective is not None:
                                                return True

                                            if self.unequal_cost is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ebgp']['meta_info']


                                    class Eibgp(object):
                                        """
                                        Use eiBGP multipaths
                                        
                                        .. attribute:: order_by_igp_metric
                                        
                                        	Order candidate multipaths by IGP metric
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: paths_value
                                        
                                        	Number of paths
                                        	**type**\:  int
                                        
                                        	**range:** 2..32
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: selective
                                        
                                        	Allow multipaths only from marked neighbors
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: unequal_cost
                                        
                                        	UNUSED
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.order_by_igp_metric = None
                                            self.paths_value = None
                                            self.selective = None
                                            self.unequal_cost = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:eibgp'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.order_by_igp_metric is not None:
                                                return True

                                            if self.paths_value is not None:
                                                return True

                                            if self.selective is not None:
                                                return True

                                            if self.unequal_cost is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Eibgp']['meta_info']


                                    class Ibgp(object):
                                        """
                                        Use iBGP multipaths
                                        
                                        .. attribute:: order_by_igp_metric
                                        
                                        	Order candidate multipaths by IGP metric
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: paths_value
                                        
                                        	Number of paths
                                        	**type**\:  int
                                        
                                        	**range:** 2..32
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: selective
                                        
                                        	Allow multipaths only from marked neighbors
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: unequal_cost
                                        
                                        	Allow multipaths to have different IGP metrics
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.order_by_igp_metric = None
                                            self.paths_value = None
                                            self.selective = None
                                            self.unequal_cost = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ibgp'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.order_by_igp_metric is not None:
                                                return True

                                            if self.paths_value is not None:
                                                return True

                                            if self.selective is not None:
                                                return True

                                            if self.unequal_cost is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Ibgp']['meta_info']


                                    class AggregateAddresses(object):
                                        """
                                        Configure BGP aggregate entries
                                        
                                        .. attribute:: aggregate_address
                                        
                                        	Aggregate address configuration
                                        	**type**\: list of    :py:class:`AggregateAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses.AggregateAddress>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.aggregate_address = YList()
                                            self.aggregate_address.parent = self
                                            self.aggregate_address.name = 'aggregate_address'


                                        class AggregateAddress(object):
                                            """
                                            Aggregate address configuration
                                            
                                            .. attribute:: aggregate_addr  <key>
                                            
                                            	Aggregate in prefix/length format (address part)
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            .. attribute:: aggregate_prefix  <key>
                                            
                                            	Aggregate in prefix/length format (prefix part)
                                            	**type**\:  int
                                            
                                            	**range:** 0..128
                                            
                                            .. attribute:: generate_confederation_set_info
                                            
                                            	TRUE to generate AS confederation set path information, FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: generate_set_info
                                            
                                            	TRUE to generate AS set path information, FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy on which to condition advertisement, suppression, and attributes
                                            	**type**\:  str
                                            
                                            .. attribute:: summary_only
                                            
                                            	TRUE to filter more specific routes from updates, FALSEotherwise
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.aggregate_addr = None
                                                self.aggregate_prefix = None
                                                self.generate_confederation_set_info = None
                                                self.generate_set_info = None
                                                self.route_policy_name = None
                                                self.summary_only = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.aggregate_addr is None:
                                                    raise YPYModelError('Key property aggregate_addr is None')
                                                if self.aggregate_prefix is None:
                                                    raise YPYModelError('Key property aggregate_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aggregate-address[Cisco-IOS-XR-ipv4-bgp-cfg:aggregate-addr = ' + str(self.aggregate_addr) + '][Cisco-IOS-XR-ipv4-bgp-cfg:aggregate-prefix = ' + str(self.aggregate_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.aggregate_addr is not None:
                                                    return True

                                                if self.aggregate_prefix is not None:
                                                    return True

                                                if self.generate_confederation_set_info is not None:
                                                    return True

                                                if self.generate_set_info is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                if self.summary_only is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses.AggregateAddress']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aggregate-addresses'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.aggregate_address is not None:
                                                for child_ref in self.aggregate_address:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AggregateAddresses']['meta_info']


                                    class Dampening(object):
                                        """
                                        Enable route\-flap dampening
                                        
                                        .. attribute:: half_life
                                        
                                        	Half\-life time for the penalty (minutes)
                                        	**type**\:  int
                                        
                                        	**range:** 1..45
                                        
                                        	**units**\: minute
                                        
                                        .. attribute:: reuse_threshold
                                        
                                        	Value to start reusing a route
                                        	**type**\:  int
                                        
                                        	**range:** 1..20000
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy to specify criteria for dampening. This cannot be specified if any other parameters are specified
                                        	**type**\:  str
                                        
                                        .. attribute:: suppress_threshold
                                        
                                        	Value to start suppressing a route
                                        	**type**\:  int
                                        
                                        	**range:** 1..20000
                                        
                                        .. attribute:: suppress_time
                                        
                                        	Maximum duration to suppress a stable route (seconds)
                                        	**type**\:  int
                                        
                                        	**range:** 1..255
                                        
                                        	**units**\: second
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.half_life = None
                                            self.reuse_threshold = None
                                            self.route_policy_name = None
                                            self.suppress_threshold = None
                                            self.suppress_time = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:dampening'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.half_life is not None:
                                                return True

                                            if self.reuse_threshold is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            if self.suppress_threshold is not None:
                                                return True

                                            if self.suppress_time is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Dampening']['meta_info']


                                    class RipRoutes(object):
                                        """
                                        Redistribute RIP routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\:  int
                                        
                                        	**range:** 0..127
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.default_metric = None
                                            self.not_used = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:rip-routes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.default_metric is not None:
                                                return True

                                            if self.not_used is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.RipRoutes']['meta_info']


                                    class LispRoutes(object):
                                        """
                                        Redistribute lisp routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.default_metric = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:lisp-routes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.default_metric is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LispRoutes']['meta_info']


                                    class StaticRoutes(object):
                                        """
                                        Redistribute static routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\:  int
                                        
                                        	**range:** 0..127
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.default_metric = None
                                            self.not_used = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:static-routes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.default_metric is not None:
                                                return True

                                            if self.not_used is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.StaticRoutes']['meta_info']


                                    class Distance(object):
                                        """
                                        Define an administrative distance
                                        
                                        .. attribute:: external_routes
                                        
                                        	Distance for routes external to the AS
                                        	**type**\:  int
                                        
                                        	**range:** 1..255
                                        
                                        	**default value**\: 20
                                        
                                        .. attribute:: internal_routes
                                        
                                        	Distance for routes internal to the AS
                                        	**type**\:  int
                                        
                                        	**range:** 1..255
                                        
                                        	**default value**\: 200
                                        
                                        .. attribute:: local_routes
                                        
                                        	Distance for local routes
                                        	**type**\:  int
                                        
                                        	**range:** 1..255
                                        
                                        	**default value**\: 200
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.external_routes = None
                                            self.internal_routes = None
                                            self.local_routes = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:distance'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.external_routes is not None:
                                                return True

                                            if self.internal_routes is not None:
                                                return True

                                            if self.local_routes is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.Distance']['meta_info']


                                    class LabelMode(object):
                                        """
                                        BGP 6PE/MPLS\-VPN label allocation mode
                                        
                                        .. attribute:: label_allocation_mode
                                        
                                        	Label allocation mode\: per\-ce  Set per CE label mode, per\-vrf Set per VRF label mode, per\-prefix Set per Prefix label mode (for MPLS\-VPN only)
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Label mode route policy name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.label_allocation_mode = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:label-mode'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.label_allocation_mode is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.LabelMode']['meta_info']


                                    class EigrpRoutes(object):
                                        """
                                        Redistribute information for EIGRP routes.
                                        
                                        .. attribute:: eigrp_route
                                        
                                        	Redistribute EIGRP routes
                                        	**type**\: list of    :py:class:`EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes.EigrpRoute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.eigrp_route = YList()
                                            self.eigrp_route.parent = self
                                            self.eigrp_route.name = 'eigrp_route'


                                        class EigrpRoute(object):
                                            """
                                            Redistribute EIGRP routes
                                            
                                            .. attribute:: instance_name  <key>
                                            
                                            	EIGRP router tag
                                            	**type**\:  str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: default_metric
                                            
                                            	Default metric
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: redist_type
                                            
                                            	Redistribution type\: 01 for internal routes, 02 for external routes, Logical combinations permitted
                                            	**type**\:  str
                                            
                                            	**pattern:** [0\-9a\-fA\-F]{1,8}
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.instance_name = None
                                                self.default_metric = None
                                                self.redist_type = None
                                                self.route_policy_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.instance_name is None:
                                                    raise YPYModelError('Key property instance_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:eigrp-route[Cisco-IOS-XR-ipv4-bgp-cfg:instance-name = ' + str(self.instance_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.instance_name is not None:
                                                    return True

                                                if self.default_metric is not None:
                                                    return True

                                                if self.redist_type is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes.EigrpRoute']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:eigrp-routes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.eigrp_route is not None:
                                                for child_ref in self.eigrp_route:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.EigrpRoutes']['meta_info']


                                    class SourcedNetworks(object):
                                        """
                                        Specify a network to announce via BGP
                                        
                                        .. attribute:: sourced_network
                                        
                                        	Sourced network configuration
                                        	**type**\: list of    :py:class:`SourcedNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks.SourcedNetwork>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.sourced_network = YList()
                                            self.sourced_network.parent = self
                                            self.sourced_network.name = 'sourced_network'


                                        class SourcedNetwork(object):
                                            """
                                            Sourced network configuration
                                            
                                            .. attribute:: network_addr  <key>
                                            
                                            	Network in prefix/length format (address part)
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            .. attribute:: network_prefix  <key>
                                            
                                            	Network in prefix/length format (prefix part)
                                            	**type**\:  int
                                            
                                            	**range:** 0..128
                                            
                                            .. attribute:: backdoor
                                            
                                            	Specify a BGP backdoor route, default is FALSE
                                            	**type**\:  bool
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.network_addr = None
                                                self.network_prefix = None
                                                self.backdoor = None
                                                self.route_policy_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.network_addr is None:
                                                    raise YPYModelError('Key property network_addr is None')
                                                if self.network_prefix is None:
                                                    raise YPYModelError('Key property network_prefix is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:sourced-network[Cisco-IOS-XR-ipv4-bgp-cfg:network-addr = ' + str(self.network_addr) + '][Cisco-IOS-XR-ipv4-bgp-cfg:network-prefix = ' + str(self.network_prefix) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.network_addr is not None:
                                                    return True

                                                if self.network_prefix is not None:
                                                    return True

                                                if self.backdoor is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks.SourcedNetwork']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:sourced-networks'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.sourced_network is not None:
                                                for child_ref in self.sourced_network:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SourcedNetworks']['meta_info']


                                    class ConnectedRoutes(object):
                                        """
                                        Redistribute connected routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\:  int
                                        
                                        	**range:** 0..127
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.default_metric = None
                                            self.not_used = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:connected-routes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.default_metric is not None:
                                                return True

                                            if self.not_used is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.ConnectedRoutes']['meta_info']


                                    class AllocateLabel(object):
                                        """
                                        Label allocation policy
                                        
                                        .. attribute:: all
                                        
                                        	Whether all nets should be labeled, default is FALSE
                                        	**type**\:  bool
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.all = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:allocate-label'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.all is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AllocateLabel']['meta_info']


                                    class AdditionalPathsSelection(object):
                                        """
                                        Configure additional paths selection
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy for selection
                                        	**type**\:  str
                                        
                                        .. attribute:: selection
                                        
                                        	Enable/disable selection 
                                        	**type**\:   :py:class:`BgpafAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpafAdditionalPathsCfgEnum>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.route_policy_name = None
                                            self.selection = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:additional-paths-selection'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.route_policy_name is not None:
                                                return True

                                            if self.selection is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.AdditionalPathsSelection']['meta_info']


                                    class OspfRoutes(object):
                                        """
                                        Redistribute information for OSPF routes.
                                        
                                        .. attribute:: ospf_route
                                        
                                        	Redistribute OSPF routes
                                        	**type**\: list of    :py:class:`OspfRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes.OspfRoute>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.ospf_route = YList()
                                            self.ospf_route.parent = self
                                            self.ospf_route.name = 'ospf_route'


                                        class OspfRoute(object):
                                            """
                                            Redistribute OSPF routes
                                            
                                            .. attribute:: instance_name  <key>
                                            
                                            	OSPF router tag
                                            	**type**\:  str
                                            
                                            	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                            
                                            .. attribute:: default_metric
                                            
                                            	Default metric
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: redist_type
                                            
                                            	Redistribution type\: 01 for internal routes, 02 for external routes of type 1, 04 for external routes of type 2, 08 for NSSA external routes of type 1, 10 for NSSA external routes of type 2, 20 for external routes, 40 for NSSA external routes.  Logical combinations permitted
                                            	**type**\:  str
                                            
                                            	**pattern:** [0\-9a\-fA\-F]{1,8}
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.instance_name = None
                                                self.default_metric = None
                                                self.redist_type = None
                                                self.route_policy_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.instance_name is None:
                                                    raise YPYModelError('Key property instance_name is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ospf-route[Cisco-IOS-XR-ipv4-bgp-cfg:instance-name = ' + str(self.instance_name) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.instance_name is not None:
                                                    return True

                                                if self.default_metric is not None:
                                                    return True

                                                if self.redist_type is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes.OspfRoute']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ospf-routes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.ospf_route is not None:
                                                for child_ref in self.ospf_route:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.OspfRoutes']['meta_info']


                                    class MobileRoutes(object):
                                        """
                                        Redistribute mobile routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\:  int
                                        
                                        	**range:** 0..127
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.default_metric = None
                                            self.not_used = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:mobile-routes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.default_metric is not None:
                                                return True

                                            if self.not_used is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.MobileRoutes']['meta_info']


                                    class SubscriberRoutes(object):
                                        """
                                        Redistribute subscriber routes
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\:  int
                                        
                                        	**range:** 0..127
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.default_metric = None
                                            self.not_used = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:subscriber-routes'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.default_metric is not None:
                                                return True

                                            if self.not_used is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf.SubscriberRoutes']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.af_name is None:
                                            raise YPYModelError('Key property af_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-global-af[Cisco-IOS-XR-ipv4-bgp-cfg:af-name = ' + str(self.af_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.af_name is not None:
                                            return True

                                        if self.additional_paths_receive is not None:
                                            return True

                                        if self.additional_paths_selection is not None and self.additional_paths_selection._has_data():
                                            return True

                                        if self.additional_paths_send is not None:
                                            return True

                                        if self.advertise_local_labeled_route_safi_unicast is not None:
                                            return True

                                        if self.aggregate_addresses is not None and self.aggregate_addresses._has_data():
                                            return True

                                        if self.allocate_label is not None and self.allocate_label._has_data():
                                            return True

                                        if self.allow_vpn_default_originate is not None:
                                            return True

                                        if self.attribute_download is not None:
                                            return True

                                        if self.best_external is not None:
                                            return True

                                        if self.connected_routes is not None and self.connected_routes._has_data():
                                            return True

                                        if self.dampening is not None and self.dampening._has_data():
                                            return True

                                        if self.disable_as_path_loop_check is not None:
                                            return True

                                        if self.distance is not None and self.distance._has_data():
                                            return True

                                        if self.dynamic_med_interval is not None:
                                            return True

                                        if self.ebgp is not None and self.ebgp._has_data():
                                            return True

                                        if self.eibgp is not None and self.eibgp._has_data():
                                            return True

                                        if self.eigrp_routes is not None and self.eigrp_routes._has_data():
                                            return True

                                        if self.enable is not None:
                                            return True

                                        if self.ibgp is not None and self.ibgp._has_data():
                                            return True

                                        if self.label_mode is not None and self.label_mode._has_data():
                                            return True

                                        if self.lisp_routes is not None and self.lisp_routes._has_data():
                                            return True

                                        if self.mobile_routes is not None and self.mobile_routes._has_data():
                                            return True

                                        if self.mvpn is not None and self.mvpn._has_data():
                                            return True

                                        if self.next_hop_resolution_prefix_length_minimum is not None:
                                            return True

                                        if self.ospf_routes is not None and self.ospf_routes._has_data():
                                            return True

                                        if self.permanent_network is not None:
                                            return True

                                        if self.reset_weight_on_import is not None:
                                            return True

                                        if self.rip_routes is not None and self.rip_routes._has_data():
                                            return True

                                        if self.rt_download is not None:
                                            return True

                                        if self.sourced_networks is not None and self.sourced_networks._has_data():
                                            return True

                                        if self.static_routes is not None and self.static_routes._has_data():
                                            return True

                                        if self.subscriber_routes is not None and self.subscriber_routes._has_data():
                                            return True

                                        if self.table_policy is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs.VrfGlobalAf']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-global-afs'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.vrf_global_af is not None:
                                        for child_ref in self.vrf_global_af:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.VrfGlobalAfs']['meta_info']


                            class MplsActivatedInterfaces(object):
                                """
                                Configure list of MPLS activated interfaces
                                
                                .. attribute:: mpls_activated_interface
                                
                                	Configure a MPLS activated interface
                                	**type**\: list of    :py:class:`MplsActivatedInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces.MplsActivatedInterface>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.mpls_activated_interface = YList()
                                    self.mpls_activated_interface.parent = self
                                    self.mpls_activated_interface.name = 'mpls_activated_interface'


                                class MplsActivatedInterface(object):
                                    """
                                    Configure a MPLS activated interface
                                    
                                    .. attribute:: interface_name  <key>
                                    
                                    	Interface Name
                                    	**type**\:  str
                                    
                                    	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.interface_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.interface_name is None:
                                            raise YPYModelError('Key property interface_name is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:mpls-activated-interface[Cisco-IOS-XR-ipv4-bgp-cfg:interface-name = ' + str(self.interface_name) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.interface_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces.MplsActivatedInterface']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:mpls-activated-interfaces'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.mpls_activated_interface is not None:
                                        for child_ref in self.mpls_activated_interface:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.MplsActivatedInterfaces']['meta_info']


                            class GlobalTimers(object):
                                """
                                Adjust routing timers.
                                
                                .. attribute:: hold_time
                                
                                	Hold time (seconds).  Specify 0 to disable keepalives/hold time
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 180
                                
                                .. attribute:: keepalive
                                
                                	Keepalive interval (seconds)
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 60
                                
                                .. attribute:: min_accept_hold_time
                                
                                	Minimum acceptable hold time (seconds). Specify 0 to disable keepalives/hold time
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**units**\: second
                                
                                	**default value**\: 3
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.hold_time = None
                                    self.keepalive = None
                                    self.min_accept_hold_time = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:global-timers'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.hold_time is not None:
                                        return True

                                    if self.keepalive is not None:
                                        return True

                                    if self.min_accept_hold_time is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.GlobalTimers']['meta_info']


                            class Bfd(object):
                                """
                                BFD configuration
                                
                                .. attribute:: detection_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 2..16
                                
                                .. attribute:: interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.detection_multiplier = None
                                    self.interval = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bfd'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.detection_multiplier is not None:
                                        return True

                                    if self.interval is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.Bfd']['meta_info']


                            class SendSocketBufferSizes(object):
                                """
                                set socket parameters
                                
                                .. attribute:: bgp_send_size
                                
                                	BGP Write buffer size in bytes
                                	**type**\:  int
                                
                                	**range:** 4096..131072
                                
                                	**units**\: byte
                                
                                	**default value**\: 4096
                                
                                .. attribute:: socket_send_size
                                
                                	Send socket buffer size in bytes
                                	**type**\:  int
                                
                                	**range:** 4096..131072
                                
                                	**units**\: byte
                                
                                	**default value**\: 24576
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.bgp_send_size = None
                                    self.socket_send_size = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:send-socket-buffer-sizes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.bgp_send_size is not None:
                                        return True

                                    if self.socket_send_size is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.SendSocketBufferSizes']['meta_info']


                            class ReceiveSocketBufferSizes(object):
                                """
                                Set socket and BGP receive buffer sizes
                                
                                .. attribute:: bgp_receive_size
                                
                                	BGP Read buffer size in bytes
                                	**type**\:  int
                                
                                	**range:** 512..131072
                                
                                	**units**\: byte
                                
                                	**default value**\: 4096
                                
                                .. attribute:: socket_receive_size
                                
                                	Receive socket buffer size in bytes
                                	**type**\:  int
                                
                                	**range:** 512..131072
                                
                                	**units**\: byte
                                
                                	**default value**\: 32768
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.bgp_receive_size = None
                                    self.socket_receive_size = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:receive-socket-buffer-sizes'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.bgp_receive_size is not None:
                                        return True

                                    if self.socket_receive_size is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal.ReceiveSocketBufferSizes']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-global'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.best_path_aigp_ignore is not None:
                                    return True

                                if self.best_path_as_multipath_relax is not None:
                                    return True

                                if self.best_path_as_path_length is not None:
                                    return True

                                if self.best_path_confederation_paths is not None:
                                    return True

                                if self.best_path_cost_community is not None:
                                    return True

                                if self.best_path_med_always is not None:
                                    return True

                                if self.best_path_med_missing is not None:
                                    return True

                                if self.best_path_router_id is not None:
                                    return True

                                if self.bfd is not None and self.bfd._has_data():
                                    return True

                                if self.default_info_originate is not None:
                                    return True

                                if self.default_metric is not None:
                                    return True

                                if self.disable_auto_soft_reset is not None:
                                    return True

                                if self.disable_enforce_first_as is not None:
                                    return True

                                if self.disable_fast_external_fallover is not None:
                                    return True

                                if self.disable_msg_log is not None:
                                    return True

                                if self.disable_neighbor_logging is not None:
                                    return True

                                if self.exists is not None:
                                    return True

                                if self.global_timers is not None and self.global_timers._has_data():
                                    return True

                                if self.igp_redist_internal is not None:
                                    return True

                                if self.local_preference is not None:
                                    return True

                                if self.mpls_activated_interfaces is not None and self.mpls_activated_interfaces._has_data():
                                    return True

                                if self.multi_path_as_path_ignore_onwards is not None:
                                    return True

                                if self.receive_socket_buffer_sizes is not None and self.receive_socket_buffer_sizes._has_data():
                                    return True

                                if self.route_distinguisher is not None and self.route_distinguisher._has_data():
                                    return True

                                if self.router_id is not None:
                                    return True

                                if self.send_socket_buffer_sizes is not None and self.send_socket_buffer_sizes._has_data():
                                    return True

                                if self.vrf_global_afs is not None and self.vrf_global_afs._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfGlobal']['meta_info']


                        class VrfNeighbors(object):
                            """
                            BGP VRF peer
                            
                            .. attribute:: vrf_neighbor
                            
                            	A particular VRF peer
                            	**type**\: list of    :py:class:`VrfNeighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor>`
                            
                            .. attribute:: vrf_neighbor_prefix_length
                            
                            	A particular VRF peer
                            	**type**\: list of    :py:class:`VrfNeighborPrefixLength <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.vrf_neighbor = YList()
                                self.vrf_neighbor.parent = self
                                self.vrf_neighbor.name = 'vrf_neighbor'
                                self.vrf_neighbor_prefix_length = YList()
                                self.vrf_neighbor_prefix_length.parent = self
                                self.vrf_neighbor_prefix_length.name = 'vrf_neighbor_prefix_length'


                            class VrfNeighbor(object):
                                """
                                A particular VRF peer
                                
                                .. attribute:: neighbor_address  <key>
                                
                                	Neighbor address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:   :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpBfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableModeEnum>`
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:   :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates>`
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\:  str
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:   :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.EbgpMultihop>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpEbgpSendDmzEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableModeEnum>`
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\:  bool
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:   :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance>`
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\:  int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\:  bool
                                
                                .. attribute:: internal_vpn_client_ibgpce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\:  bool
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:   :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Keychain>`
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:   :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddress>`
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:   :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAs>`
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\:  int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:   :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogIn>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:   :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogOut>`
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:   :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart support for neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  bool
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\:  str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:   :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Password>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:   :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.ReceiveBufferSize>`
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:   :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.RemoteAs>`
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\:  str
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:   :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.SendBufferSize>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\:  str
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:   :py:class:`BgpTcpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpModeEnum>`
                                
                                	**default value**\: either
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\:  bool
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability.  FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:   :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tcpmss>`
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Timers>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:   :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tos>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:   :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering>`
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                .. attribute:: vrf_neighbor_afs
                                
                                	Address family type of a VRF neighbor
                                	**type**\:   :py:class:`VrfNeighborAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.neighbor_address = None
                                    self.additional_paths_receive_capability = None
                                    self.additional_paths_send_capability = None
                                    self.advertisement_interval = None
                                    self.bfd_enable_modes = None
                                    self.bfd_minimum_interval = None
                                    self.bfd_multiplier = None
                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self.description = None
                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self.ebgp_recv_dmz = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.egress_peer_engineering = None
                                    self.enforce_first_as = None
                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self.idle_watch_time = None
                                    self.ignore_connected_check_ebgp = None
                                    self.internal_vpn_client_ibgpce = None
                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Keychain()
                                    self.keychain.parent = self
                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddress()
                                    self.local_address.parent = self
                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAs()
                                    self.local_as.parent = self
                                    self.max_peers = None
                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self.neighbor_graceful_restart = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.neighbor_graceful_restart_time = None
                                    self.neighbor_group_add_member = None
                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Password()
                                    self.password.parent = self
                                    self.propagate_dmz_link_bandwidth = None
                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.RemoteAs()
                                    self.remote_as.parent = self
                                    self.remote_as_list = None
                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self.session_group_add_member = None
                                    self.session_open_mode = None
                                    self.shutdown = None
                                    self.suppress_all_capabilities = None
                                    self.suppress_four_byte_as_capability = None
                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tcpmss()
                                    self.tcpmss.parent = self
                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Timers()
                                    self.timers.parent = self
                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tos()
                                    self.tos.parent = self
                                    self.ttl_security = None
                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self.update_source_interface = None
                                    self.vrf_neighbor_afs = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs()
                                    self.vrf_neighbor_afs.parent = self


                                class VrfNeighborAfs(object):
                                    """
                                    Address family type of a VRF neighbor
                                    
                                    .. attribute:: vrf_neighbor_af
                                    
                                    	Address family type of a VRF neighbor
                                    	**type**\: list of    :py:class:`VrfNeighborAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.vrf_neighbor_af = YList()
                                        self.vrf_neighbor_af.parent = self
                                        self.vrf_neighbor_af.name = 'vrf_neighbor_af'


                                    class VrfNeighborAf(object):
                                        """
                                        Address family type of a VRF neighbor
                                        
                                        .. attribute:: af_name  <key>
                                        
                                        	BGP neighbor address family
                                        	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\:  bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT.  FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable>`
                                        
                                        .. attribute:: advertise_l2vpnevpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_l2vpnevpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:   :py:class:`BgpAdvertiseLocalLabeledRouteCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfgEnum>`
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:   :py:class:`BgpOrfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrfEnum>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\:  str
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:   :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\:  int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\:  bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:   :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:   :py:class:`BgpAfEncapsulationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulationEnum>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:   :py:class:`BgpFlowspecValidationCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfgEnum>`
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:   :py:class:`Import_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.Import_>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:   :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:   :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\:  bool
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\:  str
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client.  FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: site_of_origin
                                        
                                        	Site\-of\-Origin extended community associated with the neighbor
                                        	**type**\:   :py:class:`SiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:   :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_name = None
                                            self.accept_own = None
                                            self.accept_route_legacy_rt = None
                                            self.activate = None
                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self.advertise_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2Vpnevpn()
                                            self.advertise_l2vpnevpn.parent = self
                                            self.advertise_local_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2Vpnevpn()
                                            self.advertise_local_l2vpnevpn.parent = self
                                            self.advertise_local_labeled_route = None
                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self.advertise_orf = None
                                            self.advertise_permanent_network = None
                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self.af_group = None
                                            self.aigp = None
                                            self.aigp_cost_community = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.as_override = None
                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self.default_weight = None
                                            self.encapsulation_type = None
                                            self.flowspec_validation = None
                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.Import_()
                                            self.import_.parent = self
                                            self.maximum_prefixes = None
                                            self.multipath = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self.next_hop_self = None
                                            self.next_hop_unchanged = None
                                            self.next_hop_unchanged_multipath = None
                                            self.prefix_orf_policy = None
                                            self.remove_private_as_entire_as_path = None
                                            self.remove_private_as_entire_as_path_inbound = None
                                            self.route_policy_in = None
                                            self.route_policy_out = None
                                            self.route_reflector_client = None
                                            self.send_community_ebgp = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.send_ext_community_ebgp = None
                                            self.site_of_origin = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin()
                                            self.site_of_origin.parent = self
                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self


                                        class AigpCostCommunity(object):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:   :py:class:`BgpAigpCfgPoiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoiEnum>`
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.cost_community_id = None
                                                self.cost_community_poi_type = None
                                                self.enable = None
                                                self.transitive = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aigp-cost-community'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.cost_community_id is not None:
                                                    return True

                                                if self.cost_community_poi_type is not None:
                                                    return True

                                                if self.enable is not None:
                                                    return True

                                                if self.transitive is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(object):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-disable'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(object):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.discard_extra_paths = None
                                                self.prefix_limit = None
                                                self.restart_time = None
                                                self.warning_only = None
                                                self.warning_percentage = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:maximum-prefixes'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.discard_extra_paths is not None:
                                                    return True

                                                if self.prefix_limit is not None:
                                                    return True

                                                if self.restart_time is not None:
                                                    return True

                                                if self.warning_only is not None:
                                                    return True

                                                if self.warning_percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(object):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path-inbound'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseL2Vpnevpn(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2Vpnevpn']['meta_info']


                                        class AdvertiseLocalL2Vpnevpn(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2Vpnevpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(object):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.stale_time_accept = None
                                                self.stale_time_send = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-af-long-lived-graceful-restart-stale-time'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.stale_time_accept is not None:
                                                    return True

                                                if self.stale_time_send is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class SiteOfOrigin(object):
                                            """
                                            Site\-of\-Origin extended community associated
                                            with the neighbor
                                            
                                            .. attribute:: address
                                            
                                            	IP address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: address_index
                                            
                                            	IP address Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_index
                                            
                                            	AS number Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_xx
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: type
                                            
                                            	Type of Extended community
                                            	**type**\:   :py:class:`BgpSiteOfOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSiteOfOriginEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None
                                                self.address_index = None
                                                self.as_ = None
                                                self.as_index = None
                                                self.as_xx = None
                                                self.type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:site-of-origin'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                if self.address_index is not None:
                                                    return True

                                                if self.as_ is not None:
                                                    return True

                                                if self.as_index is not None:
                                                    return True

                                                if self.as_xx is not None:
                                                    return True

                                                if self.type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin']['meta_info']


                                        class AdvertiseV6(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6']['meta_info']


                                        class Import_(object):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self.import_stitching = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:import'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.import_reoriginate is not None:
                                                    return True

                                                if self.import_reoriginate_stitching is not None:
                                                    return True

                                                if self.import_stitching is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.Import_']['meta_info']


                                        class DefaultOriginate(object):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.enable = None
                                                self.route_policy_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:default-originate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.enable is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(object):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.inbound_soft = None
                                                self.soft_always = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:soft-reconfiguration'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.inbound_soft is not None:
                                                    return True

                                                if self.soft_always is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(object):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.af_name is None:
                                                raise YPYModelError('Key property af_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-neighbor-af[Cisco-IOS-XR-ipv4-bgp-cfg:af-name = ' + str(self.af_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_name is not None:
                                                return True

                                            if self.accept_own is not None:
                                                return True

                                            if self.accept_route_legacy_rt is not None:
                                                return True

                                            if self.activate is not None:
                                                return True

                                            if self.advertise_def_imp_disable_v4 is not None and self.advertise_def_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_def_imp_disable_v6 is not None and self.advertise_def_imp_disable_v6._has_data():
                                                return True

                                            if self.advertise_disable is not None and self.advertise_disable._has_data():
                                                return True

                                            if self.advertise_l2vpnevpn is not None and self.advertise_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_l2vpnevpn is not None and self.advertise_local_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_labeled_route is not None:
                                                return True

                                            if self.advertise_local_v4 is not None and self.advertise_local_v4._has_data():
                                                return True

                                            if self.advertise_local_v6 is not None and self.advertise_local_v6._has_data():
                                                return True

                                            if self.advertise_orf is not None:
                                                return True

                                            if self.advertise_permanent_network is not None:
                                                return True

                                            if self.advertise_v4 is not None and self.advertise_v4._has_data():
                                                return True

                                            if self.advertise_v6 is not None and self.advertise_v6._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v4 is not None and self.advertise_vrf_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v6 is not None and self.advertise_vrf_imp_disable_v6._has_data():
                                                return True

                                            if self.af_group is not None:
                                                return True

                                            if self.aigp is not None:
                                                return True

                                            if self.aigp_cost_community is not None and self.aigp_cost_community._has_data():
                                                return True

                                            if self.aigp_send_med is not None:
                                                return True

                                            if self.allow_as_in is not None:
                                                return True

                                            if self.as_override is not None:
                                                return True

                                            if self.default_originate is not None and self.default_originate._has_data():
                                                return True

                                            if self.default_weight is not None:
                                                return True

                                            if self.encapsulation_type is not None:
                                                return True

                                            if self.flowspec_validation is not None:
                                                return True

                                            if self.import_ is not None and self.import_._has_data():
                                                return True

                                            if self.maximum_prefixes is not None and self.maximum_prefixes._has_data():
                                                return True

                                            if self.multipath is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_capable is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_stale_time is not None and self.neighbor_af_long_lived_graceful_restart_stale_time._has_data():
                                                return True

                                            if self.next_hop_self is not None:
                                                return True

                                            if self.next_hop_unchanged is not None:
                                                return True

                                            if self.next_hop_unchanged_multipath is not None:
                                                return True

                                            if self.prefix_orf_policy is not None:
                                                return True

                                            if self.remove_private_as_entire_as_path is not None and self.remove_private_as_entire_as_path._has_data():
                                                return True

                                            if self.remove_private_as_entire_as_path_inbound is not None and self.remove_private_as_entire_as_path_inbound._has_data():
                                                return True

                                            if self.route_policy_in is not None:
                                                return True

                                            if self.route_policy_out is not None:
                                                return True

                                            if self.route_reflector_client is not None:
                                                return True

                                            if self.send_community_ebgp is not None:
                                                return True

                                            if self.send_community_ebgp_graceful_shutdown is not None:
                                                return True

                                            if self.send_ext_community_ebgp is not None:
                                                return True

                                            if self.site_of_origin is not None and self.site_of_origin._has_data():
                                                return True

                                            if self.soft_reconfiguration is not None and self.soft_reconfiguration._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs.VrfNeighborAf']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-neighbor-afs'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.vrf_neighbor_af is not None:
                                            for child_ref in self.vrf_neighbor_af:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.VrfNeighborAfs']['meta_info']


                                class LocalAddress(object):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\:  bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.local_address_disable = None
                                        self.local_ip_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-address'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.local_address_disable is not None:
                                            return True

                                        if self.local_ip_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAddress']['meta_info']


                                class BmpActivates(object):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of    :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bmp_activate = YList()
                                        self.bmp_activate.parent = self
                                        self.bmp_activate.name = 'bmp_activate'


                                    class BmpActivate(object):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  <key>
                                        
                                        	BMP Server ID
                                        	**type**\:  int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.server_id = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.server_id is None:
                                                raise YPYModelError('Key property server_id is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activate[Cisco-IOS-XR-ipv4-bgp-cfg:server-id = ' + str(self.server_id) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.server_id is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates.BmpActivate']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activates'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bmp_activate is not None:
                                            for child_ref in self.bmp_activate:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.BmpActivates']['meta_info']


                                class EbgpMultihop(object):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ebgp-multihop'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.max_hop_count is not None:
                                            return True

                                        if self.mpls_deactivation is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.EbgpMultihop']['meta_info']


                                class RemoteAs(object):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remote-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.RemoteAs']['meta_info']


                                class LocalAs(object):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.disable = None
                                        self.dual_as = None
                                        self.no_prepend = None
                                        self.replace_as = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        if self.disable is not None:
                                            return True

                                        if self.dual_as is not None:
                                            return True

                                        if self.no_prepend is not None:
                                            return True

                                        if self.replace_as is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.LocalAs']['meta_info']


                                class Password(object):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.password = None
                                        self.password_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:password'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.password is not None:
                                            return True

                                        if self.password_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Password']['meta_info']


                                class AdvertisementInterval(object):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertisement-interval'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.minimum_interval is not None:
                                            return True

                                        if self.minimum_interval_msecs is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(object):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.cluster_id_address = None
                                        self.cluster_id_number = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-cluster-id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cluster_id_address is not None:
                                            return True

                                        if self.cluster_id_number is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.NeighborClusterId']['meta_info']


                                class Tcpmss(object):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\:  int
                                    
                                    	**range:** 68..10000
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.mss = None
                                        self.tcpmss_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tcpmss'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.mss is not None:
                                            return True

                                        if self.tcpmss_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tcpmss']['meta_info']


                                class Tos(object):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:   :py:class:`BgpTosEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTosEnum>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:   :py:class:`BgpPrecedenceDscpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscpEnum>`
                                    
                                    
                                    ----
                                    	**type**\:  int
                                    
                                    	**range:** 0..63
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.type = None
                                        self.value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tos'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.type is not None:
                                            return True

                                        if self.value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Tos']['meta_info']


                                class UpdateInFiltering(object):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\:  str
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:   :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_message_buffers = None
                                        self.update_in_filtering_syslog_disable = None


                                    class UpdateInFilteringMessageBuffers(object):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\:  bool
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\:  int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.non_circular_buffer = None
                                            self.number_of_buffers = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering-message-buffers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.non_circular_buffer is not None:
                                                return True

                                            if self.number_of_buffers is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.update_in_filtering_attribute_filter_group is not None:
                                            return True

                                        if self.update_in_filtering_message_buffers is not None and self.update_in_filtering_message_buffers._has_data():
                                            return True

                                        if self.update_in_filtering_syslog_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.UpdateInFiltering']['meta_info']


                                class MsgLogOut(object):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-out'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogOut']['meta_info']


                                class ReceiveBufferSize(object):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_receive_size = None
                                        self.socket_receive_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:receive-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_receive_size is not None:
                                            return True

                                        if self.socket_receive_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(object):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-in'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.MsgLogIn']['meta_info']


                                class SendBufferSize(object):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_send_size = None
                                        self.socket_send_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:send-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_send_size is not None:
                                            return True

                                        if self.socket_send_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.SendBufferSize']['meta_info']


                                class Timers(object):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.hold_time = None
                                        self.keepalive_interval = None
                                        self.min_accept_hold_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:timers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.hold_time is not None:
                                            return True

                                        if self.keepalive_interval is not None:
                                            return True

                                        if self.min_accept_hold_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Timers']['meta_info']


                                class Keychain(object):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\:  bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.keychain_disable = None
                                        self.keychain_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:keychain'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.keychain_disable is not None:
                                            return True

                                        if self.keychain_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.Keychain']['meta_info']


                                class GracefulMaintenance(object):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\:  bool
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:   :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:   :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.graceful_maintenance_activate = None
                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self


                                    class GracefulMaintenanceLocalPreference(object):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-local-preference'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.gshut_loc_pref_disable is not None:
                                                return True

                                            if self.local_preference is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(object):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\:  int
                                        
                                        	**range:** 0..6
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.as_prepends = None
                                            self.gshut_prepends_disable = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-as-prepends'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.as_prepends is not None:
                                                return True

                                            if self.gshut_prepends_disable is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.graceful_maintenance_activate is not None:
                                            return True

                                        if self.graceful_maintenance_as_prepends is not None and self.graceful_maintenance_as_prepends._has_data():
                                            return True

                                        if self.graceful_maintenance_local_preference is not None and self.graceful_maintenance_local_preference._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor.GracefulMaintenance']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.neighbor_address is None:
                                        raise YPYModelError('Key property neighbor_address is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-neighbor[Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.neighbor_address is not None:
                                        return True

                                    if self.additional_paths_receive_capability is not None:
                                        return True

                                    if self.additional_paths_send_capability is not None:
                                        return True

                                    if self.advertisement_interval is not None and self.advertisement_interval._has_data():
                                        return True

                                    if self.bfd_enable_modes is not None:
                                        return True

                                    if self.bfd_minimum_interval is not None:
                                        return True

                                    if self.bfd_multiplier is not None:
                                        return True

                                    if self.bmp_activates is not None and self.bmp_activates._has_data():
                                        return True

                                    if self.description is not None:
                                        return True

                                    if self.ebgp_multihop is not None and self.ebgp_multihop._has_data():
                                        return True

                                    if self.ebgp_recv_dmz is not None:
                                        return True

                                    if self.ebgp_send_dmz_enable_modes is not None:
                                        return True

                                    if self.egress_peer_engineering is not None:
                                        return True

                                    if self.enforce_first_as is not None:
                                        return True

                                    if self.graceful_maintenance is not None and self.graceful_maintenance._has_data():
                                        return True

                                    if self.idle_watch_time is not None:
                                        return True

                                    if self.ignore_connected_check_ebgp is not None:
                                        return True

                                    if self.internal_vpn_client_ibgpce is not None:
                                        return True

                                    if self.keychain is not None and self.keychain._has_data():
                                        return True

                                    if self.local_address is not None and self.local_address._has_data():
                                        return True

                                    if self.local_as is not None and self.local_as._has_data():
                                        return True

                                    if self.max_peers is not None:
                                        return True

                                    if self.msg_log_in is not None and self.msg_log_in._has_data():
                                        return True

                                    if self.msg_log_out is not None and self.msg_log_out._has_data():
                                        return True

                                    if self.neighbor_cluster_id is not None and self.neighbor_cluster_id._has_data():
                                        return True

                                    if self.neighbor_graceful_restart is not None:
                                        return True

                                    if self.neighbor_graceful_restart_stalepath_time is not None:
                                        return True

                                    if self.neighbor_graceful_restart_time is not None:
                                        return True

                                    if self.neighbor_group_add_member is not None:
                                        return True

                                    if self.password is not None and self.password._has_data():
                                        return True

                                    if self.propagate_dmz_link_bandwidth is not None:
                                        return True

                                    if self.receive_buffer_size is not None and self.receive_buffer_size._has_data():
                                        return True

                                    if self.remote_as is not None and self.remote_as._has_data():
                                        return True

                                    if self.remote_as_list is not None:
                                        return True

                                    if self.send_buffer_size is not None and self.send_buffer_size._has_data():
                                        return True

                                    if self.session_group_add_member is not None:
                                        return True

                                    if self.session_open_mode is not None:
                                        return True

                                    if self.shutdown is not None:
                                        return True

                                    if self.suppress_all_capabilities is not None:
                                        return True

                                    if self.suppress_four_byte_as_capability is not None:
                                        return True

                                    if self.tcpmss is not None and self.tcpmss._has_data():
                                        return True

                                    if self.timers is not None and self.timers._has_data():
                                        return True

                                    if self.tos is not None and self.tos._has_data():
                                        return True

                                    if self.ttl_security is not None:
                                        return True

                                    if self.update_in_filtering is not None and self.update_in_filtering._has_data():
                                        return True

                                    if self.update_source_interface is not None:
                                        return True

                                    if self.vrf_neighbor_afs is not None and self.vrf_neighbor_afs._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighbor']['meta_info']


                            class VrfNeighborPrefixLength(object):
                                """
                                A particular VRF peer
                                
                                .. attribute:: neighbor_address  <key>
                                
                                	Neighbor address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: prefix_length  <key>
                                
                                	Prefix length
                                	**type**\:  int
                                
                                	**range:** 0..127
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:   :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpBfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableModeEnum>`
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:   :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates>`
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\:  str
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:   :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.EbgpMultihop>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpEbgpSendDmzEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableModeEnum>`
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\:  bool
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:   :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance>`
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\:  int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\:  bool
                                
                                .. attribute:: internal_vpn_client_ibgpce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\:  bool
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:   :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Keychain>`
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:   :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddress>`
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:   :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAs>`
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\:  int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:   :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogIn>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:   :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogOut>`
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:   :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart support for neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  bool
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\:  str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:   :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Password>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:   :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.ReceiveBufferSize>`
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:   :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.RemoteAs>`
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\:  str
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:   :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.SendBufferSize>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\:  str
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:   :py:class:`BgpTcpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpModeEnum>`
                                
                                	**default value**\: either
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\:  bool
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability.  FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:   :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tcpmss>`
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Timers>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:   :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tos>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:   :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering>`
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                .. attribute:: vrf_neighbor_afs
                                
                                	Address family type of a VRF neighbor
                                	**type**\:   :py:class:`VrfNeighborAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.neighbor_address = None
                                    self.prefix_length = None
                                    self.additional_paths_receive_capability = None
                                    self.additional_paths_send_capability = None
                                    self.advertisement_interval = None
                                    self.bfd_enable_modes = None
                                    self.bfd_minimum_interval = None
                                    self.bfd_multiplier = None
                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self.description = None
                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self.ebgp_recv_dmz = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.egress_peer_engineering = None
                                    self.enforce_first_as = None
                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self.idle_watch_time = None
                                    self.ignore_connected_check_ebgp = None
                                    self.internal_vpn_client_ibgpce = None
                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Keychain()
                                    self.keychain.parent = self
                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddress()
                                    self.local_address.parent = self
                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAs()
                                    self.local_as.parent = self
                                    self.max_peers = None
                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self.neighbor_graceful_restart = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.neighbor_graceful_restart_time = None
                                    self.neighbor_group_add_member = None
                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Password()
                                    self.password.parent = self
                                    self.propagate_dmz_link_bandwidth = None
                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.RemoteAs()
                                    self.remote_as.parent = self
                                    self.remote_as_list = None
                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self.session_group_add_member = None
                                    self.session_open_mode = None
                                    self.shutdown = None
                                    self.suppress_all_capabilities = None
                                    self.suppress_four_byte_as_capability = None
                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tcpmss()
                                    self.tcpmss.parent = self
                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Timers()
                                    self.timers.parent = self
                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tos()
                                    self.tos.parent = self
                                    self.ttl_security = None
                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self.update_source_interface = None
                                    self.vrf_neighbor_afs = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs()
                                    self.vrf_neighbor_afs.parent = self


                                class VrfNeighborAfs(object):
                                    """
                                    Address family type of a VRF neighbor
                                    
                                    .. attribute:: vrf_neighbor_af
                                    
                                    	Address family type of a VRF neighbor
                                    	**type**\: list of    :py:class:`VrfNeighborAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.vrf_neighbor_af = YList()
                                        self.vrf_neighbor_af.parent = self
                                        self.vrf_neighbor_af.name = 'vrf_neighbor_af'


                                    class VrfNeighborAf(object):
                                        """
                                        Address family type of a VRF neighbor
                                        
                                        .. attribute:: af_name  <key>
                                        
                                        	BGP neighbor address family
                                        	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\:  bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT.  FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable>`
                                        
                                        .. attribute:: advertise_l2vpnevpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_l2vpnevpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:   :py:class:`BgpAdvertiseLocalLabeledRouteCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfgEnum>`
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:   :py:class:`BgpOrfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrfEnum>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\:  str
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:   :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\:  int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\:  bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:   :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:   :py:class:`BgpAfEncapsulationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulationEnum>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:   :py:class:`BgpFlowspecValidationCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfgEnum>`
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:   :py:class:`Import_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.Import_>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:   :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:   :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\:  bool
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\:  str
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client.  FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: site_of_origin
                                        
                                        	Site\-of\-Origin extended community associated with the neighbor
                                        	**type**\:   :py:class:`SiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:   :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_name = None
                                            self.accept_own = None
                                            self.accept_route_legacy_rt = None
                                            self.activate = None
                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self.advertise_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2Vpnevpn()
                                            self.advertise_l2vpnevpn.parent = self
                                            self.advertise_local_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2Vpnevpn()
                                            self.advertise_local_l2vpnevpn.parent = self
                                            self.advertise_local_labeled_route = None
                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self.advertise_orf = None
                                            self.advertise_permanent_network = None
                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self.af_group = None
                                            self.aigp = None
                                            self.aigp_cost_community = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.as_override = None
                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self.default_weight = None
                                            self.encapsulation_type = None
                                            self.flowspec_validation = None
                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.Import_()
                                            self.import_.parent = self
                                            self.maximum_prefixes = None
                                            self.multipath = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self.next_hop_self = None
                                            self.next_hop_unchanged = None
                                            self.next_hop_unchanged_multipath = None
                                            self.prefix_orf_policy = None
                                            self.remove_private_as_entire_as_path = None
                                            self.remove_private_as_entire_as_path_inbound = None
                                            self.route_policy_in = None
                                            self.route_policy_out = None
                                            self.route_reflector_client = None
                                            self.send_community_ebgp = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.send_ext_community_ebgp = None
                                            self.site_of_origin = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin()
                                            self.site_of_origin.parent = self
                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self


                                        class AigpCostCommunity(object):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:   :py:class:`BgpAigpCfgPoiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoiEnum>`
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.cost_community_id = None
                                                self.cost_community_poi_type = None
                                                self.enable = None
                                                self.transitive = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aigp-cost-community'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.cost_community_id is not None:
                                                    return True

                                                if self.cost_community_poi_type is not None:
                                                    return True

                                                if self.enable is not None:
                                                    return True

                                                if self.transitive is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(object):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-disable'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(object):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.discard_extra_paths = None
                                                self.prefix_limit = None
                                                self.restart_time = None
                                                self.warning_only = None
                                                self.warning_percentage = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:maximum-prefixes'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.discard_extra_paths is not None:
                                                    return True

                                                if self.prefix_limit is not None:
                                                    return True

                                                if self.restart_time is not None:
                                                    return True

                                                if self.warning_only is not None:
                                                    return True

                                                if self.warning_percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.MaximumPrefixes']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(object):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path-inbound'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseL2Vpnevpn(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseL2Vpnevpn']['meta_info']


                                        class AdvertiseLocalL2Vpnevpn(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalL2Vpnevpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(object):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.stale_time_accept = None
                                                self.stale_time_send = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-af-long-lived-graceful-restart-stale-time'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.stale_time_accept is not None:
                                                    return True

                                                if self.stale_time_send is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class SiteOfOrigin(object):
                                            """
                                            Site\-of\-Origin extended community associated
                                            with the neighbor
                                            
                                            .. attribute:: address
                                            
                                            	IP address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: address_index
                                            
                                            	IP address Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_index
                                            
                                            	AS number Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_xx
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: type
                                            
                                            	Type of Extended community
                                            	**type**\:   :py:class:`BgpSiteOfOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSiteOfOriginEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None
                                                self.address_index = None
                                                self.as_ = None
                                                self.as_index = None
                                                self.as_xx = None
                                                self.type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:site-of-origin'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                if self.address_index is not None:
                                                    return True

                                                if self.as_ is not None:
                                                    return True

                                                if self.as_index is not None:
                                                    return True

                                                if self.as_xx is not None:
                                                    return True

                                                if self.type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SiteOfOrigin']['meta_info']


                                        class AdvertiseV6(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV6']['meta_info']


                                        class Import_(object):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self.import_stitching = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:import'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.import_reoriginate is not None:
                                                    return True

                                                if self.import_reoriginate_stitching is not None:
                                                    return True

                                                if self.import_stitching is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.Import_']['meta_info']


                                        class DefaultOriginate(object):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.enable = None
                                                self.route_policy_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:default-originate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.enable is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(object):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.inbound_soft = None
                                                self.soft_always = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:soft-reconfiguration'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.inbound_soft is not None:
                                                    return True

                                                if self.soft_always is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(object):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.af_name is None:
                                                raise YPYModelError('Key property af_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-neighbor-af[Cisco-IOS-XR-ipv4-bgp-cfg:af-name = ' + str(self.af_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_name is not None:
                                                return True

                                            if self.accept_own is not None:
                                                return True

                                            if self.accept_route_legacy_rt is not None:
                                                return True

                                            if self.activate is not None:
                                                return True

                                            if self.advertise_def_imp_disable_v4 is not None and self.advertise_def_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_def_imp_disable_v6 is not None and self.advertise_def_imp_disable_v6._has_data():
                                                return True

                                            if self.advertise_disable is not None and self.advertise_disable._has_data():
                                                return True

                                            if self.advertise_l2vpnevpn is not None and self.advertise_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_l2vpnevpn is not None and self.advertise_local_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_labeled_route is not None:
                                                return True

                                            if self.advertise_local_v4 is not None and self.advertise_local_v4._has_data():
                                                return True

                                            if self.advertise_local_v6 is not None and self.advertise_local_v6._has_data():
                                                return True

                                            if self.advertise_orf is not None:
                                                return True

                                            if self.advertise_permanent_network is not None:
                                                return True

                                            if self.advertise_v4 is not None and self.advertise_v4._has_data():
                                                return True

                                            if self.advertise_v6 is not None and self.advertise_v6._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v4 is not None and self.advertise_vrf_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v6 is not None and self.advertise_vrf_imp_disable_v6._has_data():
                                                return True

                                            if self.af_group is not None:
                                                return True

                                            if self.aigp is not None:
                                                return True

                                            if self.aigp_cost_community is not None and self.aigp_cost_community._has_data():
                                                return True

                                            if self.aigp_send_med is not None:
                                                return True

                                            if self.allow_as_in is not None:
                                                return True

                                            if self.as_override is not None:
                                                return True

                                            if self.default_originate is not None and self.default_originate._has_data():
                                                return True

                                            if self.default_weight is not None:
                                                return True

                                            if self.encapsulation_type is not None:
                                                return True

                                            if self.flowspec_validation is not None:
                                                return True

                                            if self.import_ is not None and self.import_._has_data():
                                                return True

                                            if self.maximum_prefixes is not None and self.maximum_prefixes._has_data():
                                                return True

                                            if self.multipath is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_capable is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_stale_time is not None and self.neighbor_af_long_lived_graceful_restart_stale_time._has_data():
                                                return True

                                            if self.next_hop_self is not None:
                                                return True

                                            if self.next_hop_unchanged is not None:
                                                return True

                                            if self.next_hop_unchanged_multipath is not None:
                                                return True

                                            if self.prefix_orf_policy is not None:
                                                return True

                                            if self.remove_private_as_entire_as_path is not None and self.remove_private_as_entire_as_path._has_data():
                                                return True

                                            if self.remove_private_as_entire_as_path_inbound is not None and self.remove_private_as_entire_as_path_inbound._has_data():
                                                return True

                                            if self.route_policy_in is not None:
                                                return True

                                            if self.route_policy_out is not None:
                                                return True

                                            if self.route_reflector_client is not None:
                                                return True

                                            if self.send_community_ebgp is not None:
                                                return True

                                            if self.send_community_ebgp_graceful_shutdown is not None:
                                                return True

                                            if self.send_ext_community_ebgp is not None:
                                                return True

                                            if self.site_of_origin is not None and self.site_of_origin._has_data():
                                                return True

                                            if self.soft_reconfiguration is not None and self.soft_reconfiguration._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs.VrfNeighborAf']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-neighbor-afs'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.vrf_neighbor_af is not None:
                                            for child_ref in self.vrf_neighbor_af:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.VrfNeighborAfs']['meta_info']


                                class LocalAddress(object):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\:  bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.local_address_disable = None
                                        self.local_ip_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-address'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.local_address_disable is not None:
                                            return True

                                        if self.local_ip_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAddress']['meta_info']


                                class BmpActivates(object):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of    :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bmp_activate = YList()
                                        self.bmp_activate.parent = self
                                        self.bmp_activate.name = 'bmp_activate'


                                    class BmpActivate(object):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  <key>
                                        
                                        	BMP Server ID
                                        	**type**\:  int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.server_id = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.server_id is None:
                                                raise YPYModelError('Key property server_id is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activate[Cisco-IOS-XR-ipv4-bgp-cfg:server-id = ' + str(self.server_id) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.server_id is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates.BmpActivate']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activates'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bmp_activate is not None:
                                            for child_ref in self.bmp_activate:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.BmpActivates']['meta_info']


                                class EbgpMultihop(object):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ebgp-multihop'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.max_hop_count is not None:
                                            return True

                                        if self.mpls_deactivation is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.EbgpMultihop']['meta_info']


                                class RemoteAs(object):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remote-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.RemoteAs']['meta_info']


                                class LocalAs(object):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.disable = None
                                        self.dual_as = None
                                        self.no_prepend = None
                                        self.replace_as = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        if self.disable is not None:
                                            return True

                                        if self.dual_as is not None:
                                            return True

                                        if self.no_prepend is not None:
                                            return True

                                        if self.replace_as is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.LocalAs']['meta_info']


                                class Password(object):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.password = None
                                        self.password_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:password'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.password is not None:
                                            return True

                                        if self.password_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Password']['meta_info']


                                class AdvertisementInterval(object):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertisement-interval'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.minimum_interval is not None:
                                            return True

                                        if self.minimum_interval_msecs is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(object):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.cluster_id_address = None
                                        self.cluster_id_number = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-cluster-id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cluster_id_address is not None:
                                            return True

                                        if self.cluster_id_number is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.NeighborClusterId']['meta_info']


                                class Tcpmss(object):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\:  int
                                    
                                    	**range:** 68..10000
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.mss = None
                                        self.tcpmss_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tcpmss'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.mss is not None:
                                            return True

                                        if self.tcpmss_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tcpmss']['meta_info']


                                class Tos(object):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:   :py:class:`BgpTosEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTosEnum>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:   :py:class:`BgpPrecedenceDscpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscpEnum>`
                                    
                                    
                                    ----
                                    	**type**\:  int
                                    
                                    	**range:** 0..63
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.type = None
                                        self.value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tos'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.type is not None:
                                            return True

                                        if self.value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Tos']['meta_info']


                                class UpdateInFiltering(object):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\:  str
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:   :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_message_buffers = None
                                        self.update_in_filtering_syslog_disable = None


                                    class UpdateInFilteringMessageBuffers(object):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\:  bool
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\:  int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.non_circular_buffer = None
                                            self.number_of_buffers = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering-message-buffers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.non_circular_buffer is not None:
                                                return True

                                            if self.number_of_buffers is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.update_in_filtering_attribute_filter_group is not None:
                                            return True

                                        if self.update_in_filtering_message_buffers is not None and self.update_in_filtering_message_buffers._has_data():
                                            return True

                                        if self.update_in_filtering_syslog_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.UpdateInFiltering']['meta_info']


                                class MsgLogOut(object):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-out'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogOut']['meta_info']


                                class ReceiveBufferSize(object):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_receive_size = None
                                        self.socket_receive_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:receive-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_receive_size is not None:
                                            return True

                                        if self.socket_receive_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(object):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-in'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.MsgLogIn']['meta_info']


                                class SendBufferSize(object):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_send_size = None
                                        self.socket_send_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:send-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_send_size is not None:
                                            return True

                                        if self.socket_send_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.SendBufferSize']['meta_info']


                                class Timers(object):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.hold_time = None
                                        self.keepalive_interval = None
                                        self.min_accept_hold_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:timers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.hold_time is not None:
                                            return True

                                        if self.keepalive_interval is not None:
                                            return True

                                        if self.min_accept_hold_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Timers']['meta_info']


                                class Keychain(object):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\:  bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.keychain_disable = None
                                        self.keychain_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:keychain'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.keychain_disable is not None:
                                            return True

                                        if self.keychain_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.Keychain']['meta_info']


                                class GracefulMaintenance(object):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\:  bool
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:   :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:   :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.graceful_maintenance_activate = None
                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self


                                    class GracefulMaintenanceLocalPreference(object):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-local-preference'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.gshut_loc_pref_disable is not None:
                                                return True

                                            if self.local_preference is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(object):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\:  int
                                        
                                        	**range:** 0..6
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.as_prepends = None
                                            self.gshut_prepends_disable = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-as-prepends'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.as_prepends is not None:
                                                return True

                                            if self.gshut_prepends_disable is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.graceful_maintenance_activate is not None:
                                            return True

                                        if self.graceful_maintenance_as_prepends is not None and self.graceful_maintenance_as_prepends._has_data():
                                            return True

                                        if self.graceful_maintenance_local_preference is not None and self.graceful_maintenance_local_preference._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength.GracefulMaintenance']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.neighbor_address is None:
                                        raise YPYModelError('Key property neighbor_address is None')
                                    if self.prefix_length is None:
                                        raise YPYModelError('Key property prefix_length is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-neighbor-prefix-length[Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-address = ' + str(self.neighbor_address) + '][Cisco-IOS-XR-ipv4-bgp-cfg:prefix-length = ' + str(self.prefix_length) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.neighbor_address is not None:
                                        return True

                                    if self.prefix_length is not None:
                                        return True

                                    if self.additional_paths_receive_capability is not None:
                                        return True

                                    if self.additional_paths_send_capability is not None:
                                        return True

                                    if self.advertisement_interval is not None and self.advertisement_interval._has_data():
                                        return True

                                    if self.bfd_enable_modes is not None:
                                        return True

                                    if self.bfd_minimum_interval is not None:
                                        return True

                                    if self.bfd_multiplier is not None:
                                        return True

                                    if self.bmp_activates is not None and self.bmp_activates._has_data():
                                        return True

                                    if self.description is not None:
                                        return True

                                    if self.ebgp_multihop is not None and self.ebgp_multihop._has_data():
                                        return True

                                    if self.ebgp_recv_dmz is not None:
                                        return True

                                    if self.ebgp_send_dmz_enable_modes is not None:
                                        return True

                                    if self.egress_peer_engineering is not None:
                                        return True

                                    if self.enforce_first_as is not None:
                                        return True

                                    if self.graceful_maintenance is not None and self.graceful_maintenance._has_data():
                                        return True

                                    if self.idle_watch_time is not None:
                                        return True

                                    if self.ignore_connected_check_ebgp is not None:
                                        return True

                                    if self.internal_vpn_client_ibgpce is not None:
                                        return True

                                    if self.keychain is not None and self.keychain._has_data():
                                        return True

                                    if self.local_address is not None and self.local_address._has_data():
                                        return True

                                    if self.local_as is not None and self.local_as._has_data():
                                        return True

                                    if self.max_peers is not None:
                                        return True

                                    if self.msg_log_in is not None and self.msg_log_in._has_data():
                                        return True

                                    if self.msg_log_out is not None and self.msg_log_out._has_data():
                                        return True

                                    if self.neighbor_cluster_id is not None and self.neighbor_cluster_id._has_data():
                                        return True

                                    if self.neighbor_graceful_restart is not None:
                                        return True

                                    if self.neighbor_graceful_restart_stalepath_time is not None:
                                        return True

                                    if self.neighbor_graceful_restart_time is not None:
                                        return True

                                    if self.neighbor_group_add_member is not None:
                                        return True

                                    if self.password is not None and self.password._has_data():
                                        return True

                                    if self.propagate_dmz_link_bandwidth is not None:
                                        return True

                                    if self.receive_buffer_size is not None and self.receive_buffer_size._has_data():
                                        return True

                                    if self.remote_as is not None and self.remote_as._has_data():
                                        return True

                                    if self.remote_as_list is not None:
                                        return True

                                    if self.send_buffer_size is not None and self.send_buffer_size._has_data():
                                        return True

                                    if self.session_group_add_member is not None:
                                        return True

                                    if self.session_open_mode is not None:
                                        return True

                                    if self.shutdown is not None:
                                        return True

                                    if self.suppress_all_capabilities is not None:
                                        return True

                                    if self.suppress_four_byte_as_capability is not None:
                                        return True

                                    if self.tcpmss is not None and self.tcpmss._has_data():
                                        return True

                                    if self.timers is not None and self.timers._has_data():
                                        return True

                                    if self.tos is not None and self.tos._has_data():
                                        return True

                                    if self.ttl_security is not None:
                                        return True

                                    if self.update_in_filtering is not None and self.update_in_filtering._has_data():
                                        return True

                                    if self.update_source_interface is not None:
                                        return True

                                    if self.vrf_neighbor_afs is not None and self.vrf_neighbor_afs._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors.VrfNeighborPrefixLength']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-neighbors'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.vrf_neighbor is not None:
                                    for child_ref in self.vrf_neighbor:
                                        if child_ref._has_data():
                                            return True

                                if self.vrf_neighbor_prefix_length is not None:
                                    for child_ref in self.vrf_neighbor_prefix_length:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf.VrfNeighbors']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.vrf_name is None:
                                raise YPYModelError('Key property vrf_name is None')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf[Cisco-IOS-XR-ipv4-bgp-cfg:vrf-name = ' + str(self.vrf_name) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.vrf_name is not None:
                                return True

                            if self.vrf_global is not None and self.vrf_global._has_data():
                                return True

                            if self.vrf_neighbors is not None and self.vrf_neighbors._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs.Vrf']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrfs'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.vrf is not None:
                            for child_ref in self.vrf:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.Vrfs']['meta_info']


                class DefaultVrf(object):
                    """
                    Global default config
                    
                    .. attribute:: bgp_entity
                    
                    	Neighbor, neighbor\-group, af\-group and session\-group configuration
                    	**type**\:   :py:class:`BgpEntity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity>`
                    
                    .. attribute:: global_
                    
                    	Global default config
                    	**type**\:   :py:class:`Global_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_>`
                    
                    

                    """

                    _prefix = 'ipv4-bgp-cfg'
                    _revision = '2015-08-27'

                    def __init__(self):
                        self.parent = None
                        self.bgp_entity = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity()
                        self.bgp_entity.parent = self
                        self.global_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_()
                        self.global_.parent = self


                    class BgpEntity(object):
                        """
                        Neighbor, neighbor\-group, af\-group and
                        session\-group configuration
                        
                        .. attribute:: af_groups
                        
                        	AF\-group configuration
                        	**type**\:   :py:class:`AfGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups>`
                        
                        .. attribute:: neighbor_groups
                        
                        	Neighbor\-group configuration
                        	**type**\:   :py:class:`NeighborGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups>`
                        
                        .. attribute:: neighbors
                        
                        	Neighbor configuration
                        	**type**\:   :py:class:`Neighbors <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors>`
                        
                        .. attribute:: session_groups
                        
                        	Session group configuration
                        	**type**\:   :py:class:`SessionGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups>`
                        
                        

                        """

                        _prefix = 'ipv4-bgp-cfg'
                        _revision = '2015-08-27'

                        def __init__(self):
                            self.parent = None
                            self.af_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups()
                            self.af_groups.parent = self
                            self.neighbor_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups()
                            self.neighbor_groups.parent = self
                            self.neighbors = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors()
                            self.neighbors.parent = self
                            self.session_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups()
                            self.session_groups.parent = self


                        class Neighbors(object):
                            """
                            Neighbor configuration
                            
                            .. attribute:: neighbor
                            
                            	A particular BGP peer
                            	**type**\: list of    :py:class:`Neighbor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor>`
                            
                            .. attribute:: neighbor_prefix_length
                            
                            	A particular BGP peer
                            	**type**\: list of    :py:class:`NeighborPrefixLength <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.neighbor = YList()
                                self.neighbor.parent = self
                                self.neighbor.name = 'neighbor'
                                self.neighbor_prefix_length = YList()
                                self.neighbor_prefix_length.parent = self
                                self.neighbor_prefix_length.name = 'neighbor_prefix_length'


                            class Neighbor(object):
                                """
                                A particular BGP peer
                                
                                .. attribute:: neighbor_address  <key>
                                
                                	Neighbor address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:   :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpBfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableModeEnum>`
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:   :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates>`
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\:  str
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:   :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.EbgpMultihop>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpEbgpSendDmzEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableModeEnum>`
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\:  bool
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:   :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance>`
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\:  int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\:  bool
                                
                                .. attribute:: internal_vpn_client_ibgpce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\:  bool
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:   :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Keychain>`
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:   :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddress>`
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:   :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAs>`
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\:  int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:   :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogIn>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:   :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogOut>`
                                
                                .. attribute:: neighbor_afs
                                
                                	BGP neighbor AF configuration table
                                	**type**\:   :py:class:`NeighborAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs>`
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:   :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart support for neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  bool
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\:  str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:   :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Password>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:   :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.ReceiveBufferSize>`
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:   :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.RemoteAs>`
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\:  str
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:   :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.SendBufferSize>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\:  str
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:   :py:class:`BgpTcpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpModeEnum>`
                                
                                	**default value**\: either
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\:  bool
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability.  FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:   :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tcpmss>`
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Timers>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:   :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tos>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:   :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering>`
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.neighbor_address = None
                                    self.additional_paths_receive_capability = None
                                    self.additional_paths_send_capability = None
                                    self.advertisement_interval = None
                                    self.bfd_enable_modes = None
                                    self.bfd_minimum_interval = None
                                    self.bfd_multiplier = None
                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self.description = None
                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self.ebgp_recv_dmz = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.egress_peer_engineering = None
                                    self.enforce_first_as = None
                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self.idle_watch_time = None
                                    self.ignore_connected_check_ebgp = None
                                    self.internal_vpn_client_ibgpce = None
                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Keychain()
                                    self.keychain.parent = self
                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddress()
                                    self.local_address.parent = self
                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAs()
                                    self.local_as.parent = self
                                    self.max_peers = None
                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self.neighbor_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs()
                                    self.neighbor_afs.parent = self
                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self.neighbor_graceful_restart = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.neighbor_graceful_restart_time = None
                                    self.neighbor_group_add_member = None
                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Password()
                                    self.password.parent = self
                                    self.propagate_dmz_link_bandwidth = None
                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.RemoteAs()
                                    self.remote_as.parent = self
                                    self.remote_as_list = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self.session_group_add_member = None
                                    self.session_open_mode = None
                                    self.shutdown = None
                                    self.suppress_all_capabilities = None
                                    self.suppress_four_byte_as_capability = None
                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tcpmss()
                                    self.tcpmss.parent = self
                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Timers()
                                    self.timers.parent = self
                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tos()
                                    self.tos.parent = self
                                    self.ttl_security = None
                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self.update_source_interface = None


                                class NeighborAfs(object):
                                    """
                                    BGP neighbor AF configuration table
                                    
                                    .. attribute:: neighbor_af
                                    
                                    	Address family type of neighbor
                                    	**type**\: list of    :py:class:`NeighborAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.neighbor_af = YList()
                                        self.neighbor_af.parent = self
                                        self.neighbor_af.name = 'neighbor_af'


                                    class NeighborAf(object):
                                        """
                                        Address family type of neighbor
                                        
                                        .. attribute:: af_name  <key>
                                        
                                        	BGP neighbor address family
                                        	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\:  bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT.  FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDisable>`
                                        
                                        .. attribute:: advertise_l2vpnevpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_l2vpnevpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:   :py:class:`BgpAdvertiseLocalLabeledRouteCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfgEnum>`
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:   :py:class:`BgpOrfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrfEnum>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV4>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV6>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\:  str
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:   :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AigpCostCommunity>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\:  int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\:  bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:   :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.DefaultOriginate>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:   :py:class:`BgpAfEncapsulationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulationEnum>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:   :py:class:`BgpFlowspecValidationCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfgEnum>`
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:   :py:class:`Import_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.Import_>`
                                        
                                        .. attribute:: l2vpn_signalling
                                        
                                        	Disable signalling type on the peer
                                        	**type**\:   :py:class:`BgpSignalEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSignalEnum>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:   :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:   :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\:  bool
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\:  str
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client.  FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_multicast_attr
                                        
                                        	Config send multicast attribute for this neighbor
                                        	**type**\:   :py:class:`BgpSendMcastAttrCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSendMcastAttrCfgEnum>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:   :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.SoftReconfiguration>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_name = None
                                            self.accept_own = None
                                            self.accept_route_legacy_rt = None
                                            self.activate = None
                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self.advertise_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseL2Vpnevpn()
                                            self.advertise_l2vpnevpn.parent = self
                                            self.advertise_local_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalL2Vpnevpn()
                                            self.advertise_local_l2vpnevpn.parent = self
                                            self.advertise_local_labeled_route = None
                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self.advertise_orf = None
                                            self.advertise_permanent_network = None
                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self.af_group = None
                                            self.aigp = None
                                            self.aigp_cost_community = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.as_override = None
                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self.default_weight = None
                                            self.encapsulation_type = None
                                            self.flowspec_validation = None
                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.Import_()
                                            self.import_.parent = self
                                            self.l2vpn_signalling = None
                                            self.maximum_prefixes = None
                                            self.multipath = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self.next_hop_self = None
                                            self.next_hop_unchanged = None
                                            self.next_hop_unchanged_multipath = None
                                            self.prefix_orf_policy = None
                                            self.remove_private_as_entire_as_path = None
                                            self.remove_private_as_entire_as_path_inbound = None
                                            self.route_policy_in = None
                                            self.route_policy_out = None
                                            self.route_reflector_client = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.send_community_ebgp = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.send_ext_community_ebgp = None
                                            self.send_multicast_attr = None
                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self


                                        class AigpCostCommunity(object):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:   :py:class:`BgpAigpCfgPoiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoiEnum>`
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.cost_community_id = None
                                                self.cost_community_poi_type = None
                                                self.enable = None
                                                self.transitive = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aigp-cost-community'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.cost_community_id is not None:
                                                    return True

                                                if self.cost_community_poi_type is not None:
                                                    return True

                                                if self.enable is not None:
                                                    return True

                                                if self.transitive is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(object):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-disable'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(object):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.discard_extra_paths = None
                                                self.prefix_limit = None
                                                self.restart_time = None
                                                self.warning_only = None
                                                self.warning_percentage = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:maximum-prefixes'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.discard_extra_paths is not None:
                                                    return True

                                                if self.prefix_limit is not None:
                                                    return True

                                                if self.restart_time is not None:
                                                    return True

                                                if self.warning_only is not None:
                                                    return True

                                                if self.warning_percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.MaximumPrefixes']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(object):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path-inbound'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseL2Vpnevpn(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseL2Vpnevpn']['meta_info']


                                        class AdvertiseLocalL2Vpnevpn(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalL2Vpnevpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(object):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.stale_time_accept = None
                                                self.stale_time_send = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-af-long-lived-graceful-restart-stale-time'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.stale_time_accept is not None:
                                                    return True

                                                if self.stale_time_send is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class AdvertiseV6(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV6']['meta_info']


                                        class Import_(object):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self.import_stitching = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:import'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.import_reoriginate is not None:
                                                    return True

                                                if self.import_reoriginate_stitching is not None:
                                                    return True

                                                if self.import_stitching is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.Import_']['meta_info']


                                        class DefaultOriginate(object):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.enable = None
                                                self.route_policy_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:default-originate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.enable is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(object):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.inbound_soft = None
                                                self.soft_always = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:soft-reconfiguration'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.inbound_soft is not None:
                                                    return True

                                                if self.soft_always is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(object):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.af_name is None:
                                                raise YPYModelError('Key property af_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-af[Cisco-IOS-XR-ipv4-bgp-cfg:af-name = ' + str(self.af_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_name is not None:
                                                return True

                                            if self.accept_own is not None:
                                                return True

                                            if self.accept_route_legacy_rt is not None:
                                                return True

                                            if self.activate is not None:
                                                return True

                                            if self.advertise_def_imp_disable_v4 is not None and self.advertise_def_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_def_imp_disable_v6 is not None and self.advertise_def_imp_disable_v6._has_data():
                                                return True

                                            if self.advertise_disable is not None and self.advertise_disable._has_data():
                                                return True

                                            if self.advertise_l2vpnevpn is not None and self.advertise_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_l2vpnevpn is not None and self.advertise_local_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_labeled_route is not None:
                                                return True

                                            if self.advertise_local_v4 is not None and self.advertise_local_v4._has_data():
                                                return True

                                            if self.advertise_local_v6 is not None and self.advertise_local_v6._has_data():
                                                return True

                                            if self.advertise_orf is not None:
                                                return True

                                            if self.advertise_permanent_network is not None:
                                                return True

                                            if self.advertise_v4 is not None and self.advertise_v4._has_data():
                                                return True

                                            if self.advertise_v6 is not None and self.advertise_v6._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v4 is not None and self.advertise_vrf_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v6 is not None and self.advertise_vrf_imp_disable_v6._has_data():
                                                return True

                                            if self.af_group is not None:
                                                return True

                                            if self.aigp is not None:
                                                return True

                                            if self.aigp_cost_community is not None and self.aigp_cost_community._has_data():
                                                return True

                                            if self.aigp_send_med is not None:
                                                return True

                                            if self.allow_as_in is not None:
                                                return True

                                            if self.as_override is not None:
                                                return True

                                            if self.default_originate is not None and self.default_originate._has_data():
                                                return True

                                            if self.default_weight is not None:
                                                return True

                                            if self.encapsulation_type is not None:
                                                return True

                                            if self.flowspec_validation is not None:
                                                return True

                                            if self.import_ is not None and self.import_._has_data():
                                                return True

                                            if self.l2vpn_signalling is not None:
                                                return True

                                            if self.maximum_prefixes is not None and self.maximum_prefixes._has_data():
                                                return True

                                            if self.multipath is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_capable is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_stale_time is not None and self.neighbor_af_long_lived_graceful_restart_stale_time._has_data():
                                                return True

                                            if self.next_hop_self is not None:
                                                return True

                                            if self.next_hop_unchanged is not None:
                                                return True

                                            if self.next_hop_unchanged_multipath is not None:
                                                return True

                                            if self.prefix_orf_policy is not None:
                                                return True

                                            if self.remove_private_as_entire_as_path is not None and self.remove_private_as_entire_as_path._has_data():
                                                return True

                                            if self.remove_private_as_entire_as_path_inbound is not None and self.remove_private_as_entire_as_path_inbound._has_data():
                                                return True

                                            if self.route_policy_in is not None:
                                                return True

                                            if self.route_policy_out is not None:
                                                return True

                                            if self.route_reflector_client is not None:
                                                return True

                                            if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                                return True

                                            if self.rpki_origin_as_validation_disable is not None:
                                                return True

                                            if self.send_community_ebgp is not None:
                                                return True

                                            if self.send_community_ebgp_graceful_shutdown is not None:
                                                return True

                                            if self.send_ext_community_ebgp is not None:
                                                return True

                                            if self.send_multicast_attr is not None:
                                                return True

                                            if self.soft_reconfiguration is not None and self.soft_reconfiguration._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs.NeighborAf']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-afs'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.neighbor_af is not None:
                                            for child_ref in self.neighbor_af:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborAfs']['meta_info']


                                class LocalAddress(object):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\:  bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.local_address_disable = None
                                        self.local_ip_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-address'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.local_address_disable is not None:
                                            return True

                                        if self.local_ip_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAddress']['meta_info']


                                class BmpActivates(object):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of    :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bmp_activate = YList()
                                        self.bmp_activate.parent = self
                                        self.bmp_activate.name = 'bmp_activate'


                                    class BmpActivate(object):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  <key>
                                        
                                        	BMP Server ID
                                        	**type**\:  int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.server_id = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.server_id is None:
                                                raise YPYModelError('Key property server_id is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activate[Cisco-IOS-XR-ipv4-bgp-cfg:server-id = ' + str(self.server_id) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.server_id is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates.BmpActivate']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activates'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bmp_activate is not None:
                                            for child_ref in self.bmp_activate:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.BmpActivates']['meta_info']


                                class EbgpMultihop(object):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ebgp-multihop'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.max_hop_count is not None:
                                            return True

                                        if self.mpls_deactivation is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.EbgpMultihop']['meta_info']


                                class RemoteAs(object):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remote-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.RemoteAs']['meta_info']


                                class LocalAs(object):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.disable = None
                                        self.dual_as = None
                                        self.no_prepend = None
                                        self.replace_as = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        if self.disable is not None:
                                            return True

                                        if self.dual_as is not None:
                                            return True

                                        if self.no_prepend is not None:
                                            return True

                                        if self.replace_as is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.LocalAs']['meta_info']


                                class Password(object):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.password = None
                                        self.password_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:password'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.password is not None:
                                            return True

                                        if self.password_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Password']['meta_info']


                                class AdvertisementInterval(object):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertisement-interval'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.minimum_interval is not None:
                                            return True

                                        if self.minimum_interval_msecs is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(object):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.cluster_id_address = None
                                        self.cluster_id_number = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-cluster-id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cluster_id_address is not None:
                                            return True

                                        if self.cluster_id_number is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.NeighborClusterId']['meta_info']


                                class Tcpmss(object):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\:  int
                                    
                                    	**range:** 68..10000
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.mss = None
                                        self.tcpmss_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tcpmss'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.mss is not None:
                                            return True

                                        if self.tcpmss_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tcpmss']['meta_info']


                                class Tos(object):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:   :py:class:`BgpTosEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTosEnum>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:   :py:class:`BgpPrecedenceDscpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscpEnum>`
                                    
                                    
                                    ----
                                    	**type**\:  int
                                    
                                    	**range:** 0..63
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.type = None
                                        self.value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tos'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.type is not None:
                                            return True

                                        if self.value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Tos']['meta_info']


                                class UpdateInFiltering(object):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\:  str
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:   :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_message_buffers = None
                                        self.update_in_filtering_syslog_disable = None


                                    class UpdateInFilteringMessageBuffers(object):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\:  bool
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\:  int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.non_circular_buffer = None
                                            self.number_of_buffers = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering-message-buffers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.non_circular_buffer is not None:
                                                return True

                                            if self.number_of_buffers is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.update_in_filtering_attribute_filter_group is not None:
                                            return True

                                        if self.update_in_filtering_message_buffers is not None and self.update_in_filtering_message_buffers._has_data():
                                            return True

                                        if self.update_in_filtering_syslog_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.UpdateInFiltering']['meta_info']


                                class MsgLogOut(object):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-out'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogOut']['meta_info']


                                class ReceiveBufferSize(object):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_receive_size = None
                                        self.socket_receive_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:receive-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_receive_size is not None:
                                            return True

                                        if self.socket_receive_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(object):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-in'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.MsgLogIn']['meta_info']


                                class SendBufferSize(object):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_send_size = None
                                        self.socket_send_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:send-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_send_size is not None:
                                            return True

                                        if self.socket_send_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.SendBufferSize']['meta_info']


                                class Timers(object):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.hold_time = None
                                        self.keepalive_interval = None
                                        self.min_accept_hold_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:timers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.hold_time is not None:
                                            return True

                                        if self.keepalive_interval is not None:
                                            return True

                                        if self.min_accept_hold_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Timers']['meta_info']


                                class Keychain(object):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\:  bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.keychain_disable = None
                                        self.keychain_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:keychain'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.keychain_disable is not None:
                                            return True

                                        if self.keychain_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.Keychain']['meta_info']


                                class GracefulMaintenance(object):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\:  bool
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:   :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:   :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.graceful_maintenance_activate = None
                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self


                                    class GracefulMaintenanceLocalPreference(object):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-local-preference'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.gshut_loc_pref_disable is not None:
                                                return True

                                            if self.local_preference is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(object):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\:  int
                                        
                                        	**range:** 0..6
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.as_prepends = None
                                            self.gshut_prepends_disable = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-as-prepends'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.as_prepends is not None:
                                                return True

                                            if self.gshut_prepends_disable is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.graceful_maintenance_activate is not None:
                                            return True

                                        if self.graceful_maintenance_as_prepends is not None and self.graceful_maintenance_as_prepends._has_data():
                                            return True

                                        if self.graceful_maintenance_local_preference is not None and self.graceful_maintenance_local_preference._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor.GracefulMaintenance']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.neighbor_address is None:
                                        raise YPYModelError('Key property neighbor_address is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor[Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-address = ' + str(self.neighbor_address) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.neighbor_address is not None:
                                        return True

                                    if self.additional_paths_receive_capability is not None:
                                        return True

                                    if self.additional_paths_send_capability is not None:
                                        return True

                                    if self.advertisement_interval is not None and self.advertisement_interval._has_data():
                                        return True

                                    if self.bfd_enable_modes is not None:
                                        return True

                                    if self.bfd_minimum_interval is not None:
                                        return True

                                    if self.bfd_multiplier is not None:
                                        return True

                                    if self.bmp_activates is not None and self.bmp_activates._has_data():
                                        return True

                                    if self.description is not None:
                                        return True

                                    if self.ebgp_multihop is not None and self.ebgp_multihop._has_data():
                                        return True

                                    if self.ebgp_recv_dmz is not None:
                                        return True

                                    if self.ebgp_send_dmz_enable_modes is not None:
                                        return True

                                    if self.egress_peer_engineering is not None:
                                        return True

                                    if self.enforce_first_as is not None:
                                        return True

                                    if self.graceful_maintenance is not None and self.graceful_maintenance._has_data():
                                        return True

                                    if self.idle_watch_time is not None:
                                        return True

                                    if self.ignore_connected_check_ebgp is not None:
                                        return True

                                    if self.internal_vpn_client_ibgpce is not None:
                                        return True

                                    if self.keychain is not None and self.keychain._has_data():
                                        return True

                                    if self.local_address is not None and self.local_address._has_data():
                                        return True

                                    if self.local_as is not None and self.local_as._has_data():
                                        return True

                                    if self.max_peers is not None:
                                        return True

                                    if self.msg_log_in is not None and self.msg_log_in._has_data():
                                        return True

                                    if self.msg_log_out is not None and self.msg_log_out._has_data():
                                        return True

                                    if self.neighbor_afs is not None and self.neighbor_afs._has_data():
                                        return True

                                    if self.neighbor_cluster_id is not None and self.neighbor_cluster_id._has_data():
                                        return True

                                    if self.neighbor_graceful_restart is not None:
                                        return True

                                    if self.neighbor_graceful_restart_stalepath_time is not None:
                                        return True

                                    if self.neighbor_graceful_restart_time is not None:
                                        return True

                                    if self.neighbor_group_add_member is not None:
                                        return True

                                    if self.password is not None and self.password._has_data():
                                        return True

                                    if self.propagate_dmz_link_bandwidth is not None:
                                        return True

                                    if self.receive_buffer_size is not None and self.receive_buffer_size._has_data():
                                        return True

                                    if self.remote_as is not None and self.remote_as._has_data():
                                        return True

                                    if self.remote_as_list is not None:
                                        return True

                                    if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                        return True

                                    if self.rpki_origin_as_validation_disable is not None:
                                        return True

                                    if self.send_buffer_size is not None and self.send_buffer_size._has_data():
                                        return True

                                    if self.session_group_add_member is not None:
                                        return True

                                    if self.session_open_mode is not None:
                                        return True

                                    if self.shutdown is not None:
                                        return True

                                    if self.suppress_all_capabilities is not None:
                                        return True

                                    if self.suppress_four_byte_as_capability is not None:
                                        return True

                                    if self.tcpmss is not None and self.tcpmss._has_data():
                                        return True

                                    if self.timers is not None and self.timers._has_data():
                                        return True

                                    if self.tos is not None and self.tos._has_data():
                                        return True

                                    if self.ttl_security is not None:
                                        return True

                                    if self.update_in_filtering is not None and self.update_in_filtering._has_data():
                                        return True

                                    if self.update_source_interface is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.Neighbor']['meta_info']


                            class NeighborPrefixLength(object):
                                """
                                A particular BGP peer
                                
                                .. attribute:: neighbor_address  <key>
                                
                                	Neighbor address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: prefix_length  <key>
                                
                                	Prefix length
                                	**type**\:  int
                                
                                	**range:** 0..127
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:   :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpBfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableModeEnum>`
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:   :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates>`
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\:  str
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:   :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.EbgpMultihop>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpEbgpSendDmzEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableModeEnum>`
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\:  bool
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:   :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance>`
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\:  int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\:  bool
                                
                                .. attribute:: internal_vpn_client_ibgpce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\:  bool
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:   :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Keychain>`
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:   :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddress>`
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:   :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAs>`
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\:  int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:   :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogIn>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:   :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogOut>`
                                
                                .. attribute:: neighbor_afs
                                
                                	BGP neighbor AF configuration table
                                	**type**\:   :py:class:`NeighborAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs>`
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:   :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart support for neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  bool
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\:  str
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:   :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Password>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:   :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.ReceiveBufferSize>`
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:   :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.RemoteAs>`
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\:  str
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:   :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.SendBufferSize>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\:  str
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:   :py:class:`BgpTcpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpModeEnum>`
                                
                                	**default value**\: either
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\:  bool
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability.  FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:   :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tcpmss>`
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Timers>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:   :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tos>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:   :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering>`
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.neighbor_address = None
                                    self.prefix_length = None
                                    self.additional_paths_receive_capability = None
                                    self.additional_paths_send_capability = None
                                    self.advertisement_interval = None
                                    self.bfd_enable_modes = None
                                    self.bfd_minimum_interval = None
                                    self.bfd_multiplier = None
                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self.description = None
                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self.ebgp_recv_dmz = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.egress_peer_engineering = None
                                    self.enforce_first_as = None
                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self.idle_watch_time = None
                                    self.ignore_connected_check_ebgp = None
                                    self.internal_vpn_client_ibgpce = None
                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Keychain()
                                    self.keychain.parent = self
                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddress()
                                    self.local_address.parent = self
                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAs()
                                    self.local_as.parent = self
                                    self.max_peers = None
                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self.neighbor_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs()
                                    self.neighbor_afs.parent = self
                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self.neighbor_graceful_restart = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.neighbor_graceful_restart_time = None
                                    self.neighbor_group_add_member = None
                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Password()
                                    self.password.parent = self
                                    self.propagate_dmz_link_bandwidth = None
                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.RemoteAs()
                                    self.remote_as.parent = self
                                    self.remote_as_list = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self.session_group_add_member = None
                                    self.session_open_mode = None
                                    self.shutdown = None
                                    self.suppress_all_capabilities = None
                                    self.suppress_four_byte_as_capability = None
                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tcpmss()
                                    self.tcpmss.parent = self
                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Timers()
                                    self.timers.parent = self
                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tos()
                                    self.tos.parent = self
                                    self.ttl_security = None
                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self.update_source_interface = None


                                class NeighborAfs(object):
                                    """
                                    BGP neighbor AF configuration table
                                    
                                    .. attribute:: neighbor_af
                                    
                                    	Address family type of neighbor
                                    	**type**\: list of    :py:class:`NeighborAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.neighbor_af = YList()
                                        self.neighbor_af.parent = self
                                        self.neighbor_af.name = 'neighbor_af'


                                    class NeighborAf(object):
                                        """
                                        Address family type of neighbor
                                        
                                        .. attribute:: af_name  <key>
                                        
                                        	BGP neighbor address family
                                        	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\:  bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT.  FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDisable>`
                                        
                                        .. attribute:: advertise_l2vpnevpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_l2vpnevpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:   :py:class:`BgpAdvertiseLocalLabeledRouteCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfgEnum>`
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:   :py:class:`BgpOrfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrfEnum>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV4>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV6>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\:  str
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:   :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AigpCostCommunity>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\:  int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\:  bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:   :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.DefaultOriginate>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:   :py:class:`BgpAfEncapsulationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulationEnum>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:   :py:class:`BgpFlowspecValidationCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfgEnum>`
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:   :py:class:`Import_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.Import_>`
                                        
                                        .. attribute:: l2vpn_signalling
                                        
                                        	Disable signalling type on the peer
                                        	**type**\:   :py:class:`BgpSignalEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSignalEnum>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:   :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:   :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\:  bool
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\:  str
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client.  FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_multicast_attr
                                        
                                        	Config send multicast attribute for this neighbor
                                        	**type**\:   :py:class:`BgpSendMcastAttrCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSendMcastAttrCfgEnum>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:   :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.SoftReconfiguration>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_name = None
                                            self.accept_own = None
                                            self.accept_route_legacy_rt = None
                                            self.activate = None
                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self.advertise_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseL2Vpnevpn()
                                            self.advertise_l2vpnevpn.parent = self
                                            self.advertise_local_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalL2Vpnevpn()
                                            self.advertise_local_l2vpnevpn.parent = self
                                            self.advertise_local_labeled_route = None
                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self.advertise_orf = None
                                            self.advertise_permanent_network = None
                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self.af_group = None
                                            self.aigp = None
                                            self.aigp_cost_community = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.as_override = None
                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self.default_weight = None
                                            self.encapsulation_type = None
                                            self.flowspec_validation = None
                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.Import_()
                                            self.import_.parent = self
                                            self.l2vpn_signalling = None
                                            self.maximum_prefixes = None
                                            self.multipath = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self.next_hop_self = None
                                            self.next_hop_unchanged = None
                                            self.next_hop_unchanged_multipath = None
                                            self.prefix_orf_policy = None
                                            self.remove_private_as_entire_as_path = None
                                            self.remove_private_as_entire_as_path_inbound = None
                                            self.route_policy_in = None
                                            self.route_policy_out = None
                                            self.route_reflector_client = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.send_community_ebgp = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.send_ext_community_ebgp = None
                                            self.send_multicast_attr = None
                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self


                                        class AigpCostCommunity(object):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:   :py:class:`BgpAigpCfgPoiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoiEnum>`
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.cost_community_id = None
                                                self.cost_community_poi_type = None
                                                self.enable = None
                                                self.transitive = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aigp-cost-community'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.cost_community_id is not None:
                                                    return True

                                                if self.cost_community_poi_type is not None:
                                                    return True

                                                if self.enable is not None:
                                                    return True

                                                if self.transitive is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(object):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-disable'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(object):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.discard_extra_paths = None
                                                self.prefix_limit = None
                                                self.restart_time = None
                                                self.warning_only = None
                                                self.warning_percentage = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:maximum-prefixes'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.discard_extra_paths is not None:
                                                    return True

                                                if self.prefix_limit is not None:
                                                    return True

                                                if self.restart_time is not None:
                                                    return True

                                                if self.warning_only is not None:
                                                    return True

                                                if self.warning_percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.MaximumPrefixes']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(object):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path-inbound'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseL2Vpnevpn(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseL2Vpnevpn']['meta_info']


                                        class AdvertiseLocalL2Vpnevpn(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalL2Vpnevpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(object):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.stale_time_accept = None
                                                self.stale_time_send = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-af-long-lived-graceful-restart-stale-time'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.stale_time_accept is not None:
                                                    return True

                                                if self.stale_time_send is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class AdvertiseV6(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV6']['meta_info']


                                        class Import_(object):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self.import_stitching = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:import'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.import_reoriginate is not None:
                                                    return True

                                                if self.import_reoriginate_stitching is not None:
                                                    return True

                                                if self.import_stitching is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.Import_']['meta_info']


                                        class DefaultOriginate(object):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.enable = None
                                                self.route_policy_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:default-originate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.enable is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(object):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.inbound_soft = None
                                                self.soft_always = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:soft-reconfiguration'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.inbound_soft is not None:
                                                    return True

                                                if self.soft_always is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(object):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.af_name is None:
                                                raise YPYModelError('Key property af_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-af[Cisco-IOS-XR-ipv4-bgp-cfg:af-name = ' + str(self.af_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_name is not None:
                                                return True

                                            if self.accept_own is not None:
                                                return True

                                            if self.accept_route_legacy_rt is not None:
                                                return True

                                            if self.activate is not None:
                                                return True

                                            if self.advertise_def_imp_disable_v4 is not None and self.advertise_def_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_def_imp_disable_v6 is not None and self.advertise_def_imp_disable_v6._has_data():
                                                return True

                                            if self.advertise_disable is not None and self.advertise_disable._has_data():
                                                return True

                                            if self.advertise_l2vpnevpn is not None and self.advertise_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_l2vpnevpn is not None and self.advertise_local_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_labeled_route is not None:
                                                return True

                                            if self.advertise_local_v4 is not None and self.advertise_local_v4._has_data():
                                                return True

                                            if self.advertise_local_v6 is not None and self.advertise_local_v6._has_data():
                                                return True

                                            if self.advertise_orf is not None:
                                                return True

                                            if self.advertise_permanent_network is not None:
                                                return True

                                            if self.advertise_v4 is not None and self.advertise_v4._has_data():
                                                return True

                                            if self.advertise_v6 is not None and self.advertise_v6._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v4 is not None and self.advertise_vrf_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v6 is not None and self.advertise_vrf_imp_disable_v6._has_data():
                                                return True

                                            if self.af_group is not None:
                                                return True

                                            if self.aigp is not None:
                                                return True

                                            if self.aigp_cost_community is not None and self.aigp_cost_community._has_data():
                                                return True

                                            if self.aigp_send_med is not None:
                                                return True

                                            if self.allow_as_in is not None:
                                                return True

                                            if self.as_override is not None:
                                                return True

                                            if self.default_originate is not None and self.default_originate._has_data():
                                                return True

                                            if self.default_weight is not None:
                                                return True

                                            if self.encapsulation_type is not None:
                                                return True

                                            if self.flowspec_validation is not None:
                                                return True

                                            if self.import_ is not None and self.import_._has_data():
                                                return True

                                            if self.l2vpn_signalling is not None:
                                                return True

                                            if self.maximum_prefixes is not None and self.maximum_prefixes._has_data():
                                                return True

                                            if self.multipath is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_capable is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_stale_time is not None and self.neighbor_af_long_lived_graceful_restart_stale_time._has_data():
                                                return True

                                            if self.next_hop_self is not None:
                                                return True

                                            if self.next_hop_unchanged is not None:
                                                return True

                                            if self.next_hop_unchanged_multipath is not None:
                                                return True

                                            if self.prefix_orf_policy is not None:
                                                return True

                                            if self.remove_private_as_entire_as_path is not None and self.remove_private_as_entire_as_path._has_data():
                                                return True

                                            if self.remove_private_as_entire_as_path_inbound is not None and self.remove_private_as_entire_as_path_inbound._has_data():
                                                return True

                                            if self.route_policy_in is not None:
                                                return True

                                            if self.route_policy_out is not None:
                                                return True

                                            if self.route_reflector_client is not None:
                                                return True

                                            if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                                return True

                                            if self.rpki_origin_as_validation_disable is not None:
                                                return True

                                            if self.send_community_ebgp is not None:
                                                return True

                                            if self.send_community_ebgp_graceful_shutdown is not None:
                                                return True

                                            if self.send_ext_community_ebgp is not None:
                                                return True

                                            if self.send_multicast_attr is not None:
                                                return True

                                            if self.soft_reconfiguration is not None and self.soft_reconfiguration._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs.NeighborAf']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-afs'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.neighbor_af is not None:
                                            for child_ref in self.neighbor_af:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborAfs']['meta_info']


                                class LocalAddress(object):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\:  bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.local_address_disable = None
                                        self.local_ip_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-address'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.local_address_disable is not None:
                                            return True

                                        if self.local_ip_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAddress']['meta_info']


                                class BmpActivates(object):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of    :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bmp_activate = YList()
                                        self.bmp_activate.parent = self
                                        self.bmp_activate.name = 'bmp_activate'


                                    class BmpActivate(object):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  <key>
                                        
                                        	BMP Server ID
                                        	**type**\:  int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.server_id = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.server_id is None:
                                                raise YPYModelError('Key property server_id is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activate[Cisco-IOS-XR-ipv4-bgp-cfg:server-id = ' + str(self.server_id) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.server_id is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates.BmpActivate']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activates'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bmp_activate is not None:
                                            for child_ref in self.bmp_activate:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.BmpActivates']['meta_info']


                                class EbgpMultihop(object):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ebgp-multihop'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.max_hop_count is not None:
                                            return True

                                        if self.mpls_deactivation is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.EbgpMultihop']['meta_info']


                                class RemoteAs(object):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remote-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.RemoteAs']['meta_info']


                                class LocalAs(object):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.disable = None
                                        self.dual_as = None
                                        self.no_prepend = None
                                        self.replace_as = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        if self.disable is not None:
                                            return True

                                        if self.dual_as is not None:
                                            return True

                                        if self.no_prepend is not None:
                                            return True

                                        if self.replace_as is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.LocalAs']['meta_info']


                                class Password(object):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.password = None
                                        self.password_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:password'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.password is not None:
                                            return True

                                        if self.password_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Password']['meta_info']


                                class AdvertisementInterval(object):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertisement-interval'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.minimum_interval is not None:
                                            return True

                                        if self.minimum_interval_msecs is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(object):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.cluster_id_address = None
                                        self.cluster_id_number = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-cluster-id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cluster_id_address is not None:
                                            return True

                                        if self.cluster_id_number is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.NeighborClusterId']['meta_info']


                                class Tcpmss(object):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\:  int
                                    
                                    	**range:** 68..10000
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.mss = None
                                        self.tcpmss_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tcpmss'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.mss is not None:
                                            return True

                                        if self.tcpmss_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tcpmss']['meta_info']


                                class Tos(object):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:   :py:class:`BgpTosEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTosEnum>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:   :py:class:`BgpPrecedenceDscpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscpEnum>`
                                    
                                    
                                    ----
                                    	**type**\:  int
                                    
                                    	**range:** 0..63
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.type = None
                                        self.value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tos'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.type is not None:
                                            return True

                                        if self.value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Tos']['meta_info']


                                class UpdateInFiltering(object):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\:  str
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:   :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_message_buffers = None
                                        self.update_in_filtering_syslog_disable = None


                                    class UpdateInFilteringMessageBuffers(object):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\:  bool
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\:  int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.non_circular_buffer = None
                                            self.number_of_buffers = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering-message-buffers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.non_circular_buffer is not None:
                                                return True

                                            if self.number_of_buffers is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.update_in_filtering_attribute_filter_group is not None:
                                            return True

                                        if self.update_in_filtering_message_buffers is not None and self.update_in_filtering_message_buffers._has_data():
                                            return True

                                        if self.update_in_filtering_syslog_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.UpdateInFiltering']['meta_info']


                                class MsgLogOut(object):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-out'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogOut']['meta_info']


                                class ReceiveBufferSize(object):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_receive_size = None
                                        self.socket_receive_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:receive-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_receive_size is not None:
                                            return True

                                        if self.socket_receive_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(object):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-in'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.MsgLogIn']['meta_info']


                                class SendBufferSize(object):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_send_size = None
                                        self.socket_send_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:send-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_send_size is not None:
                                            return True

                                        if self.socket_send_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.SendBufferSize']['meta_info']


                                class Timers(object):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.hold_time = None
                                        self.keepalive_interval = None
                                        self.min_accept_hold_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:timers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.hold_time is not None:
                                            return True

                                        if self.keepalive_interval is not None:
                                            return True

                                        if self.min_accept_hold_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Timers']['meta_info']


                                class Keychain(object):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\:  bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.keychain_disable = None
                                        self.keychain_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:keychain'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.keychain_disable is not None:
                                            return True

                                        if self.keychain_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.Keychain']['meta_info']


                                class GracefulMaintenance(object):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\:  bool
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:   :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:   :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.graceful_maintenance_activate = None
                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self


                                    class GracefulMaintenanceLocalPreference(object):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-local-preference'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.gshut_loc_pref_disable is not None:
                                                return True

                                            if self.local_preference is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(object):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\:  int
                                        
                                        	**range:** 0..6
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.as_prepends = None
                                            self.gshut_prepends_disable = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-as-prepends'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.as_prepends is not None:
                                                return True

                                            if self.gshut_prepends_disable is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.graceful_maintenance_activate is not None:
                                            return True

                                        if self.graceful_maintenance_as_prepends is not None and self.graceful_maintenance_as_prepends._has_data():
                                            return True

                                        if self.graceful_maintenance_local_preference is not None and self.graceful_maintenance_local_preference._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength.GracefulMaintenance']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.neighbor_address is None:
                                        raise YPYModelError('Key property neighbor_address is None')
                                    if self.prefix_length is None:
                                        raise YPYModelError('Key property prefix_length is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-prefix-length[Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-address = ' + str(self.neighbor_address) + '][Cisco-IOS-XR-ipv4-bgp-cfg:prefix-length = ' + str(self.prefix_length) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.neighbor_address is not None:
                                        return True

                                    if self.prefix_length is not None:
                                        return True

                                    if self.additional_paths_receive_capability is not None:
                                        return True

                                    if self.additional_paths_send_capability is not None:
                                        return True

                                    if self.advertisement_interval is not None and self.advertisement_interval._has_data():
                                        return True

                                    if self.bfd_enable_modes is not None:
                                        return True

                                    if self.bfd_minimum_interval is not None:
                                        return True

                                    if self.bfd_multiplier is not None:
                                        return True

                                    if self.bmp_activates is not None and self.bmp_activates._has_data():
                                        return True

                                    if self.description is not None:
                                        return True

                                    if self.ebgp_multihop is not None and self.ebgp_multihop._has_data():
                                        return True

                                    if self.ebgp_recv_dmz is not None:
                                        return True

                                    if self.ebgp_send_dmz_enable_modes is not None:
                                        return True

                                    if self.egress_peer_engineering is not None:
                                        return True

                                    if self.enforce_first_as is not None:
                                        return True

                                    if self.graceful_maintenance is not None and self.graceful_maintenance._has_data():
                                        return True

                                    if self.idle_watch_time is not None:
                                        return True

                                    if self.ignore_connected_check_ebgp is not None:
                                        return True

                                    if self.internal_vpn_client_ibgpce is not None:
                                        return True

                                    if self.keychain is not None and self.keychain._has_data():
                                        return True

                                    if self.local_address is not None and self.local_address._has_data():
                                        return True

                                    if self.local_as is not None and self.local_as._has_data():
                                        return True

                                    if self.max_peers is not None:
                                        return True

                                    if self.msg_log_in is not None and self.msg_log_in._has_data():
                                        return True

                                    if self.msg_log_out is not None and self.msg_log_out._has_data():
                                        return True

                                    if self.neighbor_afs is not None and self.neighbor_afs._has_data():
                                        return True

                                    if self.neighbor_cluster_id is not None and self.neighbor_cluster_id._has_data():
                                        return True

                                    if self.neighbor_graceful_restart is not None:
                                        return True

                                    if self.neighbor_graceful_restart_stalepath_time is not None:
                                        return True

                                    if self.neighbor_graceful_restart_time is not None:
                                        return True

                                    if self.neighbor_group_add_member is not None:
                                        return True

                                    if self.password is not None and self.password._has_data():
                                        return True

                                    if self.propagate_dmz_link_bandwidth is not None:
                                        return True

                                    if self.receive_buffer_size is not None and self.receive_buffer_size._has_data():
                                        return True

                                    if self.remote_as is not None and self.remote_as._has_data():
                                        return True

                                    if self.remote_as_list is not None:
                                        return True

                                    if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                        return True

                                    if self.rpki_origin_as_validation_disable is not None:
                                        return True

                                    if self.send_buffer_size is not None and self.send_buffer_size._has_data():
                                        return True

                                    if self.session_group_add_member is not None:
                                        return True

                                    if self.session_open_mode is not None:
                                        return True

                                    if self.shutdown is not None:
                                        return True

                                    if self.suppress_all_capabilities is not None:
                                        return True

                                    if self.suppress_four_byte_as_capability is not None:
                                        return True

                                    if self.tcpmss is not None and self.tcpmss._has_data():
                                        return True

                                    if self.timers is not None and self.timers._has_data():
                                        return True

                                    if self.tos is not None and self.tos._has_data():
                                        return True

                                    if self.ttl_security is not None:
                                        return True

                                    if self.update_in_filtering is not None and self.update_in_filtering._has_data():
                                        return True

                                    if self.update_source_interface is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors.NeighborPrefixLength']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbors'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.neighbor is not None:
                                    for child_ref in self.neighbor:
                                        if child_ref._has_data():
                                            return True

                                if self.neighbor_prefix_length is not None:
                                    for child_ref in self.neighbor_prefix_length:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.Neighbors']['meta_info']


                        class NeighborGroups(object):
                            """
                            Neighbor\-group configuration
                            
                            .. attribute:: neighbor_group
                            
                            	A particular BGP neighbor group
                            	**type**\: list of    :py:class:`NeighborGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.neighbor_group = YList()
                                self.neighbor_group.parent = self
                                self.neighbor_group.name = 'neighbor_group'


                            class NeighborGroup(object):
                                """
                                A particular BGP neighbor group
                                
                                .. attribute:: neighbor_group_name  <key>
                                
                                	BGP neighbor group name
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:   :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpBfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableModeEnum>`
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:   :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates>`
                                
                                .. attribute:: create
                                
                                	Create this group. Deletion of this object causes deletion of all the objects under NeighborGroup/SessionGroup associated with this object
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\:  str
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:   :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.EbgpMultihop>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpEbgpSendDmzEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableModeEnum>`
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\:  bool
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:   :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance>`
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\:  int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\:  bool
                                
                                .. attribute:: internal_vpn_client_ibgpce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\:  bool
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:   :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Keychain>`
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:   :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddress>`
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:   :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAs>`
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\:  int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:   :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogIn>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:   :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogOut>`
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:   :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart support for neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  bool
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: neighbor_group_add_member
                                
                                	Inherit configuration from a neighbor\-group
                                	**type**\:  str
                                
                                .. attribute:: neighbor_group_afs
                                
                                	BGP neighbor\-group AF configuration table
                                	**type**\:   :py:class:`NeighborGroupAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs>`
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:   :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Password>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:   :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.ReceiveBufferSize>`
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:   :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.RemoteAs>`
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\:  str
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:   :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.SendBufferSize>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\:  str
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:   :py:class:`BgpTcpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpModeEnum>`
                                
                                	**default value**\: either
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\:  bool
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability.  FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:   :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tcpmss>`
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Timers>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:   :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tos>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:   :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering>`
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.neighbor_group_name = None
                                    self.additional_paths_receive_capability = None
                                    self.additional_paths_send_capability = None
                                    self.advertisement_interval = None
                                    self.bfd_enable_modes = None
                                    self.bfd_minimum_interval = None
                                    self.bfd_multiplier = None
                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self.create = None
                                    self.description = None
                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self.ebgp_recv_dmz = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.egress_peer_engineering = None
                                    self.enforce_first_as = None
                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self.idle_watch_time = None
                                    self.ignore_connected_check_ebgp = None
                                    self.internal_vpn_client_ibgpce = None
                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Keychain()
                                    self.keychain.parent = self
                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddress()
                                    self.local_address.parent = self
                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAs()
                                    self.local_as.parent = self
                                    self.max_peers = None
                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self.neighbor_graceful_restart = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.neighbor_graceful_restart_time = None
                                    self.neighbor_group_add_member = None
                                    self.neighbor_group_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs()
                                    self.neighbor_group_afs.parent = self
                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Password()
                                    self.password.parent = self
                                    self.propagate_dmz_link_bandwidth = None
                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.RemoteAs()
                                    self.remote_as.parent = self
                                    self.remote_as_list = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self.session_group_add_member = None
                                    self.session_open_mode = None
                                    self.shutdown = None
                                    self.suppress_all_capabilities = None
                                    self.suppress_four_byte_as_capability = None
                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tcpmss()
                                    self.tcpmss.parent = self
                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Timers()
                                    self.timers.parent = self
                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tos()
                                    self.tos.parent = self
                                    self.ttl_security = None
                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self.update_source_interface = None


                                class NeighborGroupAfs(object):
                                    """
                                    BGP neighbor\-group AF configuration table
                                    
                                    .. attribute:: neighbor_group_af
                                    
                                    	Address family type of neighbor group
                                    	**type**\: list of    :py:class:`NeighborGroupAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.neighbor_group_af = YList()
                                        self.neighbor_group_af.parent = self
                                        self.neighbor_group_af.name = 'neighbor_group_af'


                                    class NeighborGroupAf(object):
                                        """
                                        Address family type of neighbor group
                                        
                                        .. attribute:: af_name  <key>
                                        
                                        	BGP neighbor group address family
                                        	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\:  bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT.  FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: activate
                                        
                                        	Activate an address family for this neighbor. Deletion of this object causes deletion of all the objects under NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDisable>`
                                        
                                        .. attribute:: advertise_l2vpnevpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_l2vpnevpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:   :py:class:`BgpAdvertiseLocalLabeledRouteCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfgEnum>`
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:   :py:class:`BgpOrfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrfEnum>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV4>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV6>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV4>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\:  str
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:   :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AigpCostCommunity>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\:  int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\:  bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:   :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.DefaultOriginate>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:   :py:class:`BgpAfEncapsulationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulationEnum>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:   :py:class:`BgpFlowspecValidationCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfgEnum>`
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:   :py:class:`Import_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.Import_>`
                                        
                                        .. attribute:: l2vpn_signalling
                                        
                                        	Disable signalling type on the peer
                                        	**type**\:   :py:class:`BgpSignalEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSignalEnum>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:   :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:   :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\:  bool
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\:  str
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client.  FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_multicast_attr
                                        
                                        	Config send multicast attribute for this neighbor
                                        	**type**\:   :py:class:`BgpSendMcastAttrCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSendMcastAttrCfgEnum>`
                                        
                                        .. attribute:: site_of_origin
                                        
                                        	Site\-of\-Origin extended community associated with the neighbor
                                        	**type**\:   :py:class:`SiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SiteOfOrigin>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:   :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SoftReconfiguration>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_name = None
                                            self.accept_own = None
                                            self.accept_route_legacy_rt = None
                                            self.activate = None
                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self.advertise_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseL2Vpnevpn()
                                            self.advertise_l2vpnevpn.parent = self
                                            self.advertise_local_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalL2Vpnevpn()
                                            self.advertise_local_l2vpnevpn.parent = self
                                            self.advertise_local_labeled_route = None
                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self.advertise_orf = None
                                            self.advertise_permanent_network = None
                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self.af_group = None
                                            self.aigp = None
                                            self.aigp_cost_community = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.as_override = None
                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self.default_weight = None
                                            self.encapsulation_type = None
                                            self.flowspec_validation = None
                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.Import_()
                                            self.import_.parent = self
                                            self.l2vpn_signalling = None
                                            self.maximum_prefixes = None
                                            self.multipath = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self.next_hop_self = None
                                            self.next_hop_unchanged = None
                                            self.next_hop_unchanged_multipath = None
                                            self.prefix_orf_policy = None
                                            self.remove_private_as_entire_as_path = None
                                            self.remove_private_as_entire_as_path_inbound = None
                                            self.route_policy_in = None
                                            self.route_policy_out = None
                                            self.route_reflector_client = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.send_community_ebgp = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.send_ext_community_ebgp = None
                                            self.send_multicast_attr = None
                                            self.site_of_origin = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SiteOfOrigin()
                                            self.site_of_origin.parent = self
                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self


                                        class AigpCostCommunity(object):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:   :py:class:`BgpAigpCfgPoiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoiEnum>`
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.cost_community_id = None
                                                self.cost_community_poi_type = None
                                                self.enable = None
                                                self.transitive = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aigp-cost-community'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.cost_community_id is not None:
                                                    return True

                                                if self.cost_community_poi_type is not None:
                                                    return True

                                                if self.enable is not None:
                                                    return True

                                                if self.transitive is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(object):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-disable'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(object):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.discard_extra_paths = None
                                                self.prefix_limit = None
                                                self.restart_time = None
                                                self.warning_only = None
                                                self.warning_percentage = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:maximum-prefixes'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.discard_extra_paths is not None:
                                                    return True

                                                if self.prefix_limit is not None:
                                                    return True

                                                if self.restart_time is not None:
                                                    return True

                                                if self.warning_only is not None:
                                                    return True

                                                if self.warning_percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.MaximumPrefixes']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(object):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path-inbound'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseL2Vpnevpn(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseL2Vpnevpn']['meta_info']


                                        class AdvertiseLocalL2Vpnevpn(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalL2Vpnevpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(object):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.stale_time_accept = None
                                                self.stale_time_send = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-af-long-lived-graceful-restart-stale-time'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.stale_time_accept is not None:
                                                    return True

                                                if self.stale_time_send is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class SiteOfOrigin(object):
                                            """
                                            Site\-of\-Origin extended community associated
                                            with the neighbor
                                            
                                            .. attribute:: address
                                            
                                            	IP address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: address_index
                                            
                                            	IP address Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_index
                                            
                                            	AS number Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_xx
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: type
                                            
                                            	Type of Extended community
                                            	**type**\:   :py:class:`BgpSiteOfOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSiteOfOriginEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None
                                                self.address_index = None
                                                self.as_ = None
                                                self.as_index = None
                                                self.as_xx = None
                                                self.type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:site-of-origin'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                if self.address_index is not None:
                                                    return True

                                                if self.as_ is not None:
                                                    return True

                                                if self.as_index is not None:
                                                    return True

                                                if self.as_xx is not None:
                                                    return True

                                                if self.type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SiteOfOrigin']['meta_info']


                                        class AdvertiseV6(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV6']['meta_info']


                                        class Import_(object):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self.import_stitching = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:import'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.import_reoriginate is not None:
                                                    return True

                                                if self.import_reoriginate_stitching is not None:
                                                    return True

                                                if self.import_stitching is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.Import_']['meta_info']


                                        class DefaultOriginate(object):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.enable = None
                                                self.route_policy_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:default-originate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.enable is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(object):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.inbound_soft = None
                                                self.soft_always = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:soft-reconfiguration'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.inbound_soft is not None:
                                                    return True

                                                if self.soft_always is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(object):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.af_name is None:
                                                raise YPYModelError('Key property af_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-group-af[Cisco-IOS-XR-ipv4-bgp-cfg:af-name = ' + str(self.af_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_name is not None:
                                                return True

                                            if self.accept_own is not None:
                                                return True

                                            if self.accept_route_legacy_rt is not None:
                                                return True

                                            if self.activate is not None:
                                                return True

                                            if self.advertise_def_imp_disable_v4 is not None and self.advertise_def_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_def_imp_disable_v6 is not None and self.advertise_def_imp_disable_v6._has_data():
                                                return True

                                            if self.advertise_disable is not None and self.advertise_disable._has_data():
                                                return True

                                            if self.advertise_l2vpnevpn is not None and self.advertise_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_l2vpnevpn is not None and self.advertise_local_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_labeled_route is not None:
                                                return True

                                            if self.advertise_local_v4 is not None and self.advertise_local_v4._has_data():
                                                return True

                                            if self.advertise_local_v6 is not None and self.advertise_local_v6._has_data():
                                                return True

                                            if self.advertise_orf is not None:
                                                return True

                                            if self.advertise_permanent_network is not None:
                                                return True

                                            if self.advertise_v4 is not None and self.advertise_v4._has_data():
                                                return True

                                            if self.advertise_v6 is not None and self.advertise_v6._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v4 is not None and self.advertise_vrf_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v6 is not None and self.advertise_vrf_imp_disable_v6._has_data():
                                                return True

                                            if self.af_group is not None:
                                                return True

                                            if self.aigp is not None:
                                                return True

                                            if self.aigp_cost_community is not None and self.aigp_cost_community._has_data():
                                                return True

                                            if self.aigp_send_med is not None:
                                                return True

                                            if self.allow_as_in is not None:
                                                return True

                                            if self.as_override is not None:
                                                return True

                                            if self.default_originate is not None and self.default_originate._has_data():
                                                return True

                                            if self.default_weight is not None:
                                                return True

                                            if self.encapsulation_type is not None:
                                                return True

                                            if self.flowspec_validation is not None:
                                                return True

                                            if self.import_ is not None and self.import_._has_data():
                                                return True

                                            if self.l2vpn_signalling is not None:
                                                return True

                                            if self.maximum_prefixes is not None and self.maximum_prefixes._has_data():
                                                return True

                                            if self.multipath is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_capable is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_stale_time is not None and self.neighbor_af_long_lived_graceful_restart_stale_time._has_data():
                                                return True

                                            if self.next_hop_self is not None:
                                                return True

                                            if self.next_hop_unchanged is not None:
                                                return True

                                            if self.next_hop_unchanged_multipath is not None:
                                                return True

                                            if self.prefix_orf_policy is not None:
                                                return True

                                            if self.remove_private_as_entire_as_path is not None and self.remove_private_as_entire_as_path._has_data():
                                                return True

                                            if self.remove_private_as_entire_as_path_inbound is not None and self.remove_private_as_entire_as_path_inbound._has_data():
                                                return True

                                            if self.route_policy_in is not None:
                                                return True

                                            if self.route_policy_out is not None:
                                                return True

                                            if self.route_reflector_client is not None:
                                                return True

                                            if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                                return True

                                            if self.rpki_origin_as_validation_disable is not None:
                                                return True

                                            if self.send_community_ebgp is not None:
                                                return True

                                            if self.send_community_ebgp_graceful_shutdown is not None:
                                                return True

                                            if self.send_ext_community_ebgp is not None:
                                                return True

                                            if self.send_multicast_attr is not None:
                                                return True

                                            if self.site_of_origin is not None and self.site_of_origin._has_data():
                                                return True

                                            if self.soft_reconfiguration is not None and self.soft_reconfiguration._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs.NeighborGroupAf']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-group-afs'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.neighbor_group_af is not None:
                                            for child_ref in self.neighbor_group_af:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborGroupAfs']['meta_info']


                                class LocalAddress(object):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\:  bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.local_address_disable = None
                                        self.local_ip_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-address'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.local_address_disable is not None:
                                            return True

                                        if self.local_ip_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAddress']['meta_info']


                                class BmpActivates(object):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of    :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bmp_activate = YList()
                                        self.bmp_activate.parent = self
                                        self.bmp_activate.name = 'bmp_activate'


                                    class BmpActivate(object):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  <key>
                                        
                                        	BMP Server ID
                                        	**type**\:  int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.server_id = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.server_id is None:
                                                raise YPYModelError('Key property server_id is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activate[Cisco-IOS-XR-ipv4-bgp-cfg:server-id = ' + str(self.server_id) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.server_id is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates.BmpActivate']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activates'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bmp_activate is not None:
                                            for child_ref in self.bmp_activate:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.BmpActivates']['meta_info']


                                class EbgpMultihop(object):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ebgp-multihop'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.max_hop_count is not None:
                                            return True

                                        if self.mpls_deactivation is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.EbgpMultihop']['meta_info']


                                class RemoteAs(object):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remote-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.RemoteAs']['meta_info']


                                class LocalAs(object):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.disable = None
                                        self.dual_as = None
                                        self.no_prepend = None
                                        self.replace_as = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        if self.disable is not None:
                                            return True

                                        if self.dual_as is not None:
                                            return True

                                        if self.no_prepend is not None:
                                            return True

                                        if self.replace_as is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.LocalAs']['meta_info']


                                class Password(object):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.password = None
                                        self.password_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:password'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.password is not None:
                                            return True

                                        if self.password_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Password']['meta_info']


                                class AdvertisementInterval(object):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertisement-interval'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.minimum_interval is not None:
                                            return True

                                        if self.minimum_interval_msecs is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(object):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.cluster_id_address = None
                                        self.cluster_id_number = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-cluster-id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cluster_id_address is not None:
                                            return True

                                        if self.cluster_id_number is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.NeighborClusterId']['meta_info']


                                class Tcpmss(object):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\:  int
                                    
                                    	**range:** 68..10000
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.mss = None
                                        self.tcpmss_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tcpmss'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.mss is not None:
                                            return True

                                        if self.tcpmss_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tcpmss']['meta_info']


                                class Tos(object):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:   :py:class:`BgpTosEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTosEnum>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:   :py:class:`BgpPrecedenceDscpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscpEnum>`
                                    
                                    
                                    ----
                                    	**type**\:  int
                                    
                                    	**range:** 0..63
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.type = None
                                        self.value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tos'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.type is not None:
                                            return True

                                        if self.value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Tos']['meta_info']


                                class UpdateInFiltering(object):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\:  str
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:   :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_message_buffers = None
                                        self.update_in_filtering_syslog_disable = None


                                    class UpdateInFilteringMessageBuffers(object):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\:  bool
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\:  int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.non_circular_buffer = None
                                            self.number_of_buffers = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering-message-buffers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.non_circular_buffer is not None:
                                                return True

                                            if self.number_of_buffers is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.update_in_filtering_attribute_filter_group is not None:
                                            return True

                                        if self.update_in_filtering_message_buffers is not None and self.update_in_filtering_message_buffers._has_data():
                                            return True

                                        if self.update_in_filtering_syslog_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.UpdateInFiltering']['meta_info']


                                class MsgLogOut(object):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-out'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogOut']['meta_info']


                                class ReceiveBufferSize(object):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_receive_size = None
                                        self.socket_receive_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:receive-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_receive_size is not None:
                                            return True

                                        if self.socket_receive_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(object):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-in'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.MsgLogIn']['meta_info']


                                class SendBufferSize(object):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_send_size = None
                                        self.socket_send_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:send-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_send_size is not None:
                                            return True

                                        if self.socket_send_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.SendBufferSize']['meta_info']


                                class Timers(object):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.hold_time = None
                                        self.keepalive_interval = None
                                        self.min_accept_hold_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:timers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.hold_time is not None:
                                            return True

                                        if self.keepalive_interval is not None:
                                            return True

                                        if self.min_accept_hold_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Timers']['meta_info']


                                class Keychain(object):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\:  bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.keychain_disable = None
                                        self.keychain_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:keychain'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.keychain_disable is not None:
                                            return True

                                        if self.keychain_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.Keychain']['meta_info']


                                class GracefulMaintenance(object):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\:  bool
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:   :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:   :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.graceful_maintenance_activate = None
                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self


                                    class GracefulMaintenanceLocalPreference(object):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-local-preference'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.gshut_loc_pref_disable is not None:
                                                return True

                                            if self.local_preference is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(object):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\:  int
                                        
                                        	**range:** 0..6
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.as_prepends = None
                                            self.gshut_prepends_disable = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-as-prepends'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.as_prepends is not None:
                                                return True

                                            if self.gshut_prepends_disable is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.graceful_maintenance_activate is not None:
                                            return True

                                        if self.graceful_maintenance_as_prepends is not None and self.graceful_maintenance_as_prepends._has_data():
                                            return True

                                        if self.graceful_maintenance_local_preference is not None and self.graceful_maintenance_local_preference._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup.GracefulMaintenance']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.neighbor_group_name is None:
                                        raise YPYModelError('Key property neighbor_group_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-group[Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-group-name = ' + str(self.neighbor_group_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.neighbor_group_name is not None:
                                        return True

                                    if self.additional_paths_receive_capability is not None:
                                        return True

                                    if self.additional_paths_send_capability is not None:
                                        return True

                                    if self.advertisement_interval is not None and self.advertisement_interval._has_data():
                                        return True

                                    if self.bfd_enable_modes is not None:
                                        return True

                                    if self.bfd_minimum_interval is not None:
                                        return True

                                    if self.bfd_multiplier is not None:
                                        return True

                                    if self.bmp_activates is not None and self.bmp_activates._has_data():
                                        return True

                                    if self.create is not None:
                                        return True

                                    if self.description is not None:
                                        return True

                                    if self.ebgp_multihop is not None and self.ebgp_multihop._has_data():
                                        return True

                                    if self.ebgp_recv_dmz is not None:
                                        return True

                                    if self.ebgp_send_dmz_enable_modes is not None:
                                        return True

                                    if self.egress_peer_engineering is not None:
                                        return True

                                    if self.enforce_first_as is not None:
                                        return True

                                    if self.graceful_maintenance is not None and self.graceful_maintenance._has_data():
                                        return True

                                    if self.idle_watch_time is not None:
                                        return True

                                    if self.ignore_connected_check_ebgp is not None:
                                        return True

                                    if self.internal_vpn_client_ibgpce is not None:
                                        return True

                                    if self.keychain is not None and self.keychain._has_data():
                                        return True

                                    if self.local_address is not None and self.local_address._has_data():
                                        return True

                                    if self.local_as is not None and self.local_as._has_data():
                                        return True

                                    if self.max_peers is not None:
                                        return True

                                    if self.msg_log_in is not None and self.msg_log_in._has_data():
                                        return True

                                    if self.msg_log_out is not None and self.msg_log_out._has_data():
                                        return True

                                    if self.neighbor_cluster_id is not None and self.neighbor_cluster_id._has_data():
                                        return True

                                    if self.neighbor_graceful_restart is not None:
                                        return True

                                    if self.neighbor_graceful_restart_stalepath_time is not None:
                                        return True

                                    if self.neighbor_graceful_restart_time is not None:
                                        return True

                                    if self.neighbor_group_add_member is not None:
                                        return True

                                    if self.neighbor_group_afs is not None and self.neighbor_group_afs._has_data():
                                        return True

                                    if self.password is not None and self.password._has_data():
                                        return True

                                    if self.propagate_dmz_link_bandwidth is not None:
                                        return True

                                    if self.receive_buffer_size is not None and self.receive_buffer_size._has_data():
                                        return True

                                    if self.remote_as is not None and self.remote_as._has_data():
                                        return True

                                    if self.remote_as_list is not None:
                                        return True

                                    if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                        return True

                                    if self.rpki_origin_as_validation_disable is not None:
                                        return True

                                    if self.send_buffer_size is not None and self.send_buffer_size._has_data():
                                        return True

                                    if self.session_group_add_member is not None:
                                        return True

                                    if self.session_open_mode is not None:
                                        return True

                                    if self.shutdown is not None:
                                        return True

                                    if self.suppress_all_capabilities is not None:
                                        return True

                                    if self.suppress_four_byte_as_capability is not None:
                                        return True

                                    if self.tcpmss is not None and self.tcpmss._has_data():
                                        return True

                                    if self.timers is not None and self.timers._has_data():
                                        return True

                                    if self.tos is not None and self.tos._has_data():
                                        return True

                                    if self.ttl_security is not None:
                                        return True

                                    if self.update_in_filtering is not None and self.update_in_filtering._has_data():
                                        return True

                                    if self.update_source_interface is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups.NeighborGroup']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-groups'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.neighbor_group is not None:
                                    for child_ref in self.neighbor_group:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.NeighborGroups']['meta_info']


                        class AfGroups(object):
                            """
                            AF\-group configuration
                            
                            .. attribute:: af_group
                            
                            	A particular BGP AF group
                            	**type**\: list of    :py:class:`AfGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.af_group = YList()
                                self.af_group.parent = self
                                self.af_group.name = 'af_group'


                            class AfGroup(object):
                                """
                                A particular BGP AF group
                                
                                .. attribute:: af_group_name  <key>
                                
                                	BGP AF group name
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: af_group_afs
                                
                                	AF group configuration table
                                	**type**\:   :py:class:`AfGroupAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.af_group_name = None
                                    self.af_group_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs()
                                    self.af_group_afs.parent = self


                                class AfGroupAfs(object):
                                    """
                                    AF group configuration table
                                    
                                    .. attribute:: af_group_af
                                    
                                    	Address family type of an AF group
                                    	**type**\: list of    :py:class:`AfGroupAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.af_group_af = YList()
                                        self.af_group_af.parent = self
                                        self.af_group_af.name = 'af_group_af'


                                    class AfGroupAf(object):
                                        """
                                        Address family type of an AF group
                                        
                                        .. attribute:: af_name  <key>
                                        
                                        	BGP AF group address family
                                        	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                        
                                        .. attribute:: accept_own
                                        
                                        	Handle self\-originated routes with Accept\-Own community. Valid for following neighbor address\-families\: VPNv4Unicast, VPNv6Unicast
                                        	**type**\:  bool
                                        
                                        .. attribute:: accept_route_legacy_rt
                                        
                                        	TRUE to configure as a accept\-route\-legacy\-RT.  FALSE to prevent accept\-route\-legacy\-RT from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: advertise_def_imp_disable_v4
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV4>`
                                        
                                        .. attribute:: advertise_def_imp_disable_v6
                                        
                                        	Disable Advertise Of Default VRF Imported Routes
                                        	**type**\:   :py:class:`AdvertiseDefImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV6>`
                                        
                                        .. attribute:: advertise_disable
                                        
                                        	Disable Advertise Of Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseDisable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDisable>`
                                        
                                        .. attribute:: advertise_l2vpnevpn
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_l2vpnevpn
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalL2Vpnevpn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalL2Vpnevpn>`
                                        
                                        .. attribute:: advertise_local_labeled_route
                                        
                                        	Enable/disable advertisement of routes with local\-label
                                        	**type**\:   :py:class:`BgpAdvertiseLocalLabeledRouteCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfgEnum>`
                                        
                                        .. attribute:: advertise_local_v4
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV4>`
                                        
                                        .. attribute:: advertise_local_v6
                                        
                                        	Advertise Of Local Routes to the peer with different RT
                                        	**type**\:   :py:class:`AdvertiseLocalV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV6>`
                                        
                                        .. attribute:: advertise_orf
                                        
                                        	Advertise ORF capability to the peer
                                        	**type**\:   :py:class:`BgpOrfEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpOrfEnum>`
                                        
                                        	**default value**\: none
                                        
                                        .. attribute:: advertise_permanent_network
                                        
                                        	Advertise Permanent Networks to the peer
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: advertise_v4
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV4>`
                                        
                                        .. attribute:: advertise_v6
                                        
                                        	Advertise Translated Routes to the peer
                                        	**type**\:   :py:class:`AdvertiseV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV6>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v4
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV4 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV4>`
                                        
                                        .. attribute:: advertise_vrf_imp_disable_v6
                                        
                                        	Disable Advertise Of VRF ReImported Routes
                                        	**type**\:   :py:class:`AdvertiseVrfImpDisableV6 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV6>`
                                        
                                        .. attribute:: af_group
                                        
                                        	Inherit configuration for this address\-family from an AF\-group
                                        	**type**\:  str
                                        
                                        .. attribute:: aigp
                                        
                                        	Enable Accumulated IGP Metric for this neighbor
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: aigp_cost_community
                                        
                                        	Send AIGP value in Cost Community. 
                                        	**type**\:   :py:class:`AigpCostCommunity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AigpCostCommunity>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: aigp_send_med
                                        
                                        	Enable/Disable sending AIGP in MED 
                                        	**type**\:   :py:class:`BgpAigpCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgEnum>`
                                        
                                        .. attribute:: allow_as_in
                                        
                                        	Allow as\-path with my AS present in it
                                        	**type**\:  int
                                        
                                        	**range:** 1..10
                                        
                                        	**default value**\: 3
                                        
                                        .. attribute:: as_override
                                        
                                        	TRUE to override matching AS\-number while sending update. FALSE to prevent as\-override from being inherited from the parent
                                        	**type**\:  bool
                                        
                                        	**default value**\: true
                                        
                                        .. attribute:: create
                                        
                                        	Create this address family group. Deletion of this object causes deletion of all the objects under AFGroup associated with this object
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: default_originate
                                        
                                        	Originate default route to this neighbor
                                        	**type**\:   :py:class:`DefaultOriginate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.DefaultOriginate>`
                                        
                                        .. attribute:: default_weight
                                        
                                        	Set default weight for routes from this neighbor/neighbor\-group/af\-group
                                        	**type**\:  int
                                        
                                        	**range:** 0..65535
                                        
                                        .. attribute:: encapsulation_type
                                        
                                        	Encapsulation type for this neighbor
                                        	**type**\:   :py:class:`BgpAfEncapsulationEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAfEncapsulationEnum>`
                                        
                                        .. attribute:: flowspec_validation
                                        
                                        	Config Flowspec validation for this neighbor
                                        	**type**\:   :py:class:`BgpFlowspecValidationCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpFlowspecValidationCfgEnum>`
                                        
                                        .. attribute:: import_
                                        
                                        	Import Reorigination options for Routes from the peer
                                        	**type**\:   :py:class:`Import_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.Import_>`
                                        
                                        .. attribute:: l2vpn_signalling
                                        
                                        	Disable signalling type on the peer
                                        	**type**\:   :py:class:`BgpSignalEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSignalEnum>`
                                        
                                        .. attribute:: maximum_prefixes
                                        
                                        	Maximum number of prefixes to accept from this peer
                                        	**type**\:   :py:class:`MaximumPrefixes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.MaximumPrefixes>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: multipath
                                        
                                        	Allow paths from this neighbor to be eligible for selective multipath
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_capable
                                        
                                        	TRUE to treat neighbor as Long\-lived Graceful\-restart capable. FALSE to rely on capability negotiation
                                        	**type**\:  bool
                                        
                                        	**default value**\: false
                                        
                                        .. attribute:: neighbor_af_long_lived_graceful_restart_stale_time
                                        
                                        	Maximum time to wait before purging long lived routes
                                        	**type**\:   :py:class:`NeighborAfLongLivedGracefulRestartStaleTime <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.NeighborAfLongLivedGracefulRestartStaleTime>`
                                        
                                        .. attribute:: next_hop_self
                                        
                                        	Disable the next hop calculation and  insert your own address in the nexthop field of advertised routes you learned from the neighbor
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged
                                        
                                        	TRUE to disable overwriting of next hop before advertising to eBGP peers. FALSE to prevent next\-hop\-unchanged from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: next_hop_unchanged_multipath
                                        
                                        	TRUE to disable overwriting of next hop for multipaths. FALSE to prevent next\-hop\-unchanged for multipaths
                                        	**type**\:  bool
                                        
                                        .. attribute:: prefix_orf_policy
                                        
                                        	Prefix ORF policy name for incoming updates
                                        	**type**\:  str
                                        
                                        .. attribute:: remove_private_as_entire_as_path
                                        
                                        	Remove private AS number from outbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPath>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: remove_private_as_entire_as_path_inbound
                                        
                                        	Remove private AS number from inbound updates
                                        	**type**\:   :py:class:`RemovePrivateAsEntireAsPathInbound <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPathInbound>`
                                        
                                        	**presence node**\: True
                                        
                                        .. attribute:: route_policy_in
                                        
                                        	Route policy name to apply to inbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_out
                                        
                                        	Route policy name to apply to outbound routes
                                        	**type**\:  str
                                        
                                        .. attribute:: route_reflector_client
                                        
                                        	TRUE to configure as a route\-reflector\-client.  FALSE to prevent route\-reflector\-client from being inherited
                                        	**type**\:  bool
                                        
                                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                        
                                        	RPKI bestpath origin\-AS allow invalid
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: rpki_origin_as_validation_disable
                                        
                                        	RPKI origin\-AS validation disable
                                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                        
                                        .. attribute:: send_community_ebgp
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_community_ebgp_graceful_shutdown
                                        
                                        	TRUE to send communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_ext_community_ebgp
                                        
                                        	TRUE to send extended communities to the external neighbor/neighbor\-group/af\-group.  FALSE not to send and to prevent inheritance from a parent
                                        	**type**\:  bool
                                        
                                        .. attribute:: send_multicast_attr
                                        
                                        	Config send multicast attribute for this neighbor
                                        	**type**\:   :py:class:`BgpSendMcastAttrCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSendMcastAttrCfgEnum>`
                                        
                                        .. attribute:: site_of_origin
                                        
                                        	Site\-of\-Origin extended community associated with the neighbor
                                        	**type**\:   :py:class:`SiteOfOrigin <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SiteOfOrigin>`
                                        
                                        .. attribute:: soft_reconfiguration
                                        
                                        	Enable/disable inbound soft reconfiguration for this neighbor/neighbor\-group/af\-group
                                        	**type**\:   :py:class:`SoftReconfiguration <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SoftReconfiguration>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.af_name = None
                                            self.accept_own = None
                                            self.accept_route_legacy_rt = None
                                            self.advertise_def_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV4()
                                            self.advertise_def_imp_disable_v4.parent = self
                                            self.advertise_def_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV6()
                                            self.advertise_def_imp_disable_v6.parent = self
                                            self.advertise_disable = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDisable()
                                            self.advertise_disable.parent = self
                                            self.advertise_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseL2Vpnevpn()
                                            self.advertise_l2vpnevpn.parent = self
                                            self.advertise_local_l2vpnevpn = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalL2Vpnevpn()
                                            self.advertise_local_l2vpnevpn.parent = self
                                            self.advertise_local_labeled_route = None
                                            self.advertise_local_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV4()
                                            self.advertise_local_v4.parent = self
                                            self.advertise_local_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV6()
                                            self.advertise_local_v6.parent = self
                                            self.advertise_orf = None
                                            self.advertise_permanent_network = None
                                            self.advertise_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV4()
                                            self.advertise_v4.parent = self
                                            self.advertise_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV6()
                                            self.advertise_v6.parent = self
                                            self.advertise_vrf_imp_disable_v4 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV4()
                                            self.advertise_vrf_imp_disable_v4.parent = self
                                            self.advertise_vrf_imp_disable_v6 = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV6()
                                            self.advertise_vrf_imp_disable_v6.parent = self
                                            self.af_group = None
                                            self.aigp = None
                                            self.aigp_cost_community = None
                                            self.aigp_send_med = None
                                            self.allow_as_in = None
                                            self.as_override = None
                                            self.create = None
                                            self.default_originate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.DefaultOriginate()
                                            self.default_originate.parent = self
                                            self.default_weight = None
                                            self.encapsulation_type = None
                                            self.flowspec_validation = None
                                            self.import_ = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.Import_()
                                            self.import_.parent = self
                                            self.l2vpn_signalling = None
                                            self.maximum_prefixes = None
                                            self.multipath = None
                                            self.neighbor_af_long_lived_graceful_restart_capable = None
                                            self.neighbor_af_long_lived_graceful_restart_stale_time = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.NeighborAfLongLivedGracefulRestartStaleTime()
                                            self.neighbor_af_long_lived_graceful_restart_stale_time.parent = self
                                            self.next_hop_self = None
                                            self.next_hop_unchanged = None
                                            self.next_hop_unchanged_multipath = None
                                            self.prefix_orf_policy = None
                                            self.remove_private_as_entire_as_path = None
                                            self.remove_private_as_entire_as_path_inbound = None
                                            self.route_policy_in = None
                                            self.route_policy_out = None
                                            self.route_reflector_client = None
                                            self.rpki_bestpath_origin_as_allow_invalid = None
                                            self.rpki_origin_as_validation_disable = None
                                            self.send_community_ebgp = None
                                            self.send_community_ebgp_graceful_shutdown = None
                                            self.send_ext_community_ebgp = None
                                            self.send_multicast_attr = None
                                            self.site_of_origin = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SiteOfOrigin()
                                            self.site_of_origin.parent = self
                                            self.soft_reconfiguration = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SoftReconfiguration()
                                            self.soft_reconfiguration.parent = self


                                        class AigpCostCommunity(object):
                                            """
                                            Send AIGP value in Cost Community. 
                                            
                                            .. attribute:: cost_community_id
                                            
                                            	Cost Community ID
                                            	**type**\:  int
                                            
                                            	**range:** 0..255
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: cost_community_poi_type
                                            
                                            	Cost Community POI
                                            	**type**\:   :py:class:`BgpAigpCfgPoiEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAigpCfgPoiEnum>`
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to enable sending cost community, FALSE otherwise 
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: transitive
                                            
                                            	True to send transitive cost community FALSE otherwise
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.cost_community_id = None
                                                self.cost_community_poi_type = None
                                                self.enable = None
                                                self.transitive = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aigp-cost-community'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.cost_community_id is not None:
                                                    return True

                                                if self.cost_community_poi_type is not None:
                                                    return True

                                                if self.enable is not None:
                                                    return True

                                                if self.transitive is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AigpCostCommunity']['meta_info']


                                        class AdvertiseDefImpDisableV6(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV6']['meta_info']


                                        class AdvertiseDisable(object):
                                            """
                                            Disable Advertise Of Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-disable'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDisable']['meta_info']


                                        class MaximumPrefixes(object):
                                            """
                                            Maximum number of prefixes to accept from this
                                            peer
                                            
                                            .. attribute:: discard_extra_paths
                                            
                                            	Discard extra paths when limit is exceeded
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: prefix_limit
                                            
                                            	Maximum prefixes limit
                                            	**type**\:  int
                                            
                                            	**range:** 1..4294967295
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: restart_time
                                            
                                            	Restart interval
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: warning_only
                                            
                                            	TRUE to only give a warning message when limit is exceeded.  FALSE to accept max prefix limit only
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: warning_percentage
                                            
                                            	Threshold value (%) at which to generate a warning message
                                            	**type**\:  int
                                            
                                            	**range:** 1..100
                                            
                                            	**default value**\: 75
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.discard_extra_paths = None
                                                self.prefix_limit = None
                                                self.restart_time = None
                                                self.warning_only = None
                                                self.warning_percentage = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:maximum-prefixes'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.discard_extra_paths is not None:
                                                    return True

                                                if self.prefix_limit is not None:
                                                    return True

                                                if self.restart_time is not None:
                                                    return True

                                                if self.warning_only is not None:
                                                    return True

                                                if self.warning_percentage is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.MaximumPrefixes']['meta_info']


                                        class RemovePrivateAsEntireAsPathInbound(object):
                                            """
                                            Remove private AS number from inbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from inbound updates. FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from inbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path-inbound'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPathInbound']['meta_info']


                                        class AdvertiseDefImpDisableV4(object):
                                            """
                                            Disable Advertise Of Default VRF Imported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-def-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseDefImpDisableV4']['meta_info']


                                        class AdvertiseL2Vpnevpn(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseL2Vpnevpn']['meta_info']


                                        class AdvertiseLocalL2Vpnevpn(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-l2vpnevpn'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalL2Vpnevpn']['meta_info']


                                        class NeighborAfLongLivedGracefulRestartStaleTime(object):
                                            """
                                            Maximum time to wait before purging long lived
                                            routes
                                            
                                            .. attribute:: stale_time_accept
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            .. attribute:: stale_time_send
                                            
                                            	Max time (seconds)
                                            	**type**\:  int
                                            
                                            	**range:** 0..16777215
                                            
                                            	**units**\: second
                                            
                                            	**default value**\: 0
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.stale_time_accept = None
                                                self.stale_time_send = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-af-long-lived-graceful-restart-stale-time'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.stale_time_accept is not None:
                                                    return True

                                                if self.stale_time_send is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.NeighborAfLongLivedGracefulRestartStaleTime']['meta_info']


                                        class SiteOfOrigin(object):
                                            """
                                            Site\-of\-Origin extended community associated
                                            with the neighbor
                                            
                                            .. attribute:: address
                                            
                                            	IP address
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            .. attribute:: address_index
                                            
                                            	IP address Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..65535
                                            
                                            .. attribute:: as_
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_index
                                            
                                            	AS number Index
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: as_xx
                                            
                                            	AS number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            .. attribute:: type
                                            
                                            	Type of Extended community
                                            	**type**\:   :py:class:`BgpSiteOfOriginEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpSiteOfOriginEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.address = None
                                                self.address_index = None
                                                self.as_ = None
                                                self.as_index = None
                                                self.as_xx = None
                                                self.type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:site-of-origin'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.address is not None:
                                                    return True

                                                if self.address_index is not None:
                                                    return True

                                                if self.as_ is not None:
                                                    return True

                                                if self.as_index is not None:
                                                    return True

                                                if self.as_xx is not None:
                                                    return True

                                                if self.type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SiteOfOrigin']['meta_info']


                                        class AdvertiseV6(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV6']['meta_info']


                                        class AdvertiseLocalV6(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV6']['meta_info']


                                        class Import_(object):
                                            """
                                            Import Reorigination options for Routes from the
                                            peer
                                            
                                            .. attribute:: import_reoriginate
                                            
                                            	TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported routes \- not supported
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_reoriginate_stitching
                                            
                                            	TRUE to Reoriginate imported routes with Stitching RTs, FALSE to Reoriginate imported routes with normal RTs
                                            	**type**\:  bool
                                            
                                            .. attribute:: import_stitching
                                            
                                            	TRUE to Import with Stitching RTs, FALSE to Import with normal RTs
                                            	**type**\:  bool
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.import_reoriginate = None
                                                self.import_reoriginate_stitching = None
                                                self.import_stitching = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:import'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.import_reoriginate is not None:
                                                    return True

                                                if self.import_reoriginate_stitching is not None:
                                                    return True

                                                if self.import_stitching is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.Import_']['meta_info']


                                        class DefaultOriginate(object):
                                            """
                                            Originate default route to this neighbor
                                            
                                            .. attribute:: enable
                                            
                                            	FALSE to prevent default\-originate from, being inherited from a parent. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: route_policy_name
                                            
                                            	Route policy name to specify criteria to originate default
                                            	**type**\:  str
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.enable = None
                                                self.route_policy_name = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:default-originate'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.enable is not None:
                                                    return True

                                                if self.route_policy_name is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.DefaultOriginate']['meta_info']


                                        class SoftReconfiguration(object):
                                            """
                                            Enable/disable inbound soft reconfiguration for
                                            this neighbor/neighbor\-group/af\-group
                                            
                                            .. attribute:: inbound_soft
                                            
                                            	FALSE to prohibit inbound soft reconfiguration. TRUE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            .. attribute:: soft_always
                                            
                                            	TRUE to always use soft reconfig, even if route refresh is supported.  FALSE otherwise
                                            	**type**\:  bool
                                            
                                            	**default value**\: false
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.inbound_soft = None
                                                self.soft_always = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:soft-reconfiguration'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.inbound_soft is not None:
                                                    return True

                                                if self.soft_always is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.SoftReconfiguration']['meta_info']


                                        class AdvertiseVrfImpDisableV6(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v6'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV6']['meta_info']


                                        class AdvertiseV4(object):
                                            """
                                            Advertise Translated Routes to the peer
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseV4']['meta_info']


                                        class AdvertiseLocalV4(object):
                                            """
                                            Advertise Of Local Routes to the peer with
                                            different RT
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: reorg_option
                                            
                                            	Reorigination option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.af_name = None
                                                self.reorg_option = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-local-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.af_name is not None:
                                                    return True

                                                if self.reorg_option is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseLocalV4']['meta_info']


                                        class RemovePrivateAsEntireAsPath(object):
                                            """
                                            Remove private AS number from outbound updates
                                            
                                            .. attribute:: enable
                                            
                                            	TRUE to remove private AS from outbound updates .  FALSE to prevent remove\-private\-AS from being inherited
                                            	**type**\:  bool
                                            
                                            	**mandatory**\: True
                                            
                                            .. attribute:: entire
                                            
                                            	TRUE to remove private AS from outbound updates if all ASes in aspath areprivate. FALSE to prevent remove\-private\-ASfrom being inherited
                                            	**type**\:  bool
                                            
                                            .. attribute:: _is_presence
                                            
                                            	Is present if this instance represents presence container else not
                                            	**type**\: bool
                                            
                                            

                                            This class is a :ref:`presence class<presence-class>`

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self._is_presence = True
                                                self.enable = None
                                                self.entire = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remove-private-as-entire-as-path'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self._is_presence:
                                                    return True
                                                if self.enable is not None:
                                                    return True

                                                if self.entire is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.RemovePrivateAsEntireAsPath']['meta_info']


                                        class AdvertiseVrfImpDisableV4(object):
                                            """
                                            Disable Advertise Of VRF ReImported Routes
                                            
                                            .. attribute:: adv_option
                                            
                                            	Advertise option
                                            	**type**\:   :py:class:`BgpReorgOptEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpReorgOptEnum>`
                                            
                                            .. attribute:: af_name
                                            
                                            	Address family
                                            	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                            
                                            .. attribute:: rt_type
                                            
                                            	RT type
                                            	**type**\:   :py:class:`BgpAdvRtEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpAdvRtEnum>`
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.adv_option = None
                                                self.af_name = None
                                                self.rt_type = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertise-vrf-imp-disable-v4'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.adv_option is not None:
                                                    return True

                                                if self.af_name is not None:
                                                    return True

                                                if self.rt_type is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf.AdvertiseVrfImpDisableV4']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.af_name is None:
                                                raise YPYModelError('Key property af_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:af-group-af[Cisco-IOS-XR-ipv4-bgp-cfg:af-name = ' + str(self.af_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.af_name is not None:
                                                return True

                                            if self.accept_own is not None:
                                                return True

                                            if self.accept_route_legacy_rt is not None:
                                                return True

                                            if self.advertise_def_imp_disable_v4 is not None and self.advertise_def_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_def_imp_disable_v6 is not None and self.advertise_def_imp_disable_v6._has_data():
                                                return True

                                            if self.advertise_disable is not None and self.advertise_disable._has_data():
                                                return True

                                            if self.advertise_l2vpnevpn is not None and self.advertise_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_l2vpnevpn is not None and self.advertise_local_l2vpnevpn._has_data():
                                                return True

                                            if self.advertise_local_labeled_route is not None:
                                                return True

                                            if self.advertise_local_v4 is not None and self.advertise_local_v4._has_data():
                                                return True

                                            if self.advertise_local_v6 is not None and self.advertise_local_v6._has_data():
                                                return True

                                            if self.advertise_orf is not None:
                                                return True

                                            if self.advertise_permanent_network is not None:
                                                return True

                                            if self.advertise_v4 is not None and self.advertise_v4._has_data():
                                                return True

                                            if self.advertise_v6 is not None and self.advertise_v6._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v4 is not None and self.advertise_vrf_imp_disable_v4._has_data():
                                                return True

                                            if self.advertise_vrf_imp_disable_v6 is not None and self.advertise_vrf_imp_disable_v6._has_data():
                                                return True

                                            if self.af_group is not None:
                                                return True

                                            if self.aigp is not None:
                                                return True

                                            if self.aigp_cost_community is not None and self.aigp_cost_community._has_data():
                                                return True

                                            if self.aigp_send_med is not None:
                                                return True

                                            if self.allow_as_in is not None:
                                                return True

                                            if self.as_override is not None:
                                                return True

                                            if self.create is not None:
                                                return True

                                            if self.default_originate is not None and self.default_originate._has_data():
                                                return True

                                            if self.default_weight is not None:
                                                return True

                                            if self.encapsulation_type is not None:
                                                return True

                                            if self.flowspec_validation is not None:
                                                return True

                                            if self.import_ is not None and self.import_._has_data():
                                                return True

                                            if self.l2vpn_signalling is not None:
                                                return True

                                            if self.maximum_prefixes is not None and self.maximum_prefixes._has_data():
                                                return True

                                            if self.multipath is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_capable is not None:
                                                return True

                                            if self.neighbor_af_long_lived_graceful_restart_stale_time is not None and self.neighbor_af_long_lived_graceful_restart_stale_time._has_data():
                                                return True

                                            if self.next_hop_self is not None:
                                                return True

                                            if self.next_hop_unchanged is not None:
                                                return True

                                            if self.next_hop_unchanged_multipath is not None:
                                                return True

                                            if self.prefix_orf_policy is not None:
                                                return True

                                            if self.remove_private_as_entire_as_path is not None and self.remove_private_as_entire_as_path._has_data():
                                                return True

                                            if self.remove_private_as_entire_as_path_inbound is not None and self.remove_private_as_entire_as_path_inbound._has_data():
                                                return True

                                            if self.route_policy_in is not None:
                                                return True

                                            if self.route_policy_out is not None:
                                                return True

                                            if self.route_reflector_client is not None:
                                                return True

                                            if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                                return True

                                            if self.rpki_origin_as_validation_disable is not None:
                                                return True

                                            if self.send_community_ebgp is not None:
                                                return True

                                            if self.send_community_ebgp_graceful_shutdown is not None:
                                                return True

                                            if self.send_ext_community_ebgp is not None:
                                                return True

                                            if self.send_multicast_attr is not None:
                                                return True

                                            if self.site_of_origin is not None and self.site_of_origin._has_data():
                                                return True

                                            if self.soft_reconfiguration is not None and self.soft_reconfiguration._has_data():
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs.AfGroupAf']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:af-group-afs'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.af_group_af is not None:
                                            for child_ref in self.af_group_af:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup.AfGroupAfs']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.af_group_name is None:
                                        raise YPYModelError('Key property af_group_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:af-group[Cisco-IOS-XR-ipv4-bgp-cfg:af-group-name = ' + str(self.af_group_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_group_name is not None:
                                        return True

                                    if self.af_group_afs is not None and self.af_group_afs._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups.AfGroup']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:af-groups'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.af_group is not None:
                                    for child_ref in self.af_group:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.AfGroups']['meta_info']


                        class SessionGroups(object):
                            """
                            Session group configuration
                            
                            .. attribute:: session_group
                            
                            	A particular BGP session group
                            	**type**\: list of    :py:class:`SessionGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.session_group = YList()
                                self.session_group.parent = self
                                self.session_group.name = 'session_group'


                            class SessionGroup(object):
                                """
                                A particular BGP session group
                                
                                .. attribute:: session_group_name  <key>
                                
                                	BGP session group name
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: additional_paths_receive_capability
                                
                                	Advertise additional paths Receive capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: additional_paths_send_capability
                                
                                	Advertise additional paths Send capability
                                	**type**\:   :py:class:`BgpNbrCapAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpNbrCapAdditionalPathsCfgEnum>`
                                
                                .. attribute:: advertisement_interval
                                
                                	Minimum interval between sending BGP routing updates
                                	**type**\:   :py:class:`AdvertisementInterval <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AdvertisementInterval>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: bfd_enable_modes
                                
                                	Strict mode, Default mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpBfdEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpBfdEnableModeEnum>`
                                
                                .. attribute:: bfd_minimum_interval
                                
                                	Hello interval for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 3..30000
                                
                                	**units**\: millisecond
                                
                                .. attribute:: bfd_multiplier
                                
                                	Detection multiplier for BFD sessions created by BGP
                                	**type**\:  int
                                
                                	**range:** 2..16
                                
                                .. attribute:: bmp_activates
                                
                                	Enable BMP logging for this neighbor
                                	**type**\:   :py:class:`BmpActivates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates>`
                                
                                .. attribute:: create
                                
                                	Create this group. Deletion of this object causes deletion of all the objects under NeighborGroup/SessionGroup associated with this object
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: description
                                
                                	Up to 80 characters describing this neighbor
                                	**type**\:  str
                                
                                .. attribute:: ebgp_multihop
                                
                                	Allow EBGP neighbors not on directly connected networks
                                	**type**\:   :py:class:`EbgpMultihop <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.EbgpMultihop>`
                                
                                .. attribute:: ebgp_recv_dmz
                                
                                	TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive from ebgp peer and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: ebgp_send_dmz_enable_modes
                                
                                	Default mode, Cumulative mode or Disable to prevent inheritance from a parent
                                	**type**\:   :py:class:`BgpEbgpSendDmzEnableModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpEbgpSendDmzEnableModeEnum>`
                                
                                .. attribute:: egress_peer_engineering
                                
                                	TRUE to enable egress peer engineering FALSE to disable egress peer engineering and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: enforce_first_as
                                
                                	TRUE to enforce first AS; FALSE to not enforce first AS
                                	**type**\:  bool
                                
                                .. attribute:: graceful_maintenance
                                
                                	Graceful Maintenance mode
                                	**type**\:   :py:class:`GracefulMaintenance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance>`
                                
                                .. attribute:: idle_watch_time
                                
                                	Time to wait for deleteing IDLE state Dynamic peer
                                	**type**\:  int
                                
                                	**range:** 30..1800
                                
                                	**units**\: second
                                
                                .. attribute:: ignore_connected_check_ebgp
                                
                                	TRUE to disable the connected nexthop check for this peer.FALSE to enable the connected nexthop check for this peer
                                	**type**\:  bool
                                
                                .. attribute:: internal_vpn_client_ibgpce
                                
                                	TRUE to preserve the CE path attributes.FALSE to override CE path attributes
                                	**type**\:  bool
                                
                                .. attribute:: keychain
                                
                                	Set or disable keychain based authentication
                                	**type**\:   :py:class:`Keychain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Keychain>`
                                
                                .. attribute:: local_address
                                
                                	Local ip address
                                	**type**\:   :py:class:`LocalAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddress>`
                                
                                .. attribute:: local_as
                                
                                	Specify a local\-as number
                                	**type**\:   :py:class:`LocalAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAs>`
                                
                                .. attribute:: max_peers
                                
                                	Set Maximum Peers in Dynamic Range
                                	**type**\:  int
                                
                                	**range:** 1..4096
                                
                                .. attribute:: msg_log_in
                                
                                	Message log inbound
                                	**type**\:   :py:class:`MsgLogIn <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogIn>`
                                
                                .. attribute:: msg_log_out
                                
                                	Message log outbound
                                	**type**\:   :py:class:`MsgLogOut <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogOut>`
                                
                                .. attribute:: neighbor_cluster_id
                                
                                	Neighbor Cluster\-id
                                	**type**\:   :py:class:`NeighborClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.NeighborClusterId>`
                                
                                .. attribute:: neighbor_graceful_restart
                                
                                	TRUE to Enable graceful restart support for neighbor.  FALSE to disable graceful restart support for neighbor
                                	**type**\:  bool
                                
                                .. attribute:: neighbor_graceful_restart_stalepath_time
                                
                                	Maximum time to wait for restart of GR capable peer
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 360
                                
                                .. attribute:: neighbor_graceful_restart_time
                                
                                	Restart time advertised to neighbor
                                	**type**\:  int
                                
                                	**range:** 1..4095
                                
                                	**units**\: second
                                
                                	**default value**\: 120
                                
                                .. attribute:: password
                                
                                	Set or disable a password
                                	**type**\:   :py:class:`Password <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Password>`
                                
                                .. attribute:: propagate_dmz_link_bandwidth
                                
                                	TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: receive_buffer_size
                                
                                	Set socket receive buffer size and BGP read buffer size
                                	**type**\:   :py:class:`ReceiveBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.ReceiveBufferSize>`
                                
                                .. attribute:: remote_as
                                
                                	Set remote AS
                                	**type**\:   :py:class:`RemoteAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.RemoteAs>`
                                
                                .. attribute:: remote_as_list
                                
                                	Remote\-as\-list group name
                                	**type**\:  str
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: send_buffer_size
                                
                                	Set socket send buffer size and BGP write buffer size
                                	**type**\:   :py:class:`SendBufferSize <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.SendBufferSize>`
                                
                                .. attribute:: session_group_add_member
                                
                                	Inherit address\-family independent config from a session\-group
                                	**type**\:  str
                                
                                .. attribute:: session_open_mode
                                
                                	TCP mode to be used to establish BGP session
                                	**type**\:   :py:class:`BgpTcpModeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpTcpModeEnum>`
                                
                                	**default value**\: either
                                
                                .. attribute:: shutdown
                                
                                	TRUE to shutdown this entity, FALSE to prevent this entity from being shutdown even if the parent is
                                	**type**\:  bool
                                
                                .. attribute:: suppress_all_capabilities
                                
                                	TRUE to suppress all capabilities. FALSE to not suppress and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: suppress_four_byte_as_capability
                                
                                	TRUE to suppress BGP 4\-byte\-as capability.  FALSE to not suppress it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: tcpmss
                                
                                	TCP Maximum segment size
                                	**type**\:   :py:class:`Tcpmss <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tcpmss>`
                                
                                .. attribute:: timers
                                
                                	BGP per neighbor timers
                                	**type**\:   :py:class:`Timers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Timers>`
                                
                                .. attribute:: tos
                                
                                	TOS (Type Of Service)
                                	**type**\:   :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tos>`
                                
                                .. attribute:: ttl_security
                                
                                	TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: update_in_filtering
                                
                                	Inbound update filtering
                                	**type**\:   :py:class:`UpdateInFiltering <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering>`
                                
                                .. attribute:: update_source_interface
                                
                                	Select an interface to configure
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.session_group_name = None
                                    self.additional_paths_receive_capability = None
                                    self.additional_paths_send_capability = None
                                    self.advertisement_interval = None
                                    self.bfd_enable_modes = None
                                    self.bfd_minimum_interval = None
                                    self.bfd_multiplier = None
                                    self.bmp_activates = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates()
                                    self.bmp_activates.parent = self
                                    self.create = None
                                    self.description = None
                                    self.ebgp_multihop = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.EbgpMultihop()
                                    self.ebgp_multihop.parent = self
                                    self.ebgp_recv_dmz = None
                                    self.ebgp_send_dmz_enable_modes = None
                                    self.egress_peer_engineering = None
                                    self.enforce_first_as = None
                                    self.graceful_maintenance = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance()
                                    self.graceful_maintenance.parent = self
                                    self.idle_watch_time = None
                                    self.ignore_connected_check_ebgp = None
                                    self.internal_vpn_client_ibgpce = None
                                    self.keychain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Keychain()
                                    self.keychain.parent = self
                                    self.local_address = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddress()
                                    self.local_address.parent = self
                                    self.local_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAs()
                                    self.local_as.parent = self
                                    self.max_peers = None
                                    self.msg_log_in = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogIn()
                                    self.msg_log_in.parent = self
                                    self.msg_log_out = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogOut()
                                    self.msg_log_out.parent = self
                                    self.neighbor_cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.NeighborClusterId()
                                    self.neighbor_cluster_id.parent = self
                                    self.neighbor_graceful_restart = None
                                    self.neighbor_graceful_restart_stalepath_time = None
                                    self.neighbor_graceful_restart_time = None
                                    self.password = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Password()
                                    self.password.parent = self
                                    self.propagate_dmz_link_bandwidth = None
                                    self.receive_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.ReceiveBufferSize()
                                    self.receive_buffer_size.parent = self
                                    self.remote_as = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.RemoteAs()
                                    self.remote_as.parent = self
                                    self.remote_as_list = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.send_buffer_size = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.SendBufferSize()
                                    self.send_buffer_size.parent = self
                                    self.session_group_add_member = None
                                    self.session_open_mode = None
                                    self.shutdown = None
                                    self.suppress_all_capabilities = None
                                    self.suppress_four_byte_as_capability = None
                                    self.tcpmss = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tcpmss()
                                    self.tcpmss.parent = self
                                    self.timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Timers()
                                    self.timers.parent = self
                                    self.tos = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tos()
                                    self.tos.parent = self
                                    self.ttl_security = None
                                    self.update_in_filtering = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering()
                                    self.update_in_filtering.parent = self
                                    self.update_source_interface = None


                                class LocalAddress(object):
                                    """
                                    Local ip address
                                    
                                    .. attribute:: local_address_disable
                                    
                                    	TRUE to prevent this entity from having a local address if the parent has one.FALSE to specify local ip address
                                    	**type**\:  bool
                                    
                                    .. attribute:: local_ip_address
                                    
                                    	Local ip address for neighbor
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    	**type**\:  str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.local_address_disable = None
                                        self.local_ip_address = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-address'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.local_address_disable is not None:
                                            return True

                                        if self.local_ip_address is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAddress']['meta_info']


                                class BmpActivates(object):
                                    """
                                    Enable BMP logging for this neighbor
                                    
                                    .. attribute:: bmp_activate
                                    
                                    	Enable BMP logging for this particular server
                                    	**type**\: list of    :py:class:`BmpActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates.BmpActivate>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bmp_activate = YList()
                                        self.bmp_activate.parent = self
                                        self.bmp_activate.name = 'bmp_activate'


                                    class BmpActivate(object):
                                        """
                                        Enable BMP logging for this particular server
                                        
                                        .. attribute:: server_id  <key>
                                        
                                        	BMP Server ID
                                        	**type**\:  int
                                        
                                        	**range:** 1..8
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.server_id = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.server_id is None:
                                                raise YPYModelError('Key property server_id is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activate[Cisco-IOS-XR-ipv4-bgp-cfg:server-id = ' + str(self.server_id) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.server_id is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates.BmpActivate']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-activates'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bmp_activate is not None:
                                            for child_ref in self.bmp_activate:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.BmpActivates']['meta_info']


                                class EbgpMultihop(object):
                                    """
                                    Allow EBGP neighbors not on directly connected
                                    networks
                                    
                                    .. attribute:: max_hop_count
                                    
                                    	Maximum hop count
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 255
                                    
                                    .. attribute:: mpls_deactivation
                                    
                                    	TRUE to not enable MPLS and NULL rewrite
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.max_hop_count = None
                                        self.mpls_deactivation = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ebgp-multihop'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.max_hop_count is not None:
                                            return True

                                        if self.mpls_deactivation is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.EbgpMultihop']['meta_info']


                                class RemoteAs(object):
                                    """
                                    Set remote AS
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:remote-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.RemoteAs']['meta_info']


                                class LocalAs(object):
                                    """
                                    Specify a local\-as number
                                    
                                    .. attribute:: as_xx
                                    
                                    	xx of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy
                                    
                                    	yy of AS number xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: disable
                                    
                                    	Disable Local AS and prevent it from being inherited from a parent
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: dual_as
                                    
                                    	Dual\-AS mode
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: no_prepend
                                    
                                    	Do not prepend Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: replace_as
                                    
                                    	Prepend only Local AS to announcements from this neighbor
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None
                                        self.disable = None
                                        self.dual_as = None
                                        self.no_prepend = None
                                        self.replace_as = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:local-as'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        if self.disable is not None:
                                            return True

                                        if self.dual_as is not None:
                                            return True

                                        if self.no_prepend is not None:
                                            return True

                                        if self.replace_as is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.LocalAs']['meta_info']


                                class Password(object):
                                    """
                                    Set or disable a password
                                    
                                    .. attribute:: password
                                    
                                    	The neighbor password.  Leave unspecified when disabling the password
                                    	**type**\:  str
                                    
                                    	**pattern:** (!.+)\|([^!].+)
                                    
                                    .. attribute:: password_disable
                                    
                                    	TRUE to prevent this entity from having a password even if the parent has one.  FALSEto specify a password
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.password = None
                                        self.password_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:password'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.password is not None:
                                            return True

                                        if self.password_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Password']['meta_info']


                                class AdvertisementInterval(object):
                                    """
                                    Minimum interval between sending BGP routing
                                    updates
                                    
                                    .. attribute:: minimum_interval
                                    
                                    	Minimum advertisement interval time, secs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..600
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: minimum_interval_msecs
                                    
                                    	Minimum advertisement interval time, msecs part
                                    	**type**\:  int
                                    
                                    	**range:** 0..999
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.minimum_interval = None
                                        self.minimum_interval_msecs = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:advertisement-interval'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.minimum_interval is not None:
                                            return True

                                        if self.minimum_interval_msecs is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.AdvertisementInterval']['meta_info']


                                class NeighborClusterId(object):
                                    """
                                    Neighbor Cluster\-id
                                    
                                    .. attribute:: cluster_id_address
                                    
                                    	Route\-Reflector Cluster ID in IPV4 address format
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: cluster_id_number
                                    
                                    	Route\-Reflector Cluster ID as 32 bit quantity
                                    	**type**\:  int
                                    
                                    	**range:** 1..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.cluster_id_address = None
                                        self.cluster_id_number = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:neighbor-cluster-id'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.cluster_id_address is not None:
                                            return True

                                        if self.cluster_id_number is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.NeighborClusterId']['meta_info']


                                class Tcpmss(object):
                                    """
                                    TCP Maximum segment size
                                    
                                    .. attribute:: mss
                                    
                                    	Maximum Segment Size
                                    	**type**\:  int
                                    
                                    	**range:** 68..10000
                                    
                                    .. attribute:: tcpmss_disable
                                    
                                    	TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE, otherwise
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.mss = None
                                        self.tcpmss_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tcpmss'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.mss is not None:
                                            return True

                                        if self.tcpmss_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tcpmss']['meta_info']


                                class Tos(object):
                                    """
                                    TOS (Type Of Service)
                                    
                                    .. attribute:: type
                                    
                                    	Set type of service
                                    	**type**\:   :py:class:`BgpTosEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTosEnum>`
                                    
                                    .. attribute:: value
                                    
                                    	TOS value to set
                                    	**type**\: one of the below types:
                                    
                                    	**type**\:   :py:class:`BgpPrecedenceDscpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscpEnum>`
                                    
                                    
                                    ----
                                    	**type**\:  int
                                    
                                    	**range:** 0..63
                                    
                                    
                                    ----
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.type = None
                                        self.value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tos'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.type is not None:
                                            return True

                                        if self.value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Tos']['meta_info']


                                class UpdateInFiltering(object):
                                    """
                                    Inbound update filtering
                                    
                                    .. attribute:: enable
                                    
                                    	Configure inbound update filtering
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: update_in_filtering_attribute_filter_group
                                    
                                    	Attribute\-filter group name for update filtering
                                    	**type**\:  str
                                    
                                    .. attribute:: update_in_filtering_message_buffers
                                    
                                    	Message buffers to store filtered updates
                                    	**type**\:   :py:class:`UpdateInFilteringMessageBuffers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers>`
                                    
                                    	**presence node**\: True
                                    
                                    .. attribute:: update_in_filtering_syslog_disable
                                    
                                    	Disable inbound update filtering syslog messages
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.update_in_filtering_attribute_filter_group = None
                                        self.update_in_filtering_message_buffers = None
                                        self.update_in_filtering_syslog_disable = None


                                    class UpdateInFilteringMessageBuffers(object):
                                        """
                                        Message buffers to store filtered updates
                                        
                                        .. attribute:: non_circular_buffer
                                        
                                        	TRUE to configure non\-circular buffer
                                        	**type**\:  bool
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: number_of_buffers
                                        
                                        	Number of message buffers
                                        	**type**\:  int
                                        
                                        	**range:** 0..25
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: _is_presence
                                        
                                        	Is present if this instance represents presence container else not
                                        	**type**\: bool
                                        
                                        

                                        This class is a :ref:`presence class<presence-class>`

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self._is_presence = True
                                            self.non_circular_buffer = None
                                            self.number_of_buffers = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering-message-buffers'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self._is_presence:
                                                return True
                                            if self.non_circular_buffer is not None:
                                                return True

                                            if self.number_of_buffers is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering.UpdateInFilteringMessageBuffers']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-in-filtering'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.update_in_filtering_attribute_filter_group is not None:
                                            return True

                                        if self.update_in_filtering_message_buffers is not None and self.update_in_filtering_message_buffers._has_data():
                                            return True

                                        if self.update_in_filtering_syslog_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.UpdateInFiltering']['meta_info']


                                class MsgLogOut(object):
                                    """
                                    Message log outbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Outbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a outbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-out'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogOut']['meta_info']


                                class ReceiveBufferSize(object):
                                    """
                                    Set socket receive buffer size and BGP read
                                    buffer size
                                    
                                    .. attribute:: bgp_receive_size
                                    
                                    	BGP read buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_receive_size
                                    
                                    	Receive socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 512..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 32768
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_receive_size = None
                                        self.socket_receive_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:receive-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_receive_size is not None:
                                            return True

                                        if self.socket_receive_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.ReceiveBufferSize']['meta_info']


                                class MsgLogIn(object):
                                    """
                                    Message log inbound
                                    
                                    .. attribute:: msg_buf_count
                                    
                                    	Inbound message log buffer size
                                    	**type**\:  int
                                    
                                    	**range:** 1..100
                                    
                                    .. attribute:: msg_log_disable
                                    
                                    	Disable inbound message logging
                                    	**type**\:  bool
                                    
                                    .. attribute:: msg_log_inherit_disable
                                    
                                    	TRUE, to prevent this entity from having a inbound message logging if parent has one
                                    	**type**\:  bool
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.msg_buf_count = None
                                        self.msg_log_disable = None
                                        self.msg_log_inherit_disable = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:msg-log-in'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.msg_buf_count is not None:
                                            return True

                                        if self.msg_log_disable is not None:
                                            return True

                                        if self.msg_log_inherit_disable is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.MsgLogIn']['meta_info']


                                class SendBufferSize(object):
                                    """
                                    Set socket send buffer size and BGP write buffer
                                    size
                                    
                                    .. attribute:: bgp_send_size
                                    
                                    	BGP write buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 4096
                                    
                                    .. attribute:: socket_send_size
                                    
                                    	Send socket buffer size in bytes
                                    	**type**\:  int
                                    
                                    	**range:** 4096..131072
                                    
                                    	**units**\: byte
                                    
                                    	**default value**\: 24576
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.bgp_send_size = None
                                        self.socket_send_size = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:send-buffer-size'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.bgp_send_size is not None:
                                            return True

                                        if self.socket_send_size is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.SendBufferSize']['meta_info']


                                class Timers(object):
                                    """
                                    BGP per neighbor timers.
                                    
                                    .. attribute:: hold_time
                                    
                                    	Hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 180
                                    
                                    .. attribute:: keepalive_interval
                                    
                                    	Keepalive interval
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 60
                                    
                                    .. attribute:: min_accept_hold_time
                                    
                                    	Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time
                                    	**type**\:  int
                                    
                                    	**range:** 0..65535
                                    
                                    	**default value**\: 3
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.hold_time = None
                                        self.keepalive_interval = None
                                        self.min_accept_hold_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:timers'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.hold_time is not None:
                                            return True

                                        if self.keepalive_interval is not None:
                                            return True

                                        if self.min_accept_hold_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Timers']['meta_info']


                                class Keychain(object):
                                    """
                                    Set or disable keychain based authentication
                                    
                                    .. attribute:: keychain_disable
                                    
                                    	TRUE to prevent this entity from having a keychain based authentication even if the parent has one.FALSE to specify a keychain name
                                    	**type**\:  bool
                                    
                                    .. attribute:: keychain_name
                                    
                                    	Name of the keychain associated with neighbor
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.keychain_disable = None
                                        self.keychain_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:keychain'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.keychain_disable is not None:
                                            return True

                                        if self.keychain_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.Keychain']['meta_info']


                                class GracefulMaintenance(object):
                                    """
                                    Graceful Maintenance mode
                                    
                                    .. attribute:: enable
                                    
                                    	Enter Graceful Maintenance mode to configure parametrs
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: graceful_maintenance_activate
                                    
                                    	Initiate the graceful shutdown procedure
                                    	**type**\:  bool
                                    
                                    .. attribute:: graceful_maintenance_as_prepends
                                    
                                    	Number of times to prepend local AS number to the AS path
                                    	**type**\:   :py:class:`GracefulMaintenanceAsPrepends <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends>`
                                    
                                    .. attribute:: graceful_maintenance_local_preference
                                    
                                    	Set Local Preference to advertise routes with
                                    	**type**\:   :py:class:`GracefulMaintenanceLocalPreference <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.graceful_maintenance_activate = None
                                        self.graceful_maintenance_as_prepends = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends()
                                        self.graceful_maintenance_as_prepends.parent = self
                                        self.graceful_maintenance_local_preference = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference()
                                        self.graceful_maintenance_local_preference.parent = self


                                    class GracefulMaintenanceLocalPreference(object):
                                        """
                                        Set Local Preference to advertise routes with
                                        
                                        .. attribute:: gshut_loc_pref_disable
                                        
                                        	TRUE, to prevent inheritance of Local Pref value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        .. attribute:: local_preference
                                        
                                        	Local Preference Value
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.gshut_loc_pref_disable = None
                                            self.local_preference = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-local-preference'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.gshut_loc_pref_disable is not None:
                                                return True

                                            if self.local_preference is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceLocalPreference']['meta_info']


                                    class GracefulMaintenanceAsPrepends(object):
                                        """
                                        Number of times to prepend local AS number to
                                        the AS path
                                        
                                        .. attribute:: as_prepends
                                        
                                        	number of times AS prepends
                                        	**type**\:  int
                                        
                                        	**range:** 0..6
                                        
                                        .. attribute:: gshut_prepends_disable
                                        
                                        	TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE, otherwise
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.as_prepends = None
                                            self.gshut_prepends_disable = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance-as-prepends'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.as_prepends is not None:
                                                return True

                                            if self.gshut_prepends_disable is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance.GracefulMaintenanceAsPrepends']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:graceful-maintenance'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.graceful_maintenance_activate is not None:
                                            return True

                                        if self.graceful_maintenance_as_prepends is not None and self.graceful_maintenance_as_prepends._has_data():
                                            return True

                                        if self.graceful_maintenance_local_preference is not None and self.graceful_maintenance_local_preference._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup.GracefulMaintenance']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.session_group_name is None:
                                        raise YPYModelError('Key property session_group_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:session-group[Cisco-IOS-XR-ipv4-bgp-cfg:session-group-name = ' + str(self.session_group_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.session_group_name is not None:
                                        return True

                                    if self.additional_paths_receive_capability is not None:
                                        return True

                                    if self.additional_paths_send_capability is not None:
                                        return True

                                    if self.advertisement_interval is not None and self.advertisement_interval._has_data():
                                        return True

                                    if self.bfd_enable_modes is not None:
                                        return True

                                    if self.bfd_minimum_interval is not None:
                                        return True

                                    if self.bfd_multiplier is not None:
                                        return True

                                    if self.bmp_activates is not None and self.bmp_activates._has_data():
                                        return True

                                    if self.create is not None:
                                        return True

                                    if self.description is not None:
                                        return True

                                    if self.ebgp_multihop is not None and self.ebgp_multihop._has_data():
                                        return True

                                    if self.ebgp_recv_dmz is not None:
                                        return True

                                    if self.ebgp_send_dmz_enable_modes is not None:
                                        return True

                                    if self.egress_peer_engineering is not None:
                                        return True

                                    if self.enforce_first_as is not None:
                                        return True

                                    if self.graceful_maintenance is not None and self.graceful_maintenance._has_data():
                                        return True

                                    if self.idle_watch_time is not None:
                                        return True

                                    if self.ignore_connected_check_ebgp is not None:
                                        return True

                                    if self.internal_vpn_client_ibgpce is not None:
                                        return True

                                    if self.keychain is not None and self.keychain._has_data():
                                        return True

                                    if self.local_address is not None and self.local_address._has_data():
                                        return True

                                    if self.local_as is not None and self.local_as._has_data():
                                        return True

                                    if self.max_peers is not None:
                                        return True

                                    if self.msg_log_in is not None and self.msg_log_in._has_data():
                                        return True

                                    if self.msg_log_out is not None and self.msg_log_out._has_data():
                                        return True

                                    if self.neighbor_cluster_id is not None and self.neighbor_cluster_id._has_data():
                                        return True

                                    if self.neighbor_graceful_restart is not None:
                                        return True

                                    if self.neighbor_graceful_restart_stalepath_time is not None:
                                        return True

                                    if self.neighbor_graceful_restart_time is not None:
                                        return True

                                    if self.password is not None and self.password._has_data():
                                        return True

                                    if self.propagate_dmz_link_bandwidth is not None:
                                        return True

                                    if self.receive_buffer_size is not None and self.receive_buffer_size._has_data():
                                        return True

                                    if self.remote_as is not None and self.remote_as._has_data():
                                        return True

                                    if self.remote_as_list is not None:
                                        return True

                                    if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                        return True

                                    if self.rpki_origin_as_validation_disable is not None:
                                        return True

                                    if self.send_buffer_size is not None and self.send_buffer_size._has_data():
                                        return True

                                    if self.session_group_add_member is not None:
                                        return True

                                    if self.session_open_mode is not None:
                                        return True

                                    if self.shutdown is not None:
                                        return True

                                    if self.suppress_all_capabilities is not None:
                                        return True

                                    if self.suppress_four_byte_as_capability is not None:
                                        return True

                                    if self.tcpmss is not None and self.tcpmss._has_data():
                                        return True

                                    if self.timers is not None and self.timers._has_data():
                                        return True

                                    if self.tos is not None and self.tos._has_data():
                                        return True

                                    if self.ttl_security is not None:
                                        return True

                                    if self.update_in_filtering is not None and self.update_in_filtering._has_data():
                                        return True

                                    if self.update_source_interface is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups.SessionGroup']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:session-groups'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.session_group is not None:
                                    for child_ref in self.session_group:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity.SessionGroups']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bgp-entity'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.af_groups is not None and self.af_groups._has_data():
                                return True

                            if self.neighbor_groups is not None and self.neighbor_groups._has_data():
                                return True

                            if self.neighbors is not None and self.neighbors._has_data():
                                return True

                            if self.session_groups is not None and self.session_groups._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.BgpEntity']['meta_info']


                    class Global_(object):
                        """
                        Global default config
                        
                        .. attribute:: as_league
                        
                        	AS League
                        	**type**\:   :py:class:`AsLeague <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsLeague>`
                        
                        .. attribute:: as_list_groups
                        
                        	AS\-list group lists
                        	**type**\:   :py:class:`AsListGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups>`
                        
                        .. attribute:: attribute_filter_groups
                        
                        	Attribute\-filter groups list
                        	**type**\:   :py:class:`AttributeFilterGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups>`
                        
                        .. attribute:: best_path_aigp_ignore
                        
                        	Change default route selection criteria to ignore AIGP unless both paths whichare compared have AIGP attribute
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_as_multipath_relax
                        
                        	Change default multi\-route selection criteria to relax as\-path checking \- only require same aspath length
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_as_path_length
                        
                        	Change default route selection criteria to ignore AS path length
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_confederation_paths
                        
                        	Change default route selection criteria and allow the comparing of MED among confederation paths
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_cost_community
                        
                        	Change default route selection criteria to ignore cost community comparison
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_med_always
                        
                        	Change default route selection criteria and allow comparing of MED from different neighbors
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_med_missing
                        
                        	Treat missing MED as the least preferred one
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: best_path_router_id
                        
                        	Change default route selection criteria and compare router\-id for identical EBGP paths
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: bfd
                        
                        	BFD configuration
                        	**type**\:   :py:class:`Bfd <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.Bfd>`
                        
                        .. attribute:: cluster_id
                        
                        	Configure Route\-Reflector Cluster\-id
                        	**type**\:   :py:class:`ClusterId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ClusterId>`
                        
                        .. attribute:: confederation_domain
                        
                        	Set routing domain confederation AS
                        	**type**\:   :py:class:`ConfederationDomain <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ConfederationDomain>`
                        
                        .. attribute:: confederation_peer_ases
                        
                        	Define peer ASes in BGP confederation
                        	**type**\:   :py:class:`ConfederationPeerAses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ConfederationPeerAses>`
                        
                        .. attribute:: default_info_originate
                        
                        	Control distribution of default information
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: default_metric
                        
                        	Default redistributed metric
                        	**type**\:  int
                        
                        	**range:** 1..4294967295
                        
                        .. attribute:: disable_auto_soft_reset
                        
                        	Disable automatic soft peer reset on policy reconfiguration
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: disable_enforce_first_as
                        
                        	Disable enforce the first AS for EBGP routes
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: disable_fast_external_fallover
                        
                        	Disable immediate reset session if a link to a directly connected external peer goes down
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: disable_msg_log
                        
                        	Disable inbound and outbound messagelogging for all neighbors under the vrf
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: disable_neighbor_logging
                        
                        	Disable neighbor change logging
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: enforce_ibgp_out_policy
                        
                        	Allow all attributes to be modified by outbound policy for iBGP peers
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: global_afs
                        
                        	Global AF\-specific configuration
                        	**type**\:   :py:class:`GlobalAfs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs>`
                        
                        .. attribute:: global_graceful_maintenance_activate
                        
                        	Activate Graceful Maintenance Mode for all neighbors with graceful maintenance config
                        	**type**\:   :py:class:`GlobalGracefulMaintenanceActivate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalGracefulMaintenanceActivate>`
                        
                        .. attribute:: global_scan_time
                        
                        	Configure background scanner interval for generic scanner
                        	**type**\:  int
                        
                        	**range:** 5..3600
                        
                        	**units**\: second
                        
                        	**default value**\: 60
                        
                        .. attribute:: global_timers
                        
                        	Adjust routing timers
                        	**type**\:   :py:class:`GlobalTimers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalTimers>`
                        
                        .. attribute:: graceful_reset
                        
                        	Reset gracefully if configuration change forces a peer reset
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: graceful_restart
                        
                        	Enable graceful restart support
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: graceful_restart_purge_time
                        
                        	Time before stale routes are purged
                        	**type**\:  int
                        
                        	**range:** 1..6000
                        
                        	**units**\: second
                        
                        	**default value**\: 600
                        
                        .. attribute:: graceful_restart_stalepath_time
                        
                        	Maximum time to wait for restart of GR capable peers
                        	**type**\:  int
                        
                        	**range:** 1..4095
                        
                        	**units**\: second
                        
                        	**default value**\: 360
                        
                        .. attribute:: graceful_restart_time
                        
                        	Restart time advertised to neighbors
                        	**type**\:  int
                        
                        	**range:** 1..4095
                        
                        	**units**\: second
                        
                        	**default value**\: 120
                        
                        .. attribute:: igp_loop_check
                        
                        	Enable AS\-path loop checking for iBGP peers
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: igp_redist_internal
                        
                        	Allow redistribution of iBGP into IGPs (dangerous)
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: install_diversion
                        
                        	Install diversion path to RIB/CEF
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: limits
                        
                        	Maximum number that can be configured
                        	**type**\:   :py:class:`Limits <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.Limits>`
                        
                        .. attribute:: local_preference
                        
                        	Configure default local preference
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**default value**\: 100
                        
                        .. attribute:: mpls_activated_interfaces
                        
                        	Configure list of MPLS activated interfaces
                        	**type**\:   :py:class:`MplsActivatedInterfaces <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.MplsActivatedInterfaces>`
                        
                        .. attribute:: multi_path_as_path_ignore_onwards
                        
                        	Change default multi\-route selection criteria to ignore everything onwards as\-path check
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: mvpn
                        
                        	Connect to PIM/PIM6
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: neighbor_logging_detail
                        
                        	Include extra detail in neighbor change messages
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: next_hop_trigger_delay
                        
                        	Set the delay for triggering nexthop recalculations
                        	**type**\:  int
                        
                        	**range:** 0..300
                        
                        	**units**\: second
                        
                        	**default value**\: 5
                        
                        .. attribute:: nsr
                        
                        	TRUE to Enable non\-stop routing supportFALSE to Disable non\-stop routing support
                        	**type**\:  bool
                        
                        .. attribute:: read_only
                        
                        	Allow duplicate table config and disable update generation
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: receive_socket_buffer_sizes
                        
                        	Set socket and BGP receive buffer sizes
                        	**type**\:   :py:class:`ReceiveSocketBufferSizes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ReceiveSocketBufferSizes>`
                        
                        .. attribute:: router_id
                        
                        	Configure Router\-id
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**default value**\: 0.0.0.0
                        
                        .. attribute:: rpki_bestpath_origin_as_allow_invalid
                        
                        	RPKI bestpath origin\-AS allow invalid
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: rpki_bestpath_use_origin_as_validity
                        
                        	RPKI bestpath use origin\-AS validity
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: rpki_origin_as_validation_disable
                        
                        	RPKI origin\-AS validation disable
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: rpki_origin_as_validation_time
                        
                        	Prefix validation time (in seconds). Range  \: 5 \- 60. Specify 0 to disable the timer
                        	**type**\:  int
                        
                        	**range:** 0..60
                        
                        	**units**\: second
                        
                        .. attribute:: rpki_origin_as_validity_signal_ibgp
                        
                        	RPKI origin\-AS validity signal ibgp
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: rpki_servers
                        
                        	RPKI server configuration
                        	**type**\:   :py:class:`RpkiServers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiServers>`
                        
                        .. attribute:: rpki_static_routes
                        
                        	RPKI static route configuration
                        	**type**\:   :py:class:`RpkiStaticRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiStaticRoutes>`
                        
                        .. attribute:: send_socket_buffer_sizes
                        
                        	set socket parameters
                        	**type**\:   :py:class:`SendSocketBufferSizes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.SendSocketBufferSizes>`
                        
                        .. attribute:: update_delay
                        
                        	Set the max initial delay for sending updates
                        	**type**\:   :py:class:`UpdateDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.UpdateDelay>`
                        
                        .. attribute:: update_error_handling_basic_ebgp_disable
                        
                        	Inbound update basic error\-handling for EBGP neighbors
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: update_error_handling_basic_ibgp_disable
                        
                        	Inbound update basic error\-handling for IBGP neighbors
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: update_error_handling_extended_ebgp
                        
                        	Inbound update extended error\-handling for EBGP neighbors
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: update_error_handling_extended_ibgp
                        
                        	Inbound update extended error\-handling for IBGP neighbors
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: update_limit_process
                        
                        	Upper bound on update generation transient memory usage for the process
                        	**type**\:  int
                        
                        	**range:** 16..2048
                        
                        	**units**\: megabyte
                        
                        	**default value**\: 512
                        
                        .. attribute:: update_out_logging
                        
                        	Enables logging of update generation events
                        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                        
                        .. attribute:: write_limit
                        
                        	Set write\-queue limit for each update group
                        	**type**\:   :py:class:`WriteLimit <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.WriteLimit>`
                        
                        

                        """

                        _prefix = 'ipv4-bgp-cfg'
                        _revision = '2015-08-27'

                        def __init__(self):
                            self.parent = None
                            self.as_league = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsLeague()
                            self.as_league.parent = self
                            self.as_list_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups()
                            self.as_list_groups.parent = self
                            self.attribute_filter_groups = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups()
                            self.attribute_filter_groups.parent = self
                            self.best_path_aigp_ignore = None
                            self.best_path_as_multipath_relax = None
                            self.best_path_as_path_length = None
                            self.best_path_confederation_paths = None
                            self.best_path_cost_community = None
                            self.best_path_med_always = None
                            self.best_path_med_missing = None
                            self.best_path_router_id = None
                            self.bfd = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.Bfd()
                            self.bfd.parent = self
                            self.cluster_id = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ClusterId()
                            self.cluster_id.parent = self
                            self.confederation_domain = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ConfederationDomain()
                            self.confederation_domain.parent = self
                            self.confederation_peer_ases = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ConfederationPeerAses()
                            self.confederation_peer_ases.parent = self
                            self.default_info_originate = None
                            self.default_metric = None
                            self.disable_auto_soft_reset = None
                            self.disable_enforce_first_as = None
                            self.disable_fast_external_fallover = None
                            self.disable_msg_log = None
                            self.disable_neighbor_logging = None
                            self.enforce_ibgp_out_policy = None
                            self.global_afs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs()
                            self.global_afs.parent = self
                            self.global_graceful_maintenance_activate = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalGracefulMaintenanceActivate()
                            self.global_graceful_maintenance_activate.parent = self
                            self.global_scan_time = None
                            self.global_timers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalTimers()
                            self.global_timers.parent = self
                            self.graceful_reset = None
                            self.graceful_restart = None
                            self.graceful_restart_purge_time = None
                            self.graceful_restart_stalepath_time = None
                            self.graceful_restart_time = None
                            self.igp_loop_check = None
                            self.igp_redist_internal = None
                            self.install_diversion = None
                            self.limits = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.Limits()
                            self.limits.parent = self
                            self.local_preference = None
                            self.mpls_activated_interfaces = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.MplsActivatedInterfaces()
                            self.mpls_activated_interfaces.parent = self
                            self.multi_path_as_path_ignore_onwards = None
                            self.mvpn = None
                            self.neighbor_logging_detail = None
                            self.next_hop_trigger_delay = None
                            self.nsr = None
                            self.read_only = None
                            self.receive_socket_buffer_sizes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ReceiveSocketBufferSizes()
                            self.receive_socket_buffer_sizes.parent = self
                            self.router_id = None
                            self.rpki_bestpath_origin_as_allow_invalid = None
                            self.rpki_bestpath_use_origin_as_validity = None
                            self.rpki_origin_as_validation_disable = None
                            self.rpki_origin_as_validation_time = None
                            self.rpki_origin_as_validity_signal_ibgp = None
                            self.rpki_servers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiServers()
                            self.rpki_servers.parent = self
                            self.rpki_static_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiStaticRoutes()
                            self.rpki_static_routes.parent = self
                            self.send_socket_buffer_sizes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.SendSocketBufferSizes()
                            self.send_socket_buffer_sizes.parent = self
                            self.update_delay = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.UpdateDelay()
                            self.update_delay.parent = self
                            self.update_error_handling_basic_ebgp_disable = None
                            self.update_error_handling_basic_ibgp_disable = None
                            self.update_error_handling_extended_ebgp = None
                            self.update_error_handling_extended_ibgp = None
                            self.update_limit_process = None
                            self.update_out_logging = None
                            self.write_limit = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.WriteLimit()
                            self.write_limit.parent = self


                        class ClusterId(object):
                            """
                            Configure Route\-Reflector Cluster\-id
                            
                            .. attribute:: cluster_id_address
                            
                            	Route\-Reflector Cluster ID in IPV4 address format
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: cluster_id_number
                            
                            	Route\-Reflector Cluster ID as 32 bit quantity
                            	**type**\:  int
                            
                            	**range:** 1..4294967295
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.cluster_id_address = None
                                self.cluster_id_number = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:cluster-id'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.cluster_id_address is not None:
                                    return True

                                if self.cluster_id_number is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ClusterId']['meta_info']


                        class WriteLimit(object):
                            """
                            Set write\-queue limit for each update group
                            
                            .. attribute:: desynchronize
                            
                            	TRUE to enable desynchronization, FALSE otherwise
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: enqueued_messages
                            
                            	Number of messages that can be enqueued in total
                            	**type**\:  int
                            
                            	**range:** 500..100000000
                            
                            	**default value**\: 250000
                            
                            .. attribute:: formatted_messages
                            
                            	Number of messages to be formatted per update group
                            	**type**\:  int
                            
                            	**range:** 500..100000000
                            
                            	**default value**\: 50000
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.desynchronize = None
                                self.enqueued_messages = None
                                self.formatted_messages = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:write-limit'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.desynchronize is not None:
                                    return True

                                if self.enqueued_messages is not None:
                                    return True

                                if self.formatted_messages is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.WriteLimit']['meta_info']


                        class UpdateDelay(object):
                            """
                            Set the max initial delay for sending
                            updates
                            
                            .. attribute:: always
                            
                            	Set to TRUE to disable keepalive trigger bestpath and delay is enforced
                            	**type**\:  bool
                            
                            	**default value**\: false
                            
                            .. attribute:: delay
                            
                            	Delay value (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..3600
                            
                            	**units**\: second
                            
                            	**default value**\: 120
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.always = None
                                self.delay = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:update-delay'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.always is not None:
                                    return True

                                if self.delay is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.UpdateDelay']['meta_info']


                        class AsLeague(object):
                            """
                            AS League
                            
                            .. attribute:: enable
                            
                            	AS League creation
                            	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                            
                            .. attribute:: peers
                            
                            	AS League Peers
                            	**type**\:   :py:class:`Peers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsLeague.Peers>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.enable = None
                                self.peers = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsLeague.Peers()
                                self.peers.parent = self


                            class Peers(object):
                                """
                                AS League Peers
                                
                                .. attribute:: peer
                                
                                	AS League Peer AS
                                	**type**\: list of    :py:class:`Peer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsLeague.Peers.Peer>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.peer = YList()
                                    self.peer.parent = self
                                    self.peer.name = 'peer'


                                class Peer(object):
                                    """
                                    AS League Peer AS
                                    
                                    .. attribute:: as_xx  <key>
                                    
                                    	xx of peer AS xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: as_yy  <key>
                                    
                                    	yy of peer AS xx.yy
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_xx = None
                                        self.as_yy = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.as_xx is None:
                                            raise YPYModelError('Key property as_xx is None')
                                        if self.as_yy is None:
                                            raise YPYModelError('Key property as_yy is None')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:peer[Cisco-IOS-XR-ipv4-bgp-cfg:as-xx = ' + str(self.as_xx) + '][Cisco-IOS-XR-ipv4-bgp-cfg:as-yy = ' + str(self.as_yy) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_xx is not None:
                                            return True

                                        if self.as_yy is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsLeague.Peers.Peer']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:peers'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.peer is not None:
                                        for child_ref in self.peer:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsLeague.Peers']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:as-league'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.enable is not None:
                                    return True

                                if self.peers is not None and self.peers._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsLeague']['meta_info']


                        class RpkiServers(object):
                            """
                            RPKI server configuration
                            
                            .. attribute:: rpki_server
                            
                            	RPKI server configuration
                            	**type**\: list of    :py:class:`RpkiServer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiServers.RpkiServer>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.rpki_server = YList()
                                self.rpki_server.parent = self
                                self.rpki_server.name = 'rpki_server'


                            class RpkiServer(object):
                                """
                                RPKI server configuration
                                
                                .. attribute:: server  <key>
                                
                                	Server address (opaque string)
                                	**type**\:  str
                                
                                .. attribute:: enable
                                
                                	RPKI server configuration
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: password
                                
                                	RPKI server password
                                	**type**\:  str
                                
                                .. attribute:: purge_time
                                
                                	RPKI server purge\-time (seconds)
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: second
                                
                                .. attribute:: refresh_time
                                
                                	RPKI server refresh\-time (seconds)
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: second
                                
                                .. attribute:: response_time
                                
                                	RPKI server response\-time (seconds)
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                	**units**\: second
                                
                                .. attribute:: shutdown
                                
                                	RPKI server shutdown
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: transport
                                
                                	RPKI server transport
                                	**type**\:   :py:class:`Transport <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiServers.RpkiServer.Transport>`
                                
                                .. attribute:: username
                                
                                	RPKI server username
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.server = None
                                    self.enable = None
                                    self.password = None
                                    self.purge_time = None
                                    self.refresh_time = None
                                    self.response_time = None
                                    self.shutdown = None
                                    self.transport = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiServers.RpkiServer.Transport()
                                    self.transport.parent = self
                                    self.username = None


                                class Transport(object):
                                    """
                                    RPKI server transport
                                    
                                    .. attribute:: port
                                    
                                    	port
                                    	**type**\:  int
                                    
                                    	**range:** 1..65535
                                    
                                    	**default value**\: 22
                                    
                                    .. attribute:: transport
                                    
                                    	RPKI server transport
                                    	**type**\:   :py:class:`BgpRpkiTransportEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpRpkiTransportEnum>`
                                    
                                    	**default value**\: ssh
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.port = None
                                        self.transport = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:transport'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.port is not None:
                                            return True

                                        if self.transport is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiServers.RpkiServer.Transport']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.server is None:
                                        raise YPYModelError('Key property server is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:rpki-server[Cisco-IOS-XR-ipv4-bgp-cfg:server = ' + str(self.server) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.server is not None:
                                        return True

                                    if self.enable is not None:
                                        return True

                                    if self.password is not None:
                                        return True

                                    if self.purge_time is not None:
                                        return True

                                    if self.refresh_time is not None:
                                        return True

                                    if self.response_time is not None:
                                        return True

                                    if self.shutdown is not None:
                                        return True

                                    if self.transport is not None and self.transport._has_data():
                                        return True

                                    if self.username is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiServers.RpkiServer']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:rpki-servers'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.rpki_server is not None:
                                    for child_ref in self.rpki_server:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiServers']['meta_info']


                        class AsListGroups(object):
                            """
                            AS\-list group lists
                            
                            .. attribute:: as_list_group
                            
                            	AS\-List group
                            	**type**\: list of    :py:class:`AsListGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups.AsListGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.as_list_group = YList()
                                self.as_list_group.parent = self
                                self.as_list_group.name = 'as_list_group'


                            class AsListGroup(object):
                                """
                                AS\-List group
                                
                                .. attribute:: as_list_group_name  <key>
                                
                                	Group name
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: ases
                                
                                	AS list
                                	**type**\:   :py:class:`Ases <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups.AsListGroup.Ases>`
                                
                                .. attribute:: enable
                                
                                	AS\-List group creation
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.as_list_group_name = None
                                    self.ases = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups.AsListGroup.Ases()
                                    self.ases.parent = self
                                    self.enable = None


                                class Ases(object):
                                    """
                                    AS list
                                    
                                    .. attribute:: as_
                                    
                                    	AS\-List group
                                    	**type**\: list of    :py:class:`As_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups.AsListGroup.Ases.As_>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.as_ = YList()
                                        self.as_.parent = self
                                        self.as_.name = 'as_'


                                    class As_(object):
                                        """
                                        AS\-List group
                                        
                                        .. attribute:: as_xx  <key>
                                        
                                        	xx of AS number/confed peer xx.yy
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: as_yy  <key>
                                        
                                        	yy of AS number/confed peer xx.yy
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.as_xx = None
                                            self.as_yy = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.as_xx is None:
                                                raise YPYModelError('Key property as_xx is None')
                                            if self.as_yy is None:
                                                raise YPYModelError('Key property as_yy is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:as[Cisco-IOS-XR-ipv4-bgp-cfg:as-xx = ' + str(self.as_xx) + '][Cisco-IOS-XR-ipv4-bgp-cfg:as-yy = ' + str(self.as_yy) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.as_xx is not None:
                                                return True

                                            if self.as_yy is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups.AsListGroup.Ases.As_']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ases'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.as_ is not None:
                                            for child_ref in self.as_:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups.AsListGroup.Ases']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.as_list_group_name is None:
                                        raise YPYModelError('Key property as_list_group_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:as-list-group[Cisco-IOS-XR-ipv4-bgp-cfg:as-list-group-name = ' + str(self.as_list_group_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.as_list_group_name is not None:
                                        return True

                                    if self.ases is not None and self.ases._has_data():
                                        return True

                                    if self.enable is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups.AsListGroup']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:as-list-groups'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.as_list_group is not None:
                                    for child_ref in self.as_list_group:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AsListGroups']['meta_info']


                        class Limits(object):
                            """
                            Maximum number that can be configured
                            
                            .. attribute:: maximum_neighbors
                            
                            	Maximum number of neighbors that can be configured
                            	**type**\:  int
                            
                            	**range:** 1..15000
                            
                            	**default value**\: 10000
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.maximum_neighbors = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:limits'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.maximum_neighbors is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.Limits']['meta_info']


                        class ConfederationDomain(object):
                            """
                            Set routing domain confederation AS
                            
                            .. attribute:: as_xx
                            
                            	xx of AS number xx.yy
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: as_yy
                            
                            	yy of AS number xx.yy
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.as_xx = None
                                self.as_yy = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:confederation-domain'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.as_xx is not None:
                                    return True

                                if self.as_yy is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ConfederationDomain']['meta_info']


                        class ConfederationPeerAses(object):
                            """
                            Define peer ASes in BGP confederation
                            
                            .. attribute:: confederation_peer_as
                            
                            	Confederation peer AS
                            	**type**\: list of    :py:class:`ConfederationPeerAs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ConfederationPeerAses.ConfederationPeerAs>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.confederation_peer_as = YList()
                                self.confederation_peer_as.parent = self
                                self.confederation_peer_as.name = 'confederation_peer_as'


                            class ConfederationPeerAs(object):
                                """
                                Confederation peer AS
                                
                                .. attribute:: as_xx  <key>
                                
                                	xx of AS number/confed peer xx.yy
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: as_yy  <key>
                                
                                	yy of AS number/confed peer xx.yy
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.as_xx = None
                                    self.as_yy = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.as_xx is None:
                                        raise YPYModelError('Key property as_xx is None')
                                    if self.as_yy is None:
                                        raise YPYModelError('Key property as_yy is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:confederation-peer-as[Cisco-IOS-XR-ipv4-bgp-cfg:as-xx = ' + str(self.as_xx) + '][Cisco-IOS-XR-ipv4-bgp-cfg:as-yy = ' + str(self.as_yy) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.as_xx is not None:
                                        return True

                                    if self.as_yy is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ConfederationPeerAses.ConfederationPeerAs']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:confederation-peer-ases'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.confederation_peer_as is not None:
                                    for child_ref in self.confederation_peer_as:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ConfederationPeerAses']['meta_info']


                        class AttributeFilterGroups(object):
                            """
                            Attribute\-filter groups list
                            
                            .. attribute:: attribute_filter_group
                            
                            	Attribute\-filter group
                            	**type**\: list of    :py:class:`AttributeFilterGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups.AttributeFilterGroup>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.attribute_filter_group = YList()
                                self.attribute_filter_group.parent = self
                                self.attribute_filter_group.name = 'attribute_filter_group'


                            class AttributeFilterGroup(object):
                                """
                                Attribute\-filter group
                                
                                .. attribute:: attribute_filter_group_name  <key>
                                
                                	Group name
                                	**type**\:  str
                                
                                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                
                                .. attribute:: attribute_filters
                                
                                	Attribute\-filter group attributes list
                                	**type**\:   :py:class:`AttributeFilters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters>`
                                
                                .. attribute:: enable
                                
                                	Attribute\-filter group creation
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.attribute_filter_group_name = None
                                    self.attribute_filters = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters()
                                    self.attribute_filters.parent = self
                                    self.enable = None


                                class AttributeFilters(object):
                                    """
                                    Attribute\-filter group attributes list
                                    
                                    .. attribute:: attribute_filter
                                    
                                    	Attribute\-filter group attribute
                                    	**type**\: list of    :py:class:`AttributeFilter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters.AttributeFilter>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.attribute_filter = YList()
                                        self.attribute_filter.parent = self
                                        self.attribute_filter.name = 'attribute_filter'


                                    class AttributeFilter(object):
                                        """
                                        Attribute\-filter group attribute
                                        
                                        .. attribute:: attribute_end  <key>
                                        
                                        	End of attribute range
                                        	**type**\:  int
                                        
                                        	**range:** 0..256
                                        
                                        .. attribute:: attribute_start  <key>
                                        
                                        	Start of attribute range
                                        	**type**\:  int
                                        
                                        	**range:** 0..256
                                        
                                        .. attribute:: filter_action
                                        
                                        	Filtering action
                                        	**type**\:   :py:class:`BgpUpdateFilterActionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpUpdateFilterActionEnum>`
                                        
                                        	**mandatory**\: True
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.attribute_end = None
                                            self.attribute_start = None
                                            self.filter_action = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.attribute_end is None:
                                                raise YPYModelError('Key property attribute_end is None')
                                            if self.attribute_start is None:
                                                raise YPYModelError('Key property attribute_start is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:attribute-filter[Cisco-IOS-XR-ipv4-bgp-cfg:attribute-end = ' + str(self.attribute_end) + '][Cisco-IOS-XR-ipv4-bgp-cfg:attribute-start = ' + str(self.attribute_start) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.attribute_end is not None:
                                                return True

                                            if self.attribute_start is not None:
                                                return True

                                            if self.filter_action is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters.AttributeFilter']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:attribute-filters'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.attribute_filter is not None:
                                            for child_ref in self.attribute_filter:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups.AttributeFilterGroup.AttributeFilters']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.attribute_filter_group_name is None:
                                        raise YPYModelError('Key property attribute_filter_group_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:attribute-filter-group[Cisco-IOS-XR-ipv4-bgp-cfg:attribute-filter-group-name = ' + str(self.attribute_filter_group_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.attribute_filter_group_name is not None:
                                        return True

                                    if self.attribute_filters is not None and self.attribute_filters._has_data():
                                        return True

                                    if self.enable is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups.AttributeFilterGroup']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:attribute-filter-groups'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.attribute_filter_group is not None:
                                    for child_ref in self.attribute_filter_group:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.AttributeFilterGroups']['meta_info']


                        class GlobalGracefulMaintenanceActivate(object):
                            """
                            Activate Graceful Maintenance Mode for all
                            neighbors with graceful maintenance config
                            
                            .. attribute:: all_neighbors
                            
                            	Also for neighbors without graceful maintenance config
                            	**type**\:  bool
                            
                            .. attribute:: retain_routes
                            
                            	Keep routes in RIB once BGP stops
                            	**type**\:  bool
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.all_neighbors = None
                                self.retain_routes = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:global-graceful-maintenance-activate'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.all_neighbors is not None:
                                    return True

                                if self.retain_routes is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalGracefulMaintenanceActivate']['meta_info']


                        class GlobalAfs(object):
                            """
                            Global AF\-specific configuration
                            
                            .. attribute:: global_af
                            
                            	Global AF\-specific configuration
                            	**type**\: list of    :py:class:`GlobalAf <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.global_af = YList()
                                self.global_af.parent = self
                                self.global_af.name = 'global_af'


                            class GlobalAf(object):
                                """
                                Global AF\-specific configuration
                                
                                .. attribute:: af_name  <key>
                                
                                	Address family
                                	**type**\:   :py:class:`BgpAddressFamilyEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAddressFamilyEnum>`
                                
                                .. attribute:: additional_paths_receive
                                
                                	Advertise additional paths Receive capability
                                	**type**\:   :py:class:`BgpafAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpafAdditionalPathsCfgEnum>`
                                
                                .. attribute:: additional_paths_selection
                                
                                	Configure additional paths selection
                                	**type**\:   :py:class:`AdditionalPathsSelection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AdditionalPathsSelection>`
                                
                                .. attribute:: additional_paths_send
                                
                                	Advertise additional paths Send capability
                                	**type**\:   :py:class:`BgpafAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpafAdditionalPathsCfgEnum>`
                                
                                .. attribute:: advertise_local_labeled_route_safi_unicast
                                
                                	Enable/disable advertisement of routes with local\-label via Unicast SAFI
                                	**type**\:   :py:class:`BgpAdvertiseLocalLabeledRouteCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpAdvertiseLocalLabeledRouteCfgEnum>`
                                
                                .. attribute:: aggregate_addresses
                                
                                	Configure BGP aggregate entries
                                	**type**\:   :py:class:`AggregateAddresses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AggregateAddresses>`
                                
                                .. attribute:: allocate_label
                                
                                	Label allocation policy
                                	**type**\:   :py:class:`AllocateLabel <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AllocateLabel>`
                                
                                .. attribute:: application_routes
                                
                                	Redistribute information for Application routes
                                	**type**\:   :py:class:`ApplicationRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.ApplicationRoutes>`
                                
                                .. attribute:: attribute_download
                                
                                	Attribute download configuration
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: best_external
                                
                                	TRUE to enable BE FALSE to disable BE inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: connected_routes
                                
                                	Redistribute connected routes
                                	**type**\:   :py:class:`ConnectedRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.ConnectedRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: dampening
                                
                                	Enable route\-flap dampening
                                	**type**\:   :py:class:`Dampening <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Dampening>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: disable_as_path_loop_check
                                
                                	Disable outbound AS Path loop check
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: disable_client_to_client_rr
                                
                                	Disable client\-to\-client reflection
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: disable_cluster_client_to_client_rrs
                                
                                	Disable client\-to\-client reflection for a cluster
                                	**type**\:   :py:class:`DisableClusterClientToClientRrs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs>`
                                
                                .. attribute:: disable_default_martian_check
                                
                                	Disable default Martian Check
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: distance
                                
                                	Define an administrative distance
                                	**type**\:   :py:class:`Distance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Distance>`
                                
                                .. attribute:: domain_distinguisher
                                
                                	<ASN, router\-id> tuple to use to identify the link\-state domain
                                	**type**\:   :py:class:`DomainDistinguisher <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DomainDistinguisher>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: dynamic_med_interval
                                
                                	Update generation delay (in minutes) after a MED change
                                	**type**\:  int
                                
                                	**range:** 0..10
                                
                                	**units**\: minute
                                
                                	**default value**\: 10
                                
                                .. attribute:: ebgp
                                
                                	Use eBGP multipaths
                                	**type**\:   :py:class:`Ebgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Ebgp>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: eibgp
                                
                                	Use eiBGP multipaths
                                	**type**\:   :py:class:`Eibgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Eibgp>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: eigrp_routes
                                
                                	Redistribute information for EIGRP routes
                                	**type**\:   :py:class:`EigrpRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.EigrpRoutes>`
                                
                                .. attribute:: enable
                                
                                	Enable the address family. Deletion of this object causes deletion of all the objects under GlobalAF/VRFGlobalAF associated with this object 
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: global_table_mcast
                                
                                	Enable global table multicast
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: ibgp
                                
                                	Use iBGP multipaths
                                	**type**\:   :py:class:`Ibgp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Ibgp>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: import_delay
                                
                                	Delay timer to batch import processing
                                	**type**\:   :py:class:`ImportDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.ImportDelay>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: inter_as_install
                                
                                	Enable install remote MVPN routes to PIM in default VRF
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: isis_routes
                                
                                	Redistribute information for IS\-IS routes 
                                	**type**\:   :py:class:`IsisRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.IsisRoutes>`
                                
                                .. attribute:: label_delay
                                
                                	Delay timer to batch label processing
                                	**type**\:   :py:class:`LabelDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.LabelDelay>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: label_mode
                                
                                	BGP 6PE/MPLS\-VPN label allocation mode
                                	**type**\:   :py:class:`LabelMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.LabelMode>`
                                
                                .. attribute:: label_retain
                                
                                	Label retention time in minutes
                                	**type**\:  int
                                
                                	**range:** 3..60
                                
                                	**units**\: minute
                                
                                .. attribute:: label_security_rpf
                                
                                	Calculate label\-security RPF lists and install to RIB/LSD
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: lisp_routes
                                
                                	Redistribute lisp routes
                                	**type**\:   :py:class:`LispRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.LispRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: mobile_routes
                                
                                	Redistribute mobile routes
                                	**type**\:   :py:class:`MobileRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.MobileRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: next_hop_critical_trigger_delay
                                
                                	Next hop Critical Trigger Delay
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: millisecond
                                
                                	**default value**\: 3000
                                
                                .. attribute:: next_hop_non_critical_trigger_delay
                                
                                	Next hop Non\-critical Trigger Delay
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**units**\: millisecond
                                
                                	**default value**\: 10000
                                
                                .. attribute:: next_hop_resolution_prefix_length_minimum
                                
                                	Minimum prefix\-length for nexthop resolution
                                	**type**\:  int
                                
                                	**range:** 0..128
                                
                                	**default value**\: 0
                                
                                .. attribute:: next_hop_route_policy
                                
                                	Next hop policy to filter out nexthop notification
                                	**type**\:  str
                                
                                .. attribute:: ospf_routes
                                
                                	Redistribute information for OSPF routes
                                	**type**\:   :py:class:`OspfRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.OspfRoutes>`
                                
                                .. attribute:: permanent_network
                                
                                	Route policy for permanent networks
                                	**type**\:  str
                                
                                .. attribute:: reset_weight_on_import
                                
                                	TRUE to reset weight on import. FALSE to not reset and to prevent inheritance from a parent
                                	**type**\:  bool
                                
                                .. attribute:: retain_rt
                                
                                	Accept received updates with the specified attributes
                                	**type**\:   :py:class:`RetainRt <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.RetainRt>`
                                
                                .. attribute:: rip_routes
                                
                                	Redistribute RIP routes
                                	**type**\:   :py:class:`RipRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.RipRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: rpki_bestpath_origin_as_allow_invalid
                                
                                	RPKI bestpath origin\-AS allow invalid
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: rpki_bestpath_use_origin_as_validity
                                
                                	RPKI bestpath use origin\-AS validity
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: rpki_origin_as_validation_disable
                                
                                	RPKI origin\-AS validation disable
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: rpki_origin_as_validity_signal_ibgp
                                
                                	RPKI origin\-AS validity signal ibgp
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: scan_time
                                
                                	Configure background scanner interval for this address family
                                	**type**\:  int
                                
                                	**range:** 5..3600
                                
                                	**units**\: second
                                
                                	**default value**\: 60
                                
                                .. attribute:: segmented_mcast
                                
                                	Enable segmented multicast
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: sourced_networks
                                
                                	Specify a network to announce via BGP
                                	**type**\:   :py:class:`SourcedNetworks <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.SourcedNetworks>`
                                
                                .. attribute:: static_routes
                                
                                	Redistribute static routes
                                	**type**\:   :py:class:`StaticRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.StaticRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: subscriber_routes
                                
                                	Redistribute subscriber routes
                                	**type**\:   :py:class:`SubscriberRoutes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.SubscriberRoutes>`
                                
                                	**presence node**\: True
                                
                                .. attribute:: table_policy
                                
                                	Configure policy for installation of routes to RIB
                                	**type**\:  str
                                
                                .. attribute:: update_limit_address_family
                                
                                	Upper bound on update generation transient memory usage for the address\-family
                                	**type**\:  int
                                
                                	**range:** 4..2048
                                
                                	**units**\: megabyte
                                
                                	**default value**\: 256
                                
                                .. attribute:: update_limit_sub_group_ebgp
                                
                                	Upper bound on update generation transient memory usage for every EBGP Sub\-group
                                	**type**\:  int
                                
                                	**range:** 1..512
                                
                                	**units**\: megabyte
                                
                                	**default value**\: 32
                                
                                .. attribute:: update_limit_sub_group_ibgp
                                
                                	Upper bound on update generation transient memory usage for every IBGP Sub\-group
                                	**type**\:  int
                                
                                	**range:** 1..512
                                
                                	**units**\: megabyte
                                
                                	**default value**\: 32
                                
                                .. attribute:: use_igpsr_label
                                
                                	Use IGP SR label for resolution configuration
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                .. attribute:: vrf_all
                                
                                	Configurations to be inherited to all vrfs
                                	**type**\:   :py:class:`VrfAll <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.VrfAll>`
                                
                                .. attribute:: wait_rib_install
                                
                                	Wait for route install before sending updates to neighbors
                                	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.af_name = None
                                    self.additional_paths_receive = None
                                    self.additional_paths_selection = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AdditionalPathsSelection()
                                    self.additional_paths_selection.parent = self
                                    self.additional_paths_send = None
                                    self.advertise_local_labeled_route_safi_unicast = None
                                    self.aggregate_addresses = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AggregateAddresses()
                                    self.aggregate_addresses.parent = self
                                    self.allocate_label = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AllocateLabel()
                                    self.allocate_label.parent = self
                                    self.application_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.ApplicationRoutes()
                                    self.application_routes.parent = self
                                    self.attribute_download = None
                                    self.best_external = None
                                    self.connected_routes = None
                                    self.dampening = None
                                    self.disable_as_path_loop_check = None
                                    self.disable_client_to_client_rr = None
                                    self.disable_cluster_client_to_client_rrs = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs()
                                    self.disable_cluster_client_to_client_rrs.parent = self
                                    self.disable_default_martian_check = None
                                    self.distance = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Distance()
                                    self.distance.parent = self
                                    self.domain_distinguisher = None
                                    self.dynamic_med_interval = None
                                    self.ebgp = None
                                    self.eibgp = None
                                    self.eigrp_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.EigrpRoutes()
                                    self.eigrp_routes.parent = self
                                    self.enable = None
                                    self.global_table_mcast = None
                                    self.ibgp = None
                                    self.import_delay = None
                                    self.inter_as_install = None
                                    self.isis_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.IsisRoutes()
                                    self.isis_routes.parent = self
                                    self.label_delay = None
                                    self.label_mode = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.LabelMode()
                                    self.label_mode.parent = self
                                    self.label_retain = None
                                    self.label_security_rpf = None
                                    self.lisp_routes = None
                                    self.mobile_routes = None
                                    self.next_hop_critical_trigger_delay = None
                                    self.next_hop_non_critical_trigger_delay = None
                                    self.next_hop_resolution_prefix_length_minimum = None
                                    self.next_hop_route_policy = None
                                    self.ospf_routes = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.OspfRoutes()
                                    self.ospf_routes.parent = self
                                    self.permanent_network = None
                                    self.reset_weight_on_import = None
                                    self.retain_rt = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.RetainRt()
                                    self.retain_rt.parent = self
                                    self.rip_routes = None
                                    self.rpki_bestpath_origin_as_allow_invalid = None
                                    self.rpki_bestpath_use_origin_as_validity = None
                                    self.rpki_origin_as_validation_disable = None
                                    self.rpki_origin_as_validity_signal_ibgp = None
                                    self.scan_time = None
                                    self.segmented_mcast = None
                                    self.sourced_networks = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.SourcedNetworks()
                                    self.sourced_networks.parent = self
                                    self.static_routes = None
                                    self.subscriber_routes = None
                                    self.table_policy = None
                                    self.update_limit_address_family = None
                                    self.update_limit_sub_group_ebgp = None
                                    self.update_limit_sub_group_ibgp = None
                                    self.use_igpsr_label = None
                                    self.vrf_all = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.VrfAll()
                                    self.vrf_all.parent = self
                                    self.wait_rib_install = None


                                class IsisRoutes(object):
                                    """
                                    Redistribute information for IS\-IS routes
                                    .
                                    
                                    .. attribute:: isis_route
                                    
                                    	Redistribute IS\-IS routes
                                    	**type**\: list of    :py:class:`IsisRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.IsisRoutes.IsisRoute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.isis_route = YList()
                                        self.isis_route.parent = self
                                        self.isis_route.name = 'isis_route'


                                    class IsisRoute(object):
                                        """
                                        Redistribute IS\-IS routes
                                        
                                        .. attribute:: instance_name  <key>
                                        
                                        	IS\-IS instance name
                                        	**type**\:  str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: redist_type
                                        
                                        	Redistribution type\: 01 for level 1 routes, 02 for level 2 routes, 04 for level 1 inter\-area routes. Logical combinations permitted
                                        	**type**\:  str
                                        
                                        	**pattern:** [0\-9a\-fA\-F]{1,8}
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.instance_name = None
                                            self.default_metric = None
                                            self.redist_type = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.instance_name is None:
                                                raise YPYModelError('Key property instance_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:isis-route[Cisco-IOS-XR-ipv4-bgp-cfg:instance-name = ' + str(self.instance_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.instance_name is not None:
                                                return True

                                            if self.default_metric is not None:
                                                return True

                                            if self.redist_type is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.IsisRoutes.IsisRoute']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:isis-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.isis_route is not None:
                                            for child_ref in self.isis_route:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.IsisRoutes']['meta_info']


                                class DomainDistinguisher(object):
                                    """
                                    <ASN, router\-id> tuple to use to identify
                                    the link\-state domain
                                    
                                    .. attribute:: as_
                                    
                                    	AS Number
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: router_id
                                    
                                    	Router ID
                                    	**type**\:  str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.as_ = None
                                        self.router_id = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:domain-distinguisher'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.as_ is not None:
                                            return True

                                        if self.router_id is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DomainDistinguisher']['meta_info']


                                class VrfAll(object):
                                    """
                                    Configurations to be inherited to all
                                    vrfs
                                    
                                    .. attribute:: enable
                                    
                                    	Enable vrf all configuration submode
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: label_mode
                                    
                                    	MPLS\-VPN label allocation mode
                                    	**type**\:   :py:class:`LabelMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.VrfAll.LabelMode>`
                                    
                                    .. attribute:: source_rt_import_policy
                                    
                                    	Enable sourcing of import route\-targets  from import\-policy
                                    	**type**\:  :py:class:`Empty<ydk.types.Empty>`
                                    
                                    .. attribute:: table_policy
                                    
                                    	Configure policy for installation of routes to RIB
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.enable = None
                                        self.label_mode = Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.VrfAll.LabelMode()
                                        self.label_mode.parent = self
                                        self.source_rt_import_policy = None
                                        self.table_policy = None


                                    class LabelMode(object):
                                        """
                                        MPLS\-VPN label allocation mode
                                        
                                        .. attribute:: label_allocation_mode
                                        
                                        	Label allocation mode\: per\-ce  Set per CE label mode, per\-vrf Set per VRF label mode
                                        	**type**\:  str
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Label mode route policy name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.label_allocation_mode = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:label-mode'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.label_allocation_mode is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.VrfAll.LabelMode']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:vrf-all'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.enable is not None:
                                            return True

                                        if self.label_mode is not None and self.label_mode._has_data():
                                            return True

                                        if self.source_rt_import_policy is not None:
                                            return True

                                        if self.table_policy is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.VrfAll']['meta_info']


                                class ApplicationRoutes(object):
                                    """
                                    Redistribute information for Application
                                    routes.
                                    
                                    .. attribute:: application_route
                                    
                                    	Redistribute application routes
                                    	**type**\: list of    :py:class:`ApplicationRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.ApplicationRoutes.ApplicationRoute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.application_route = YList()
                                        self.application_route.parent = self
                                        self.application_route.name = 'application_route'


                                    class ApplicationRoute(object):
                                        """
                                        Redistribute application routes
                                        
                                        .. attribute:: instance_name  <key>
                                        
                                        	OnePK application name
                                        	**type**\:  str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: not_used
                                        
                                        	Not used
                                        	**type**\:  int
                                        
                                        	**range:** 0..127
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.instance_name = None
                                            self.default_metric = None
                                            self.not_used = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.instance_name is None:
                                                raise YPYModelError('Key property instance_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:application-route[Cisco-IOS-XR-ipv4-bgp-cfg:instance-name = ' + str(self.instance_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.instance_name is not None:
                                                return True

                                            if self.default_metric is not None:
                                                return True

                                            if self.not_used is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.ApplicationRoutes.ApplicationRoute']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:application-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.application_route is not None:
                                            for child_ref in self.application_route:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.ApplicationRoutes']['meta_info']


                                class DisableClusterClientToClientRrs(object):
                                    """
                                    Disable client\-to\-client reflection for a
                                    cluster
                                    
                                    .. attribute:: disable_cluster_client_to_client_rr
                                    
                                    	Cluster ID for which reflection is to be disbled
                                    	**type**\: list of    :py:class:`DisableClusterClientToClientRr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.disable_cluster_client_to_client_rr = YList()
                                        self.disable_cluster_client_to_client_rr.parent = self
                                        self.disable_cluster_client_to_client_rr.name = 'disable_cluster_client_to_client_rr'


                                    class DisableClusterClientToClientRr(object):
                                        """
                                        Cluster ID for which reflection is to be
                                        disbled
                                        
                                        .. attribute:: cluster_type  <key>
                                        
                                        	Type of cluster\-id
                                        	**type**\:   :py:class:`BgpClusterIdEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BgpClusterIdEnum>`
                                        
                                        .. attribute:: ipv4_address
                                        
                                        	ipv4 address
                                        	**type**\: list of    :py:class:`Ipv4Address <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Ipv4Address>`
                                        
                                        .. attribute:: number
                                        
                                        	number
                                        	**type**\: list of    :py:class:`Number <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Number>`
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.cluster_type = None
                                            self.ipv4_address = YList()
                                            self.ipv4_address.parent = self
                                            self.ipv4_address.name = 'ipv4_address'
                                            self.number = YList()
                                            self.number.parent = self
                                            self.number.name = 'number'


                                        class Number(object):
                                            """
                                            number
                                            
                                            .. attribute:: cluster_id_number  <key>
                                            
                                            	Cluster ID\: if configured as a number
                                            	**type**\:  int
                                            
                                            	**range:** 0..4294967295
                                            
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.cluster_id_number = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.cluster_id_number is None:
                                                    raise YPYModelError('Key property cluster_id_number is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:number[Cisco-IOS-XR-ipv4-bgp-cfg:cluster-id-number = ' + str(self.cluster_id_number) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.cluster_id_number is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Number']['meta_info']


                                        class Ipv4Address(object):
                                            """
                                            ipv4 address
                                            
                                            .. attribute:: cluster_id_address  <key>
                                            
                                            	Cluster ID\: if configured as an IP Address
                                            	**type**\: one of the below types:
                                            
                                            	**type**\:  str
                                            
                                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            	**type**\:  str
                                            
                                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                            
                                            
                                            ----
                                            

                                            """

                                            _prefix = 'ipv4-bgp-cfg'
                                            _revision = '2015-08-27'

                                            def __init__(self):
                                                self.parent = None
                                                self.cluster_id_address = None

                                            @property
                                            def _common_path(self):
                                                if self.parent is None:
                                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                                if self.cluster_id_address is None:
                                                    raise YPYModelError('Key property cluster_id_address is None')

                                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ipv4-address[Cisco-IOS-XR-ipv4-bgp-cfg:cluster-id-address = ' + str(self.cluster_id_address) + ']'

                                            def is_config(self):
                                                ''' Returns True if this instance represents config data else returns False '''
                                                return True

                                            def _has_data(self):
                                                if not self.is_config():
                                                    return False
                                                if self.cluster_id_address is not None:
                                                    return True

                                                return False

                                            @staticmethod
                                            def _meta_info():
                                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr.Ipv4Address']['meta_info']

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.cluster_type is None:
                                                raise YPYModelError('Key property cluster_type is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:disable-cluster-client-to-client-rr[Cisco-IOS-XR-ipv4-bgp-cfg:cluster-type = ' + str(self.cluster_type) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.cluster_type is not None:
                                                return True

                                            if self.ipv4_address is not None:
                                                for child_ref in self.ipv4_address:
                                                    if child_ref._has_data():
                                                        return True

                                            if self.number is not None:
                                                for child_ref in self.number:
                                                    if child_ref._has_data():
                                                        return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs.DisableClusterClientToClientRr']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:disable-cluster-client-to-client-rrs'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.disable_cluster_client_to_client_rr is not None:
                                            for child_ref in self.disable_cluster_client_to_client_rr:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.DisableClusterClientToClientRrs']['meta_info']


                                class LabelDelay(object):
                                    """
                                    Delay timer to batch label processing.
                                    
                                    .. attribute:: milliseconds
                                    
                                    	Delay, milliseconds part
                                    	**type**\:  int
                                    
                                    	**range:** 0..999
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: seconds
                                    
                                    	Delay, seconds part
                                    	**type**\:  int
                                    
                                    	**range:** 0..10
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.milliseconds = None
                                        self.seconds = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:label-delay'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.milliseconds is not None:
                                            return True

                                        if self.seconds is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.LabelDelay']['meta_info']


                                class Ebgp(object):
                                    """
                                    Use eBGP multipaths
                                    
                                    .. attribute:: order_by_igp_metric
                                    
                                    	Order candidate multipaths by IGP metric
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: paths_value
                                    
                                    	Number of paths
                                    	**type**\:  int
                                    
                                    	**range:** 2..64
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: selective
                                    
                                    	Allow multipaths only from marked neighbors
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: unequal_cost
                                    
                                    	UNUSED
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.order_by_igp_metric = None
                                        self.paths_value = None
                                        self.selective = None
                                        self.unequal_cost = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ebgp'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.order_by_igp_metric is not None:
                                            return True

                                        if self.paths_value is not None:
                                            return True

                                        if self.selective is not None:
                                            return True

                                        if self.unequal_cost is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Ebgp']['meta_info']


                                class Eibgp(object):
                                    """
                                    Use eiBGP multipaths
                                    
                                    .. attribute:: order_by_igp_metric
                                    
                                    	Order candidate multipaths by IGP metric
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: paths_value
                                    
                                    	Number of paths
                                    	**type**\:  int
                                    
                                    	**range:** 2..64
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: selective
                                    
                                    	Allow multipaths only from marked neighbors
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: unequal_cost
                                    
                                    	UNUSED
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.order_by_igp_metric = None
                                        self.paths_value = None
                                        self.selective = None
                                        self.unequal_cost = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:eibgp'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.order_by_igp_metric is not None:
                                            return True

                                        if self.paths_value is not None:
                                            return True

                                        if self.selective is not None:
                                            return True

                                        if self.unequal_cost is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Eibgp']['meta_info']


                                class RetainRt(object):
                                    """
                                    Accept received updates with the
                                    specified attributes
                                    
                                    .. attribute:: all
                                    
                                    	Whether all RTs are to be retained, default is FALSE
                                    	**type**\:  bool
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.all = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:retain-rt'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.all is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.RetainRt']['meta_info']


                                class Ibgp(object):
                                    """
                                    Use iBGP multipaths
                                    
                                    .. attribute:: order_by_igp_metric
                                    
                                    	Order candidate multipaths by IGP metric
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: paths_value
                                    
                                    	Number of paths
                                    	**type**\:  int
                                    
                                    	**range:** 2..64
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: selective
                                    
                                    	Allow multipaths only from marked neighbors
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: unequal_cost
                                    
                                    	Allow multipaths to have different IGP metrics
                                    	**type**\:  bool
                                    
                                    	**default value**\: false
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.order_by_igp_metric = None
                                        self.paths_value = None
                                        self.selective = None
                                        self.unequal_cost = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ibgp'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.order_by_igp_metric is not None:
                                            return True

                                        if self.paths_value is not None:
                                            return True

                                        if self.selective is not None:
                                            return True

                                        if self.unequal_cost is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Ibgp']['meta_info']


                                class ImportDelay(object):
                                    """
                                    Delay timer to batch import processing.
                                    
                                    .. attribute:: milliseconds
                                    
                                    	Delay, milliseconds part
                                    	**type**\:  int
                                    
                                    	**range:** 0..999
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: millisecond
                                    
                                    .. attribute:: seconds
                                    
                                    	Delay, seconds part
                                    	**type**\:  int
                                    
                                    	**range:** 0..10
                                    
                                    	**mandatory**\: True
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.milliseconds = None
                                        self.seconds = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:import-delay'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.milliseconds is not None:
                                            return True

                                        if self.seconds is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.ImportDelay']['meta_info']


                                class AggregateAddresses(object):
                                    """
                                    Configure BGP aggregate entries
                                    
                                    .. attribute:: aggregate_address
                                    
                                    	Aggregate address configuration
                                    	**type**\: list of    :py:class:`AggregateAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AggregateAddresses.AggregateAddress>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.aggregate_address = YList()
                                        self.aggregate_address.parent = self
                                        self.aggregate_address.name = 'aggregate_address'


                                    class AggregateAddress(object):
                                        """
                                        Aggregate address configuration
                                        
                                        .. attribute:: aggregate_addr  <key>
                                        
                                        	Aggregate in prefix/length format (address part)
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        .. attribute:: aggregate_prefix  <key>
                                        
                                        	Aggregate in prefix/length format (prefix part)
                                        	**type**\:  int
                                        
                                        	**range:** 0..128
                                        
                                        .. attribute:: generate_confederation_set_info
                                        
                                        	TRUE to generate AS confederation set path information, FALSE otherwise
                                        	**type**\:  bool
                                        
                                        .. attribute:: generate_set_info
                                        
                                        	TRUE to generate AS set path information, FALSE otherwise
                                        	**type**\:  bool
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy on which to condition advertisement, suppression, and attributes
                                        	**type**\:  str
                                        
                                        .. attribute:: summary_only
                                        
                                        	TRUE to filter more specific routes from updates, FALSEotherwise
                                        	**type**\:  bool
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.aggregate_addr = None
                                            self.aggregate_prefix = None
                                            self.generate_confederation_set_info = None
                                            self.generate_set_info = None
                                            self.route_policy_name = None
                                            self.summary_only = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.aggregate_addr is None:
                                                raise YPYModelError('Key property aggregate_addr is None')
                                            if self.aggregate_prefix is None:
                                                raise YPYModelError('Key property aggregate_prefix is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aggregate-address[Cisco-IOS-XR-ipv4-bgp-cfg:aggregate-addr = ' + str(self.aggregate_addr) + '][Cisco-IOS-XR-ipv4-bgp-cfg:aggregate-prefix = ' + str(self.aggregate_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.aggregate_addr is not None:
                                                return True

                                            if self.aggregate_prefix is not None:
                                                return True

                                            if self.generate_confederation_set_info is not None:
                                                return True

                                            if self.generate_set_info is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            if self.summary_only is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AggregateAddresses.AggregateAddress']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:aggregate-addresses'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.aggregate_address is not None:
                                            for child_ref in self.aggregate_address:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AggregateAddresses']['meta_info']


                                class Dampening(object):
                                    """
                                    Enable route\-flap dampening
                                    
                                    .. attribute:: half_life
                                    
                                    	Half\-life time for the penalty (minutes)
                                    	**type**\:  int
                                    
                                    	**range:** 1..45
                                    
                                    	**units**\: minute
                                    
                                    .. attribute:: reuse_threshold
                                    
                                    	Value to start reusing a route
                                    	**type**\:  int
                                    
                                    	**range:** 1..20000
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy to specify criteria for dampening. This cannot be specified if any other parameters are specified
                                    	**type**\:  str
                                    
                                    .. attribute:: suppress_threshold
                                    
                                    	Value to start suppressing a route
                                    	**type**\:  int
                                    
                                    	**range:** 1..20000
                                    
                                    .. attribute:: suppress_time
                                    
                                    	Maximum duration to suppress a stable route (seconds)
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**units**\: second
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.half_life = None
                                        self.reuse_threshold = None
                                        self.route_policy_name = None
                                        self.suppress_threshold = None
                                        self.suppress_time = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:dampening'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.half_life is not None:
                                            return True

                                        if self.reuse_threshold is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        if self.suppress_threshold is not None:
                                            return True

                                        if self.suppress_time is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Dampening']['meta_info']


                                class RipRoutes(object):
                                    """
                                    Redistribute RIP routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\:  int
                                    
                                    	**range:** 0..127
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.default_metric = None
                                        self.not_used = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:rip-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.default_metric is not None:
                                            return True

                                        if self.not_used is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.RipRoutes']['meta_info']


                                class LispRoutes(object):
                                    """
                                    Redistribute lisp routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.default_metric = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:lisp-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.default_metric is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.LispRoutes']['meta_info']


                                class StaticRoutes(object):
                                    """
                                    Redistribute static routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\:  int
                                    
                                    	**range:** 0..127
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.default_metric = None
                                        self.not_used = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:static-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.default_metric is not None:
                                            return True

                                        if self.not_used is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.StaticRoutes']['meta_info']


                                class Distance(object):
                                    """
                                    Define an administrative distance
                                    
                                    .. attribute:: external_routes
                                    
                                    	Distance for routes external to the AS
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 20
                                    
                                    .. attribute:: internal_routes
                                    
                                    	Distance for routes internal to the AS
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 200
                                    
                                    .. attribute:: local_routes
                                    
                                    	Distance for local routes
                                    	**type**\:  int
                                    
                                    	**range:** 1..255
                                    
                                    	**default value**\: 200
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.external_routes = None
                                        self.internal_routes = None
                                        self.local_routes = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:distance'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.external_routes is not None:
                                            return True

                                        if self.internal_routes is not None:
                                            return True

                                        if self.local_routes is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.Distance']['meta_info']


                                class LabelMode(object):
                                    """
                                    BGP 6PE/MPLS\-VPN label allocation mode
                                    
                                    .. attribute:: label_allocation_mode
                                    
                                    	Label allocation mode\: per\-ce  Set per CE label mode, per\-vrf Set per VRF label mode, per\-prefix Set per Prefix label mode (for MPLS\-VPN only)
                                    	**type**\:  str
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Label mode route policy name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.label_allocation_mode = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:label-mode'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.label_allocation_mode is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.LabelMode']['meta_info']


                                class EigrpRoutes(object):
                                    """
                                    Redistribute information for EIGRP routes.
                                    
                                    .. attribute:: eigrp_route
                                    
                                    	Redistribute EIGRP routes
                                    	**type**\: list of    :py:class:`EigrpRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.EigrpRoutes.EigrpRoute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.eigrp_route = YList()
                                        self.eigrp_route.parent = self
                                        self.eigrp_route.name = 'eigrp_route'


                                    class EigrpRoute(object):
                                        """
                                        Redistribute EIGRP routes
                                        
                                        .. attribute:: instance_name  <key>
                                        
                                        	EIGRP router tag
                                        	**type**\:  str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: redist_type
                                        
                                        	Redistribution type\: 01 for internal routes, 02 for external routes, Logical combinations permitted
                                        	**type**\:  str
                                        
                                        	**pattern:** [0\-9a\-fA\-F]{1,8}
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.instance_name = None
                                            self.default_metric = None
                                            self.redist_type = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.instance_name is None:
                                                raise YPYModelError('Key property instance_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:eigrp-route[Cisco-IOS-XR-ipv4-bgp-cfg:instance-name = ' + str(self.instance_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.instance_name is not None:
                                                return True

                                            if self.default_metric is not None:
                                                return True

                                            if self.redist_type is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.EigrpRoutes.EigrpRoute']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:eigrp-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.eigrp_route is not None:
                                            for child_ref in self.eigrp_route:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.EigrpRoutes']['meta_info']


                                class SourcedNetworks(object):
                                    """
                                    Specify a network to announce via BGP
                                    
                                    .. attribute:: sourced_network
                                    
                                    	Sourced network configuration
                                    	**type**\: list of    :py:class:`SourcedNetwork <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.SourcedNetworks.SourcedNetwork>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.sourced_network = YList()
                                        self.sourced_network.parent = self
                                        self.sourced_network.name = 'sourced_network'


                                    class SourcedNetwork(object):
                                        """
                                        Sourced network configuration
                                        
                                        .. attribute:: network_addr  <key>
                                        
                                        	Network in prefix/length format (address part)
                                        	**type**\: one of the below types:
                                        
                                        	**type**\:  str
                                        
                                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        	**type**\:  str
                                        
                                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                        
                                        
                                        ----
                                        .. attribute:: network_prefix  <key>
                                        
                                        	Network in prefix/length format (prefix part)
                                        	**type**\:  int
                                        
                                        	**range:** 0..128
                                        
                                        .. attribute:: backdoor
                                        
                                        	Specify a BGP backdoor route, default is FALSE
                                        	**type**\:  bool
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.network_addr = None
                                            self.network_prefix = None
                                            self.backdoor = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.network_addr is None:
                                                raise YPYModelError('Key property network_addr is None')
                                            if self.network_prefix is None:
                                                raise YPYModelError('Key property network_prefix is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:sourced-network[Cisco-IOS-XR-ipv4-bgp-cfg:network-addr = ' + str(self.network_addr) + '][Cisco-IOS-XR-ipv4-bgp-cfg:network-prefix = ' + str(self.network_prefix) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.network_addr is not None:
                                                return True

                                            if self.network_prefix is not None:
                                                return True

                                            if self.backdoor is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.SourcedNetworks.SourcedNetwork']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:sourced-networks'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.sourced_network is not None:
                                            for child_ref in self.sourced_network:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.SourcedNetworks']['meta_info']


                                class ConnectedRoutes(object):
                                    """
                                    Redistribute connected routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\:  int
                                    
                                    	**range:** 0..127
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.default_metric = None
                                        self.not_used = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:connected-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.default_metric is not None:
                                            return True

                                        if self.not_used is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.ConnectedRoutes']['meta_info']


                                class AllocateLabel(object):
                                    """
                                    Label allocation policy
                                    
                                    .. attribute:: all
                                    
                                    	Whether all nets should be labeled, default is FALSE
                                    	**type**\:  bool
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.all = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:allocate-label'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.all is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AllocateLabel']['meta_info']


                                class AdditionalPathsSelection(object):
                                    """
                                    Configure additional paths selection
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy for selection
                                    	**type**\:  str
                                    
                                    .. attribute:: selection
                                    
                                    	Enable/disable selection 
                                    	**type**\:   :py:class:`BgpafAdditionalPathsCfgEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpafAdditionalPathsCfgEnum>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.route_policy_name = None
                                        self.selection = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:additional-paths-selection'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.route_policy_name is not None:
                                            return True

                                        if self.selection is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.AdditionalPathsSelection']['meta_info']


                                class OspfRoutes(object):
                                    """
                                    Redistribute information for OSPF routes.
                                    
                                    .. attribute:: ospf_route
                                    
                                    	Redistribute OSPF routes
                                    	**type**\: list of    :py:class:`OspfRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.OspfRoutes.OspfRoute>`
                                    
                                    

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self.ospf_route = YList()
                                        self.ospf_route.parent = self
                                        self.ospf_route.name = 'ospf_route'


                                    class OspfRoute(object):
                                        """
                                        Redistribute OSPF routes
                                        
                                        .. attribute:: instance_name  <key>
                                        
                                        	OSPF router tag
                                        	**type**\:  str
                                        
                                        	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                                        
                                        .. attribute:: default_metric
                                        
                                        	Default metric
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: redist_type
                                        
                                        	Redistribution type\: 01 for internal routes, 02 for external routes of type 1, 04 for external routes of type 2, 08 for NSSA external routes of type 1, 10 for NSSA external routes of type 2, 20 for external routes, 40 for NSSA external routes.  Logical combinations permitted
                                        	**type**\:  str
                                        
                                        	**pattern:** [0\-9a\-fA\-F]{1,8}
                                        
                                        .. attribute:: route_policy_name
                                        
                                        	Route policy name
                                        	**type**\:  str
                                        
                                        

                                        """

                                        _prefix = 'ipv4-bgp-cfg'
                                        _revision = '2015-08-27'

                                        def __init__(self):
                                            self.parent = None
                                            self.instance_name = None
                                            self.default_metric = None
                                            self.redist_type = None
                                            self.route_policy_name = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')
                                            if self.instance_name is None:
                                                raise YPYModelError('Key property instance_name is None')

                                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ospf-route[Cisco-IOS-XR-ipv4-bgp-cfg:instance-name = ' + str(self.instance_name) + ']'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            return True

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.instance_name is not None:
                                                return True

                                            if self.default_metric is not None:
                                                return True

                                            if self.redist_type is not None:
                                                return True

                                            if self.route_policy_name is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.OspfRoutes.OspfRoute']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:ospf-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.ospf_route is not None:
                                            for child_ref in self.ospf_route:
                                                if child_ref._has_data():
                                                    return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.OspfRoutes']['meta_info']


                                class MobileRoutes(object):
                                    """
                                    Redistribute mobile routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\:  int
                                    
                                    	**range:** 0..127
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.default_metric = None
                                        self.not_used = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:mobile-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.default_metric is not None:
                                            return True

                                        if self.not_used is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.MobileRoutes']['meta_info']


                                class SubscriberRoutes(object):
                                    """
                                    Redistribute subscriber routes
                                    
                                    .. attribute:: default_metric
                                    
                                    	Default metric
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: not_used
                                    
                                    	Not used
                                    	**type**\:  int
                                    
                                    	**range:** 0..127
                                    
                                    .. attribute:: route_policy_name
                                    
                                    	Route policy name
                                    	**type**\:  str
                                    
                                    .. attribute:: _is_presence
                                    
                                    	Is present if this instance represents presence container else not
                                    	**type**\: bool
                                    
                                    

                                    This class is a :ref:`presence class<presence-class>`

                                    """

                                    _prefix = 'ipv4-bgp-cfg'
                                    _revision = '2015-08-27'

                                    def __init__(self):
                                        self.parent = None
                                        self._is_presence = True
                                        self.default_metric = None
                                        self.not_used = None
                                        self.route_policy_name = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:subscriber-routes'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self._is_presence:
                                            return True
                                        if self.default_metric is not None:
                                            return True

                                        if self.not_used is not None:
                                            return True

                                        if self.route_policy_name is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf.SubscriberRoutes']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.af_name is None:
                                        raise YPYModelError('Key property af_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:global-af[Cisco-IOS-XR-ipv4-bgp-cfg:af-name = ' + str(self.af_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.af_name is not None:
                                        return True

                                    if self.additional_paths_receive is not None:
                                        return True

                                    if self.additional_paths_selection is not None and self.additional_paths_selection._has_data():
                                        return True

                                    if self.additional_paths_send is not None:
                                        return True

                                    if self.advertise_local_labeled_route_safi_unicast is not None:
                                        return True

                                    if self.aggregate_addresses is not None and self.aggregate_addresses._has_data():
                                        return True

                                    if self.allocate_label is not None and self.allocate_label._has_data():
                                        return True

                                    if self.application_routes is not None and self.application_routes._has_data():
                                        return True

                                    if self.attribute_download is not None:
                                        return True

                                    if self.best_external is not None:
                                        return True

                                    if self.connected_routes is not None and self.connected_routes._has_data():
                                        return True

                                    if self.dampening is not None and self.dampening._has_data():
                                        return True

                                    if self.disable_as_path_loop_check is not None:
                                        return True

                                    if self.disable_client_to_client_rr is not None:
                                        return True

                                    if self.disable_cluster_client_to_client_rrs is not None and self.disable_cluster_client_to_client_rrs._has_data():
                                        return True

                                    if self.disable_default_martian_check is not None:
                                        return True

                                    if self.distance is not None and self.distance._has_data():
                                        return True

                                    if self.domain_distinguisher is not None and self.domain_distinguisher._has_data():
                                        return True

                                    if self.dynamic_med_interval is not None:
                                        return True

                                    if self.ebgp is not None and self.ebgp._has_data():
                                        return True

                                    if self.eibgp is not None and self.eibgp._has_data():
                                        return True

                                    if self.eigrp_routes is not None and self.eigrp_routes._has_data():
                                        return True

                                    if self.enable is not None:
                                        return True

                                    if self.global_table_mcast is not None:
                                        return True

                                    if self.ibgp is not None and self.ibgp._has_data():
                                        return True

                                    if self.import_delay is not None and self.import_delay._has_data():
                                        return True

                                    if self.inter_as_install is not None:
                                        return True

                                    if self.isis_routes is not None and self.isis_routes._has_data():
                                        return True

                                    if self.label_delay is not None and self.label_delay._has_data():
                                        return True

                                    if self.label_mode is not None and self.label_mode._has_data():
                                        return True

                                    if self.label_retain is not None:
                                        return True

                                    if self.label_security_rpf is not None:
                                        return True

                                    if self.lisp_routes is not None and self.lisp_routes._has_data():
                                        return True

                                    if self.mobile_routes is not None and self.mobile_routes._has_data():
                                        return True

                                    if self.next_hop_critical_trigger_delay is not None:
                                        return True

                                    if self.next_hop_non_critical_trigger_delay is not None:
                                        return True

                                    if self.next_hop_resolution_prefix_length_minimum is not None:
                                        return True

                                    if self.next_hop_route_policy is not None:
                                        return True

                                    if self.ospf_routes is not None and self.ospf_routes._has_data():
                                        return True

                                    if self.permanent_network is not None:
                                        return True

                                    if self.reset_weight_on_import is not None:
                                        return True

                                    if self.retain_rt is not None and self.retain_rt._has_data():
                                        return True

                                    if self.rip_routes is not None and self.rip_routes._has_data():
                                        return True

                                    if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                        return True

                                    if self.rpki_bestpath_use_origin_as_validity is not None:
                                        return True

                                    if self.rpki_origin_as_validation_disable is not None:
                                        return True

                                    if self.rpki_origin_as_validity_signal_ibgp is not None:
                                        return True

                                    if self.scan_time is not None:
                                        return True

                                    if self.segmented_mcast is not None:
                                        return True

                                    if self.sourced_networks is not None and self.sourced_networks._has_data():
                                        return True

                                    if self.static_routes is not None and self.static_routes._has_data():
                                        return True

                                    if self.subscriber_routes is not None and self.subscriber_routes._has_data():
                                        return True

                                    if self.table_policy is not None:
                                        return True

                                    if self.update_limit_address_family is not None:
                                        return True

                                    if self.update_limit_sub_group_ebgp is not None:
                                        return True

                                    if self.update_limit_sub_group_ibgp is not None:
                                        return True

                                    if self.use_igpsr_label is not None:
                                        return True

                                    if self.vrf_all is not None and self.vrf_all._has_data():
                                        return True

                                    if self.wait_rib_install is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs.GlobalAf']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:global-afs'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.global_af is not None:
                                    for child_ref in self.global_af:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalAfs']['meta_info']


                        class RpkiStaticRoutes(object):
                            """
                            RPKI static route configuration
                            
                            .. attribute:: rpki_static_route
                            
                            	RPKI static route
                            	**type**\: list of    :py:class:`RpkiStaticRoute <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiStaticRoutes.RpkiStaticRoute>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.rpki_static_route = YList()
                                self.rpki_static_route.parent = self
                                self.rpki_static_route.name = 'rpki_static_route'


                            class RpkiStaticRoute(object):
                                """
                                RPKI static route
                                
                                .. attribute:: addrress  <key>
                                
                                	Address
                                	**type**\: one of the below types:
                                
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                
                                ----
                                .. attribute:: as_  <key>
                                
                                	AS Number
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: maximum  <key>
                                
                                	Maximum Prefix Length
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                .. attribute:: minimum  <key>
                                
                                	Minimum Prefix Length
                                	**type**\:  int
                                
                                	**range:** \-2147483648..2147483647
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.addrress = None
                                    self.as_ = None
                                    self.maximum = None
                                    self.minimum = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.addrress is None:
                                        raise YPYModelError('Key property addrress is None')
                                    if self.as_ is None:
                                        raise YPYModelError('Key property as_ is None')
                                    if self.maximum is None:
                                        raise YPYModelError('Key property maximum is None')
                                    if self.minimum is None:
                                        raise YPYModelError('Key property minimum is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:rpki-static-route[Cisco-IOS-XR-ipv4-bgp-cfg:addrress = ' + str(self.addrress) + '][Cisco-IOS-XR-ipv4-bgp-cfg:as = ' + str(self.as_) + '][Cisco-IOS-XR-ipv4-bgp-cfg:maximum = ' + str(self.maximum) + '][Cisco-IOS-XR-ipv4-bgp-cfg:minimum = ' + str(self.minimum) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.addrress is not None:
                                        return True

                                    if self.as_ is not None:
                                        return True

                                    if self.maximum is not None:
                                        return True

                                    if self.minimum is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiStaticRoutes.RpkiStaticRoute']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:rpki-static-routes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.rpki_static_route is not None:
                                    for child_ref in self.rpki_static_route:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.RpkiStaticRoutes']['meta_info']


                        class MplsActivatedInterfaces(object):
                            """
                            Configure list of MPLS activated interfaces
                            
                            .. attribute:: mpls_activated_interface
                            
                            	Configure a MPLS activated interface
                            	**type**\: list of    :py:class:`MplsActivatedInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.MplsActivatedInterfaces.MplsActivatedInterface>`
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.mpls_activated_interface = YList()
                                self.mpls_activated_interface.parent = self
                                self.mpls_activated_interface.name = 'mpls_activated_interface'


                            class MplsActivatedInterface(object):
                                """
                                Configure a MPLS activated interface
                                
                                .. attribute:: interface_name  <key>
                                
                                	Interface Name
                                	**type**\:  str
                                
                                	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
                                
                                

                                """

                                _prefix = 'ipv4-bgp-cfg'
                                _revision = '2015-08-27'

                                def __init__(self):
                                    self.parent = None
                                    self.interface_name = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.interface_name is None:
                                        raise YPYModelError('Key property interface_name is None')

                                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:mpls-activated-interface[Cisco-IOS-XR-ipv4-bgp-cfg:interface-name = ' + str(self.interface_name) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.interface_name is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.MplsActivatedInterfaces.MplsActivatedInterface']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:mpls-activated-interfaces'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.mpls_activated_interface is not None:
                                    for child_ref in self.mpls_activated_interface:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.MplsActivatedInterfaces']['meta_info']


                        class GlobalTimers(object):
                            """
                            Adjust routing timers.
                            
                            .. attribute:: hold_time
                            
                            	Hold time (seconds).  Specify 0 to disable keepalives/hold time
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 180
                            
                            .. attribute:: keepalive
                            
                            	Keepalive interval (seconds)
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 60
                            
                            .. attribute:: min_accept_hold_time
                            
                            	Minimum acceptable hold time (seconds). Specify 0 to disable keepalives/hold time
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**units**\: second
                            
                            	**default value**\: 3
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.hold_time = None
                                self.keepalive = None
                                self.min_accept_hold_time = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:global-timers'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.hold_time is not None:
                                    return True

                                if self.keepalive is not None:
                                    return True

                                if self.min_accept_hold_time is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.GlobalTimers']['meta_info']


                        class Bfd(object):
                            """
                            BFD configuration
                            
                            .. attribute:: detection_multiplier
                            
                            	Detection multiplier for BFD sessions created by BGP
                            	**type**\:  int
                            
                            	**range:** 2..16
                            
                            .. attribute:: interval
                            
                            	Hello interval for BFD sessions created by BGP
                            	**type**\:  int
                            
                            	**range:** 3..30000
                            
                            	**units**\: millisecond
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.detection_multiplier = None
                                self.interval = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:bfd'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.detection_multiplier is not None:
                                    return True

                                if self.interval is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.Bfd']['meta_info']


                        class SendSocketBufferSizes(object):
                            """
                            set socket parameters
                            
                            .. attribute:: bgp_send_size
                            
                            	BGP Write buffer size in bytes
                            	**type**\:  int
                            
                            	**range:** 4096..131072
                            
                            	**units**\: byte
                            
                            	**default value**\: 4096
                            
                            .. attribute:: socket_send_size
                            
                            	Send socket buffer size in bytes
                            	**type**\:  int
                            
                            	**range:** 4096..131072
                            
                            	**units**\: byte
                            
                            	**default value**\: 24576
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.bgp_send_size = None
                                self.socket_send_size = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:send-socket-buffer-sizes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.bgp_send_size is not None:
                                    return True

                                if self.socket_send_size is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.SendSocketBufferSizes']['meta_info']


                        class ReceiveSocketBufferSizes(object):
                            """
                            Set socket and BGP receive buffer sizes
                            
                            .. attribute:: bgp_receive_size
                            
                            	BGP Read buffer size in bytes
                            	**type**\:  int
                            
                            	**range:** 512..131072
                            
                            	**units**\: byte
                            
                            	**default value**\: 4096
                            
                            .. attribute:: socket_receive_size
                            
                            	Receive socket buffer size in bytes
                            	**type**\:  int
                            
                            	**range:** 512..131072
                            
                            	**units**\: byte
                            
                            	**default value**\: 32768
                            
                            

                            """

                            _prefix = 'ipv4-bgp-cfg'
                            _revision = '2015-08-27'

                            def __init__(self):
                                self.parent = None
                                self.bgp_receive_size = None
                                self.socket_receive_size = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:receive-socket-buffer-sizes'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.bgp_receive_size is not None:
                                    return True

                                if self.socket_receive_size is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                                return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_.ReceiveSocketBufferSizes']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:global'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.as_league is not None and self.as_league._has_data():
                                return True

                            if self.as_list_groups is not None and self.as_list_groups._has_data():
                                return True

                            if self.attribute_filter_groups is not None and self.attribute_filter_groups._has_data():
                                return True

                            if self.best_path_aigp_ignore is not None:
                                return True

                            if self.best_path_as_multipath_relax is not None:
                                return True

                            if self.best_path_as_path_length is not None:
                                return True

                            if self.best_path_confederation_paths is not None:
                                return True

                            if self.best_path_cost_community is not None:
                                return True

                            if self.best_path_med_always is not None:
                                return True

                            if self.best_path_med_missing is not None:
                                return True

                            if self.best_path_router_id is not None:
                                return True

                            if self.bfd is not None and self.bfd._has_data():
                                return True

                            if self.cluster_id is not None and self.cluster_id._has_data():
                                return True

                            if self.confederation_domain is not None and self.confederation_domain._has_data():
                                return True

                            if self.confederation_peer_ases is not None and self.confederation_peer_ases._has_data():
                                return True

                            if self.default_info_originate is not None:
                                return True

                            if self.default_metric is not None:
                                return True

                            if self.disable_auto_soft_reset is not None:
                                return True

                            if self.disable_enforce_first_as is not None:
                                return True

                            if self.disable_fast_external_fallover is not None:
                                return True

                            if self.disable_msg_log is not None:
                                return True

                            if self.disable_neighbor_logging is not None:
                                return True

                            if self.enforce_ibgp_out_policy is not None:
                                return True

                            if self.global_afs is not None and self.global_afs._has_data():
                                return True

                            if self.global_graceful_maintenance_activate is not None and self.global_graceful_maintenance_activate._has_data():
                                return True

                            if self.global_scan_time is not None:
                                return True

                            if self.global_timers is not None and self.global_timers._has_data():
                                return True

                            if self.graceful_reset is not None:
                                return True

                            if self.graceful_restart is not None:
                                return True

                            if self.graceful_restart_purge_time is not None:
                                return True

                            if self.graceful_restart_stalepath_time is not None:
                                return True

                            if self.graceful_restart_time is not None:
                                return True

                            if self.igp_loop_check is not None:
                                return True

                            if self.igp_redist_internal is not None:
                                return True

                            if self.install_diversion is not None:
                                return True

                            if self.limits is not None and self.limits._has_data():
                                return True

                            if self.local_preference is not None:
                                return True

                            if self.mpls_activated_interfaces is not None and self.mpls_activated_interfaces._has_data():
                                return True

                            if self.multi_path_as_path_ignore_onwards is not None:
                                return True

                            if self.mvpn is not None:
                                return True

                            if self.neighbor_logging_detail is not None:
                                return True

                            if self.next_hop_trigger_delay is not None:
                                return True

                            if self.nsr is not None:
                                return True

                            if self.read_only is not None:
                                return True

                            if self.receive_socket_buffer_sizes is not None and self.receive_socket_buffer_sizes._has_data():
                                return True

                            if self.router_id is not None:
                                return True

                            if self.rpki_bestpath_origin_as_allow_invalid is not None:
                                return True

                            if self.rpki_bestpath_use_origin_as_validity is not None:
                                return True

                            if self.rpki_origin_as_validation_disable is not None:
                                return True

                            if self.rpki_origin_as_validation_time is not None:
                                return True

                            if self.rpki_origin_as_validity_signal_ibgp is not None:
                                return True

                            if self.rpki_servers is not None and self.rpki_servers._has_data():
                                return True

                            if self.rpki_static_routes is not None and self.rpki_static_routes._has_data():
                                return True

                            if self.send_socket_buffer_sizes is not None and self.send_socket_buffer_sizes._has_data():
                                return True

                            if self.update_delay is not None and self.update_delay._has_data():
                                return True

                            if self.update_error_handling_basic_ebgp_disable is not None:
                                return True

                            if self.update_error_handling_basic_ibgp_disable is not None:
                                return True

                            if self.update_error_handling_extended_ebgp is not None:
                                return True

                            if self.update_error_handling_extended_ibgp is not None:
                                return True

                            if self.update_limit_process is not None:
                                return True

                            if self.update_out_logging is not None:
                                return True

                            if self.write_limit is not None and self.write_limit._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                            return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf.Global_']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:default-vrf'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.bgp_entity is not None and self.bgp_entity._has_data():
                            return True

                        if self.global_ is not None and self.global_._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                        return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs.DefaultVrf']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')
                    if self.as_ is None:
                        raise YPYModelError('Key property as_ is None')

                    return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:four-byte-as[Cisco-IOS-XR-ipv4-bgp-cfg:as = ' + str(self.as_) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.as_ is not None:
                        return True

                    if self.bgp_running is not None:
                        return True

                    if self.default_vrf is not None and self.default_vrf._has_data():
                        return True

                    if self.vrfs is not None and self.vrfs._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                    return meta._meta_table['Bgp.Instance.InstanceAs.FourByteAs']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')
                if self.as_ is None:
                    raise YPYModelError('Key property as_ is None')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:instance-as[Cisco-IOS-XR-ipv4-bgp-cfg:as = ' + str(self.as_) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.as_ is not None:
                    return True

                if self.four_byte_as is not None:
                    for child_ref in self.four_byte_as:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                return meta._meta_table['Bgp.Instance.InstanceAs']['meta_info']

        @property
        def _common_path(self):
            if self.instance_name is None:
                raise YPYModelError('Key property instance_name is None')

            return '/Cisco-IOS-XR-ipv4-bgp-cfg:bgp/Cisco-IOS-XR-ipv4-bgp-cfg:instance[Cisco-IOS-XR-ipv4-bgp-cfg:instance-name = ' + str(self.instance_name) + ']'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.instance_name is not None:
                return True

            if self.instance_as is not None:
                for child_ref in self.instance_as:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
            return meta._meta_table['Bgp.Instance']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-cfg:bgp'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.instance is not None:
            for child_ref in self.instance:
                if child_ref._has_data():
                    return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['Bgp']['meta_info']


class BmpServers(object):
    """
    bmp servers
    
    .. attribute:: bmp_server
    
    	A particular BMP server
    	**type**\: list of    :py:class:`BmpServer <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServers.BmpServer>`
    
    

    """

    _prefix = 'ipv4-bgp-cfg'
    _revision = '2015-08-27'

    def __init__(self):
        self.bmp_server = YList()
        self.bmp_server.parent = self
        self.bmp_server.name = 'bmp_server'


    class BmpServer(object):
        """
        A particular BMP server
        
        .. attribute:: server_id  <key>
        
        	BMP Server ID
        	**type**\:  int
        
        	**range:** 1..9
        
        .. attribute:: bmptcp_keep_alive
        
        	configure TCP keep alives to be exchanged between client and server. Default=1000
        	**type**\:  int
        
        	**range:** 0..7200
        
        	**units**\: second
        
        .. attribute:: bmptcp_maximum_segment_size
        
        	configure TCP maximum segment size. Default=16384
        	**type**\:  int
        
        	**range:** 68..10000
        
        	**units**\: byte
        
        .. attribute:: create
        
        	BMP Server Creation
        	**type**\:  :py:class:`Empty<ydk.types.Empty>`
        
        .. attribute:: description
        
        	String to describe the BMP server
        	**type**\:  str
        
        .. attribute:: flapping_delay
        
        	Delay in connecting to BMP Server after a flap had been detected
        	**type**\:  int
        
        	**range:** 60..3600
        
        	**units**\: second
        
        .. attribute:: host_port
        
        	Configure Host Name/Address and Port for BMP Server
        	**type**\:   :py:class:`HostPort <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServers.BmpServer.HostPort>`
        
        .. attribute:: initial_delay
        
        	Initial connect delay in seconds in sending updates
        	**type**\:  int
        
        	**range:** 1..3600
        
        	**units**\: second
        
        .. attribute:: initial_refresh_delay
        
        	Initial refresh to generate BGP updates
        	**type**\:   :py:class:`InitialRefreshDelay <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServers.BmpServer.InitialRefreshDelay>`
        
        .. attribute:: maximum_buffer_size
        
        	Range in MegaBytes for the maximum buffer size of BMP message queue. The maximum buf\-size is 20% and default buf\-size is 15% of the platform virtual memory max\-limit (aka rlimit) . Please run show bgp process performance\-statistics to see the individual values. Unit is in Megabytes
        	**type**\:  int
        
        	**range:** 1..4294967295
        
        	**units**\: megabyte
        
        .. attribute:: route_monitoring
        
        	Enable Route Monitoring capability for the BMP servers. BGP update messages messages will be regenrated with a table walk 
        	**type**\:   :py:class:`RouteMonitoring <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServers.BmpServer.RouteMonitoring>`
        
        .. attribute:: shutdown
        
        	TRUE to shutdown the BMP Server ConnectionFALSE to bring back the BMP Server Connection
        	**type**\:  bool
        
        .. attribute:: status_report_interval
        
        	Stats reporting period for BMP server
        	**type**\:  int
        
        	**range:** 1..3600
        
        	**units**\: second
        
        .. attribute:: tos
        
        	TOS (Type Of Service)
        	**type**\:   :py:class:`Tos <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpServers.BmpServer.Tos>`
        
        .. attribute:: update_source_interface
        
        	Select an interface to configure
        	**type**\:  str
        
        	**pattern:** (([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){3,4}\\d+\\.\\d+)\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]\*\\d+))\|(([a\-zA\-Z0\-9\_]\*\\d+/){2}([a\-zA\-Z0\-9\_]+))\|([a\-zA\-Z0\-9\_\-]\*\\d+)\|([a\-zA\-Z0\-9\_\-]\*\\d+\\.\\d+)\|(mpls)\|(dwdm)
        
        .. attribute:: vrf
        
        	VRF for BMP Server
        	**type**\:  str
        
        

        """

        _prefix = 'ipv4-bgp-cfg'
        _revision = '2015-08-27'

        def __init__(self):
            self.parent = None
            self.server_id = None
            self.bmptcp_keep_alive = None
            self.bmptcp_maximum_segment_size = None
            self.create = None
            self.description = None
            self.flapping_delay = None
            self.host_port = BmpServers.BmpServer.HostPort()
            self.host_port.parent = self
            self.initial_delay = None
            self.initial_refresh_delay = BmpServers.BmpServer.InitialRefreshDelay()
            self.initial_refresh_delay.parent = self
            self.maximum_buffer_size = None
            self.route_monitoring = BmpServers.BmpServer.RouteMonitoring()
            self.route_monitoring.parent = self
            self.shutdown = None
            self.status_report_interval = None
            self.tos = BmpServers.BmpServer.Tos()
            self.tos.parent = self
            self.update_source_interface = None
            self.vrf = None


        class InitialRefreshDelay(object):
            """
            Initial refresh to generate BGP updates
            
            .. attribute:: delay
            
            	Delay in seconds before sending Refresh request to Peers
            	**type**\:  int
            
            	**range:** 0..3600
            
            	**units**\: second
            
            .. attribute:: spread
            
            	Spread over which to send initial Refresh request to Peers
            	**type**\:  int
            
            	**range:** 0..3600
            
            

            """

            _prefix = 'ipv4-bgp-cfg'
            _revision = '2015-08-27'

            def __init__(self):
                self.parent = None
                self.delay = None
                self.spread = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:initial-refresh-delay'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.delay is not None:
                    return True

                if self.spread is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                return meta._meta_table['BmpServers.BmpServer.InitialRefreshDelay']['meta_info']


        class HostPort(object):
            """
            Configure Host Name/Address and Port for BMP
            Server
            
            .. attribute:: host
            
            	Name of the BMP server(accepts IPv4/IPv6 Address format too)
            	**type**\:  str
            
            .. attribute:: port
            
            	Port Number of listening BMP server
            	**type**\:  int
            
            	**range:** 1..65535
            
            

            """

            _prefix = 'ipv4-bgp-cfg'
            _revision = '2015-08-27'

            def __init__(self):
                self.parent = None
                self.host = None
                self.port = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:host-port'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.host is not None:
                    return True

                if self.port is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                return meta._meta_table['BmpServers.BmpServer.HostPort']['meta_info']


        class RouteMonitoring(object):
            """
            Enable Route Monitoring capability for the BMP
            servers.
            BGP update messages messages will be
            regenrated with a table walk
            
            
            .. attribute:: direction
            
            	Specify if the routes should be picked up at inbound or outbound direction
            	**type**\:   :py:class:`BmpRouteDirectionEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpRouteDirectionEnum>`
            
            .. attribute:: policy
            
            	Specify if the routes packed in update messages should be before or after the application of route\-policy
            	**type**\:   :py:class:`BmpPolicySelectEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_cfg.BmpPolicySelectEnum>`
            
            

            """

            _prefix = 'ipv4-bgp-cfg'
            _revision = '2015-08-27'

            def __init__(self):
                self.parent = None
                self.direction = None
                self.policy = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:route-monitoring'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.direction is not None:
                    return True

                if self.policy is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                return meta._meta_table['BmpServers.BmpServer.RouteMonitoring']['meta_info']


        class Tos(object):
            """
            TOS (Type Of Service)
            
            .. attribute:: type
            
            	Set type of service
            	**type**\:   :py:class:`BgpTosEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpTosEnum>`
            
            .. attribute:: value
            
            	TOS value to set
            	**type**\: one of the below types:
            
            	**type**\:   :py:class:`BgpPrecedenceDscpEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_ipv4_bgp_datatypes.BgpPrecedenceDscpEnum>`
            
            
            ----
            	**type**\:  int
            
            	**range:** 0..63
            
            
            ----
            

            """

            _prefix = 'ipv4-bgp-cfg'
            _revision = '2015-08-27'

            def __init__(self):
                self.parent = None
                self.type = None
                self.value = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')

                return self.parent._common_path +'/Cisco-IOS-XR-ipv4-bgp-cfg:tos'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.type is not None:
                    return True

                if self.value is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
                return meta._meta_table['BmpServers.BmpServer.Tos']['meta_info']

        @property
        def _common_path(self):
            if self.server_id is None:
                raise YPYModelError('Key property server_id is None')

            return '/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-server[Cisco-IOS-XR-ipv4-bgp-cfg:server-id = ' + str(self.server_id) + ']'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.server_id is not None:
                return True

            if self.bmptcp_keep_alive is not None:
                return True

            if self.bmptcp_maximum_segment_size is not None:
                return True

            if self.create is not None:
                return True

            if self.description is not None:
                return True

            if self.flapping_delay is not None:
                return True

            if self.host_port is not None and self.host_port._has_data():
                return True

            if self.initial_delay is not None:
                return True

            if self.initial_refresh_delay is not None and self.initial_refresh_delay._has_data():
                return True

            if self.maximum_buffer_size is not None:
                return True

            if self.route_monitoring is not None and self.route_monitoring._has_data():
                return True

            if self.shutdown is not None:
                return True

            if self.status_report_interval is not None:
                return True

            if self.tos is not None and self.tos._has_data():
                return True

            if self.update_source_interface is not None:
                return True

            if self.vrf is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
            return meta._meta_table['BmpServers.BmpServer']['meta_info']

    @property
    def _common_path(self):

        return '/Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.bmp_server is not None:
            for child_ref in self.bmp_server:
                if child_ref._has_data():
                    return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.cisco_ios_xr._meta import _Cisco_IOS_XR_ipv4_bgp_cfg as meta
        return meta._meta_table['BmpServers']['meta_info']


