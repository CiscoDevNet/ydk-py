""" Cisco_IOS_XR_bundlemgr_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR bundlemgr package operational data.

This module contains definitions
for the following management objects\:
  lacp\-bundles\: LACP bundle data
  bundle\-information\: bundle information
  lacp\-data\: lacp data
  bundles\: bundles
  lacp\-bundle\-members\: lacp bundle members
  bundles\-adjacency\: bundles adjacency

Copyright (c) 2013\-2017 by Cisco Systems, Inc.
All rights reserved.

"""
from collections import OrderedDict

from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YError, YModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class BmAfId(Enum):
    """
    BmAfId (Enum Class)

    Bm af id

    .. data:: bm_af_id_ipv4 = 1136568623

    	IPv4 AFI

    .. data:: bm_af_id_ipv6 = 1136568624

    	IPv6 AFI

    """

    bm_af_id_ipv4 = Enum.YLeaf(1136568623, "bm-af-id-ipv4")

    bm_af_id_ipv6 = Enum.YLeaf(1136568624, "bm-af-id-ipv6")


class BmBdlMacSource(Enum):
    """
    BmBdlMacSource (Enum Class)

    Bm bdl mac source

    .. data:: bm_bdl_mac_source_unknown = 0

    	The MAC is currently unknown

    .. data:: bm_bdl_mac_source_chassis = 1

    	The MAC was allocated from the chassis pool

    .. data:: bm_bdl_mac_source_configured = 2

    	The MAC was configured by the user

    .. data:: bm_bdl_mac_source_member = 3

    	The MAC belongs to a member

    .. data:: bm_bdl_mac_source_peer = 4

    	The MAC has come from the peer device

    """

    bm_bdl_mac_source_unknown = Enum.YLeaf(0, "bm-bdl-mac-source-unknown")

    bm_bdl_mac_source_chassis = Enum.YLeaf(1, "bm-bdl-mac-source-chassis")

    bm_bdl_mac_source_configured = Enum.YLeaf(2, "bm-bdl-mac-source-configured")

    bm_bdl_mac_source_member = Enum.YLeaf(3, "bm-bdl-mac-source-member")

    bm_bdl_mac_source_peer = Enum.YLeaf(4, "bm-bdl-mac-source-peer")


class BmBdlState(Enum):
    """
    BmBdlState (Enum Class)

    Bm bdl state

    .. data:: bm_bdl_state_admin_down = 0

    	The bundle has been configured Down

    .. data:: bm_bdl_state_down = 1

    	The bundle is Down

    .. data:: bm_bdl_state_client_down = 2

    	The bundle is controlled by CLIENT Down

    .. data:: bm_bdl_state_ptnr_down = 3

    	The bundle is Down on the partner device

    .. data:: bm_bdl_state_bundle_shutdown = 4

    	Bundle shutdown has been configured

    .. data:: bm_bdl_state_pe_isolated = 5

    	The bundle cannot contact the core

    .. data:: bm_bdl_state_nak = 6

    	The state is disputed by a peer device

    .. data:: bm_bdl_state_up_active = 7

    	The bundle is Up

    .. data:: bm_bdl_state_mlacp_hot_standby = 8

    	The bundle is Up, but is mLACP standby

    .. data:: bm_bdl_state_mlacp_cold_standby = 9

    	The bundle is mLACP standby, but will not

    	eliminate traffic loss

    .. data:: bm_bdl_state_unknown = 10

    	The bundle state has not been determined

    .. data:: bm_bdl_state_cold_standby = 11

    	The bundle is standby, but will not eliminate

    	traffic loss

    .. data:: bm_bdl_state_error_disabled = 12

    	The bundle has been error-disabled

    .. data:: bm_bdl_state_efd_disabled = 13

    	The bundle has been disabled by EFD

    """

    bm_bdl_state_admin_down = Enum.YLeaf(0, "bm-bdl-state-admin-down")

    bm_bdl_state_down = Enum.YLeaf(1, "bm-bdl-state-down")

    bm_bdl_state_client_down = Enum.YLeaf(2, "bm-bdl-state-client-down")

    bm_bdl_state_ptnr_down = Enum.YLeaf(3, "bm-bdl-state-ptnr-down")

    bm_bdl_state_bundle_shutdown = Enum.YLeaf(4, "bm-bdl-state-bundle-shutdown")

    bm_bdl_state_pe_isolated = Enum.YLeaf(5, "bm-bdl-state-pe-isolated")

    bm_bdl_state_nak = Enum.YLeaf(6, "bm-bdl-state-nak")

    bm_bdl_state_up_active = Enum.YLeaf(7, "bm-bdl-state-up-active")

    bm_bdl_state_mlacp_hot_standby = Enum.YLeaf(8, "bm-bdl-state-mlacp-hot-standby")

    bm_bdl_state_mlacp_cold_standby = Enum.YLeaf(9, "bm-bdl-state-mlacp-cold-standby")

    bm_bdl_state_unknown = Enum.YLeaf(10, "bm-bdl-state-unknown")

    bm_bdl_state_cold_standby = Enum.YLeaf(11, "bm-bdl-state-cold-standby")

    bm_bdl_state_error_disabled = Enum.YLeaf(12, "bm-bdl-state-error-disabled")

    bm_bdl_state_efd_disabled = Enum.YLeaf(13, "bm-bdl-state-efd-disabled")


class BmFeatureStatus(Enum):
    """
    BmFeatureStatus (Enum Class)

    Bm feature status

    .. data:: bm_feature_not_configured = 0

    	No configuration is applied for a feature

    .. data:: bm_feature_not_operational = 1

    	The feature is currently not operational

    .. data:: bm_feature_operational = 2

    	The feature is currently operational

    """

    bm_feature_not_configured = Enum.YLeaf(0, "bm-feature-not-configured")

    bm_feature_not_operational = Enum.YLeaf(1, "bm-feature-not-operational")

    bm_feature_operational = Enum.YLeaf(2, "bm-feature-operational")


class BmMbrStateReason(Enum):
    """
    BmMbrStateReason (Enum Class)

    Bm mbr state reason

    .. data:: bm_mbr_state_reason_unknown = 0

    	Reason unavailable (diagnostics error)

    .. data:: bm_mbr_state_reason_unselectable_unknown = 1

    	Link cannot be used (unknown reason)

    .. data:: bm_mbr_state_reason_link_down = 2

    	Link is down

    .. data:: bm_mbr_state_reason_link_deleting = 3

    	Link is being removed from the bundle

    .. data:: bm_mbr_state_reason_creating = 4

    	Link is in the process of being created

    .. data:: bm_mbr_state_reason_bundle_creating = 5

    	Bundle is in the process of being created

    .. data:: bm_mbr_state_reason_bundle_deleting = 6

    	Bundle is in the process of being deleted

    .. data:: bm_mbr_state_reason_bundle_admin_down = 7

    	Bundle has been shut down

    .. data:: bm_mbr_state_reason_replicating = 8

    	Bundle is in the process of being replicated to

    	this location

    .. data:: bm_mbr_state_reason_bandwidth = 9

    	Incompatible with other links in the bundle

    	(bandwidth out of range)

    .. data:: bm_mbr_state_reason_loop_back = 10

    	Loopback: Actor and Partner have the same

    	System ID and Key

    .. data:: bm_mbr_state_reason_activity_type = 11

    	Incompatible with other links in the bundle

    	(LACP vs non-LACP)

    .. data:: bm_mbr_state_reason_bundle_shutdown = 12

    	Bundle shutdown is configured for the bundle

    .. data:: bm_mbr_state_reason_min_selected = 13

    	Not enough links available to meet

    	minimum-active threshold

    .. data:: bm_mbr_state_reason_max_selected = 14

    	Link is Standby due to maximum-active links

    	configuration

    .. data:: bm_mbr_state_reason_link_limit = 15

    	Bundle has too many member links configured

    .. data:: bm_mbr_state_reason_active_limit = 16

    	Bundle has reached maximum supported number of

    	active links

    .. data:: bm_mbr_state_reason_standby_unknown = 17

    	Link is Standby (unknown reason)

    .. data:: bm_mbr_state_reason_expired = 18

    	Link is Expired; LACPDUs are not being received

    	from the partner

    .. data:: bm_mbr_state_reason_defaulted = 19

    	Link is Defaulted; LACPDUs are not being

    	received from the partner

    .. data:: bm_mbr_state_reason_act_or_not_agg = 20

    	Link is Not Aggregatable (unknown reason)

    .. data:: bm_mbr_state_reason_partner_not_agg = 21

    	Partner has marked the link as Not Aggregatable

    .. data:: bm_mbr_state_reason_lagid = 22

    	Partner System ID/Key do not match that of the

    	Selected links

    .. data:: bm_mbr_state_reason_bundle_not_cfgd = 23

    	Bundle interface is not present in

    	configuration

    .. data:: bm_mbr_state_reason_bundle_not_ready = 24

    	Wait-while timer is running

    .. data:: bm_mbr_state_reason_partner_ood = 25

    	Partner has not echoed the correct parameters

    	for this link

    .. data:: bm_mbr_state_reason_partner_not_in_sync = 26

    	Partner is not Synchronized (Waiting, Standby,

    	or LAG ID mismatch)

    .. data:: bm_mbr_state_reason_foreign_partner_oos = 27

    	Partner is not Synchronized (Waiting, not

    	Selected, or out-of-date)

    .. data:: bm_mbr_state_reason_attach_unknown = 28

    	Link is Attached and has not gone Collecting

    	(unknown reason)

    .. data:: bm_mbr_state_reason_partner_not_collecting = 29

    	Partner has not advertized that it is

    	Collecting

    .. data:: bm_mbr_state_reason_collect_unknown = 30

    	Link is Collecting and has not gone

    	Distributing (unknown reason)

    .. data:: bm_mbr_state_reason_standby_foreign = 31

    	Link is marked as Standby by mLACP peer

    .. data:: bm_mbr_state_reason_bfd_starting = 32

    	Link is waiting for BFD session to start

    .. data:: bm_mbr_state_reason_bfd_down = 33

    	BFD state of this link is Down

    .. data:: bm_mbr_state_reason_bfd_nbr_unconfig = 34

    	BFD session is unconfigured on the remote end

    .. data:: bm_mbr_state_reason_mlacp = 35

    	Link is not operational as a result of mLACP

    	negotiations

    .. data:: bm_mbr_state_reason_pe_isolated = 36

    	ICCP group is isolated from the core network

    .. data:: bm_mbr_state_reason_forced_switchover = 37

    	Forced switchover to the mLACP peer

    .. data:: bm_mbr_state_reason_errdis_unknown = 38

    	Link is error disabled (unknown reason)

    .. data:: bm_mbr_state_reason_mlacp_no_mbr_state_info = 39

    	Waiting for member state information from mLACP

    	peer

    .. data:: bm_mbr_state_reason_active = 40

    	Link is Active

    .. data:: bm_mbr_state_reason_mlacp_no_bdl_state_info = 41

    	Waiting for bundle state information from mLACP

    	peer

    .. data:: bm_mbr_state_reason_mlacp_no_bdl_config_info = 42

    	Waiting for bundle configuration information

    	from mLACP peer

    .. data:: bm_mbr_state_reason_mlacp_no_bdl_sync = 43

    	Waiting for bundle to complete initial

    	synchronization with mLACP peer

    .. data:: bm_mbr_state_reason_mlacp_bdl_has_no_peer = 44

    	mLACP bundle does not have a peer device

    .. data:: bm_mbr_state_reason_mlacp_nak = 45

    	Link is being ignored due to an inconsistency

    	with mLACP peer

    .. data:: bm_mbr_state_reason_mlacp_transport_unavailable = 46

    	ICCP transport is unavailable

    .. data:: bm_mbr_state_reason_mlacp_not_configured = 47

    	ICCP Group is not fully configured

    .. data:: bm_mbr_state_reason_recovery_timer = 48

    	mLACP recovery delay timer is running

    .. data:: bm_mbr_state_reason_mlacp_standby = 49

    	mLACP peer is active

    .. data:: bm_mbr_state_reason_maximized_out = 50

    	mLACP peer has more links/bandwidth available

    .. data:: bm_mbr_state_reason_mlacp_peer_selected = 51

    	mLACP peer has one or more links Selected

    .. data:: bm_mbr_state_reason_mlacp_connect_timer_running = 52

    	mLACP bundle does not have a peer device

    	(connect timer running)

    .. data:: bm_mbr_state_reason_bundle_not_mlacp = 53

    	Bundle is not configured to run mLACP

    .. data:: bm_mbr_state_reason_no_lon = 54

    	Bundle has too many working links configured

    	(more than the maximum-active limit)

    .. data:: bm_mbr_state_reason_cumul_rel_bw_limit = 55

    	Additional bandwidth from link would exceed

    	load balancing capabilities

    .. data:: bm_mbr_state_reason_no_mac = 56

    	No MAC address available for the bundle

    .. data:: bm_mbr_state_reason_no_system_id = 57

    	No system ID available for use by this bundle

    .. data:: bm_mbr_state_reason_link_shutdown = 58

    	Link is shutdown

    .. data:: bm_mbr_state_reason_activity_mlacp = 59

    	Non-LACP link in mLACP bundle

    .. data:: bm_mbr_state_reason_activity_iccp = 60

    	LACP link in inter-chassis bundle

    .. data:: bm_mbr_state_reason_bundle_icpe_mlacp = 61

    	Parent bundle is both inter-chassis and

    	configured for mLACP

    .. data:: bm_mbr_state_reason_no_link_num = 62

    	Too many bundle members in system; no link

    	number available

    .. data:: bm_mbr_state_reason_standby_peer_higher_prio = 63

    	mLACP peer has a higher priority link

    .. data:: bm_mbr_state_reason_red_state_standby = 64

    	Link is in standby redundancy state

    .. data:: bm_mbr_state_reason_other_red_state_standby = 65

    	One or more links in the bundle are in standby

    	redundancy state

    .. data:: bm_mbr_state_reason_hold_ing = 66

    	Holding down temporary to avoid churn after

    	restart

    .. data:: bm_mbr_state_reason_bundle_error_disabled = 67

    	Bundle has been error-disabled

    .. data:: bm_mbr_state_reason_bundle_efd_disabled = 68

    	Bundle has been disabled by EFD

    .. data:: bm_mbr_state_reason_singleton_pe_isolated = 69

    	Singleton ICCP group is isolated from the core

    	network

    .. data:: bm_mbr_state_reason_bfd_ipv6_starting = 70

    	Link is waiting for BFDv6 session to start

    .. data:: bm_mbr_state_reason_bfd_ipv6_down = 71

    	BFDv6 state of this link is Down

    .. data:: bm_mbr_state_reason_bfd_ipv6_nbr_unconfig = 72

    	BFDv6 session is unconfigured on the remote end

    .. data:: bm_mbr_state_reason_timer_running = 73

    	LACP delay timer is running

    .. data:: bm_mbr_state_reason_client_bundle_ctrl = 74

    	Client has configured the bundle state Down

    .. data:: bm_mbr_state_reason_count = 75

    	Enumeration maximum value

    """

    bm_mbr_state_reason_unknown = Enum.YLeaf(0, "bm-mbr-state-reason-unknown")

    bm_mbr_state_reason_unselectable_unknown = Enum.YLeaf(1, "bm-mbr-state-reason-unselectable-unknown")

    bm_mbr_state_reason_link_down = Enum.YLeaf(2, "bm-mbr-state-reason-link-down")

    bm_mbr_state_reason_link_deleting = Enum.YLeaf(3, "bm-mbr-state-reason-link-deleting")

    bm_mbr_state_reason_creating = Enum.YLeaf(4, "bm-mbr-state-reason-creating")

    bm_mbr_state_reason_bundle_creating = Enum.YLeaf(5, "bm-mbr-state-reason-bundle-creating")

    bm_mbr_state_reason_bundle_deleting = Enum.YLeaf(6, "bm-mbr-state-reason-bundle-deleting")

    bm_mbr_state_reason_bundle_admin_down = Enum.YLeaf(7, "bm-mbr-state-reason-bundle-admin-down")

    bm_mbr_state_reason_replicating = Enum.YLeaf(8, "bm-mbr-state-reason-replicating")

    bm_mbr_state_reason_bandwidth = Enum.YLeaf(9, "bm-mbr-state-reason-bandwidth")

    bm_mbr_state_reason_loop_back = Enum.YLeaf(10, "bm-mbr-state-reason-loop-back")

    bm_mbr_state_reason_activity_type = Enum.YLeaf(11, "bm-mbr-state-reason-activity-type")

    bm_mbr_state_reason_bundle_shutdown = Enum.YLeaf(12, "bm-mbr-state-reason-bundle-shutdown")

    bm_mbr_state_reason_min_selected = Enum.YLeaf(13, "bm-mbr-state-reason-min-selected")

    bm_mbr_state_reason_max_selected = Enum.YLeaf(14, "bm-mbr-state-reason-max-selected")

    bm_mbr_state_reason_link_limit = Enum.YLeaf(15, "bm-mbr-state-reason-link-limit")

    bm_mbr_state_reason_active_limit = Enum.YLeaf(16, "bm-mbr-state-reason-active-limit")

    bm_mbr_state_reason_standby_unknown = Enum.YLeaf(17, "bm-mbr-state-reason-standby-unknown")

    bm_mbr_state_reason_expired = Enum.YLeaf(18, "bm-mbr-state-reason-expired")

    bm_mbr_state_reason_defaulted = Enum.YLeaf(19, "bm-mbr-state-reason-defaulted")

    bm_mbr_state_reason_act_or_not_agg = Enum.YLeaf(20, "bm-mbr-state-reason-act-or-not-agg")

    bm_mbr_state_reason_partner_not_agg = Enum.YLeaf(21, "bm-mbr-state-reason-partner-not-agg")

    bm_mbr_state_reason_lagid = Enum.YLeaf(22, "bm-mbr-state-reason-lagid")

    bm_mbr_state_reason_bundle_not_cfgd = Enum.YLeaf(23, "bm-mbr-state-reason-bundle-not-cfgd")

    bm_mbr_state_reason_bundle_not_ready = Enum.YLeaf(24, "bm-mbr-state-reason-bundle-not-ready")

    bm_mbr_state_reason_partner_ood = Enum.YLeaf(25, "bm-mbr-state-reason-partner-ood")

    bm_mbr_state_reason_partner_not_in_sync = Enum.YLeaf(26, "bm-mbr-state-reason-partner-not-in-sync")

    bm_mbr_state_reason_foreign_partner_oos = Enum.YLeaf(27, "bm-mbr-state-reason-foreign-partner-oos")

    bm_mbr_state_reason_attach_unknown = Enum.YLeaf(28, "bm-mbr-state-reason-attach-unknown")

    bm_mbr_state_reason_partner_not_collecting = Enum.YLeaf(29, "bm-mbr-state-reason-partner-not-collecting")

    bm_mbr_state_reason_collect_unknown = Enum.YLeaf(30, "bm-mbr-state-reason-collect-unknown")

    bm_mbr_state_reason_standby_foreign = Enum.YLeaf(31, "bm-mbr-state-reason-standby-foreign")

    bm_mbr_state_reason_bfd_starting = Enum.YLeaf(32, "bm-mbr-state-reason-bfd-starting")

    bm_mbr_state_reason_bfd_down = Enum.YLeaf(33, "bm-mbr-state-reason-bfd-down")

    bm_mbr_state_reason_bfd_nbr_unconfig = Enum.YLeaf(34, "bm-mbr-state-reason-bfd-nbr-unconfig")

    bm_mbr_state_reason_mlacp = Enum.YLeaf(35, "bm-mbr-state-reason-mlacp")

    bm_mbr_state_reason_pe_isolated = Enum.YLeaf(36, "bm-mbr-state-reason-pe-isolated")

    bm_mbr_state_reason_forced_switchover = Enum.YLeaf(37, "bm-mbr-state-reason-forced-switchover")

    bm_mbr_state_reason_errdis_unknown = Enum.YLeaf(38, "bm-mbr-state-reason-errdis-unknown")

    bm_mbr_state_reason_mlacp_no_mbr_state_info = Enum.YLeaf(39, "bm-mbr-state-reason-mlacp-no-mbr-state-info")

    bm_mbr_state_reason_active = Enum.YLeaf(40, "bm-mbr-state-reason-active")

    bm_mbr_state_reason_mlacp_no_bdl_state_info = Enum.YLeaf(41, "bm-mbr-state-reason-mlacp-no-bdl-state-info")

    bm_mbr_state_reason_mlacp_no_bdl_config_info = Enum.YLeaf(42, "bm-mbr-state-reason-mlacp-no-bdl-config-info")

    bm_mbr_state_reason_mlacp_no_bdl_sync = Enum.YLeaf(43, "bm-mbr-state-reason-mlacp-no-bdl-sync")

    bm_mbr_state_reason_mlacp_bdl_has_no_peer = Enum.YLeaf(44, "bm-mbr-state-reason-mlacp-bdl-has-no-peer")

    bm_mbr_state_reason_mlacp_nak = Enum.YLeaf(45, "bm-mbr-state-reason-mlacp-nak")

    bm_mbr_state_reason_mlacp_transport_unavailable = Enum.YLeaf(46, "bm-mbr-state-reason-mlacp-transport-unavailable")

    bm_mbr_state_reason_mlacp_not_configured = Enum.YLeaf(47, "bm-mbr-state-reason-mlacp-not-configured")

    bm_mbr_state_reason_recovery_timer = Enum.YLeaf(48, "bm-mbr-state-reason-recovery-timer")

    bm_mbr_state_reason_mlacp_standby = Enum.YLeaf(49, "bm-mbr-state-reason-mlacp-standby")

    bm_mbr_state_reason_maximized_out = Enum.YLeaf(50, "bm-mbr-state-reason-maximized-out")

    bm_mbr_state_reason_mlacp_peer_selected = Enum.YLeaf(51, "bm-mbr-state-reason-mlacp-peer-selected")

    bm_mbr_state_reason_mlacp_connect_timer_running = Enum.YLeaf(52, "bm-mbr-state-reason-mlacp-connect-timer-running")

    bm_mbr_state_reason_bundle_not_mlacp = Enum.YLeaf(53, "bm-mbr-state-reason-bundle-not-mlacp")

    bm_mbr_state_reason_no_lon = Enum.YLeaf(54, "bm-mbr-state-reason-no-lon")

    bm_mbr_state_reason_cumul_rel_bw_limit = Enum.YLeaf(55, "bm-mbr-state-reason-cumul-rel-bw-limit")

    bm_mbr_state_reason_no_mac = Enum.YLeaf(56, "bm-mbr-state-reason-no-mac")

    bm_mbr_state_reason_no_system_id = Enum.YLeaf(57, "bm-mbr-state-reason-no-system-id")

    bm_mbr_state_reason_link_shutdown = Enum.YLeaf(58, "bm-mbr-state-reason-link-shutdown")

    bm_mbr_state_reason_activity_mlacp = Enum.YLeaf(59, "bm-mbr-state-reason-activity-mlacp")

    bm_mbr_state_reason_activity_iccp = Enum.YLeaf(60, "bm-mbr-state-reason-activity-iccp")

    bm_mbr_state_reason_bundle_icpe_mlacp = Enum.YLeaf(61, "bm-mbr-state-reason-bundle-icpe-mlacp")

    bm_mbr_state_reason_no_link_num = Enum.YLeaf(62, "bm-mbr-state-reason-no-link-num")

    bm_mbr_state_reason_standby_peer_higher_prio = Enum.YLeaf(63, "bm-mbr-state-reason-standby-peer-higher-prio")

    bm_mbr_state_reason_red_state_standby = Enum.YLeaf(64, "bm-mbr-state-reason-red-state-standby")

    bm_mbr_state_reason_other_red_state_standby = Enum.YLeaf(65, "bm-mbr-state-reason-other-red-state-standby")

    bm_mbr_state_reason_hold_ing = Enum.YLeaf(66, "bm-mbr-state-reason-hold-ing")

    bm_mbr_state_reason_bundle_error_disabled = Enum.YLeaf(67, "bm-mbr-state-reason-bundle-error-disabled")

    bm_mbr_state_reason_bundle_efd_disabled = Enum.YLeaf(68, "bm-mbr-state-reason-bundle-efd-disabled")

    bm_mbr_state_reason_singleton_pe_isolated = Enum.YLeaf(69, "bm-mbr-state-reason-singleton-pe-isolated")

    bm_mbr_state_reason_bfd_ipv6_starting = Enum.YLeaf(70, "bm-mbr-state-reason-bfd-ipv6-starting")

    bm_mbr_state_reason_bfd_ipv6_down = Enum.YLeaf(71, "bm-mbr-state-reason-bfd-ipv6-down")

    bm_mbr_state_reason_bfd_ipv6_nbr_unconfig = Enum.YLeaf(72, "bm-mbr-state-reason-bfd-ipv6-nbr-unconfig")

    bm_mbr_state_reason_timer_running = Enum.YLeaf(73, "bm-mbr-state-reason-timer-running")

    bm_mbr_state_reason_client_bundle_ctrl = Enum.YLeaf(74, "bm-mbr-state-reason-client-bundle-ctrl")

    bm_mbr_state_reason_count = Enum.YLeaf(75, "bm-mbr-state-reason-count")


class BmMuxreason(Enum):
    """
    BmMuxreason (Enum Class)

    Bm muxreason

    .. data:: bm_mux_reason_no_reason = 0

    	Selection logic has not yet been run for the

    	bundle this link is a member of

    .. data:: bm_mux_reason_link_down = 1

    	Link is down

    .. data:: bm_mux_reason_link_deleted = 2

    	Link is being removed from the bundle

    .. data:: bm_mux_reason_duplex = 3

    	Link has wrong duplexity

    .. data:: bm_mux_reason_bandwidth = 4

    	Link has wrong bandwidth

    .. data:: bm_mux_reason_loop_back = 5

    	Link is a loopback interface

    .. data:: bm_mux_reason_activity_type = 6

    	Link has wrong activity type

    .. data:: bm_mux_reason_link_limit = 7

    	Link's bundle already has maximum number of

    	members allowed

    .. data:: bm_mux_reason_shared = 8

    	Link is attached to a shared medium

    .. data:: bm_mux_reason_lagid = 9

    	Link has wrong LAG ID

    .. data:: bm_mux_reason_no_bundle = 10

    	Link's bundle does not exist

    .. data:: bm_mux_reason_no_primary = 11

    	Link's bundle has no primary link

    .. data:: bm_mux_reason_bundle_down = 12

    	Link's bundle is shut down

    .. data:: bm_mux_reason_individual = 13

    	Link is marked individual by partner

    .. data:: bm_mux_reason_defaulted = 14

    	Link is Defaulted, suggesting it is not

    	receiving LACPDUs from the peer

    .. data:: bm_mux_reason_in_sync = 15

    	Link is in InSync state

    .. data:: bm_mux_reason_collecting = 16

    	Link is in Collecting state

    .. data:: bm_mux_reason_active_link_limit = 17

    	Link exceeds maximum active limit

    .. data:: bm_mux_reason_distributing = 18

    	Link is in Distributing state

    .. data:: bm_mux_reason_count = 19

    	Enumeration maximum value

    """

    bm_mux_reason_no_reason = Enum.YLeaf(0, "bm-mux-reason-no-reason")

    bm_mux_reason_link_down = Enum.YLeaf(1, "bm-mux-reason-link-down")

    bm_mux_reason_link_deleted = Enum.YLeaf(2, "bm-mux-reason-link-deleted")

    bm_mux_reason_duplex = Enum.YLeaf(3, "bm-mux-reason-duplex")

    bm_mux_reason_bandwidth = Enum.YLeaf(4, "bm-mux-reason-bandwidth")

    bm_mux_reason_loop_back = Enum.YLeaf(5, "bm-mux-reason-loop-back")

    bm_mux_reason_activity_type = Enum.YLeaf(6, "bm-mux-reason-activity-type")

    bm_mux_reason_link_limit = Enum.YLeaf(7, "bm-mux-reason-link-limit")

    bm_mux_reason_shared = Enum.YLeaf(8, "bm-mux-reason-shared")

    bm_mux_reason_lagid = Enum.YLeaf(9, "bm-mux-reason-lagid")

    bm_mux_reason_no_bundle = Enum.YLeaf(10, "bm-mux-reason-no-bundle")

    bm_mux_reason_no_primary = Enum.YLeaf(11, "bm-mux-reason-no-primary")

    bm_mux_reason_bundle_down = Enum.YLeaf(12, "bm-mux-reason-bundle-down")

    bm_mux_reason_individual = Enum.YLeaf(13, "bm-mux-reason-individual")

    bm_mux_reason_defaulted = Enum.YLeaf(14, "bm-mux-reason-defaulted")

    bm_mux_reason_in_sync = Enum.YLeaf(15, "bm-mux-reason-in-sync")

    bm_mux_reason_collecting = Enum.YLeaf(16, "bm-mux-reason-collecting")

    bm_mux_reason_active_link_limit = Enum.YLeaf(17, "bm-mux-reason-active-link-limit")

    bm_mux_reason_distributing = Enum.YLeaf(18, "bm-mux-reason-distributing")

    bm_mux_reason_count = Enum.YLeaf(19, "bm-mux-reason-count")


class BmMuxstate(Enum):
    """
    BmMuxstate (Enum Class)

    Bm muxstate

    .. data:: detached = 1

    	Port is not attached to a bundle

    .. data:: waiting = 2

    	Port has chosen bundle and is waiting to join

    .. data:: attached = 3

    	Port is attached to the bundle but not active

    .. data:: collecting = 4

    	Port is ready to receive data

    .. data:: distributing = 5

    	Port is distributing data

    .. data:: collecting_distributing = 6

    	Port is active and can send and receive data

    """

    detached = Enum.YLeaf(1, "detached")

    waiting = Enum.YLeaf(2, "waiting")

    attached = Enum.YLeaf(3, "attached")

    collecting = Enum.YLeaf(4, "collecting")

    distributing = Enum.YLeaf(5, "distributing")

    collecting_distributing = Enum.YLeaf(6, "collecting-distributing")


class BmSeverity(Enum):
    """
    BmSeverity (Enum Class)

    Severity of the member state reason

    .. data:: ok = 0

    	OK

    .. data:: information = 1

    	Information

    .. data:: misconfiguration = 2

    	Misconfiguration

    .. data:: warning = 3

    	Warning

    .. data:: error = 5

    	Error

    """

    ok = Enum.YLeaf(0, "ok")

    information = Enum.YLeaf(1, "information")

    misconfiguration = Enum.YLeaf(2, "misconfiguration")

    warning = Enum.YLeaf(3, "warning")

    error = Enum.YLeaf(5, "error")


class BmStateReasonTarget(Enum):
    """
    BmStateReasonTarget (Enum Class)

    Scope of the state reason

    .. data:: member_reason = 0

    	Member applicable reason

    .. data:: bundle_reason = 1

    	Bundle applicable reason

    """

    member_reason = Enum.YLeaf(0, "member-reason")

    bundle_reason = Enum.YLeaf(1, "bundle-reason")


class BmWhichSystem(Enum):
    """
    BmWhichSystem (Enum Class)

    Bm which system

    .. data:: bm_which_system_actr = 0

    	Actor

    .. data:: bm_which_system_ptnr = 1

    	Partner

    """

    bm_which_system_actr = Enum.YLeaf(0, "bm-which-system-actr")

    bm_which_system_ptnr = Enum.YLeaf(1, "bm-which-system-ptnr")


class BmdBagEventBdlItem(Enum):
    """
    BmdBagEventBdlItem (Enum Class)

    Description of an event for a bundle

    .. data:: bmd_event_bdl_idb_create = 0

    	Bundle structure created

    .. data:: bmd_event_bdl_configured = 1

    	Bundle configured by user

    .. data:: bmd_event_bdl_im_state = 2

    	Bundle's IM state changed

    .. data:: bmd_event_bdl_mbr_added = 3

    	Member added to the bundle

    .. data:: bmd_event_bdl_mbr_deleted = 4

    	Member removed from the bundle

    .. data:: bmd_event_bdl_mac_addr = 5

    	Bundle's MAC address changed

    .. data:: bmd_event_bdl_first_retry = 6

    	First retry

    .. data:: bmd_event_bdl_user_config = 7

    	User changed the configuration

    .. data:: bmd_event_bdl_error = 8

    	Last error

    .. data:: bmd_event_bdl_mlacp_tlv = 9

    	mLACP TLV received

    .. data:: bmd_event_bdl_redundancy_role = 10

    	redundancy role change

    .. data:: bdl_bfd_state_change = 11

    	BFD state change

    .. data:: bmd_event_bdl_icl = 12

    	Inter-chassis link mode changed

    .. data:: bmd_event_bdl_count = 13

    	Number of bundle events

    """

    bmd_event_bdl_idb_create = Enum.YLeaf(0, "bmd-event-bdl-idb-create")

    bmd_event_bdl_configured = Enum.YLeaf(1, "bmd-event-bdl-configured")

    bmd_event_bdl_im_state = Enum.YLeaf(2, "bmd-event-bdl-im-state")

    bmd_event_bdl_mbr_added = Enum.YLeaf(3, "bmd-event-bdl-mbr-added")

    bmd_event_bdl_mbr_deleted = Enum.YLeaf(4, "bmd-event-bdl-mbr-deleted")

    bmd_event_bdl_mac_addr = Enum.YLeaf(5, "bmd-event-bdl-mac-addr")

    bmd_event_bdl_first_retry = Enum.YLeaf(6, "bmd-event-bdl-first-retry")

    bmd_event_bdl_user_config = Enum.YLeaf(7, "bmd-event-bdl-user-config")

    bmd_event_bdl_error = Enum.YLeaf(8, "bmd-event-bdl-error")

    bmd_event_bdl_mlacp_tlv = Enum.YLeaf(9, "bmd-event-bdl-mlacp-tlv")

    bmd_event_bdl_redundancy_role = Enum.YLeaf(10, "bmd-event-bdl-redundancy-role")

    bdl_bfd_state_change = Enum.YLeaf(11, "bdl-bfd-state-change")

    bmd_event_bdl_icl = Enum.YLeaf(12, "bmd-event-bdl-icl")

    bmd_event_bdl_count = Enum.YLeaf(13, "bmd-event-bdl-count")


class BmdBagEventData(Enum):
    """
    BmdBagEventData (Enum Class)

    Type of additional info for an event

    .. data:: bmd_bag_evt_data_none = 0

    	No additional data

    .. data:: bmd_bag_evt_data_error = 1

    	Additional data is an error code

    .. data:: bmd_bag_evt_data_string = 2

    	Additional data is a string

    """

    bmd_bag_evt_data_none = Enum.YLeaf(0, "bmd-bag-evt-data-none")

    bmd_bag_evt_data_error = Enum.YLeaf(1, "bmd-bag-evt-data-error")

    bmd_bag_evt_data_string = Enum.YLeaf(2, "bmd-bag-evt-data-string")


class BmdBagEventMbrItem(Enum):
    """
    BmdBagEventMbrItem (Enum Class)

    Description of an event for a member

    .. data:: bmd_event_mbr_idb_create = 0

    	Member structure created

    .. data:: bmd_event_mbr_bdl_add = 1

    	Added to bundle

    .. data:: bmd_event_mbr_im_state = 2

    	Member's IM state changed

    .. data:: bmd_event_mbr_sel_logic = 3

    	Sel logic state changed

    .. data:: bmd_event_mbr_mux = 4

    	Mux state changed

    .. data:: bmd_event_mbr_bfd = 5

    	BFD state changed

    .. data:: bmd_event_mbr_expired = 6

    	Expired

    .. data:: bmd_event_mbr_defaulted = 7

    	Defaulted

    .. data:: bmd_event_mbr_first_retry = 8

    	First retry

    .. data:: bmd_event_mbr_msg = 9

    	Message from BML

    .. data:: bmd_event_mbr_error = 10

    	Last error

    .. data:: bmd_event_mbr_mlacp_tlv = 11

    	mLACP TLV received

    .. data:: bmd_event_mbr_redundancy_role = 12

    	redundancy role change

    .. data:: bmd_event_mbr_count = 13

    	Number of member events

    """

    bmd_event_mbr_idb_create = Enum.YLeaf(0, "bmd-event-mbr-idb-create")

    bmd_event_mbr_bdl_add = Enum.YLeaf(1, "bmd-event-mbr-bdl-add")

    bmd_event_mbr_im_state = Enum.YLeaf(2, "bmd-event-mbr-im-state")

    bmd_event_mbr_sel_logic = Enum.YLeaf(3, "bmd-event-mbr-sel-logic")

    bmd_event_mbr_mux = Enum.YLeaf(4, "bmd-event-mbr-mux")

    bmd_event_mbr_bfd = Enum.YLeaf(5, "bmd-event-mbr-bfd")

    bmd_event_mbr_expired = Enum.YLeaf(6, "bmd-event-mbr-expired")

    bmd_event_mbr_defaulted = Enum.YLeaf(7, "bmd-event-mbr-defaulted")

    bmd_event_mbr_first_retry = Enum.YLeaf(8, "bmd-event-mbr-first-retry")

    bmd_event_mbr_msg = Enum.YLeaf(9, "bmd-event-mbr-msg")

    bmd_event_mbr_error = Enum.YLeaf(10, "bmd-event-mbr-error")

    bmd_event_mbr_mlacp_tlv = Enum.YLeaf(11, "bmd-event-mbr-mlacp-tlv")

    bmd_event_mbr_redundancy_role = Enum.YLeaf(12, "bmd-event-mbr-redundancy-role")

    bmd_event_mbr_count = Enum.YLeaf(13, "bmd-event-mbr-count")


class BmdBagEventRgItem(Enum):
    """
    BmdBagEventRgItem (Enum Class)

    Description of an event for a RG

    .. data:: bmd_event_rg_idb_create = 0

    	RG structure created

    .. data:: bmd_event_rg_configured = 1

    	RG configured by user

    .. data:: bmd_event_rg_user_config = 2

    	User changed the configuration

    .. data:: bmd_event_rg_connect_ion = 3

    	Connection to peer

    .. data:: bmd_event_rg_data = 4

    	Data received

    .. data:: bmd_event_rg_sync = 5

    	Sync performed

    .. data:: bmd_event_rg_first_retry = 6

    	First retry

    .. data:: bmd_event_rg_error = 7

    	Last error

    .. data:: bmd_event_rg_mlacp_tlv = 8

    	mLACP TLV received

    .. data:: bmd_event_rg_iccp_event = 9

    	ICCP event received

    .. data:: bmd_event_rg_count = 10

    	Number of RG events

    """

    bmd_event_rg_idb_create = Enum.YLeaf(0, "bmd-event-rg-idb-create")

    bmd_event_rg_configured = Enum.YLeaf(1, "bmd-event-rg-configured")

    bmd_event_rg_user_config = Enum.YLeaf(2, "bmd-event-rg-user-config")

    bmd_event_rg_connect_ion = Enum.YLeaf(3, "bmd-event-rg-connect-ion")

    bmd_event_rg_data = Enum.YLeaf(4, "bmd-event-rg-data")

    bmd_event_rg_sync = Enum.YLeaf(5, "bmd-event-rg-sync")

    bmd_event_rg_first_retry = Enum.YLeaf(6, "bmd-event-rg-first-retry")

    bmd_event_rg_error = Enum.YLeaf(7, "bmd-event-rg-error")

    bmd_event_rg_mlacp_tlv = Enum.YLeaf(8, "bmd-event-rg-mlacp-tlv")

    bmd_event_rg_iccp_event = Enum.YLeaf(9, "bmd-event-rg-iccp-event")

    bmd_event_rg_count = Enum.YLeaf(10, "bmd-event-rg-count")


class BmdBagMlacpSchActionItem(Enum):
    """
    BmdBagMlacpSchActionItem (Enum Class)

    Description of scheduled actions for a bundle

    .. data:: switchover = 0

    	mLACP Switchover scheduled

    .. data:: switchback = 1

    	mLACP Switchback scheduled

    """

    switchover = Enum.YLeaf(0, "switchover")

    switchback = Enum.YLeaf(1, "switchback")


class BmdBagTarget(Enum):
    """
    BmdBagTarget (Enum Class)

    Scope of information

    .. data:: bm_bag_target_mbr = 0

    	Information for a member

    .. data:: bm_bag_target_bdl = 1

    	Information for a bundle

    .. data:: bm_bag_target_node = 2

    	Information for a node

    .. data:: bm_bag_target_rg = 3

    	Information for an RG

    """

    bm_bag_target_mbr = Enum.YLeaf(0, "bm-bag-target-mbr")

    bm_bag_target_bdl = Enum.YLeaf(1, "bm-bag-target-bdl")

    bm_bag_target_node = Enum.YLeaf(2, "bm-bag-target-node")

    bm_bag_target_rg = Enum.YLeaf(3, "bm-bag-target-rg")


class BmdBfdBdlState(Enum):
    """
    BmdBfdBdlState (Enum Class)

    Bmd bfd bdl state

    .. data:: bmd_bfd_bdl_down = 0

    	BFD is down on the bundle

    .. data:: bmd_bfd_bdl_unknown = 1

    	BFD has just started on a bundle, and the state

    	has not been determined

    .. data:: bmd_bfd_bdl_up = 2

    	BFD is up on the bundle

    .. data:: bmd_bfd_bdl_count = 3

    	Number of BFD states on a bundle

    """

    bmd_bfd_bdl_down = Enum.YLeaf(0, "bmd-bfd-bdl-down")

    bmd_bfd_bdl_unknown = Enum.YLeaf(1, "bmd-bfd-bdl-unknown")

    bmd_bfd_bdl_up = Enum.YLeaf(2, "bmd-bfd-bdl-up")

    bmd_bfd_bdl_count = Enum.YLeaf(3, "bmd-bfd-bdl-count")


class BmdMemberState(Enum):
    """
    BmdMemberState (Enum Class)

    Bmd member state

    .. data:: bmd_mbr_state_configured = 1

    	Member is configured

    .. data:: bmd_mbr_state_standby = 2

    	Member is standby

    .. data:: bmd_mbr_state_hot_standby = 3

    	Member is hot standby

    .. data:: bmd_mbr_state_negotiating = 4

    	Member is negotiating

    .. data:: bmd_mbr_state_bfd_running = 5

    	Member has a BFD session running

    .. data:: bmd_mbr_state_active = 6

    	Member is active

    """

    bmd_mbr_state_configured = Enum.YLeaf(1, "bmd-mbr-state-configured")

    bmd_mbr_state_standby = Enum.YLeaf(2, "bmd-mbr-state-standby")

    bmd_mbr_state_hot_standby = Enum.YLeaf(3, "bmd-mbr-state-hot-standby")

    bmd_mbr_state_negotiating = Enum.YLeaf(4, "bmd-mbr-state-negotiating")

    bmd_mbr_state_bfd_running = Enum.YLeaf(5, "bmd-mbr-state-bfd-running")

    bmd_mbr_state_active = Enum.YLeaf(6, "bmd-mbr-state-active")


class BmdMemberTypeEnum(Enum):
    """
    BmdMemberTypeEnum (Enum Class)

    Bmd member type enum

    .. data:: bmd_mbr_local = 0

    	Member has been configured on the local device

    .. data:: bmd_mbr_foreign = 1

    	Member has been configured on an mLACP peer

    	device

    .. data:: bmd_mbr_unknown = 2

    	Member's type is unknown

    """

    bmd_mbr_local = Enum.YLeaf(0, "bmd-mbr-local")

    bmd_mbr_foreign = Enum.YLeaf(1, "bmd-mbr-foreign")

    bmd_mbr_unknown = Enum.YLeaf(2, "bmd-mbr-unknown")


class BmdMlacpBdlStateEnum(Enum):
    """
    BmdMlacpBdlStateEnum (Enum Class)

    State of an mLACP device

    .. data:: bdl_state_nak = 0

    	Bundle info NAK'd

    .. data:: bdl_state_unknown = 1

    	No bundle state TLV received

    .. data:: bdl_state_no_sync = 2

    	No bundle config TLV with sync bit set received

    .. data:: bdl_state_rec_delay = 3

    	Revertive delay timer running

    .. data:: bdl_state_up = 4

    	Bundle is up

    .. data:: bdl_state_down = 5

    	Bundle is down

    .. data:: bdl_state_admin_down = 6

    	Bundle is admin down

    .. data:: bdl_state_test = 7

    	Bundle state TLV reported test

    .. data:: bdl_state_error = 8

    	Bundle state TLV reported error

    """

    bdl_state_nak = Enum.YLeaf(0, "bdl-state-nak")

    bdl_state_unknown = Enum.YLeaf(1, "bdl-state-unknown")

    bdl_state_no_sync = Enum.YLeaf(2, "bdl-state-no-sync")

    bdl_state_rec_delay = Enum.YLeaf(3, "bdl-state-rec-delay")

    bdl_state_up = Enum.YLeaf(4, "bdl-state-up")

    bdl_state_down = Enum.YLeaf(5, "bdl-state-down")

    bdl_state_admin_down = Enum.YLeaf(6, "bdl-state-admin-down")

    bdl_state_test = Enum.YLeaf(7, "bdl-state-test")

    bdl_state_error = Enum.YLeaf(8, "bdl-state-error")


class BmdMlacpMbrStateEnum(Enum):
    """
    BmdMlacpMbrStateEnum (Enum Class)

    State of an mLACP device

    .. data:: mbr_state_nak = 0

    	Member info NAK'd

    .. data:: mbr_state_unknown = 1

    	No member state TLV received

    .. data:: mbr_state_up = 2

    	Member is up

    .. data:: mbr_state_down = 3

    	Member is down

    .. data:: mbr_state_admin_down = 4

    	Member is admin down

    .. data:: mbr_state_test = 5

    	Member state TLV reported test

    .. data:: mbr_state_error = 6

    	Member state TLV reported error

    """

    mbr_state_nak = Enum.YLeaf(0, "mbr-state-nak")

    mbr_state_unknown = Enum.YLeaf(1, "mbr-state-unknown")

    mbr_state_up = Enum.YLeaf(2, "mbr-state-up")

    mbr_state_down = Enum.YLeaf(3, "mbr-state-down")

    mbr_state_admin_down = Enum.YLeaf(4, "mbr-state-admin-down")

    mbr_state_test = Enum.YLeaf(5, "mbr-state-test")

    mbr_state_error = Enum.YLeaf(6, "mbr-state-error")


class BmdMlacpNodeStateEnum(Enum):
    """
    BmdMlacpNodeStateEnum (Enum Class)

    State of an mLACP device

    .. data:: node_state_incomplete = 0

    	Missing some mLACP IG config

    .. data:: node_state_conn_rejected = 1

    	Connection rejected by peer

    .. data:: node_state_connect_sent = 2

    	Connect timer running

    .. data:: node_state_unconfigured = 3

    	Missing some ICCP IG config

    .. data:: node_state_unreachable = 4

    	ICCP declared peer node unreachable

    .. data:: node_state_iccp_down = 5

    	ICCP declared peer node down

    .. data:: node_state_nak = 6

    	System info NAK'd

    .. data:: node_state_unknown = 7

    	No system state TLV received

    .. data:: node_state_mlacp_down = 8

    	System state TLV reported down

    .. data:: node_state_admin_down = 9

    	System state TLV reported admin down

    .. data:: node_state_pe_isolated = 10

    	System is isolated from core network

    .. data:: node_state_error = 11

    	System state TLV reported error

    .. data:: node_state_test = 12

    	System state TLV reported test

    .. data:: node_state_up = 13

    	System is up

    """

    node_state_incomplete = Enum.YLeaf(0, "node-state-incomplete")

    node_state_conn_rejected = Enum.YLeaf(1, "node-state-conn-rejected")

    node_state_connect_sent = Enum.YLeaf(2, "node-state-connect-sent")

    node_state_unconfigured = Enum.YLeaf(3, "node-state-unconfigured")

    node_state_unreachable = Enum.YLeaf(4, "node-state-unreachable")

    node_state_iccp_down = Enum.YLeaf(5, "node-state-iccp-down")

    node_state_nak = Enum.YLeaf(6, "node-state-nak")

    node_state_unknown = Enum.YLeaf(7, "node-state-unknown")

    node_state_mlacp_down = Enum.YLeaf(8, "node-state-mlacp-down")

    node_state_admin_down = Enum.YLeaf(9, "node-state-admin-down")

    node_state_pe_isolated = Enum.YLeaf(10, "node-state-pe-isolated")

    node_state_error = Enum.YLeaf(11, "node-state-error")

    node_state_test = Enum.YLeaf(12, "node-state-test")

    node_state_up = Enum.YLeaf(13, "node-state-up")


class BmdMlacpNodeSyncEnum(Enum):
    """
    BmdMlacpNodeSyncEnum (Enum Class)

    Synchronization states of an mLACP device

    .. data:: node_sync_req = 0

    	Sync requested of device

    .. data:: node_sync_done = 1

    	Sync performed by device

    .. data:: node_sync_start = 2

    	Sync in progress from device

    .. data:: node_sync_init = 3

    	Initial sync pending from device

    .. data:: node_sync_singleton = 4

    	Sync not required for singleton groups

    """

    node_sync_req = Enum.YLeaf(0, "node-sync-req")

    node_sync_done = Enum.YLeaf(1, "node-sync-done")

    node_sync_start = Enum.YLeaf(2, "node-sync-start")

    node_sync_init = Enum.YLeaf(3, "node-sync-init")

    node_sync_singleton = Enum.YLeaf(4, "node-sync-singleton")


class BmdMlacpSwitchover(Enum):
    """
    BmdMlacpSwitchover (Enum Class)

    Bmd mlacp switchover

    .. data:: bmd_mlacp_switchover_nonrevertive = 0

    	Non-revertive switchover type

    .. data:: bmd_mlacp_switchover_brute_force = 1

    	Brute force switchover type

    .. data:: bmd_mlacp_switchover_revertive = 2

    	Revertive switchover type

    .. data:: bmd_mlacp_switchover_count = 3

    	Number of switchover types

    """

    bmd_mlacp_switchover_nonrevertive = Enum.YLeaf(0, "bmd-mlacp-switchover-nonrevertive")

    bmd_mlacp_switchover_brute_force = Enum.YLeaf(1, "bmd-mlacp-switchover-brute-force")

    bmd_mlacp_switchover_revertive = Enum.YLeaf(2, "bmd-mlacp-switchover-revertive")

    bmd_mlacp_switchover_count = Enum.YLeaf(3, "bmd-mlacp-switchover-count")


class BmdSwitchReason(Enum):
    """
    BmdSwitchReason (Enum Class)

    Bmd switch reason

    .. data:: bm_switch_reason_none = 0

    	Switch is permitted

    .. data:: bm_switch_reason_noop = 1

    	Switch has no effect

    .. data:: bm_switch_reason_not_mlacp = 2

    	mLACP not configured

    .. data:: bm_switch_reason_revertive = 3

    	Brute-force or revertive switchover is in

    	effect

    .. data:: bm_switch_reason_bdl_down = 4

    	Would-be active bundle is not ready

    .. data:: bm_switch_reason_recovery = 5

    	Recovery delay in effect, applications may not

    	be fully synced

    .. data:: bm_switch_reason_preceding_error = 6

    	Preceding switch action not viable

    .. data:: bm_switch_reason_wrong_order = 7

    	Switch actions are scheduled incorrectly

    .. data:: bm_switch_reason_singleton = 8

    	The ICCP group is operating in singleton mode

    """

    bm_switch_reason_none = Enum.YLeaf(0, "bm-switch-reason-none")

    bm_switch_reason_noop = Enum.YLeaf(1, "bm-switch-reason-noop")

    bm_switch_reason_not_mlacp = Enum.YLeaf(2, "bm-switch-reason-not-mlacp")

    bm_switch_reason_revertive = Enum.YLeaf(3, "bm-switch-reason-revertive")

    bm_switch_reason_bdl_down = Enum.YLeaf(4, "bm-switch-reason-bdl-down")

    bm_switch_reason_recovery = Enum.YLeaf(5, "bm-switch-reason-recovery")

    bm_switch_reason_preceding_error = Enum.YLeaf(6, "bm-switch-reason-preceding-error")

    bm_switch_reason_wrong_order = Enum.YLeaf(7, "bm-switch-reason-wrong-order")

    bm_switch_reason_singleton = Enum.YLeaf(8, "bm-switch-reason-singleton")


class BundleMedia(Enum):
    """
    BundleMedia (Enum Class)

    Bundle media

    .. data:: bundle_media_ethernet = 0

    	bundle media ethernet

    .. data:: bundle_media_pos = 1

    	bundle media pos

    .. data:: bundle_media_count = 2

    	bundle media count

    """

    bundle_media_ethernet = Enum.YLeaf(0, "bundle-media-ethernet")

    bundle_media_pos = Enum.YLeaf(1, "bundle-media-pos")

    bundle_media_count = Enum.YLeaf(2, "bundle-media-count")


class BundleMedia1(Enum):
    """
    BundleMedia1 (Enum Class)

    Bundle media1

    .. data:: ethernet = 0

    	Ethernet

    .. data:: pos = 1

    	POS

    """

    ethernet = Enum.YLeaf(0, "ethernet")

    pos = Enum.YLeaf(1, "pos")


class BundleMlacpMode(Enum):
    """
    BundleMlacpMode (Enum Class)

    Bundle mlacp mode

    .. data:: bundle_mlacp_mode_standby = 0

    	bundle mlacp mode standby

    .. data:: bundle_mlacp_mode_active = 1

    	bundle mlacp mode active

    .. data:: bundle_mlacp_mode_count = 2

    	bundle mlacp mode count

    """

    bundle_mlacp_mode_standby = Enum.YLeaf(0, "bundle-mlacp-mode-standby")

    bundle_mlacp_mode_active = Enum.YLeaf(1, "bundle-mlacp-mode-active")

    bundle_mlacp_mode_count = Enum.YLeaf(2, "bundle-mlacp-mode-count")


class LacpChurnstates(Enum):
    """
    LacpChurnstates (Enum Class)

    Lacp churnstates

    .. data:: no_churn = 1

    	The port is synchronized correctly

    .. data:: churn = 2

    	The port is OutOfSync and the churn timer has

    	expired

    .. data:: churn_monitor = 3

    	The port is OutOfSync but the churn timer has

    	not expired

    """

    no_churn = Enum.YLeaf(1, "no-churn")

    churn = Enum.YLeaf(2, "churn")

    churn_monitor = Enum.YLeaf(3, "churn-monitor")


class LacpPeriodState(Enum):
    """
    LacpPeriodState (Enum Class)

    Lacp period state

    .. data:: period_s_low = 0

    	Packets are being sent using a long period

    .. data:: period_fast = 1

    	Packets are being sent using a short period

    .. data:: period_none = 2

    	Packets are not being sent

    """

    period_s_low = Enum.YLeaf(0, "period-s-low")

    period_fast = Enum.YLeaf(1, "period-fast")

    period_none = Enum.YLeaf(2, "period-none")


class LacpSelState(Enum):
    """
    LacpSelState (Enum Class)

    Lacp sel state

    .. data:: unselected = 0

    	The link is Unselected

    .. data:: standby = 1

    	The link is Standby

    .. data:: selected = 2

    	The link is Selected

    """

    unselected = Enum.YLeaf(0, "unselected")

    standby = Enum.YLeaf(1, "standby")

    selected = Enum.YLeaf(2, "selected")


class LoadBalance(Enum):
    """
    LoadBalance (Enum Class)

    Load balance

    .. data:: default = 0

    	Default

    .. data:: auto = 1

    	Auto

    .. data:: value = 2

    	Value

    .. data:: source_ip = 3

    	Source IP

    .. data:: destination_ip = 4

    	Destination IP

    .. data:: unknown = 5

    	Unknown

    """

    default = Enum.YLeaf(0, "default")

    auto = Enum.YLeaf(1, "auto")

    value = Enum.YLeaf(2, "value")

    source_ip = Enum.YLeaf(3, "source-ip")

    destination_ip = Enum.YLeaf(4, "destination-ip")

    unknown = Enum.YLeaf(5, "unknown")


class Rxstates(Enum):
    """
    Rxstates (Enum Class)

    Rxstates

    .. data:: current_rx = 1

    	current rx

    .. data:: expired = 2

    	expired

    .. data:: defaulted = 3

    	defaulted

    .. data:: initialize = 4

    	initialize

    .. data:: lacp_disabled = 5

    	lacp disabled

    .. data:: port_disabled = 6

    	port disabled

    """

    current_rx = Enum.YLeaf(1, "current-rx")

    expired = Enum.YLeaf(2, "expired")

    defaulted = Enum.YLeaf(3, "defaulted")

    initialize = Enum.YLeaf(4, "initialize")

    lacp_disabled = Enum.YLeaf(5, "lacp-disabled")

    port_disabled = Enum.YLeaf(6, "port-disabled")



class LacpBundles(Entity):
    """
    LACP bundle data
    
    .. attribute:: bundles
    
    	LACP bundle data
    	**type**\:  :py:class:`Bundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles>`
    
    

    """

    _prefix = 'bundlemgr-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(LacpBundles, self).__init__()
        self._top_entity = None

        self.yang_name = "lacp-bundles"
        self.yang_parent_name = "Cisco-IOS-XR-bundlemgr-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("bundles", ("bundles", LacpBundles.Bundles))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.bundles = LacpBundles.Bundles()
        self.bundles.parent = self
        self._children_name_map["bundles"] = "bundles"
        self._children_yang_names.add("bundles")
        self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-bundles"


    class Bundles(Entity):
        """
        LACP bundle data
        
        .. attribute:: bundle
        
        	LACP Bundle interface
        	**type**\: list of  		 :py:class:`Bundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(LacpBundles.Bundles, self).__init__()

            self.yang_name = "bundles"
            self.yang_parent_name = "lacp-bundles"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("bundle", ("bundle", LacpBundles.Bundles.Bundle))])
            self._leafs = OrderedDict()

            self.bundle = YList(self)
            self._segment_path = lambda: "bundles"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-bundles/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(LacpBundles.Bundles, [], name, value)


        class Bundle(Entity):
            """
            LACP Bundle interface
            
            .. attribute:: bundle_interface  (key)
            
            	LACP Bundle interface
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: data
            
            	Data for each Bundle
            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Data>`
            
            .. attribute:: members
            
            	LACP Member interface
            	**type**\:  :py:class:`Members <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Members>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(LacpBundles.Bundles.Bundle, self).__init__()

                self.yang_name = "bundle"
                self.yang_parent_name = "bundles"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['bundle_interface']
                self._child_container_classes = OrderedDict([("data", ("data", LacpBundles.Bundles.Bundle.Data)), ("members", ("members", LacpBundles.Bundles.Bundle.Members))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                ])
                self.bundle_interface = None

                self.data = LacpBundles.Bundles.Bundle.Data()
                self.data.parent = self
                self._children_name_map["data"] = "data"
                self._children_yang_names.add("data")

                self.members = LacpBundles.Bundles.Bundle.Members()
                self.members.parent = self
                self._children_name_map["members"] = "members"
                self._children_yang_names.add("members")
                self._segment_path = lambda: "bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-bundles/bundles/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(LacpBundles.Bundles.Bundle, ['bundle_interface'], name, value)


            class Data(Entity):
                """
                Data for each Bundle
                
                .. attribute:: actor_bundle_data
                
                	Basic bundle information
                	**type**\:  :py:class:`ActorBundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Data.ActorBundleData>`
                
                .. attribute:: bundle_system_id
                
                	System ID for the bundle
                	**type**\:  :py:class:`BundleSystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Data.BundleSystemId>`
                
                .. attribute:: actor_operational_key
                
                	Operational key of the interface
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: partner_system_priority
                
                	Priority of the partner system
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: partner_system_mac_address
                
                	MAC Address used to identify the partner system
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: partner_operational_key
                
                	Operational key of the partner
                	**type**\: int
                
                	**range:** 0..65535
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(LacpBundles.Bundles.Bundle.Data, self).__init__()

                    self.yang_name = "data"
                    self.yang_parent_name = "bundle"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("actor-bundle-data", ("actor_bundle_data", LacpBundles.Bundles.Bundle.Data.ActorBundleData)), ("bundle-system-id", ("bundle_system_id", LacpBundles.Bundles.Bundle.Data.BundleSystemId))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                        ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                        ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                        ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                    ])
                    self.actor_operational_key = None
                    self.partner_system_priority = None
                    self.partner_system_mac_address = None
                    self.partner_operational_key = None

                    self.actor_bundle_data = LacpBundles.Bundles.Bundle.Data.ActorBundleData()
                    self.actor_bundle_data.parent = self
                    self._children_name_map["actor_bundle_data"] = "actor-bundle-data"
                    self._children_yang_names.add("actor-bundle-data")

                    self.bundle_system_id = LacpBundles.Bundles.Bundle.Data.BundleSystemId()
                    self.bundle_system_id.parent = self
                    self._children_name_map["bundle_system_id"] = "bundle-system-id"
                    self._children_yang_names.add("bundle-system-id")
                    self._segment_path = lambda: "data"

                def __setattr__(self, name, value):
                    self._perform_setattr(LacpBundles.Bundles.Bundle.Data, ['actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key'], name, value)


                class ActorBundleData(Entity):
                    """
                    Basic bundle information
                    
                    .. attribute:: mac_address
                    
                    	MAC address of this member
                    	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Data.ActorBundleData.MacAddress>`
                    
                    .. attribute:: bundle_interface_name
                    
                    	Bundle interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: available_bandwidth
                    
                    	Bandwidth available to the bundle interface (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: effective_bandwidth
                    
                    	Effective bandwidth on the bundle interface (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: configured_bandwidth
                    
                    	Bandwidth configured on the bundle interface (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: minimum_active_links
                    
                    	Minimum number of active links for bundle to go up
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: maximum_active_links
                    
                    	Maximum number of active links in the bundle
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: maximum_active_links_source
                    
                    	Source of maximum active links value
                    	**type**\:  :py:class:`BmWhichSystem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmWhichSystem>`
                    
                    .. attribute:: minimum_bandwidth
                    
                    	Minimum bundle bandwidth for bundle to go up (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: primary_member
                    
                    	Primary bundle member (no longer applicable)
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: bundle_status
                    
                    	The state of the bundle
                    	**type**\:  :py:class:`BmBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlState>`
                    
                    .. attribute:: active_member_count
                    
                    	The number of active local members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: standby_member_count
                    
                    	The number of standby local members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: configured_member_count
                    
                    	The number of configured local members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: mac_source
                    
                    	The source of the MAC Address
                    	**type**\:  :py:class:`BmBdlMacSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlMacSource>`
                    
                    .. attribute:: mac_source_member
                    
                    	The name of the member that supplied the MAC address
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: inter_chassis
                    
                    	Indicates if this bundle is operating as an inter\-chassis link (1 = I\-C link, 0 = normal)
                    	**type**\: bool
                    
                    .. attribute:: is_active
                    
                    	Indicates the active/standby redundancy state of the device for the bundle
                    	**type**\: bool
                    
                    .. attribute:: lacp_status
                    
                    	The status of the LACP feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: mlacp_status
                    
                    	The status of the mLACP feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: ipv4bfd_status
                    
                    	The status of the BFD (IPv4) feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: link_order_status
                    
                    	The status of the link order signaling feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: ipv6bfd_status
                    
                    	The status of the BFD (IPv6) feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: load_balance_hash_type
                    
                    	The type of hash to use for load balancing
                    	**type**\: str
                    
                    .. attribute:: load_balance_locality_threshold
                    
                    	The number of links required per rack for localized load balancing
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: suppression_timer
                    
                    	Timer for suppressing bundle state flaps
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: wait_while_timer
                    
                    	The wait while time used for member ports
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: collector_max_delay
                    
                    	Collector Max Delay
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: cisco_extensions
                    
                    	The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled)
                    	**type**\: bool
                    
                    .. attribute:: lacp_nonrevertive
                    
                    	The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled)
                    	**type**\: bool
                    
                    .. attribute:: iccp_group_id
                    
                    	ICCP Group that the bundle is configured to
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: active_foreign_member_count
                    
                    	The number of active foreign members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: configured_foreign_member_count
                    
                    	The number of configured local members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: switchover_type
                    
                    	How a switchover of the bundle from this device will occur
                    	**type**\:  :py:class:`BmdMlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpSwitchover>`
                    
                    .. attribute:: maximize_threshold_value_links
                    
                    	Attempt to maximize the bundle if links are below this value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: maximize_threshold_value_band_width
                    
                    	Attempt to maximize the bundle if bandwidth is below this value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: mlacp_mode
                    
                    	Indicates the mode of the device for the bundle
                    	**type**\:  :py:class:`BundleMlacpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMlacpMode>`
                    
                    .. attribute:: recovery_delay
                    
                    	Number of seconds to wait before becoming active after recovering from a failure
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**units**\: second
                    
                    .. attribute:: singleton
                    
                    	Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not singleton)
                    	**type**\: bool
                    
                    .. attribute:: bfd_config
                    
                    	Configuration values for BFD on bundle members
                    	**type**\: list of  		 :py:class:`BfdConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Data.ActorBundleData.BfdConfig>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(LacpBundles.Bundles.Bundle.Data.ActorBundleData, self).__init__()

                        self.yang_name = "actor-bundle-data"
                        self.yang_parent_name = "data"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("mac-address", ("mac_address", LacpBundles.Bundles.Bundle.Data.ActorBundleData.MacAddress))])
                        self._child_list_classes = OrderedDict([("bfd-config", ("bfd_config", LacpBundles.Bundles.Bundle.Data.ActorBundleData.BfdConfig))])
                        self._leafs = OrderedDict([
                            ('bundle_interface_name', YLeaf(YType.str, 'bundle-interface-name')),
                            ('available_bandwidth', YLeaf(YType.uint32, 'available-bandwidth')),
                            ('effective_bandwidth', YLeaf(YType.uint32, 'effective-bandwidth')),
                            ('configured_bandwidth', YLeaf(YType.uint32, 'configured-bandwidth')),
                            ('minimum_active_links', YLeaf(YType.uint8, 'minimum-active-links')),
                            ('maximum_active_links', YLeaf(YType.uint8, 'maximum-active-links')),
                            ('maximum_active_links_source', YLeaf(YType.enumeration, 'maximum-active-links-source')),
                            ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                            ('primary_member', YLeaf(YType.str, 'primary-member')),
                            ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                            ('active_member_count', YLeaf(YType.uint16, 'active-member-count')),
                            ('standby_member_count', YLeaf(YType.uint16, 'standby-member-count')),
                            ('configured_member_count', YLeaf(YType.uint16, 'configured-member-count')),
                            ('mac_source', YLeaf(YType.enumeration, 'mac-source')),
                            ('mac_source_member', YLeaf(YType.str, 'mac-source-member')),
                            ('inter_chassis', YLeaf(YType.boolean, 'inter-chassis')),
                            ('is_active', YLeaf(YType.boolean, 'is-active')),
                            ('lacp_status', YLeaf(YType.enumeration, 'lacp-status')),
                            ('mlacp_status', YLeaf(YType.enumeration, 'mlacp-status')),
                            ('ipv4bfd_status', YLeaf(YType.enumeration, 'ipv4bfd-status')),
                            ('link_order_status', YLeaf(YType.enumeration, 'link-order-status')),
                            ('ipv6bfd_status', YLeaf(YType.enumeration, 'ipv6bfd-status')),
                            ('load_balance_hash_type', YLeaf(YType.str, 'load-balance-hash-type')),
                            ('load_balance_locality_threshold', YLeaf(YType.uint16, 'load-balance-locality-threshold')),
                            ('suppression_timer', YLeaf(YType.uint16, 'suppression-timer')),
                            ('wait_while_timer', YLeaf(YType.uint16, 'wait-while-timer')),
                            ('collector_max_delay', YLeaf(YType.uint16, 'collector-max-delay')),
                            ('cisco_extensions', YLeaf(YType.boolean, 'cisco-extensions')),
                            ('lacp_nonrevertive', YLeaf(YType.boolean, 'lacp-nonrevertive')),
                            ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                            ('active_foreign_member_count', YLeaf(YType.uint16, 'active-foreign-member-count')),
                            ('configured_foreign_member_count', YLeaf(YType.uint16, 'configured-foreign-member-count')),
                            ('switchover_type', YLeaf(YType.enumeration, 'switchover-type')),
                            ('maximize_threshold_value_links', YLeaf(YType.uint32, 'maximize-threshold-value-links')),
                            ('maximize_threshold_value_band_width', YLeaf(YType.uint32, 'maximize-threshold-value-band-width')),
                            ('mlacp_mode', YLeaf(YType.enumeration, 'mlacp-mode')),
                            ('recovery_delay', YLeaf(YType.uint16, 'recovery-delay')),
                            ('singleton', YLeaf(YType.boolean, 'singleton')),
                        ])
                        self.bundle_interface_name = None
                        self.available_bandwidth = None
                        self.effective_bandwidth = None
                        self.configured_bandwidth = None
                        self.minimum_active_links = None
                        self.maximum_active_links = None
                        self.maximum_active_links_source = None
                        self.minimum_bandwidth = None
                        self.primary_member = None
                        self.bundle_status = None
                        self.active_member_count = None
                        self.standby_member_count = None
                        self.configured_member_count = None
                        self.mac_source = None
                        self.mac_source_member = None
                        self.inter_chassis = None
                        self.is_active = None
                        self.lacp_status = None
                        self.mlacp_status = None
                        self.ipv4bfd_status = None
                        self.link_order_status = None
                        self.ipv6bfd_status = None
                        self.load_balance_hash_type = None
                        self.load_balance_locality_threshold = None
                        self.suppression_timer = None
                        self.wait_while_timer = None
                        self.collector_max_delay = None
                        self.cisco_extensions = None
                        self.lacp_nonrevertive = None
                        self.iccp_group_id = None
                        self.active_foreign_member_count = None
                        self.configured_foreign_member_count = None
                        self.switchover_type = None
                        self.maximize_threshold_value_links = None
                        self.maximize_threshold_value_band_width = None
                        self.mlacp_mode = None
                        self.recovery_delay = None
                        self.singleton = None

                        self.mac_address = LacpBundles.Bundles.Bundle.Data.ActorBundleData.MacAddress()
                        self.mac_address.parent = self
                        self._children_name_map["mac_address"] = "mac-address"
                        self._children_yang_names.add("mac-address")

                        self.bfd_config = YList(self)
                        self._segment_path = lambda: "actor-bundle-data"

                    def __setattr__(self, name, value):
                        self._perform_setattr(LacpBundles.Bundles.Bundle.Data.ActorBundleData, ['bundle_interface_name', 'available_bandwidth', 'effective_bandwidth', 'configured_bandwidth', 'minimum_active_links', 'maximum_active_links', 'maximum_active_links_source', 'minimum_bandwidth', 'primary_member', 'bundle_status', 'active_member_count', 'standby_member_count', 'configured_member_count', 'mac_source', 'mac_source_member', 'inter_chassis', 'is_active', 'lacp_status', 'mlacp_status', 'ipv4bfd_status', 'link_order_status', 'ipv6bfd_status', 'load_balance_hash_type', 'load_balance_locality_threshold', 'suppression_timer', 'wait_while_timer', 'collector_max_delay', 'cisco_extensions', 'lacp_nonrevertive', 'iccp_group_id', 'active_foreign_member_count', 'configured_foreign_member_count', 'switchover_type', 'maximize_threshold_value_links', 'maximize_threshold_value_band_width', 'mlacp_mode', 'recovery_delay', 'singleton'], name, value)


                    class MacAddress(Entity):
                        """
                        MAC address of this member
                        
                        .. attribute:: address
                        
                        	MAC address
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(LacpBundles.Bundles.Bundle.Data.ActorBundleData.MacAddress, self).__init__()

                            self.yang_name = "mac-address"
                            self.yang_parent_name = "actor-bundle-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.str, 'address')),
                            ])
                            self.address = None
                            self._segment_path = lambda: "mac-address"

                        def __setattr__(self, name, value):
                            self._perform_setattr(LacpBundles.Bundles.Bundle.Data.ActorBundleData.MacAddress, ['address'], name, value)


                    class BfdConfig(Entity):
                        """
                        Configuration values for BFD on bundle members
                        
                        .. attribute:: destination_address
                        
                        	Configured destination address for BFD session
                        	**type**\:  :py:class:`DestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Data.ActorBundleData.BfdConfig.DestinationAddress>`
                        
                        .. attribute:: bundle_status
                        
                        	Status of BFD on the bundle
                        	**type**\:  :py:class:`BmdBfdBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBfdBdlState>`
                        
                        .. attribute:: start_timer
                        
                        	Time to wait on session start before declaring DOWN
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: nbr_unconfig_timer
                        
                        	Time to wait on session NBR\_UNCONFIG before declaring DOWN
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: pref_multiplier
                        
                        	Preferred multiplier for the BFD session
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: pref_min_interval
                        
                        	Preferred minimum interval for the BFD session (ms)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: pref_echo_min_interval
                        
                        	Preferred echo minimum interval for the BFD session (ms)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fast_detect
                        
                        	Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled)
                        	**type**\: bool
                        
                        .. attribute:: mode_info
                        
                        	Standard used for per\-member BFD
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(LacpBundles.Bundles.Bundle.Data.ActorBundleData.BfdConfig, self).__init__()

                            self.yang_name = "bfd-config"
                            self.yang_parent_name = "actor-bundle-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("destination-address", ("destination_address", LacpBundles.Bundles.Bundle.Data.ActorBundleData.BfdConfig.DestinationAddress))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                ('start_timer', YLeaf(YType.uint32, 'start-timer')),
                                ('nbr_unconfig_timer', YLeaf(YType.uint32, 'nbr-unconfig-timer')),
                                ('pref_multiplier', YLeaf(YType.uint16, 'pref-multiplier')),
                                ('pref_min_interval', YLeaf(YType.uint32, 'pref-min-interval')),
                                ('pref_echo_min_interval', YLeaf(YType.uint32, 'pref-echo-min-interval')),
                                ('fast_detect', YLeaf(YType.boolean, 'fast-detect')),
                                ('mode_info', YLeaf(YType.uint32, 'mode-info')),
                            ])
                            self.bundle_status = None
                            self.start_timer = None
                            self.nbr_unconfig_timer = None
                            self.pref_multiplier = None
                            self.pref_min_interval = None
                            self.pref_echo_min_interval = None
                            self.fast_detect = None
                            self.mode_info = None

                            self.destination_address = LacpBundles.Bundles.Bundle.Data.ActorBundleData.BfdConfig.DestinationAddress()
                            self.destination_address.parent = self
                            self._children_name_map["destination_address"] = "destination-address"
                            self._children_yang_names.add("destination-address")
                            self._segment_path = lambda: "bfd-config"

                        def __setattr__(self, name, value):
                            self._perform_setattr(LacpBundles.Bundles.Bundle.Data.ActorBundleData.BfdConfig, ['bundle_status', 'start_timer', 'nbr_unconfig_timer', 'pref_multiplier', 'pref_min_interval', 'pref_echo_min_interval', 'fast_detect', 'mode_info'], name, value)


                        class DestinationAddress(Entity):
                            """
                            Configured destination address for BFD session
                            
                            .. attribute:: af
                            
                            	AF
                            	**type**\:  :py:class:`BmAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmAfId>`
                            
                            .. attribute:: ipv4
                            
                            	IPv4 address type
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: ipv6
                            
                            	IPv6 address type
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(LacpBundles.Bundles.Bundle.Data.ActorBundleData.BfdConfig.DestinationAddress, self).__init__()

                                self.yang_name = "destination-address"
                                self.yang_parent_name = "bfd-config"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af', YLeaf(YType.enumeration, 'af')),
                                    ('ipv4', YLeaf(YType.str, 'ipv4')),
                                    ('ipv6', YLeaf(YType.str, 'ipv6')),
                                ])
                                self.af = None
                                self.ipv4 = None
                                self.ipv6 = None
                                self._segment_path = lambda: "destination-address"

                            def __setattr__(self, name, value):
                                self._perform_setattr(LacpBundles.Bundles.Bundle.Data.ActorBundleData.BfdConfig.DestinationAddress, ['af', 'ipv4', 'ipv6'], name, value)


                class BundleSystemId(Entity):
                    """
                    System ID for the bundle
                    
                    .. attribute:: system_mac_addr
                    
                    	MAC Address used to identify the system
                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Data.BundleSystemId.SystemMacAddr>`
                    
                    .. attribute:: system_prio
                    
                    	Priority of the system
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(LacpBundles.Bundles.Bundle.Data.BundleSystemId, self).__init__()

                        self.yang_name = "bundle-system-id"
                        self.yang_parent_name = "data"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", LacpBundles.Bundles.Bundle.Data.BundleSystemId.SystemMacAddr))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                        ])
                        self.system_prio = None

                        self.system_mac_addr = LacpBundles.Bundles.Bundle.Data.BundleSystemId.SystemMacAddr()
                        self.system_mac_addr.parent = self
                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                        self._children_yang_names.add("system-mac-addr")
                        self._segment_path = lambda: "bundle-system-id"

                    def __setattr__(self, name, value):
                        self._perform_setattr(LacpBundles.Bundles.Bundle.Data.BundleSystemId, ['system_prio'], name, value)


                    class SystemMacAddr(Entity):
                        """
                        MAC Address used to identify the system
                        
                        .. attribute:: macaddr
                        
                        	macaddr
                        	**type**\: str
                        
                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(LacpBundles.Bundles.Bundle.Data.BundleSystemId.SystemMacAddr, self).__init__()

                            self.yang_name = "system-mac-addr"
                            self.yang_parent_name = "bundle-system-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                            ])
                            self.macaddr = None
                            self._segment_path = lambda: "system-mac-addr"

                        def __setattr__(self, name, value):
                            self._perform_setattr(LacpBundles.Bundles.Bundle.Data.BundleSystemId.SystemMacAddr, ['macaddr'], name, value)


            class Members(Entity):
                """
                LACP Member interface
                
                .. attribute:: member
                
                	Member information
                	**type**\: list of  		 :py:class:`Member <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Members.Member>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(LacpBundles.Bundles.Bundle.Members, self).__init__()

                    self.yang_name = "members"
                    self.yang_parent_name = "bundle"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("member", ("member", LacpBundles.Bundles.Bundle.Members.Member))])
                    self._leafs = OrderedDict()

                    self.member = YList(self)
                    self._segment_path = lambda: "members"

                def __setattr__(self, name, value):
                    self._perform_setattr(LacpBundles.Bundles.Bundle.Members, [], name, value)


                class Member(Entity):
                    """
                    Member information
                    
                    .. attribute:: member_interface  (key)
                    
                    	Member interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: counters
                    
                    	Counters data about member link
                    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Members.Member.Counters>`
                    
                    .. attribute:: link_data
                    
                    	Lacp data about member link
                    	**type**\:  :py:class:`LinkData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Members.Member.LinkData>`
                    
                    .. attribute:: member_mux_data
                    
                    	Mux state machine data
                    	**type**\:  :py:class:`MemberMuxData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData>`
                    
                    .. attribute:: mac_address
                    
                    	MAC address of this member (deprecated)
                    	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Members.Member.MacAddress>`
                    
                    .. attribute:: interface_name
                    
                    	Member's interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: port_priority
                    
                    	The priority of this member
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: port_number
                    
                    	Member's link number
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: underlying_link_id
                    
                    	Member's underlying link ID
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: link_order_number
                    
                    	Member's link order number
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: iccp_node
                    
                    	Location of member
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bandwidth
                    
                    	Bandwidth of this member (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: lacp_enabled
                    
                    	Boolean indicating LACP enabled or not
                    	**type**\: str
                    
                    .. attribute:: member_type
                    
                    	Member's type (local/foreign)
                    	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                    
                    .. attribute:: member_name
                    
                    	Member's (short form) name
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(LacpBundles.Bundles.Bundle.Members.Member, self).__init__()

                        self.yang_name = "member"
                        self.yang_parent_name = "members"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['member_interface']
                        self._child_container_classes = OrderedDict([("counters", ("counters", LacpBundles.Bundles.Bundle.Members.Member.Counters)), ("link-data", ("link_data", LacpBundles.Bundles.Bundle.Members.Member.LinkData)), ("member-mux-data", ("member_mux_data", LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData)), ("mac-address", ("mac_address", LacpBundles.Bundles.Bundle.Members.Member.MacAddress))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('member_interface', YLeaf(YType.str, 'member-interface')),
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                            ('port_number', YLeaf(YType.uint16, 'port-number')),
                            ('underlying_link_id', YLeaf(YType.uint16, 'underlying-link-id')),
                            ('link_order_number', YLeaf(YType.uint16, 'link-order-number')),
                            ('iccp_node', YLeaf(YType.uint32, 'iccp-node')),
                            ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                            ('lacp_enabled', YLeaf(YType.str, 'lacp-enabled')),
                            ('member_type', YLeaf(YType.enumeration, 'member-type')),
                            ('member_name', YLeaf(YType.str, 'member-name')),
                        ])
                        self.member_interface = None
                        self.interface_name = None
                        self.port_priority = None
                        self.port_number = None
                        self.underlying_link_id = None
                        self.link_order_number = None
                        self.iccp_node = None
                        self.bandwidth = None
                        self.lacp_enabled = None
                        self.member_type = None
                        self.member_name = None

                        self.counters = LacpBundles.Bundles.Bundle.Members.Member.Counters()
                        self.counters.parent = self
                        self._children_name_map["counters"] = "counters"
                        self._children_yang_names.add("counters")

                        self.link_data = LacpBundles.Bundles.Bundle.Members.Member.LinkData()
                        self.link_data.parent = self
                        self._children_name_map["link_data"] = "link-data"
                        self._children_yang_names.add("link-data")

                        self.member_mux_data = LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData()
                        self.member_mux_data.parent = self
                        self._children_name_map["member_mux_data"] = "member-mux-data"
                        self._children_yang_names.add("member-mux-data")

                        self.mac_address = LacpBundles.Bundles.Bundle.Members.Member.MacAddress()
                        self.mac_address.parent = self
                        self._children_name_map["mac_address"] = "mac-address"
                        self._children_yang_names.add("mac-address")
                        self._segment_path = lambda: "member" + "[member-interface='" + str(self.member_interface) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(LacpBundles.Bundles.Bundle.Members.Member, ['member_interface', 'interface_name', 'port_priority', 'port_number', 'underlying_link_id', 'link_order_number', 'iccp_node', 'bandwidth', 'lacp_enabled', 'member_type', 'member_name'], name, value)


                    class Counters(Entity):
                        """
                        Counters data about member link
                        
                        .. attribute:: lacpd_us_received
                        
                        	LACPDUs received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lacpd_us_transmitted
                        
                        	LACPDUs transmitted
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: marker_packets_received
                        
                        	Marker packets received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: marker_responses_transmitted
                        
                        	Marker response packets transmitted
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: illegal_packets_received
                        
                        	Illegal and unknown packets received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: excess_lacpd_us_received
                        
                        	LACPDUs received that exceed the rate limit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: excess_marker_packets_received
                        
                        	Marker packets received that exceed the rate limit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: defaulted
                        
                        	State flag set to Defaulted
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: expired
                        
                        	State flag set to Expired
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_cleared_sec
                        
                        	Last time counters cleared (s) (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_cleared_nsec
                        
                        	Last time counters cleared (nsec) (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(LacpBundles.Bundles.Bundle.Members.Member.Counters, self).__init__()

                            self.yang_name = "counters"
                            self.yang_parent_name = "member"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('lacpd_us_received', YLeaf(YType.uint32, 'lacpd-us-received')),
                                ('lacpd_us_transmitted', YLeaf(YType.uint32, 'lacpd-us-transmitted')),
                                ('marker_packets_received', YLeaf(YType.uint32, 'marker-packets-received')),
                                ('marker_responses_transmitted', YLeaf(YType.uint32, 'marker-responses-transmitted')),
                                ('illegal_packets_received', YLeaf(YType.uint32, 'illegal-packets-received')),
                                ('excess_lacpd_us_received', YLeaf(YType.uint32, 'excess-lacpd-us-received')),
                                ('excess_marker_packets_received', YLeaf(YType.uint32, 'excess-marker-packets-received')),
                                ('defaulted', YLeaf(YType.uint32, 'defaulted')),
                                ('expired', YLeaf(YType.uint32, 'expired')),
                                ('last_cleared_sec', YLeaf(YType.uint32, 'last-cleared-sec')),
                                ('last_cleared_nsec', YLeaf(YType.uint32, 'last-cleared-nsec')),
                            ])
                            self.lacpd_us_received = None
                            self.lacpd_us_transmitted = None
                            self.marker_packets_received = None
                            self.marker_responses_transmitted = None
                            self.illegal_packets_received = None
                            self.excess_lacpd_us_received = None
                            self.excess_marker_packets_received = None
                            self.defaulted = None
                            self.expired = None
                            self.last_cleared_sec = None
                            self.last_cleared_nsec = None
                            self._segment_path = lambda: "counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(LacpBundles.Bundles.Bundle.Members.Member.Counters, ['lacpd_us_received', 'lacpd_us_transmitted', 'marker_packets_received', 'marker_responses_transmitted', 'illegal_packets_received', 'excess_lacpd_us_received', 'excess_marker_packets_received', 'defaulted', 'expired', 'last_cleared_sec', 'last_cleared_nsec'], name, value)


                    class LinkData(Entity):
                        """
                        Lacp data about member link
                        
                        .. attribute:: interface_handle
                        
                        	Member's interface handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: actor_system_priority
                        
                        	System priority of actor system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: actor_system_mac_address
                        
                        	MAC Address of the actor system
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: actor_operational_key
                        
                        	Operational key for this port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_priority
                        
                        	System priority of partner system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_mac_address
                        
                        	MAC Address used to identify the partner system
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: partner_operational_key
                        
                        	Operational key for partner port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: selected_aggregator_id
                        
                        	MIB ifindex of selected bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: attached_aggregator_id
                        
                        	MIB ifindex of attached bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: actor_port_id
                        
                        	Port number of this port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: actor_port_priority
                        
                        	Priority of this port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_port_id
                        
                        	Port number of the partner's port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_port_priority
                        
                        	Priority of the partner's port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: actor_port_state
                        
                        	LACP state of this port
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: partner_port_state
                        
                        	LACP state of the partner's port
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(LacpBundles.Bundles.Bundle.Members.Member.LinkData, self).__init__()

                            self.yang_name = "link-data"
                            self.yang_parent_name = "member"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                ('actor_system_priority', YLeaf(YType.uint16, 'actor-system-priority')),
                                ('actor_system_mac_address', YLeaf(YType.str, 'actor-system-mac-address')),
                                ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                                ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                                ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                                ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                                ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                                ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                                ('actor_port_id', YLeaf(YType.uint16, 'actor-port-id')),
                                ('actor_port_priority', YLeaf(YType.uint16, 'actor-port-priority')),
                                ('partner_port_id', YLeaf(YType.uint16, 'partner-port-id')),
                                ('partner_port_priority', YLeaf(YType.uint16, 'partner-port-priority')),
                                ('actor_port_state', YLeaf(YType.uint8, 'actor-port-state')),
                                ('partner_port_state', YLeaf(YType.uint8, 'partner-port-state')),
                            ])
                            self.interface_handle = None
                            self.actor_system_priority = None
                            self.actor_system_mac_address = None
                            self.actor_operational_key = None
                            self.partner_system_priority = None
                            self.partner_system_mac_address = None
                            self.partner_operational_key = None
                            self.selected_aggregator_id = None
                            self.attached_aggregator_id = None
                            self.actor_port_id = None
                            self.actor_port_priority = None
                            self.partner_port_id = None
                            self.partner_port_priority = None
                            self.actor_port_state = None
                            self.partner_port_state = None
                            self._segment_path = lambda: "link-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(LacpBundles.Bundles.Bundle.Members.Member.LinkData, ['interface_handle', 'actor_system_priority', 'actor_system_mac_address', 'actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key', 'selected_aggregator_id', 'attached_aggregator_id', 'actor_port_id', 'actor_port_priority', 'partner_port_id', 'partner_port_priority', 'actor_port_state', 'partner_port_state'], name, value)


                    class MemberMuxData(Entity):
                        """
                        Mux state machine data
                        
                        .. attribute:: member_mux_state_reason_data
                        
                        	Data regarding the reason for last Mux state change
                        	**type**\:  :py:class:`MemberMuxStateReasonData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData>`
                        
                        .. attribute:: mux_state
                        
                        	Current state of this bundle member
                        	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                        
                        .. attribute:: error
                        
                        	Internal value indicating if an error occurred trying to put a link into the desired state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: member_mux_state_reason
                        
                        	Reason for last Mux state change
                        	**type**\:  :py:class:`BmMbrStateReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMbrStateReason>`
                        
                        .. attribute:: member_state
                        
                        	Current internal state of this bundle member
                        	**type**\:  :py:class:`BmdMemberState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberState>`
                        
                        .. attribute:: mux_state_reason
                        
                        	Reason for last Mux state change (Deprecated)
                        	**type**\:  :py:class:`BmMuxreason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxreason>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData, self).__init__()

                            self.yang_name = "member-mux-data"
                            self.yang_parent_name = "member"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-mux-state-reason-data", ("member_mux_state_reason_data", LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                                ('error', YLeaf(YType.uint32, 'error')),
                                ('member_mux_state_reason', YLeaf(YType.enumeration, 'member-mux-state-reason')),
                                ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                ('mux_state_reason', YLeaf(YType.enumeration, 'mux-state-reason')),
                            ])
                            self.mux_state = None
                            self.error = None
                            self.member_mux_state_reason = None
                            self.member_state = None
                            self.mux_state_reason = None

                            self.member_mux_state_reason_data = LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData()
                            self.member_mux_state_reason_data.parent = self
                            self._children_name_map["member_mux_state_reason_data"] = "member-mux-state-reason-data"
                            self._children_yang_names.add("member-mux-state-reason-data")
                            self._segment_path = lambda: "member-mux-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData, ['mux_state', 'error', 'member_mux_state_reason', 'member_state', 'mux_state_reason'], name, value)


                        class MemberMuxStateReasonData(Entity):
                            """
                            Data regarding the reason for last Mux state
                            change
                            
                            .. attribute:: reason_type
                            
                            	The item the reason applies to
                            	**type**\:  :py:class:`BmStateReasonTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmStateReasonTarget>`
                            
                            .. attribute:: severity
                            
                            	The severity of the reason
                            	**type**\:  :py:class:`BmSeverity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmSeverity>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData, self).__init__()

                                self.yang_name = "member-mux-state-reason-data"
                                self.yang_parent_name = "member-mux-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('reason_type', YLeaf(YType.enumeration, 'reason-type')),
                                    ('severity', YLeaf(YType.enumeration, 'severity')),
                                ])
                                self.reason_type = None
                                self.severity = None
                                self._segment_path = lambda: "member-mux-state-reason-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(LacpBundles.Bundles.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData, ['reason_type', 'severity'], name, value)


                    class MacAddress(Entity):
                        """
                        MAC address of this member (deprecated)
                        
                        .. attribute:: address
                        
                        	MAC address
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(LacpBundles.Bundles.Bundle.Members.Member.MacAddress, self).__init__()

                            self.yang_name = "mac-address"
                            self.yang_parent_name = "member"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.str, 'address')),
                            ])
                            self.address = None
                            self._segment_path = lambda: "mac-address"

                        def __setattr__(self, name, value):
                            self._perform_setattr(LacpBundles.Bundles.Bundle.Members.Member.MacAddress, ['address'], name, value)

    def clone_ptr(self):
        self._top_entity = LacpBundles()
        return self._top_entity

class BundleInformation(Entity):
    """
    bundle information
    
    .. attribute:: bfd_counters
    
    	BFD counters information for bundles and members
    	**type**\:  :py:class:`BfdCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters>`
    
    .. attribute:: scheduled_actions
    
    	Scheduled actions on a bundle
    	**type**\:  :py:class:`ScheduledActions <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.ScheduledActions>`
    
    .. attribute:: bundle
    
    	Generic information for bundles and members
    	**type**\:  :py:class:`Bundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle>`
    
    .. attribute:: events_rg
    
    	Bundle ICCP events information for bundles and members
    	**type**\:  :py:class:`EventsRg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg>`
    
    .. attribute:: lacp
    
    	LACP information for bundles and members
    	**type**\:  :py:class:`Lacp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp>`
    
    .. attribute:: mlacp_bundle_counters
    
    	Bundle specific counters of mLACP events
    	**type**\:  :py:class:`MlacpBundleCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters>`
    
    .. attribute:: protect
    
    	Information for bundles and members that are in the protect database
    	**type**\:  :py:class:`Protect <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Protect>`
    
    .. attribute:: mlacp_brief
    
    	mLACP Information for Interchassis Groups and bundles
    	**type**\:  :py:class:`MlacpBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief>`
    
    .. attribute:: mlacp
    
    	mLACP Information for Interchassis Groups and bundles
    	**type**\:  :py:class:`Mlacp <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp>`
    
    .. attribute:: mac_allocation
    
    	Information about allocated MAC addresses that are not in use
    	**type**\:  :py:class:`MacAllocation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MacAllocation>`
    
    .. attribute:: events
    
    	Events information for bundles and members
    	**type**\:  :py:class:`Events <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events>`
    
    .. attribute:: events_bdl
    
    	Bundle events information for bundles and members
    	**type**\:  :py:class:`EventsBdl <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl>`
    
    .. attribute:: bundle_briefs
    
    	Bundle interfaces with common bundle information
    	**type**\:  :py:class:`BundleBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BundleBriefs>`
    
    .. attribute:: events_mbr
    
    	Bundle member events information for bundles and members
    	**type**\:  :py:class:`EventsMbr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr>`
    
    .. attribute:: mlacp_iccp_group_counters
    
    	ICCP Group specific counters of mLACP events
    	**type**\:  :py:class:`MlacpIccpGroupCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters>`
    
    .. attribute:: system_id
    
    	System Identifiers for the local system and all ICCP Groups
    	**type**\:  :py:class:`SystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId>`
    
    .. attribute:: mlacp_member_counters
    
    	Member specific counters of mLACP events
    	**type**\:  :py:class:`MlacpMemberCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters>`
    
    

    """

    _prefix = 'bundlemgr-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(BundleInformation, self).__init__()
        self._top_entity = None

        self.yang_name = "bundle-information"
        self.yang_parent_name = "Cisco-IOS-XR-bundlemgr-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("bfd-counters", ("bfd_counters", BundleInformation.BfdCounters)), ("scheduled-actions", ("scheduled_actions", BundleInformation.ScheduledActions)), ("bundle", ("bundle", BundleInformation.Bundle)), ("events-rg", ("events_rg", BundleInformation.EventsRg)), ("lacp", ("lacp", BundleInformation.Lacp)), ("mlacp-bundle-counters", ("mlacp_bundle_counters", BundleInformation.MlacpBundleCounters)), ("protect", ("protect", BundleInformation.Protect)), ("mlacp-brief", ("mlacp_brief", BundleInformation.MlacpBrief)), ("mlacp", ("mlacp", BundleInformation.Mlacp)), ("mac-allocation", ("mac_allocation", BundleInformation.MacAllocation)), ("events", ("events", BundleInformation.Events)), ("events-bdl", ("events_bdl", BundleInformation.EventsBdl)), ("bundle-briefs", ("bundle_briefs", BundleInformation.BundleBriefs)), ("events-mbr", ("events_mbr", BundleInformation.EventsMbr)), ("mlacp-iccp-group-counters", ("mlacp_iccp_group_counters", BundleInformation.MlacpIccpGroupCounters)), ("system-id", ("system_id", BundleInformation.SystemId)), ("mlacp-member-counters", ("mlacp_member_counters", BundleInformation.MlacpMemberCounters))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.bfd_counters = BundleInformation.BfdCounters()
        self.bfd_counters.parent = self
        self._children_name_map["bfd_counters"] = "bfd-counters"
        self._children_yang_names.add("bfd-counters")

        self.scheduled_actions = BundleInformation.ScheduledActions()
        self.scheduled_actions.parent = self
        self._children_name_map["scheduled_actions"] = "scheduled-actions"
        self._children_yang_names.add("scheduled-actions")

        self.bundle = BundleInformation.Bundle()
        self.bundle.parent = self
        self._children_name_map["bundle"] = "bundle"
        self._children_yang_names.add("bundle")

        self.events_rg = BundleInformation.EventsRg()
        self.events_rg.parent = self
        self._children_name_map["events_rg"] = "events-rg"
        self._children_yang_names.add("events-rg")

        self.lacp = BundleInformation.Lacp()
        self.lacp.parent = self
        self._children_name_map["lacp"] = "lacp"
        self._children_yang_names.add("lacp")

        self.mlacp_bundle_counters = BundleInformation.MlacpBundleCounters()
        self.mlacp_bundle_counters.parent = self
        self._children_name_map["mlacp_bundle_counters"] = "mlacp-bundle-counters"
        self._children_yang_names.add("mlacp-bundle-counters")

        self.protect = BundleInformation.Protect()
        self.protect.parent = self
        self._children_name_map["protect"] = "protect"
        self._children_yang_names.add("protect")

        self.mlacp_brief = BundleInformation.MlacpBrief()
        self.mlacp_brief.parent = self
        self._children_name_map["mlacp_brief"] = "mlacp-brief"
        self._children_yang_names.add("mlacp-brief")

        self.mlacp = BundleInformation.Mlacp()
        self.mlacp.parent = self
        self._children_name_map["mlacp"] = "mlacp"
        self._children_yang_names.add("mlacp")

        self.mac_allocation = BundleInformation.MacAllocation()
        self.mac_allocation.parent = self
        self._children_name_map["mac_allocation"] = "mac-allocation"
        self._children_yang_names.add("mac-allocation")

        self.events = BundleInformation.Events()
        self.events.parent = self
        self._children_name_map["events"] = "events"
        self._children_yang_names.add("events")

        self.events_bdl = BundleInformation.EventsBdl()
        self.events_bdl.parent = self
        self._children_name_map["events_bdl"] = "events-bdl"
        self._children_yang_names.add("events-bdl")

        self.bundle_briefs = BundleInformation.BundleBriefs()
        self.bundle_briefs.parent = self
        self._children_name_map["bundle_briefs"] = "bundle-briefs"
        self._children_yang_names.add("bundle-briefs")

        self.events_mbr = BundleInformation.EventsMbr()
        self.events_mbr.parent = self
        self._children_name_map["events_mbr"] = "events-mbr"
        self._children_yang_names.add("events-mbr")

        self.mlacp_iccp_group_counters = BundleInformation.MlacpIccpGroupCounters()
        self.mlacp_iccp_group_counters.parent = self
        self._children_name_map["mlacp_iccp_group_counters"] = "mlacp-iccp-group-counters"
        self._children_yang_names.add("mlacp-iccp-group-counters")

        self.system_id = BundleInformation.SystemId()
        self.system_id.parent = self
        self._children_name_map["system_id"] = "system-id"
        self._children_yang_names.add("system-id")

        self.mlacp_member_counters = BundleInformation.MlacpMemberCounters()
        self.mlacp_member_counters.parent = self
        self._children_name_map["mlacp_member_counters"] = "mlacp-member-counters"
        self._children_yang_names.add("mlacp-member-counters")
        self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information"


    class BfdCounters(Entity):
        """
        BFD counters information for bundles and members
        
        .. attribute:: bfd_counters_bundles
        
        	Bundle interfaces with BFD counters information
        	**type**\:  :py:class:`BfdCountersBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersBundles>`
        
        .. attribute:: bfd_counters_members
        
        	Member interfaces with BFD counters information
        	**type**\:  :py:class:`BfdCountersMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersMembers>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.BfdCounters, self).__init__()

            self.yang_name = "bfd-counters"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("bfd-counters-bundles", ("bfd_counters_bundles", BundleInformation.BfdCounters.BfdCountersBundles)), ("bfd-counters-members", ("bfd_counters_members", BundleInformation.BfdCounters.BfdCountersMembers))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.bfd_counters_bundles = BundleInformation.BfdCounters.BfdCountersBundles()
            self.bfd_counters_bundles.parent = self
            self._children_name_map["bfd_counters_bundles"] = "bfd-counters-bundles"
            self._children_yang_names.add("bfd-counters-bundles")

            self.bfd_counters_members = BundleInformation.BfdCounters.BfdCountersMembers()
            self.bfd_counters_members.parent = self
            self._children_name_map["bfd_counters_members"] = "bfd-counters-members"
            self._children_yang_names.add("bfd-counters-members")
            self._segment_path = lambda: "bfd-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class BfdCountersBundles(Entity):
            """
            Bundle interfaces with BFD counters information
            
            .. attribute:: bfd_counters_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`BfdCountersBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.BfdCounters.BfdCountersBundles, self).__init__()

                self.yang_name = "bfd-counters-bundles"
                self.yang_parent_name = "bfd-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("bfd-counters-bundle", ("bfd_counters_bundle", BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle))])
                self._leafs = OrderedDict()

                self.bfd_counters_bundle = YList(self)
                self._segment_path = lambda: "bfd-counters-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/bfd-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.BfdCounters.BfdCountersBundles, [], name, value)


            class BfdCountersBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: bfd_counters_bundle_descendant
                
                	Data for this item and all its members
                	**type**\:  :py:class:`BfdCountersBundleDescendant <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant>`
                
                .. attribute:: bfd_counters_bundle_children_members
                
                	Children of bundle with BFD counters information
                	**type**\:  :py:class:`BfdCountersBundleChildrenMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleChildrenMembers>`
                
                .. attribute:: bfd_counters_bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`BfdCountersBundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle, self).__init__()

                    self.yang_name = "bfd-counters-bundle"
                    self.yang_parent_name = "bfd-counters-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("bfd-counters-bundle-descendant", ("bfd_counters_bundle_descendant", BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant)), ("bfd-counters-bundle-children-members", ("bfd_counters_bundle_children_members", BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleChildrenMembers)), ("bfd-counters-bundle-item", ("bfd_counters_bundle_item", BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.bfd_counters_bundle_descendant = BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant()
                    self.bfd_counters_bundle_descendant.parent = self
                    self._children_name_map["bfd_counters_bundle_descendant"] = "bfd-counters-bundle-descendant"
                    self._children_yang_names.add("bfd-counters-bundle-descendant")

                    self.bfd_counters_bundle_children_members = BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleChildrenMembers()
                    self.bfd_counters_bundle_children_members.parent = self
                    self._children_name_map["bfd_counters_bundle_children_members"] = "bfd-counters-bundle-children-members"
                    self._children_yang_names.add("bfd-counters-bundle-children-members")

                    self.bfd_counters_bundle_item = BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleItem()
                    self.bfd_counters_bundle_item.parent = self
                    self._children_name_map["bfd_counters_bundle_item"] = "bfd-counters-bundle-item"
                    self._children_yang_names.add("bfd-counters-bundle-item")
                    self._segment_path = lambda: "bfd-counters-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/bfd-counters/bfd-counters-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle, ['bundle_interface'], name, value)


                class BfdCountersBundleDescendant(Entity):
                    """
                    Data for this item and all its members
                    
                    .. attribute:: bundle_name
                    
                    	Name of the bundle this information is for
                    	**type**\:  :py:class:`BundleName <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant.BundleName>`
                    
                    .. attribute:: bfd_counter
                    
                    	BFD event counters
                    	**type**\: list of  		 :py:class:`BfdCounter <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant.BfdCounter>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant, self).__init__()

                        self.yang_name = "bfd-counters-bundle-descendant"
                        self.yang_parent_name = "bfd-counters-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("bundle-name", ("bundle_name", BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant.BundleName))])
                        self._child_list_classes = OrderedDict([("bfd-counter", ("bfd_counter", BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant.BfdCounter))])
                        self._leafs = OrderedDict()

                        self.bundle_name = BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant.BundleName()
                        self.bundle_name.parent = self
                        self._children_name_map["bundle_name"] = "bundle-name"
                        self._children_yang_names.add("bundle-name")

                        self.bfd_counter = YList(self)
                        self._segment_path = lambda: "bfd-counters-bundle-descendant"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant, [], name, value)


                    class BundleName(Entity):
                        """
                        Name of the bundle this information is for
                        
                        .. attribute:: item_name
                        
                        	Name of item
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant.BundleName, self).__init__()

                            self.yang_name = "bundle-name"
                            self.yang_parent_name = "bfd-counters-bundle-descendant"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('item_name', YLeaf(YType.str, 'item-name')),
                            ])
                            self.item_name = None
                            self._segment_path = lambda: "bundle-name"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant.BundleName, ['item_name'], name, value)


                    class BfdCounter(Entity):
                        """
                        BFD event counters
                        
                        .. attribute:: member_name
                        
                        	Name of the member this information is for
                        	**type**\: str
                        
                        .. attribute:: last_time_cleared
                        
                        	Timestamp when counters were last cleared (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: starting
                        
                        	Number of times member state changed to starting
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: up
                        
                        	Number of times member state changed to up
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: down
                        
                        	Number of times member state changed to down
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_unconfigured
                        
                        	Number of times member state changed to neighbor unconfigured
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: start_timeouts
                        
                        	Number of timeouts waiting for BFD to start
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_unconfigured_timeouts
                        
                        	Number of timeouts waiting for neighbor to become unconfigured
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: time_since_cleared
                        
                        	Elapsed time in nsecs since counters were last cleared
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant.BfdCounter, self).__init__()

                            self.yang_name = "bfd-counter"
                            self.yang_parent_name = "bfd-counters-bundle-descendant"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('member_name', YLeaf(YType.str, 'member-name')),
                                ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                ('starting', YLeaf(YType.uint32, 'starting')),
                                ('up', YLeaf(YType.uint32, 'up')),
                                ('down', YLeaf(YType.uint32, 'down')),
                                ('neighbor_unconfigured', YLeaf(YType.uint32, 'neighbor-unconfigured')),
                                ('start_timeouts', YLeaf(YType.uint32, 'start-timeouts')),
                                ('neighbor_unconfigured_timeouts', YLeaf(YType.uint32, 'neighbor-unconfigured-timeouts')),
                                ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                            ])
                            self.member_name = None
                            self.last_time_cleared = None
                            self.starting = None
                            self.up = None
                            self.down = None
                            self.neighbor_unconfigured = None
                            self.start_timeouts = None
                            self.neighbor_unconfigured_timeouts = None
                            self.time_since_cleared = None
                            self._segment_path = lambda: "bfd-counter"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleDescendant.BfdCounter, ['member_name', 'last_time_cleared', 'starting', 'up', 'down', 'neighbor_unconfigured', 'start_timeouts', 'neighbor_unconfigured_timeouts', 'time_since_cleared'], name, value)


                class BfdCountersBundleChildrenMembers(Entity):
                    """
                    Children of bundle with BFD counters
                    information
                    
                    .. attribute:: bfd_counters_bundle_children_member
                    
                    	Bundle member item with BFD counters information
                    	**type**\: list of  		 :py:class:`BfdCountersBundleChildrenMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleChildrenMembers, self).__init__()

                        self.yang_name = "bfd-counters-bundle-children-members"
                        self.yang_parent_name = "bfd-counters-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("bfd-counters-bundle-children-member", ("bfd_counters_bundle_children_member", BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember))])
                        self._leafs = OrderedDict()

                        self.bfd_counters_bundle_children_member = YList(self)
                        self._segment_path = lambda: "bfd-counters-bundle-children-members"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleChildrenMembers, [], name, value)


                    class BfdCountersBundleChildrenMember(Entity):
                        """
                        Bundle member item with BFD counters
                        information
                        
                        .. attribute:: member_interface  (key)
                        
                        	Member interface
                        	**type**\: str
                        
                        .. attribute:: member_name
                        
                        	Name of the member this information is for
                        	**type**\: str
                        
                        .. attribute:: last_time_cleared
                        
                        	Timestamp when counters were last cleared (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: starting
                        
                        	Number of times member state changed to starting
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: up
                        
                        	Number of times member state changed to up
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: down
                        
                        	Number of times member state changed to down
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_unconfigured
                        
                        	Number of times member state changed to neighbor unconfigured
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: start_timeouts
                        
                        	Number of timeouts waiting for BFD to start
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: neighbor_unconfigured_timeouts
                        
                        	Number of timeouts waiting for neighbor to become unconfigured
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: time_since_cleared
                        
                        	Elapsed time in nsecs since counters were last cleared
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember, self).__init__()

                            self.yang_name = "bfd-counters-bundle-children-member"
                            self.yang_parent_name = "bfd-counters-bundle-children-members"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['member_interface']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('member_interface', YLeaf(YType.str, 'member-interface')),
                                ('member_name', YLeaf(YType.str, 'member-name')),
                                ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                ('starting', YLeaf(YType.uint32, 'starting')),
                                ('up', YLeaf(YType.uint32, 'up')),
                                ('down', YLeaf(YType.uint32, 'down')),
                                ('neighbor_unconfigured', YLeaf(YType.uint32, 'neighbor-unconfigured')),
                                ('start_timeouts', YLeaf(YType.uint32, 'start-timeouts')),
                                ('neighbor_unconfigured_timeouts', YLeaf(YType.uint32, 'neighbor-unconfigured-timeouts')),
                                ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                            ])
                            self.member_interface = None
                            self.member_name = None
                            self.last_time_cleared = None
                            self.starting = None
                            self.up = None
                            self.down = None
                            self.neighbor_unconfigured = None
                            self.start_timeouts = None
                            self.neighbor_unconfigured_timeouts = None
                            self.time_since_cleared = None
                            self._segment_path = lambda: "bfd-counters-bundle-children-member" + "[member-interface='" + str(self.member_interface) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember, ['member_interface', 'member_name', 'last_time_cleared', 'starting', 'up', 'down', 'neighbor_unconfigured', 'start_timeouts', 'neighbor_unconfigured_timeouts', 'time_since_cleared'], name, value)


                class BfdCountersBundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: item_name
                    
                    	Name of item
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleItem, self).__init__()

                        self.yang_name = "bfd-counters-bundle-item"
                        self.yang_parent_name = "bfd-counters-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None
                        self._segment_path = lambda: "bfd-counters-bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.BfdCounters.BfdCountersBundles.BfdCountersBundle.BfdCountersBundleItem, ['item_name'], name, value)


        class BfdCountersMembers(Entity):
            """
            Member interfaces with BFD counters information
            
            .. attribute:: bfd_counters_member
            
            	Member interface
            	**type**\: list of  		 :py:class:`BfdCountersMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersMembers.BfdCountersMember>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.BfdCounters.BfdCountersMembers, self).__init__()

                self.yang_name = "bfd-counters-members"
                self.yang_parent_name = "bfd-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("bfd-counters-member", ("bfd_counters_member", BundleInformation.BfdCounters.BfdCountersMembers.BfdCountersMember))])
                self._leafs = OrderedDict()

                self.bfd_counters_member = YList(self)
                self._segment_path = lambda: "bfd-counters-members"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/bfd-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.BfdCounters.BfdCountersMembers, [], name, value)


            class BfdCountersMember(Entity):
                """
                Member interface
                
                .. attribute:: member_interface  (key)
                
                	Member interface
                	**type**\: str
                
                .. attribute:: bfd_counters_member_item
                
                	Data for this item
                	**type**\:  :py:class:`BfdCountersMemberItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BfdCounters.BfdCountersMembers.BfdCountersMember.BfdCountersMemberItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.BfdCounters.BfdCountersMembers.BfdCountersMember, self).__init__()

                    self.yang_name = "bfd-counters-member"
                    self.yang_parent_name = "bfd-counters-members"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['member_interface']
                    self._child_container_classes = OrderedDict([("bfd-counters-member-item", ("bfd_counters_member_item", BundleInformation.BfdCounters.BfdCountersMembers.BfdCountersMember.BfdCountersMemberItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('member_interface', YLeaf(YType.str, 'member-interface')),
                    ])
                    self.member_interface = None

                    self.bfd_counters_member_item = BundleInformation.BfdCounters.BfdCountersMembers.BfdCountersMember.BfdCountersMemberItem()
                    self.bfd_counters_member_item.parent = self
                    self._children_name_map["bfd_counters_member_item"] = "bfd-counters-member-item"
                    self._children_yang_names.add("bfd-counters-member-item")
                    self._segment_path = lambda: "bfd-counters-member" + "[member-interface='" + str(self.member_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/bfd-counters/bfd-counters-members/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.BfdCounters.BfdCountersMembers.BfdCountersMember, ['member_interface'], name, value)


                class BfdCountersMemberItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: member_name
                    
                    	Name of the member this information is for
                    	**type**\: str
                    
                    .. attribute:: last_time_cleared
                    
                    	Timestamp when counters were last cleared (deprecated)
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: starting
                    
                    	Number of times member state changed to starting
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: up
                    
                    	Number of times member state changed to up
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: down
                    
                    	Number of times member state changed to down
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: neighbor_unconfigured
                    
                    	Number of times member state changed to neighbor unconfigured
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: start_timeouts
                    
                    	Number of timeouts waiting for BFD to start
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: neighbor_unconfigured_timeouts
                    
                    	Number of timeouts waiting for neighbor to become unconfigured
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: time_since_cleared
                    
                    	Elapsed time in nsecs since counters were last cleared
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    	**units**\: nanosecond
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.BfdCounters.BfdCountersMembers.BfdCountersMember.BfdCountersMemberItem, self).__init__()

                        self.yang_name = "bfd-counters-member-item"
                        self.yang_parent_name = "bfd-counters-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('member_name', YLeaf(YType.str, 'member-name')),
                            ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                            ('starting', YLeaf(YType.uint32, 'starting')),
                            ('up', YLeaf(YType.uint32, 'up')),
                            ('down', YLeaf(YType.uint32, 'down')),
                            ('neighbor_unconfigured', YLeaf(YType.uint32, 'neighbor-unconfigured')),
                            ('start_timeouts', YLeaf(YType.uint32, 'start-timeouts')),
                            ('neighbor_unconfigured_timeouts', YLeaf(YType.uint32, 'neighbor-unconfigured-timeouts')),
                            ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                        ])
                        self.member_name = None
                        self.last_time_cleared = None
                        self.starting = None
                        self.up = None
                        self.down = None
                        self.neighbor_unconfigured = None
                        self.start_timeouts = None
                        self.neighbor_unconfigured_timeouts = None
                        self.time_since_cleared = None
                        self._segment_path = lambda: "bfd-counters-member-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.BfdCounters.BfdCountersMembers.BfdCountersMember.BfdCountersMemberItem, ['member_name', 'last_time_cleared', 'starting', 'up', 'down', 'neighbor_unconfigured', 'start_timeouts', 'neighbor_unconfigured_timeouts', 'time_since_cleared'], name, value)


    class ScheduledActions(Entity):
        """
        Scheduled actions on a bundle
        
        .. attribute:: scheduled_actions_bundles
        
        	Bundles with actions scheduled
        	**type**\:  :py:class:`ScheduledActionsBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.ScheduledActions.ScheduledActionsBundles>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.ScheduledActions, self).__init__()

            self.yang_name = "scheduled-actions"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("scheduled-actions-bundles", ("scheduled_actions_bundles", BundleInformation.ScheduledActions.ScheduledActionsBundles))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.scheduled_actions_bundles = BundleInformation.ScheduledActions.ScheduledActionsBundles()
            self.scheduled_actions_bundles.parent = self
            self._children_name_map["scheduled_actions_bundles"] = "scheduled-actions-bundles"
            self._children_yang_names.add("scheduled-actions-bundles")
            self._segment_path = lambda: "scheduled-actions"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class ScheduledActionsBundles(Entity):
            """
            Bundles with actions scheduled
            
            .. attribute:: scheduled_actions_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`ScheduledActionsBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.ScheduledActions.ScheduledActionsBundles, self).__init__()

                self.yang_name = "scheduled-actions-bundles"
                self.yang_parent_name = "scheduled-actions"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("scheduled-actions-bundle", ("scheduled_actions_bundle", BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle))])
                self._leafs = OrderedDict()

                self.scheduled_actions_bundle = YList(self)
                self._segment_path = lambda: "scheduled-actions-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/scheduled-actions/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.ScheduledActions.ScheduledActionsBundles, [], name, value)


            class ScheduledActionsBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: scheduled_actions_bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`ScheduledActionsBundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle.ScheduledActionsBundleItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle, self).__init__()

                    self.yang_name = "scheduled-actions-bundle"
                    self.yang_parent_name = "scheduled-actions-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("scheduled-actions-bundle-item", ("scheduled_actions_bundle_item", BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle.ScheduledActionsBundleItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.scheduled_actions_bundle_item = BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle.ScheduledActionsBundleItem()
                    self.scheduled_actions_bundle_item.parent = self
                    self._children_name_map["scheduled_actions_bundle_item"] = "scheduled-actions-bundle-item"
                    self._children_yang_names.add("scheduled-actions-bundle-item")
                    self._segment_path = lambda: "scheduled-actions-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/scheduled-actions/scheduled-actions-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle, ['bundle_interface'], name, value)


                class ScheduledActionsBundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: bundle_name
                    
                    	Name of the bundle
                    	**type**\: str
                    
                    .. attribute:: scheduled_action
                    
                    	Scheduled actions
                    	**type**\: list of  		 :py:class:`ScheduledAction <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle.ScheduledActionsBundleItem.ScheduledAction>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle.ScheduledActionsBundleItem, self).__init__()

                        self.yang_name = "scheduled-actions-bundle-item"
                        self.yang_parent_name = "scheduled-actions-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("scheduled-action", ("scheduled_action", BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle.ScheduledActionsBundleItem.ScheduledAction))])
                        self._leafs = OrderedDict([
                            ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                        ])
                        self.bundle_name = None

                        self.scheduled_action = YList(self)
                        self._segment_path = lambda: "scheduled-actions-bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle.ScheduledActionsBundleItem, ['bundle_name'], name, value)


                    class ScheduledAction(Entity):
                        """
                        Scheduled actions
                        
                        .. attribute:: mlacp_action
                        
                        	Type of mLACP scheduled action for a bundle
                        	**type**\:  :py:class:`BmdBagMlacpSchActionItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagMlacpSchActionItem>`
                        
                        .. attribute:: time_remaining
                        
                        	Seconds left before action
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: second
                        
                        .. attribute:: action_state
                        
                        	Details whether the switch action is viable
                        	**type**\:  :py:class:`BmdSwitchReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdSwitchReason>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle.ScheduledActionsBundleItem.ScheduledAction, self).__init__()

                            self.yang_name = "scheduled-action"
                            self.yang_parent_name = "scheduled-actions-bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('mlacp_action', YLeaf(YType.enumeration, 'mlacp-action')),
                                ('time_remaining', YLeaf(YType.uint64, 'time-remaining')),
                                ('action_state', YLeaf(YType.enumeration, 'action-state')),
                            ])
                            self.mlacp_action = None
                            self.time_remaining = None
                            self.action_state = None
                            self._segment_path = lambda: "scheduled-action"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.ScheduledActions.ScheduledActionsBundles.ScheduledActionsBundle.ScheduledActionsBundleItem.ScheduledAction, ['mlacp_action', 'time_remaining', 'action_state'], name, value)


    class Bundle(Entity):
        """
        Generic information for bundles and members
        
        .. attribute:: bundle_bundles
        
        	Bundle interfaces with common bundle information
        	**type**\:  :py:class:`BundleBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles>`
        
        .. attribute:: bundle_members
        
        	Member interfaces with common bundle information
        	**type**\:  :py:class:`BundleMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.Bundle, self).__init__()

            self.yang_name = "bundle"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("bundle-bundles", ("bundle_bundles", BundleInformation.Bundle.BundleBundles)), ("bundle-members", ("bundle_members", BundleInformation.Bundle.BundleMembers))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.bundle_bundles = BundleInformation.Bundle.BundleBundles()
            self.bundle_bundles.parent = self
            self._children_name_map["bundle_bundles"] = "bundle-bundles"
            self._children_yang_names.add("bundle-bundles")

            self.bundle_members = BundleInformation.Bundle.BundleMembers()
            self.bundle_members.parent = self
            self._children_name_map["bundle_members"] = "bundle-members"
            self._children_yang_names.add("bundle-members")
            self._segment_path = lambda: "bundle"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class BundleBundles(Entity):
            """
            Bundle interfaces with common bundle
            information
            
            .. attribute:: bundle_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`BundleBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.Bundle.BundleBundles, self).__init__()

                self.yang_name = "bundle-bundles"
                self.yang_parent_name = "bundle"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("bundle-bundle", ("bundle_bundle", BundleInformation.Bundle.BundleBundles.BundleBundle))])
                self._leafs = OrderedDict()

                self.bundle_bundle = YList(self)
                self._segment_path = lambda: "bundle-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/bundle/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.Bundle.BundleBundles, [], name, value)


            class BundleBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: bundle_bundle_descendant
                
                	Data for this item and all its members
                	**type**\:  :py:class:`BundleBundleDescendant <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant>`
                
                .. attribute:: bundle_bundle_children_members
                
                	Children of bundle with common bundle information
                	**type**\:  :py:class:`BundleBundleChildrenMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers>`
                
                .. attribute:: bundle_bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`BundleBundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.Bundle.BundleBundles.BundleBundle, self).__init__()

                    self.yang_name = "bundle-bundle"
                    self.yang_parent_name = "bundle-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("bundle-bundle-descendant", ("bundle_bundle_descendant", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant)), ("bundle-bundle-children-members", ("bundle_bundle_children_members", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers)), ("bundle-bundle-item", ("bundle_bundle_item", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.bundle_bundle_descendant = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant()
                    self.bundle_bundle_descendant.parent = self
                    self._children_name_map["bundle_bundle_descendant"] = "bundle-bundle-descendant"
                    self._children_yang_names.add("bundle-bundle-descendant")

                    self.bundle_bundle_children_members = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers()
                    self.bundle_bundle_children_members.parent = self
                    self._children_name_map["bundle_bundle_children_members"] = "bundle-bundle-children-members"
                    self._children_yang_names.add("bundle-bundle-children-members")

                    self.bundle_bundle_item = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem()
                    self.bundle_bundle_item.parent = self
                    self._children_name_map["bundle_bundle_item"] = "bundle-bundle-item"
                    self._children_yang_names.add("bundle-bundle-item")
                    self._segment_path = lambda: "bundle-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/bundle/bundle-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle, ['bundle_interface'], name, value)


                class BundleBundleDescendant(Entity):
                    """
                    Data for this item and all its members
                    
                    .. attribute:: bundle_data
                    
                    	Bundle information
                    	**type**\:  :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData>`
                    
                    .. attribute:: member_data
                    
                    	Member information
                    	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant, self).__init__()

                        self.yang_name = "bundle-bundle-descendant"
                        self.yang_parent_name = "bundle-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData))])
                        self._child_list_classes = OrderedDict([("member-data", ("member_data", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData))])
                        self._leafs = OrderedDict()

                        self.bundle_data = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData()
                        self.bundle_data.parent = self
                        self._children_name_map["bundle_data"] = "bundle-data"
                        self._children_yang_names.add("bundle-data")

                        self.member_data = YList(self)
                        self._segment_path = lambda: "bundle-bundle-descendant"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant, [], name, value)


                    class BundleData(Entity):
                        """
                        Bundle information
                        
                        .. attribute:: mac_address
                        
                        	MAC address of this member
                        	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.MacAddress>`
                        
                        .. attribute:: bundle_interface_name
                        
                        	Bundle interface name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: available_bandwidth
                        
                        	Bandwidth available to the bundle interface (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: effective_bandwidth
                        
                        	Effective bandwidth on the bundle interface (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: configured_bandwidth
                        
                        	Bandwidth configured on the bundle interface (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: minimum_active_links
                        
                        	Minimum number of active links for bundle to go up
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: maximum_active_links
                        
                        	Maximum number of active links in the bundle
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: maximum_active_links_source
                        
                        	Source of maximum active links value
                        	**type**\:  :py:class:`BmWhichSystem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmWhichSystem>`
                        
                        .. attribute:: minimum_bandwidth
                        
                        	Minimum bundle bandwidth for bundle to go up (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: primary_member
                        
                        	Primary bundle member (no longer applicable)
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: bundle_status
                        
                        	The state of the bundle
                        	**type**\:  :py:class:`BmBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlState>`
                        
                        .. attribute:: active_member_count
                        
                        	The number of active local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: standby_member_count
                        
                        	The number of standby local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: configured_member_count
                        
                        	The number of configured local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: mac_source
                        
                        	The source of the MAC Address
                        	**type**\:  :py:class:`BmBdlMacSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlMacSource>`
                        
                        .. attribute:: mac_source_member
                        
                        	The name of the member that supplied the MAC address
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: inter_chassis
                        
                        	Indicates if this bundle is operating as an inter\-chassis link (1 = I\-C link, 0 = normal)
                        	**type**\: bool
                        
                        .. attribute:: is_active
                        
                        	Indicates the active/standby redundancy state of the device for the bundle
                        	**type**\: bool
                        
                        .. attribute:: lacp_status
                        
                        	The status of the LACP feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: mlacp_status
                        
                        	The status of the mLACP feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: ipv4bfd_status
                        
                        	The status of the BFD (IPv4) feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: link_order_status
                        
                        	The status of the link order signaling feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: ipv6bfd_status
                        
                        	The status of the BFD (IPv6) feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: load_balance_hash_type
                        
                        	The type of hash to use for load balancing
                        	**type**\: str
                        
                        .. attribute:: load_balance_locality_threshold
                        
                        	The number of links required per rack for localized load balancing
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: suppression_timer
                        
                        	Timer for suppressing bundle state flaps
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: wait_while_timer
                        
                        	The wait while time used for member ports
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: collector_max_delay
                        
                        	Collector Max Delay
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: cisco_extensions
                        
                        	The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled)
                        	**type**\: bool
                        
                        .. attribute:: lacp_nonrevertive
                        
                        	The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled)
                        	**type**\: bool
                        
                        .. attribute:: iccp_group_id
                        
                        	ICCP Group that the bundle is configured to
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: active_foreign_member_count
                        
                        	The number of active foreign members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: configured_foreign_member_count
                        
                        	The number of configured local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: switchover_type
                        
                        	How a switchover of the bundle from this device will occur
                        	**type**\:  :py:class:`BmdMlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpSwitchover>`
                        
                        .. attribute:: maximize_threshold_value_links
                        
                        	Attempt to maximize the bundle if links are below this value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: maximize_threshold_value_band_width
                        
                        	Attempt to maximize the bundle if bandwidth is below this value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mlacp_mode
                        
                        	Indicates the mode of the device for the bundle
                        	**type**\:  :py:class:`BundleMlacpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMlacpMode>`
                        
                        .. attribute:: recovery_delay
                        
                        	Number of seconds to wait before becoming active after recovering from a failure
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**units**\: second
                        
                        .. attribute:: singleton
                        
                        	Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not singleton)
                        	**type**\: bool
                        
                        .. attribute:: bfd_config
                        
                        	Configuration values for BFD on bundle members
                        	**type**\: list of  		 :py:class:`BfdConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.BfdConfig>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData, self).__init__()

                            self.yang_name = "bundle-data"
                            self.yang_parent_name = "bundle-bundle-descendant"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.MacAddress))])
                            self._child_list_classes = OrderedDict([("bfd-config", ("bfd_config", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.BfdConfig))])
                            self._leafs = OrderedDict([
                                ('bundle_interface_name', YLeaf(YType.str, 'bundle-interface-name')),
                                ('available_bandwidth', YLeaf(YType.uint32, 'available-bandwidth')),
                                ('effective_bandwidth', YLeaf(YType.uint32, 'effective-bandwidth')),
                                ('configured_bandwidth', YLeaf(YType.uint32, 'configured-bandwidth')),
                                ('minimum_active_links', YLeaf(YType.uint8, 'minimum-active-links')),
                                ('maximum_active_links', YLeaf(YType.uint8, 'maximum-active-links')),
                                ('maximum_active_links_source', YLeaf(YType.enumeration, 'maximum-active-links-source')),
                                ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                                ('primary_member', YLeaf(YType.str, 'primary-member')),
                                ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                ('active_member_count', YLeaf(YType.uint16, 'active-member-count')),
                                ('standby_member_count', YLeaf(YType.uint16, 'standby-member-count')),
                                ('configured_member_count', YLeaf(YType.uint16, 'configured-member-count')),
                                ('mac_source', YLeaf(YType.enumeration, 'mac-source')),
                                ('mac_source_member', YLeaf(YType.str, 'mac-source-member')),
                                ('inter_chassis', YLeaf(YType.boolean, 'inter-chassis')),
                                ('is_active', YLeaf(YType.boolean, 'is-active')),
                                ('lacp_status', YLeaf(YType.enumeration, 'lacp-status')),
                                ('mlacp_status', YLeaf(YType.enumeration, 'mlacp-status')),
                                ('ipv4bfd_status', YLeaf(YType.enumeration, 'ipv4bfd-status')),
                                ('link_order_status', YLeaf(YType.enumeration, 'link-order-status')),
                                ('ipv6bfd_status', YLeaf(YType.enumeration, 'ipv6bfd-status')),
                                ('load_balance_hash_type', YLeaf(YType.str, 'load-balance-hash-type')),
                                ('load_balance_locality_threshold', YLeaf(YType.uint16, 'load-balance-locality-threshold')),
                                ('suppression_timer', YLeaf(YType.uint16, 'suppression-timer')),
                                ('wait_while_timer', YLeaf(YType.uint16, 'wait-while-timer')),
                                ('collector_max_delay', YLeaf(YType.uint16, 'collector-max-delay')),
                                ('cisco_extensions', YLeaf(YType.boolean, 'cisco-extensions')),
                                ('lacp_nonrevertive', YLeaf(YType.boolean, 'lacp-nonrevertive')),
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ('active_foreign_member_count', YLeaf(YType.uint16, 'active-foreign-member-count')),
                                ('configured_foreign_member_count', YLeaf(YType.uint16, 'configured-foreign-member-count')),
                                ('switchover_type', YLeaf(YType.enumeration, 'switchover-type')),
                                ('maximize_threshold_value_links', YLeaf(YType.uint32, 'maximize-threshold-value-links')),
                                ('maximize_threshold_value_band_width', YLeaf(YType.uint32, 'maximize-threshold-value-band-width')),
                                ('mlacp_mode', YLeaf(YType.enumeration, 'mlacp-mode')),
                                ('recovery_delay', YLeaf(YType.uint16, 'recovery-delay')),
                                ('singleton', YLeaf(YType.boolean, 'singleton')),
                            ])
                            self.bundle_interface_name = None
                            self.available_bandwidth = None
                            self.effective_bandwidth = None
                            self.configured_bandwidth = None
                            self.minimum_active_links = None
                            self.maximum_active_links = None
                            self.maximum_active_links_source = None
                            self.minimum_bandwidth = None
                            self.primary_member = None
                            self.bundle_status = None
                            self.active_member_count = None
                            self.standby_member_count = None
                            self.configured_member_count = None
                            self.mac_source = None
                            self.mac_source_member = None
                            self.inter_chassis = None
                            self.is_active = None
                            self.lacp_status = None
                            self.mlacp_status = None
                            self.ipv4bfd_status = None
                            self.link_order_status = None
                            self.ipv6bfd_status = None
                            self.load_balance_hash_type = None
                            self.load_balance_locality_threshold = None
                            self.suppression_timer = None
                            self.wait_while_timer = None
                            self.collector_max_delay = None
                            self.cisco_extensions = None
                            self.lacp_nonrevertive = None
                            self.iccp_group_id = None
                            self.active_foreign_member_count = None
                            self.configured_foreign_member_count = None
                            self.switchover_type = None
                            self.maximize_threshold_value_links = None
                            self.maximize_threshold_value_band_width = None
                            self.mlacp_mode = None
                            self.recovery_delay = None
                            self.singleton = None

                            self.mac_address = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.MacAddress()
                            self.mac_address.parent = self
                            self._children_name_map["mac_address"] = "mac-address"
                            self._children_yang_names.add("mac-address")

                            self.bfd_config = YList(self)
                            self._segment_path = lambda: "bundle-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData, ['bundle_interface_name', 'available_bandwidth', 'effective_bandwidth', 'configured_bandwidth', 'minimum_active_links', 'maximum_active_links', 'maximum_active_links_source', 'minimum_bandwidth', 'primary_member', 'bundle_status', 'active_member_count', 'standby_member_count', 'configured_member_count', 'mac_source', 'mac_source_member', 'inter_chassis', 'is_active', 'lacp_status', 'mlacp_status', 'ipv4bfd_status', 'link_order_status', 'ipv6bfd_status', 'load_balance_hash_type', 'load_balance_locality_threshold', 'suppression_timer', 'wait_while_timer', 'collector_max_delay', 'cisco_extensions', 'lacp_nonrevertive', 'iccp_group_id', 'active_foreign_member_count', 'configured_foreign_member_count', 'switchover_type', 'maximize_threshold_value_links', 'maximize_threshold_value_band_width', 'mlacp_mode', 'recovery_delay', 'singleton'], name, value)


                        class MacAddress(Entity):
                            """
                            MAC address of this member
                            
                            .. attribute:: address
                            
                            	MAC address
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.MacAddress, self).__init__()

                                self.yang_name = "mac-address"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.str, 'address')),
                                ])
                                self.address = None
                                self._segment_path = lambda: "mac-address"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.MacAddress, ['address'], name, value)


                        class BfdConfig(Entity):
                            """
                            Configuration values for BFD on bundle members
                            
                            .. attribute:: destination_address
                            
                            	Configured destination address for BFD session
                            	**type**\:  :py:class:`DestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.BfdConfig.DestinationAddress>`
                            
                            .. attribute:: bundle_status
                            
                            	Status of BFD on the bundle
                            	**type**\:  :py:class:`BmdBfdBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBfdBdlState>`
                            
                            .. attribute:: start_timer
                            
                            	Time to wait on session start before declaring DOWN
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: nbr_unconfig_timer
                            
                            	Time to wait on session NBR\_UNCONFIG before declaring DOWN
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pref_multiplier
                            
                            	Preferred multiplier for the BFD session
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: pref_min_interval
                            
                            	Preferred minimum interval for the BFD session (ms)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pref_echo_min_interval
                            
                            	Preferred echo minimum interval for the BFD session (ms)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fast_detect
                            
                            	Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled)
                            	**type**\: bool
                            
                            .. attribute:: mode_info
                            
                            	Standard used for per\-member BFD
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.BfdConfig, self).__init__()

                                self.yang_name = "bfd-config"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("destination-address", ("destination_address", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.BfdConfig.DestinationAddress))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                    ('start_timer', YLeaf(YType.uint32, 'start-timer')),
                                    ('nbr_unconfig_timer', YLeaf(YType.uint32, 'nbr-unconfig-timer')),
                                    ('pref_multiplier', YLeaf(YType.uint16, 'pref-multiplier')),
                                    ('pref_min_interval', YLeaf(YType.uint32, 'pref-min-interval')),
                                    ('pref_echo_min_interval', YLeaf(YType.uint32, 'pref-echo-min-interval')),
                                    ('fast_detect', YLeaf(YType.boolean, 'fast-detect')),
                                    ('mode_info', YLeaf(YType.uint32, 'mode-info')),
                                ])
                                self.bundle_status = None
                                self.start_timer = None
                                self.nbr_unconfig_timer = None
                                self.pref_multiplier = None
                                self.pref_min_interval = None
                                self.pref_echo_min_interval = None
                                self.fast_detect = None
                                self.mode_info = None

                                self.destination_address = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.BfdConfig.DestinationAddress()
                                self.destination_address.parent = self
                                self._children_name_map["destination_address"] = "destination-address"
                                self._children_yang_names.add("destination-address")
                                self._segment_path = lambda: "bfd-config"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.BfdConfig, ['bundle_status', 'start_timer', 'nbr_unconfig_timer', 'pref_multiplier', 'pref_min_interval', 'pref_echo_min_interval', 'fast_detect', 'mode_info'], name, value)


                            class DestinationAddress(Entity):
                                """
                                Configured destination address for BFD session
                                
                                .. attribute:: af
                                
                                	AF
                                	**type**\:  :py:class:`BmAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmAfId>`
                                
                                .. attribute:: ipv4
                                
                                	IPv4 address type
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6
                                
                                	IPv6 address type
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.BfdConfig.DestinationAddress, self).__init__()

                                    self.yang_name = "destination-address"
                                    self.yang_parent_name = "bfd-config"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af', YLeaf(YType.enumeration, 'af')),
                                        ('ipv4', YLeaf(YType.str, 'ipv4')),
                                        ('ipv6', YLeaf(YType.str, 'ipv6')),
                                    ])
                                    self.af = None
                                    self.ipv4 = None
                                    self.ipv6 = None
                                    self._segment_path = lambda: "destination-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.BundleData.BfdConfig.DestinationAddress, ['af', 'ipv4', 'ipv6'], name, value)


                    class MemberData(Entity):
                        """
                        Member information
                        
                        .. attribute:: counters
                        
                        	Counters data about member link
                        	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.Counters>`
                        
                        .. attribute:: link_data
                        
                        	Lacp data about member link
                        	**type**\:  :py:class:`LinkData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.LinkData>`
                        
                        .. attribute:: member_mux_data
                        
                        	Mux state machine data
                        	**type**\:  :py:class:`MemberMuxData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData>`
                        
                        .. attribute:: mac_address
                        
                        	MAC address of this member (deprecated)
                        	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MacAddress>`
                        
                        .. attribute:: interface_name
                        
                        	Member's interface name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: port_priority
                        
                        	The priority of this member
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: port_number
                        
                        	Member's link number
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: underlying_link_id
                        
                        	Member's underlying link ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: link_order_number
                        
                        	Member's link order number
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: iccp_node
                        
                        	Location of member
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: bandwidth
                        
                        	Bandwidth of this member (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: lacp_enabled
                        
                        	Boolean indicating LACP enabled or not
                        	**type**\: str
                        
                        .. attribute:: member_type
                        
                        	Member's type (local/foreign)
                        	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                        
                        .. attribute:: member_name
                        
                        	Member's (short form) name
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData, self).__init__()

                            self.yang_name = "member-data"
                            self.yang_parent_name = "bundle-bundle-descendant"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("counters", ("counters", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.Counters)), ("link-data", ("link_data", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.LinkData)), ("member-mux-data", ("member_mux_data", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData)), ("mac-address", ("mac_address", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MacAddress))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                                ('port_number', YLeaf(YType.uint16, 'port-number')),
                                ('underlying_link_id', YLeaf(YType.uint16, 'underlying-link-id')),
                                ('link_order_number', YLeaf(YType.uint16, 'link-order-number')),
                                ('iccp_node', YLeaf(YType.uint32, 'iccp-node')),
                                ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                                ('lacp_enabled', YLeaf(YType.str, 'lacp-enabled')),
                                ('member_type', YLeaf(YType.enumeration, 'member-type')),
                                ('member_name', YLeaf(YType.str, 'member-name')),
                            ])
                            self.interface_name = None
                            self.port_priority = None
                            self.port_number = None
                            self.underlying_link_id = None
                            self.link_order_number = None
                            self.iccp_node = None
                            self.bandwidth = None
                            self.lacp_enabled = None
                            self.member_type = None
                            self.member_name = None

                            self.counters = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.Counters()
                            self.counters.parent = self
                            self._children_name_map["counters"] = "counters"
                            self._children_yang_names.add("counters")

                            self.link_data = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.LinkData()
                            self.link_data.parent = self
                            self._children_name_map["link_data"] = "link-data"
                            self._children_yang_names.add("link-data")

                            self.member_mux_data = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData()
                            self.member_mux_data.parent = self
                            self._children_name_map["member_mux_data"] = "member-mux-data"
                            self._children_yang_names.add("member-mux-data")

                            self.mac_address = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MacAddress()
                            self.mac_address.parent = self
                            self._children_name_map["mac_address"] = "mac-address"
                            self._children_yang_names.add("mac-address")
                            self._segment_path = lambda: "member-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData, ['interface_name', 'port_priority', 'port_number', 'underlying_link_id', 'link_order_number', 'iccp_node', 'bandwidth', 'lacp_enabled', 'member_type', 'member_name'], name, value)


                        class Counters(Entity):
                            """
                            Counters data about member link
                            
                            .. attribute:: lacpd_us_received
                            
                            	LACPDUs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: lacpd_us_transmitted
                            
                            	LACPDUs transmitted
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: marker_packets_received
                            
                            	Marker packets received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: marker_responses_transmitted
                            
                            	Marker response packets transmitted
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: illegal_packets_received
                            
                            	Illegal and unknown packets received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: excess_lacpd_us_received
                            
                            	LACPDUs received that exceed the rate limit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: excess_marker_packets_received
                            
                            	Marker packets received that exceed the rate limit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: defaulted
                            
                            	State flag set to Defaulted
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: expired
                            
                            	State flag set to Expired
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: last_cleared_sec
                            
                            	Last time counters cleared (s) (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: last_cleared_nsec
                            
                            	Last time counters cleared (nsec) (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.Counters, self).__init__()

                                self.yang_name = "counters"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('lacpd_us_received', YLeaf(YType.uint32, 'lacpd-us-received')),
                                    ('lacpd_us_transmitted', YLeaf(YType.uint32, 'lacpd-us-transmitted')),
                                    ('marker_packets_received', YLeaf(YType.uint32, 'marker-packets-received')),
                                    ('marker_responses_transmitted', YLeaf(YType.uint32, 'marker-responses-transmitted')),
                                    ('illegal_packets_received', YLeaf(YType.uint32, 'illegal-packets-received')),
                                    ('excess_lacpd_us_received', YLeaf(YType.uint32, 'excess-lacpd-us-received')),
                                    ('excess_marker_packets_received', YLeaf(YType.uint32, 'excess-marker-packets-received')),
                                    ('defaulted', YLeaf(YType.uint32, 'defaulted')),
                                    ('expired', YLeaf(YType.uint32, 'expired')),
                                    ('last_cleared_sec', YLeaf(YType.uint32, 'last-cleared-sec')),
                                    ('last_cleared_nsec', YLeaf(YType.uint32, 'last-cleared-nsec')),
                                ])
                                self.lacpd_us_received = None
                                self.lacpd_us_transmitted = None
                                self.marker_packets_received = None
                                self.marker_responses_transmitted = None
                                self.illegal_packets_received = None
                                self.excess_lacpd_us_received = None
                                self.excess_marker_packets_received = None
                                self.defaulted = None
                                self.expired = None
                                self.last_cleared_sec = None
                                self.last_cleared_nsec = None
                                self._segment_path = lambda: "counters"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.Counters, ['lacpd_us_received', 'lacpd_us_transmitted', 'marker_packets_received', 'marker_responses_transmitted', 'illegal_packets_received', 'excess_lacpd_us_received', 'excess_marker_packets_received', 'defaulted', 'expired', 'last_cleared_sec', 'last_cleared_nsec'], name, value)


                        class LinkData(Entity):
                            """
                            Lacp data about member link
                            
                            .. attribute:: interface_handle
                            
                            	Member's interface handle
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: actor_system_priority
                            
                            	System priority of actor system
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: actor_system_mac_address
                            
                            	MAC Address of the actor system
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            .. attribute:: actor_operational_key
                            
                            	Operational key for this port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_system_priority
                            
                            	System priority of partner system
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_system_mac_address
                            
                            	MAC Address used to identify the partner system
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            .. attribute:: partner_operational_key
                            
                            	Operational key for partner port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: selected_aggregator_id
                            
                            	MIB ifindex of selected bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: attached_aggregator_id
                            
                            	MIB ifindex of attached bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: actor_port_id
                            
                            	Port number of this port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: actor_port_priority
                            
                            	Priority of this port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_port_id
                            
                            	Port number of the partner's port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_port_priority
                            
                            	Priority of the partner's port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: actor_port_state
                            
                            	LACP state of this port
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: partner_port_state
                            
                            	LACP state of the partner's port
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.LinkData, self).__init__()

                                self.yang_name = "link-data"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                    ('actor_system_priority', YLeaf(YType.uint16, 'actor-system-priority')),
                                    ('actor_system_mac_address', YLeaf(YType.str, 'actor-system-mac-address')),
                                    ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                                    ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                                    ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                                    ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                                    ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                                    ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                                    ('actor_port_id', YLeaf(YType.uint16, 'actor-port-id')),
                                    ('actor_port_priority', YLeaf(YType.uint16, 'actor-port-priority')),
                                    ('partner_port_id', YLeaf(YType.uint16, 'partner-port-id')),
                                    ('partner_port_priority', YLeaf(YType.uint16, 'partner-port-priority')),
                                    ('actor_port_state', YLeaf(YType.uint8, 'actor-port-state')),
                                    ('partner_port_state', YLeaf(YType.uint8, 'partner-port-state')),
                                ])
                                self.interface_handle = None
                                self.actor_system_priority = None
                                self.actor_system_mac_address = None
                                self.actor_operational_key = None
                                self.partner_system_priority = None
                                self.partner_system_mac_address = None
                                self.partner_operational_key = None
                                self.selected_aggregator_id = None
                                self.attached_aggregator_id = None
                                self.actor_port_id = None
                                self.actor_port_priority = None
                                self.partner_port_id = None
                                self.partner_port_priority = None
                                self.actor_port_state = None
                                self.partner_port_state = None
                                self._segment_path = lambda: "link-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.LinkData, ['interface_handle', 'actor_system_priority', 'actor_system_mac_address', 'actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key', 'selected_aggregator_id', 'attached_aggregator_id', 'actor_port_id', 'actor_port_priority', 'partner_port_id', 'partner_port_priority', 'actor_port_state', 'partner_port_state'], name, value)


                        class MemberMuxData(Entity):
                            """
                            Mux state machine data
                            
                            .. attribute:: member_mux_state_reason_data
                            
                            	Data regarding the reason for last Mux state change
                            	**type**\:  :py:class:`MemberMuxStateReasonData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData.MemberMuxStateReasonData>`
                            
                            .. attribute:: mux_state
                            
                            	Current state of this bundle member
                            	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                            
                            .. attribute:: error
                            
                            	Internal value indicating if an error occurred trying to put a link into the desired state
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_mux_state_reason
                            
                            	Reason for last Mux state change
                            	**type**\:  :py:class:`BmMbrStateReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMbrStateReason>`
                            
                            .. attribute:: member_state
                            
                            	Current internal state of this bundle member
                            	**type**\:  :py:class:`BmdMemberState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberState>`
                            
                            .. attribute:: mux_state_reason
                            
                            	Reason for last Mux state change (Deprecated)
                            	**type**\:  :py:class:`BmMuxreason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxreason>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData, self).__init__()

                                self.yang_name = "member-mux-data"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-mux-state-reason-data", ("member_mux_state_reason_data", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData.MemberMuxStateReasonData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                                    ('error', YLeaf(YType.uint32, 'error')),
                                    ('member_mux_state_reason', YLeaf(YType.enumeration, 'member-mux-state-reason')),
                                    ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                    ('mux_state_reason', YLeaf(YType.enumeration, 'mux-state-reason')),
                                ])
                                self.mux_state = None
                                self.error = None
                                self.member_mux_state_reason = None
                                self.member_state = None
                                self.mux_state_reason = None

                                self.member_mux_state_reason_data = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData.MemberMuxStateReasonData()
                                self.member_mux_state_reason_data.parent = self
                                self._children_name_map["member_mux_state_reason_data"] = "member-mux-state-reason-data"
                                self._children_yang_names.add("member-mux-state-reason-data")
                                self._segment_path = lambda: "member-mux-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData, ['mux_state', 'error', 'member_mux_state_reason', 'member_state', 'mux_state_reason'], name, value)


                            class MemberMuxStateReasonData(Entity):
                                """
                                Data regarding the reason for last Mux state
                                change
                                
                                .. attribute:: reason_type
                                
                                	The item the reason applies to
                                	**type**\:  :py:class:`BmStateReasonTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmStateReasonTarget>`
                                
                                .. attribute:: severity
                                
                                	The severity of the reason
                                	**type**\:  :py:class:`BmSeverity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmSeverity>`
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData.MemberMuxStateReasonData, self).__init__()

                                    self.yang_name = "member-mux-state-reason-data"
                                    self.yang_parent_name = "member-mux-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('reason_type', YLeaf(YType.enumeration, 'reason-type')),
                                        ('severity', YLeaf(YType.enumeration, 'severity')),
                                    ])
                                    self.reason_type = None
                                    self.severity = None
                                    self._segment_path = lambda: "member-mux-state-reason-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MemberMuxData.MemberMuxStateReasonData, ['reason_type', 'severity'], name, value)


                        class MacAddress(Entity):
                            """
                            MAC address of this member (deprecated)
                            
                            .. attribute:: address
                            
                            	MAC address
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MacAddress, self).__init__()

                                self.yang_name = "mac-address"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.str, 'address')),
                                ])
                                self.address = None
                                self._segment_path = lambda: "mac-address"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleDescendant.MemberData.MacAddress, ['address'], name, value)


                class BundleBundleChildrenMembers(Entity):
                    """
                    Children of bundle with common bundle
                    information
                    
                    .. attribute:: bundle_bundle_children_member
                    
                    	Bundle member item with common bundle information
                    	**type**\: list of  		 :py:class:`BundleBundleChildrenMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers, self).__init__()

                        self.yang_name = "bundle-bundle-children-members"
                        self.yang_parent_name = "bundle-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("bundle-bundle-children-member", ("bundle_bundle_children_member", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember))])
                        self._leafs = OrderedDict()

                        self.bundle_bundle_children_member = YList(self)
                        self._segment_path = lambda: "bundle-bundle-children-members"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers, [], name, value)


                    class BundleBundleChildrenMember(Entity):
                        """
                        Bundle member item with common bundle
                        information
                        
                        .. attribute:: member_interface  (key)
                        
                        	Member interface
                        	**type**\: str
                        
                        .. attribute:: counters
                        
                        	Counters data about member link
                        	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.Counters>`
                        
                        .. attribute:: link_data
                        
                        	Lacp data about member link
                        	**type**\:  :py:class:`LinkData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.LinkData>`
                        
                        .. attribute:: member_mux_data
                        
                        	Mux state machine data
                        	**type**\:  :py:class:`MemberMuxData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData>`
                        
                        .. attribute:: mac_address
                        
                        	MAC address of this member (deprecated)
                        	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MacAddress>`
                        
                        .. attribute:: interface_name
                        
                        	Member's interface name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: port_priority
                        
                        	The priority of this member
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: port_number
                        
                        	Member's link number
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: underlying_link_id
                        
                        	Member's underlying link ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: link_order_number
                        
                        	Member's link order number
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: iccp_node
                        
                        	Location of member
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: bandwidth
                        
                        	Bandwidth of this member (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: lacp_enabled
                        
                        	Boolean indicating LACP enabled or not
                        	**type**\: str
                        
                        .. attribute:: member_type
                        
                        	Member's type (local/foreign)
                        	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                        
                        .. attribute:: member_name
                        
                        	Member's (short form) name
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember, self).__init__()

                            self.yang_name = "bundle-bundle-children-member"
                            self.yang_parent_name = "bundle-bundle-children-members"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['member_interface']
                            self._child_container_classes = OrderedDict([("counters", ("counters", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.Counters)), ("link-data", ("link_data", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.LinkData)), ("member-mux-data", ("member_mux_data", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData)), ("mac-address", ("mac_address", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MacAddress))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('member_interface', YLeaf(YType.str, 'member-interface')),
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                                ('port_number', YLeaf(YType.uint16, 'port-number')),
                                ('underlying_link_id', YLeaf(YType.uint16, 'underlying-link-id')),
                                ('link_order_number', YLeaf(YType.uint16, 'link-order-number')),
                                ('iccp_node', YLeaf(YType.uint32, 'iccp-node')),
                                ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                                ('lacp_enabled', YLeaf(YType.str, 'lacp-enabled')),
                                ('member_type', YLeaf(YType.enumeration, 'member-type')),
                                ('member_name', YLeaf(YType.str, 'member-name')),
                            ])
                            self.member_interface = None
                            self.interface_name = None
                            self.port_priority = None
                            self.port_number = None
                            self.underlying_link_id = None
                            self.link_order_number = None
                            self.iccp_node = None
                            self.bandwidth = None
                            self.lacp_enabled = None
                            self.member_type = None
                            self.member_name = None

                            self.counters = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.Counters()
                            self.counters.parent = self
                            self._children_name_map["counters"] = "counters"
                            self._children_yang_names.add("counters")

                            self.link_data = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.LinkData()
                            self.link_data.parent = self
                            self._children_name_map["link_data"] = "link-data"
                            self._children_yang_names.add("link-data")

                            self.member_mux_data = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData()
                            self.member_mux_data.parent = self
                            self._children_name_map["member_mux_data"] = "member-mux-data"
                            self._children_yang_names.add("member-mux-data")

                            self.mac_address = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MacAddress()
                            self.mac_address.parent = self
                            self._children_name_map["mac_address"] = "mac-address"
                            self._children_yang_names.add("mac-address")
                            self._segment_path = lambda: "bundle-bundle-children-member" + "[member-interface='" + str(self.member_interface) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember, ['member_interface', 'interface_name', 'port_priority', 'port_number', 'underlying_link_id', 'link_order_number', 'iccp_node', 'bandwidth', 'lacp_enabled', 'member_type', 'member_name'], name, value)


                        class Counters(Entity):
                            """
                            Counters data about member link
                            
                            .. attribute:: lacpd_us_received
                            
                            	LACPDUs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: lacpd_us_transmitted
                            
                            	LACPDUs transmitted
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: marker_packets_received
                            
                            	Marker packets received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: marker_responses_transmitted
                            
                            	Marker response packets transmitted
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: illegal_packets_received
                            
                            	Illegal and unknown packets received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: excess_lacpd_us_received
                            
                            	LACPDUs received that exceed the rate limit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: excess_marker_packets_received
                            
                            	Marker packets received that exceed the rate limit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: defaulted
                            
                            	State flag set to Defaulted
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: expired
                            
                            	State flag set to Expired
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: last_cleared_sec
                            
                            	Last time counters cleared (s) (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: last_cleared_nsec
                            
                            	Last time counters cleared (nsec) (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.Counters, self).__init__()

                                self.yang_name = "counters"
                                self.yang_parent_name = "bundle-bundle-children-member"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('lacpd_us_received', YLeaf(YType.uint32, 'lacpd-us-received')),
                                    ('lacpd_us_transmitted', YLeaf(YType.uint32, 'lacpd-us-transmitted')),
                                    ('marker_packets_received', YLeaf(YType.uint32, 'marker-packets-received')),
                                    ('marker_responses_transmitted', YLeaf(YType.uint32, 'marker-responses-transmitted')),
                                    ('illegal_packets_received', YLeaf(YType.uint32, 'illegal-packets-received')),
                                    ('excess_lacpd_us_received', YLeaf(YType.uint32, 'excess-lacpd-us-received')),
                                    ('excess_marker_packets_received', YLeaf(YType.uint32, 'excess-marker-packets-received')),
                                    ('defaulted', YLeaf(YType.uint32, 'defaulted')),
                                    ('expired', YLeaf(YType.uint32, 'expired')),
                                    ('last_cleared_sec', YLeaf(YType.uint32, 'last-cleared-sec')),
                                    ('last_cleared_nsec', YLeaf(YType.uint32, 'last-cleared-nsec')),
                                ])
                                self.lacpd_us_received = None
                                self.lacpd_us_transmitted = None
                                self.marker_packets_received = None
                                self.marker_responses_transmitted = None
                                self.illegal_packets_received = None
                                self.excess_lacpd_us_received = None
                                self.excess_marker_packets_received = None
                                self.defaulted = None
                                self.expired = None
                                self.last_cleared_sec = None
                                self.last_cleared_nsec = None
                                self._segment_path = lambda: "counters"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.Counters, ['lacpd_us_received', 'lacpd_us_transmitted', 'marker_packets_received', 'marker_responses_transmitted', 'illegal_packets_received', 'excess_lacpd_us_received', 'excess_marker_packets_received', 'defaulted', 'expired', 'last_cleared_sec', 'last_cleared_nsec'], name, value)


                        class LinkData(Entity):
                            """
                            Lacp data about member link
                            
                            .. attribute:: interface_handle
                            
                            	Member's interface handle
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: actor_system_priority
                            
                            	System priority of actor system
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: actor_system_mac_address
                            
                            	MAC Address of the actor system
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            .. attribute:: actor_operational_key
                            
                            	Operational key for this port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_system_priority
                            
                            	System priority of partner system
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_system_mac_address
                            
                            	MAC Address used to identify the partner system
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            .. attribute:: partner_operational_key
                            
                            	Operational key for partner port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: selected_aggregator_id
                            
                            	MIB ifindex of selected bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: attached_aggregator_id
                            
                            	MIB ifindex of attached bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: actor_port_id
                            
                            	Port number of this port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: actor_port_priority
                            
                            	Priority of this port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_port_id
                            
                            	Port number of the partner's port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_port_priority
                            
                            	Priority of the partner's port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: actor_port_state
                            
                            	LACP state of this port
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: partner_port_state
                            
                            	LACP state of the partner's port
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.LinkData, self).__init__()

                                self.yang_name = "link-data"
                                self.yang_parent_name = "bundle-bundle-children-member"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                    ('actor_system_priority', YLeaf(YType.uint16, 'actor-system-priority')),
                                    ('actor_system_mac_address', YLeaf(YType.str, 'actor-system-mac-address')),
                                    ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                                    ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                                    ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                                    ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                                    ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                                    ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                                    ('actor_port_id', YLeaf(YType.uint16, 'actor-port-id')),
                                    ('actor_port_priority', YLeaf(YType.uint16, 'actor-port-priority')),
                                    ('partner_port_id', YLeaf(YType.uint16, 'partner-port-id')),
                                    ('partner_port_priority', YLeaf(YType.uint16, 'partner-port-priority')),
                                    ('actor_port_state', YLeaf(YType.uint8, 'actor-port-state')),
                                    ('partner_port_state', YLeaf(YType.uint8, 'partner-port-state')),
                                ])
                                self.interface_handle = None
                                self.actor_system_priority = None
                                self.actor_system_mac_address = None
                                self.actor_operational_key = None
                                self.partner_system_priority = None
                                self.partner_system_mac_address = None
                                self.partner_operational_key = None
                                self.selected_aggregator_id = None
                                self.attached_aggregator_id = None
                                self.actor_port_id = None
                                self.actor_port_priority = None
                                self.partner_port_id = None
                                self.partner_port_priority = None
                                self.actor_port_state = None
                                self.partner_port_state = None
                                self._segment_path = lambda: "link-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.LinkData, ['interface_handle', 'actor_system_priority', 'actor_system_mac_address', 'actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key', 'selected_aggregator_id', 'attached_aggregator_id', 'actor_port_id', 'actor_port_priority', 'partner_port_id', 'partner_port_priority', 'actor_port_state', 'partner_port_state'], name, value)


                        class MemberMuxData(Entity):
                            """
                            Mux state machine data
                            
                            .. attribute:: member_mux_state_reason_data
                            
                            	Data regarding the reason for last Mux state change
                            	**type**\:  :py:class:`MemberMuxStateReasonData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData.MemberMuxStateReasonData>`
                            
                            .. attribute:: mux_state
                            
                            	Current state of this bundle member
                            	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                            
                            .. attribute:: error
                            
                            	Internal value indicating if an error occurred trying to put a link into the desired state
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_mux_state_reason
                            
                            	Reason for last Mux state change
                            	**type**\:  :py:class:`BmMbrStateReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMbrStateReason>`
                            
                            .. attribute:: member_state
                            
                            	Current internal state of this bundle member
                            	**type**\:  :py:class:`BmdMemberState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberState>`
                            
                            .. attribute:: mux_state_reason
                            
                            	Reason for last Mux state change (Deprecated)
                            	**type**\:  :py:class:`BmMuxreason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxreason>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData, self).__init__()

                                self.yang_name = "member-mux-data"
                                self.yang_parent_name = "bundle-bundle-children-member"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-mux-state-reason-data", ("member_mux_state_reason_data", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData.MemberMuxStateReasonData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                                    ('error', YLeaf(YType.uint32, 'error')),
                                    ('member_mux_state_reason', YLeaf(YType.enumeration, 'member-mux-state-reason')),
                                    ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                    ('mux_state_reason', YLeaf(YType.enumeration, 'mux-state-reason')),
                                ])
                                self.mux_state = None
                                self.error = None
                                self.member_mux_state_reason = None
                                self.member_state = None
                                self.mux_state_reason = None

                                self.member_mux_state_reason_data = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData.MemberMuxStateReasonData()
                                self.member_mux_state_reason_data.parent = self
                                self._children_name_map["member_mux_state_reason_data"] = "member-mux-state-reason-data"
                                self._children_yang_names.add("member-mux-state-reason-data")
                                self._segment_path = lambda: "member-mux-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData, ['mux_state', 'error', 'member_mux_state_reason', 'member_state', 'mux_state_reason'], name, value)


                            class MemberMuxStateReasonData(Entity):
                                """
                                Data regarding the reason for last Mux state
                                change
                                
                                .. attribute:: reason_type
                                
                                	The item the reason applies to
                                	**type**\:  :py:class:`BmStateReasonTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmStateReasonTarget>`
                                
                                .. attribute:: severity
                                
                                	The severity of the reason
                                	**type**\:  :py:class:`BmSeverity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmSeverity>`
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData.MemberMuxStateReasonData, self).__init__()

                                    self.yang_name = "member-mux-state-reason-data"
                                    self.yang_parent_name = "member-mux-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('reason_type', YLeaf(YType.enumeration, 'reason-type')),
                                        ('severity', YLeaf(YType.enumeration, 'severity')),
                                    ])
                                    self.reason_type = None
                                    self.severity = None
                                    self._segment_path = lambda: "member-mux-state-reason-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MemberMuxData.MemberMuxStateReasonData, ['reason_type', 'severity'], name, value)


                        class MacAddress(Entity):
                            """
                            MAC address of this member (deprecated)
                            
                            .. attribute:: address
                            
                            	MAC address
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MacAddress, self).__init__()

                                self.yang_name = "mac-address"
                                self.yang_parent_name = "bundle-bundle-children-member"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.str, 'address')),
                                ])
                                self.address = None
                                self._segment_path = lambda: "mac-address"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleChildrenMembers.BundleBundleChildrenMember.MacAddress, ['address'], name, value)


                class BundleBundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: mac_address
                    
                    	MAC address of this member
                    	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.MacAddress>`
                    
                    .. attribute:: bundle_interface_name
                    
                    	Bundle interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: available_bandwidth
                    
                    	Bandwidth available to the bundle interface (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: effective_bandwidth
                    
                    	Effective bandwidth on the bundle interface (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: configured_bandwidth
                    
                    	Bandwidth configured on the bundle interface (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: minimum_active_links
                    
                    	Minimum number of active links for bundle to go up
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: maximum_active_links
                    
                    	Maximum number of active links in the bundle
                    	**type**\: int
                    
                    	**range:** 0..255
                    
                    .. attribute:: maximum_active_links_source
                    
                    	Source of maximum active links value
                    	**type**\:  :py:class:`BmWhichSystem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmWhichSystem>`
                    
                    .. attribute:: minimum_bandwidth
                    
                    	Minimum bundle bandwidth for bundle to go up (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: primary_member
                    
                    	Primary bundle member (no longer applicable)
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: bundle_status
                    
                    	The state of the bundle
                    	**type**\:  :py:class:`BmBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlState>`
                    
                    .. attribute:: active_member_count
                    
                    	The number of active local members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: standby_member_count
                    
                    	The number of standby local members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: configured_member_count
                    
                    	The number of configured local members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: mac_source
                    
                    	The source of the MAC Address
                    	**type**\:  :py:class:`BmBdlMacSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlMacSource>`
                    
                    .. attribute:: mac_source_member
                    
                    	The name of the member that supplied the MAC address
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: inter_chassis
                    
                    	Indicates if this bundle is operating as an inter\-chassis link (1 = I\-C link, 0 = normal)
                    	**type**\: bool
                    
                    .. attribute:: is_active
                    
                    	Indicates the active/standby redundancy state of the device for the bundle
                    	**type**\: bool
                    
                    .. attribute:: lacp_status
                    
                    	The status of the LACP feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: mlacp_status
                    
                    	The status of the mLACP feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: ipv4bfd_status
                    
                    	The status of the BFD (IPv4) feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: link_order_status
                    
                    	The status of the link order signaling feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: ipv6bfd_status
                    
                    	The status of the BFD (IPv6) feature on the bundle
                    	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                    
                    .. attribute:: load_balance_hash_type
                    
                    	The type of hash to use for load balancing
                    	**type**\: str
                    
                    .. attribute:: load_balance_locality_threshold
                    
                    	The number of links required per rack for localized load balancing
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: suppression_timer
                    
                    	Timer for suppressing bundle state flaps
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: wait_while_timer
                    
                    	The wait while time used for member ports
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: collector_max_delay
                    
                    	Collector Max Delay
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: cisco_extensions
                    
                    	The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled)
                    	**type**\: bool
                    
                    .. attribute:: lacp_nonrevertive
                    
                    	The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled)
                    	**type**\: bool
                    
                    .. attribute:: iccp_group_id
                    
                    	ICCP Group that the bundle is configured to
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: active_foreign_member_count
                    
                    	The number of active foreign members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: configured_foreign_member_count
                    
                    	The number of configured local members on the bundle
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: switchover_type
                    
                    	How a switchover of the bundle from this device will occur
                    	**type**\:  :py:class:`BmdMlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpSwitchover>`
                    
                    .. attribute:: maximize_threshold_value_links
                    
                    	Attempt to maximize the bundle if links are below this value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: maximize_threshold_value_band_width
                    
                    	Attempt to maximize the bundle if bandwidth is below this value
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: mlacp_mode
                    
                    	Indicates the mode of the device for the bundle
                    	**type**\:  :py:class:`BundleMlacpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMlacpMode>`
                    
                    .. attribute:: recovery_delay
                    
                    	Number of seconds to wait before becoming active after recovering from a failure
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    	**units**\: second
                    
                    .. attribute:: singleton
                    
                    	Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not singleton)
                    	**type**\: bool
                    
                    .. attribute:: bfd_config
                    
                    	Configuration values for BFD on bundle members
                    	**type**\: list of  		 :py:class:`BfdConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.BfdConfig>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem, self).__init__()

                        self.yang_name = "bundle-bundle-item"
                        self.yang_parent_name = "bundle-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.MacAddress))])
                        self._child_list_classes = OrderedDict([("bfd-config", ("bfd_config", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.BfdConfig))])
                        self._leafs = OrderedDict([
                            ('bundle_interface_name', YLeaf(YType.str, 'bundle-interface-name')),
                            ('available_bandwidth', YLeaf(YType.uint32, 'available-bandwidth')),
                            ('effective_bandwidth', YLeaf(YType.uint32, 'effective-bandwidth')),
                            ('configured_bandwidth', YLeaf(YType.uint32, 'configured-bandwidth')),
                            ('minimum_active_links', YLeaf(YType.uint8, 'minimum-active-links')),
                            ('maximum_active_links', YLeaf(YType.uint8, 'maximum-active-links')),
                            ('maximum_active_links_source', YLeaf(YType.enumeration, 'maximum-active-links-source')),
                            ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                            ('primary_member', YLeaf(YType.str, 'primary-member')),
                            ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                            ('active_member_count', YLeaf(YType.uint16, 'active-member-count')),
                            ('standby_member_count', YLeaf(YType.uint16, 'standby-member-count')),
                            ('configured_member_count', YLeaf(YType.uint16, 'configured-member-count')),
                            ('mac_source', YLeaf(YType.enumeration, 'mac-source')),
                            ('mac_source_member', YLeaf(YType.str, 'mac-source-member')),
                            ('inter_chassis', YLeaf(YType.boolean, 'inter-chassis')),
                            ('is_active', YLeaf(YType.boolean, 'is-active')),
                            ('lacp_status', YLeaf(YType.enumeration, 'lacp-status')),
                            ('mlacp_status', YLeaf(YType.enumeration, 'mlacp-status')),
                            ('ipv4bfd_status', YLeaf(YType.enumeration, 'ipv4bfd-status')),
                            ('link_order_status', YLeaf(YType.enumeration, 'link-order-status')),
                            ('ipv6bfd_status', YLeaf(YType.enumeration, 'ipv6bfd-status')),
                            ('load_balance_hash_type', YLeaf(YType.str, 'load-balance-hash-type')),
                            ('load_balance_locality_threshold', YLeaf(YType.uint16, 'load-balance-locality-threshold')),
                            ('suppression_timer', YLeaf(YType.uint16, 'suppression-timer')),
                            ('wait_while_timer', YLeaf(YType.uint16, 'wait-while-timer')),
                            ('collector_max_delay', YLeaf(YType.uint16, 'collector-max-delay')),
                            ('cisco_extensions', YLeaf(YType.boolean, 'cisco-extensions')),
                            ('lacp_nonrevertive', YLeaf(YType.boolean, 'lacp-nonrevertive')),
                            ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                            ('active_foreign_member_count', YLeaf(YType.uint16, 'active-foreign-member-count')),
                            ('configured_foreign_member_count', YLeaf(YType.uint16, 'configured-foreign-member-count')),
                            ('switchover_type', YLeaf(YType.enumeration, 'switchover-type')),
                            ('maximize_threshold_value_links', YLeaf(YType.uint32, 'maximize-threshold-value-links')),
                            ('maximize_threshold_value_band_width', YLeaf(YType.uint32, 'maximize-threshold-value-band-width')),
                            ('mlacp_mode', YLeaf(YType.enumeration, 'mlacp-mode')),
                            ('recovery_delay', YLeaf(YType.uint16, 'recovery-delay')),
                            ('singleton', YLeaf(YType.boolean, 'singleton')),
                        ])
                        self.bundle_interface_name = None
                        self.available_bandwidth = None
                        self.effective_bandwidth = None
                        self.configured_bandwidth = None
                        self.minimum_active_links = None
                        self.maximum_active_links = None
                        self.maximum_active_links_source = None
                        self.minimum_bandwidth = None
                        self.primary_member = None
                        self.bundle_status = None
                        self.active_member_count = None
                        self.standby_member_count = None
                        self.configured_member_count = None
                        self.mac_source = None
                        self.mac_source_member = None
                        self.inter_chassis = None
                        self.is_active = None
                        self.lacp_status = None
                        self.mlacp_status = None
                        self.ipv4bfd_status = None
                        self.link_order_status = None
                        self.ipv6bfd_status = None
                        self.load_balance_hash_type = None
                        self.load_balance_locality_threshold = None
                        self.suppression_timer = None
                        self.wait_while_timer = None
                        self.collector_max_delay = None
                        self.cisco_extensions = None
                        self.lacp_nonrevertive = None
                        self.iccp_group_id = None
                        self.active_foreign_member_count = None
                        self.configured_foreign_member_count = None
                        self.switchover_type = None
                        self.maximize_threshold_value_links = None
                        self.maximize_threshold_value_band_width = None
                        self.mlacp_mode = None
                        self.recovery_delay = None
                        self.singleton = None

                        self.mac_address = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.MacAddress()
                        self.mac_address.parent = self
                        self._children_name_map["mac_address"] = "mac-address"
                        self._children_yang_names.add("mac-address")

                        self.bfd_config = YList(self)
                        self._segment_path = lambda: "bundle-bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem, ['bundle_interface_name', 'available_bandwidth', 'effective_bandwidth', 'configured_bandwidth', 'minimum_active_links', 'maximum_active_links', 'maximum_active_links_source', 'minimum_bandwidth', 'primary_member', 'bundle_status', 'active_member_count', 'standby_member_count', 'configured_member_count', 'mac_source', 'mac_source_member', 'inter_chassis', 'is_active', 'lacp_status', 'mlacp_status', 'ipv4bfd_status', 'link_order_status', 'ipv6bfd_status', 'load_balance_hash_type', 'load_balance_locality_threshold', 'suppression_timer', 'wait_while_timer', 'collector_max_delay', 'cisco_extensions', 'lacp_nonrevertive', 'iccp_group_id', 'active_foreign_member_count', 'configured_foreign_member_count', 'switchover_type', 'maximize_threshold_value_links', 'maximize_threshold_value_band_width', 'mlacp_mode', 'recovery_delay', 'singleton'], name, value)


                    class MacAddress(Entity):
                        """
                        MAC address of this member
                        
                        .. attribute:: address
                        
                        	MAC address
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.MacAddress, self).__init__()

                            self.yang_name = "mac-address"
                            self.yang_parent_name = "bundle-bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.str, 'address')),
                            ])
                            self.address = None
                            self._segment_path = lambda: "mac-address"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.MacAddress, ['address'], name, value)


                    class BfdConfig(Entity):
                        """
                        Configuration values for BFD on bundle members
                        
                        .. attribute:: destination_address
                        
                        	Configured destination address for BFD session
                        	**type**\:  :py:class:`DestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.BfdConfig.DestinationAddress>`
                        
                        .. attribute:: bundle_status
                        
                        	Status of BFD on the bundle
                        	**type**\:  :py:class:`BmdBfdBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBfdBdlState>`
                        
                        .. attribute:: start_timer
                        
                        	Time to wait on session start before declaring DOWN
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: nbr_unconfig_timer
                        
                        	Time to wait on session NBR\_UNCONFIG before declaring DOWN
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: pref_multiplier
                        
                        	Preferred multiplier for the BFD session
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: pref_min_interval
                        
                        	Preferred minimum interval for the BFD session (ms)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: pref_echo_min_interval
                        
                        	Preferred echo minimum interval for the BFD session (ms)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: fast_detect
                        
                        	Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled)
                        	**type**\: bool
                        
                        .. attribute:: mode_info
                        
                        	Standard used for per\-member BFD
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.BfdConfig, self).__init__()

                            self.yang_name = "bfd-config"
                            self.yang_parent_name = "bundle-bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("destination-address", ("destination_address", BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.BfdConfig.DestinationAddress))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                ('start_timer', YLeaf(YType.uint32, 'start-timer')),
                                ('nbr_unconfig_timer', YLeaf(YType.uint32, 'nbr-unconfig-timer')),
                                ('pref_multiplier', YLeaf(YType.uint16, 'pref-multiplier')),
                                ('pref_min_interval', YLeaf(YType.uint32, 'pref-min-interval')),
                                ('pref_echo_min_interval', YLeaf(YType.uint32, 'pref-echo-min-interval')),
                                ('fast_detect', YLeaf(YType.boolean, 'fast-detect')),
                                ('mode_info', YLeaf(YType.uint32, 'mode-info')),
                            ])
                            self.bundle_status = None
                            self.start_timer = None
                            self.nbr_unconfig_timer = None
                            self.pref_multiplier = None
                            self.pref_min_interval = None
                            self.pref_echo_min_interval = None
                            self.fast_detect = None
                            self.mode_info = None

                            self.destination_address = BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.BfdConfig.DestinationAddress()
                            self.destination_address.parent = self
                            self._children_name_map["destination_address"] = "destination-address"
                            self._children_yang_names.add("destination-address")
                            self._segment_path = lambda: "bfd-config"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.BfdConfig, ['bundle_status', 'start_timer', 'nbr_unconfig_timer', 'pref_multiplier', 'pref_min_interval', 'pref_echo_min_interval', 'fast_detect', 'mode_info'], name, value)


                        class DestinationAddress(Entity):
                            """
                            Configured destination address for BFD session
                            
                            .. attribute:: af
                            
                            	AF
                            	**type**\:  :py:class:`BmAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmAfId>`
                            
                            .. attribute:: ipv4
                            
                            	IPv4 address type
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: ipv6
                            
                            	IPv6 address type
                            	**type**\: str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.BfdConfig.DestinationAddress, self).__init__()

                                self.yang_name = "destination-address"
                                self.yang_parent_name = "bfd-config"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('af', YLeaf(YType.enumeration, 'af')),
                                    ('ipv4', YLeaf(YType.str, 'ipv4')),
                                    ('ipv6', YLeaf(YType.str, 'ipv6')),
                                ])
                                self.af = None
                                self.ipv4 = None
                                self.ipv6 = None
                                self._segment_path = lambda: "destination-address"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleBundles.BundleBundle.BundleBundleItem.BfdConfig.DestinationAddress, ['af', 'ipv4', 'ipv6'], name, value)


        class BundleMembers(Entity):
            """
            Member interfaces with common bundle
            information
            
            .. attribute:: bundle_member
            
            	Member interface
            	**type**\: list of  		 :py:class:`BundleMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.Bundle.BundleMembers, self).__init__()

                self.yang_name = "bundle-members"
                self.yang_parent_name = "bundle"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("bundle-member", ("bundle_member", BundleInformation.Bundle.BundleMembers.BundleMember))])
                self._leafs = OrderedDict()

                self.bundle_member = YList(self)
                self._segment_path = lambda: "bundle-members"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/bundle/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.Bundle.BundleMembers, [], name, value)


            class BundleMember(Entity):
                """
                Member interface
                
                .. attribute:: member_interface  (key)
                
                	Member interface
                	**type**\: str
                
                .. attribute:: bundle_member_ancestor
                
                	Data for this item and its parent bundle
                	**type**\:  :py:class:`BundleMemberAncestor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor>`
                
                .. attribute:: bundle_member_item
                
                	Data for this item
                	**type**\:  :py:class:`BundleMemberItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.Bundle.BundleMembers.BundleMember, self).__init__()

                    self.yang_name = "bundle-member"
                    self.yang_parent_name = "bundle-members"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['member_interface']
                    self._child_container_classes = OrderedDict([("bundle-member-ancestor", ("bundle_member_ancestor", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor)), ("bundle-member-item", ("bundle_member_item", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('member_interface', YLeaf(YType.str, 'member-interface')),
                    ])
                    self.member_interface = None

                    self.bundle_member_ancestor = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor()
                    self.bundle_member_ancestor.parent = self
                    self._children_name_map["bundle_member_ancestor"] = "bundle-member-ancestor"
                    self._children_yang_names.add("bundle-member-ancestor")

                    self.bundle_member_item = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem()
                    self.bundle_member_item.parent = self
                    self._children_name_map["bundle_member_item"] = "bundle-member-item"
                    self._children_yang_names.add("bundle-member-item")
                    self._segment_path = lambda: "bundle-member" + "[member-interface='" + str(self.member_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/bundle/bundle-members/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember, ['member_interface'], name, value)


                class BundleMemberAncestor(Entity):
                    """
                    Data for this item and its parent bundle
                    
                    .. attribute:: bundle_data
                    
                    	Bundle information
                    	**type**\:  :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData>`
                    
                    .. attribute:: member_data
                    
                    	Member information
                    	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor, self).__init__()

                        self.yang_name = "bundle-member-ancestor"
                        self.yang_parent_name = "bundle-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData))])
                        self._child_list_classes = OrderedDict([("member-data", ("member_data", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData))])
                        self._leafs = OrderedDict()

                        self.bundle_data = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData()
                        self.bundle_data.parent = self
                        self._children_name_map["bundle_data"] = "bundle-data"
                        self._children_yang_names.add("bundle-data")

                        self.member_data = YList(self)
                        self._segment_path = lambda: "bundle-member-ancestor"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor, [], name, value)


                    class BundleData(Entity):
                        """
                        Bundle information
                        
                        .. attribute:: mac_address
                        
                        	MAC address of this member
                        	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.MacAddress>`
                        
                        .. attribute:: bundle_interface_name
                        
                        	Bundle interface name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: available_bandwidth
                        
                        	Bandwidth available to the bundle interface (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: effective_bandwidth
                        
                        	Effective bandwidth on the bundle interface (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: configured_bandwidth
                        
                        	Bandwidth configured on the bundle interface (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: minimum_active_links
                        
                        	Minimum number of active links for bundle to go up
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: maximum_active_links
                        
                        	Maximum number of active links in the bundle
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: maximum_active_links_source
                        
                        	Source of maximum active links value
                        	**type**\:  :py:class:`BmWhichSystem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmWhichSystem>`
                        
                        .. attribute:: minimum_bandwidth
                        
                        	Minimum bundle bandwidth for bundle to go up (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: primary_member
                        
                        	Primary bundle member (no longer applicable)
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: bundle_status
                        
                        	The state of the bundle
                        	**type**\:  :py:class:`BmBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlState>`
                        
                        .. attribute:: active_member_count
                        
                        	The number of active local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: standby_member_count
                        
                        	The number of standby local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: configured_member_count
                        
                        	The number of configured local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: mac_source
                        
                        	The source of the MAC Address
                        	**type**\:  :py:class:`BmBdlMacSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlMacSource>`
                        
                        .. attribute:: mac_source_member
                        
                        	The name of the member that supplied the MAC address
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: inter_chassis
                        
                        	Indicates if this bundle is operating as an inter\-chassis link (1 = I\-C link, 0 = normal)
                        	**type**\: bool
                        
                        .. attribute:: is_active
                        
                        	Indicates the active/standby redundancy state of the device for the bundle
                        	**type**\: bool
                        
                        .. attribute:: lacp_status
                        
                        	The status of the LACP feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: mlacp_status
                        
                        	The status of the mLACP feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: ipv4bfd_status
                        
                        	The status of the BFD (IPv4) feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: link_order_status
                        
                        	The status of the link order signaling feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: ipv6bfd_status
                        
                        	The status of the BFD (IPv6) feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: load_balance_hash_type
                        
                        	The type of hash to use for load balancing
                        	**type**\: str
                        
                        .. attribute:: load_balance_locality_threshold
                        
                        	The number of links required per rack for localized load balancing
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: suppression_timer
                        
                        	Timer for suppressing bundle state flaps
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: wait_while_timer
                        
                        	The wait while time used for member ports
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: collector_max_delay
                        
                        	Collector Max Delay
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: cisco_extensions
                        
                        	The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled)
                        	**type**\: bool
                        
                        .. attribute:: lacp_nonrevertive
                        
                        	The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled)
                        	**type**\: bool
                        
                        .. attribute:: iccp_group_id
                        
                        	ICCP Group that the bundle is configured to
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: active_foreign_member_count
                        
                        	The number of active foreign members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: configured_foreign_member_count
                        
                        	The number of configured local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: switchover_type
                        
                        	How a switchover of the bundle from this device will occur
                        	**type**\:  :py:class:`BmdMlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpSwitchover>`
                        
                        .. attribute:: maximize_threshold_value_links
                        
                        	Attempt to maximize the bundle if links are below this value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: maximize_threshold_value_band_width
                        
                        	Attempt to maximize the bundle if bandwidth is below this value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mlacp_mode
                        
                        	Indicates the mode of the device for the bundle
                        	**type**\:  :py:class:`BundleMlacpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMlacpMode>`
                        
                        .. attribute:: recovery_delay
                        
                        	Number of seconds to wait before becoming active after recovering from a failure
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**units**\: second
                        
                        .. attribute:: singleton
                        
                        	Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not singleton)
                        	**type**\: bool
                        
                        .. attribute:: bfd_config
                        
                        	Configuration values for BFD on bundle members
                        	**type**\: list of  		 :py:class:`BfdConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.BfdConfig>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData, self).__init__()

                            self.yang_name = "bundle-data"
                            self.yang_parent_name = "bundle-member-ancestor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.MacAddress))])
                            self._child_list_classes = OrderedDict([("bfd-config", ("bfd_config", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.BfdConfig))])
                            self._leafs = OrderedDict([
                                ('bundle_interface_name', YLeaf(YType.str, 'bundle-interface-name')),
                                ('available_bandwidth', YLeaf(YType.uint32, 'available-bandwidth')),
                                ('effective_bandwidth', YLeaf(YType.uint32, 'effective-bandwidth')),
                                ('configured_bandwidth', YLeaf(YType.uint32, 'configured-bandwidth')),
                                ('minimum_active_links', YLeaf(YType.uint8, 'minimum-active-links')),
                                ('maximum_active_links', YLeaf(YType.uint8, 'maximum-active-links')),
                                ('maximum_active_links_source', YLeaf(YType.enumeration, 'maximum-active-links-source')),
                                ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                                ('primary_member', YLeaf(YType.str, 'primary-member')),
                                ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                ('active_member_count', YLeaf(YType.uint16, 'active-member-count')),
                                ('standby_member_count', YLeaf(YType.uint16, 'standby-member-count')),
                                ('configured_member_count', YLeaf(YType.uint16, 'configured-member-count')),
                                ('mac_source', YLeaf(YType.enumeration, 'mac-source')),
                                ('mac_source_member', YLeaf(YType.str, 'mac-source-member')),
                                ('inter_chassis', YLeaf(YType.boolean, 'inter-chassis')),
                                ('is_active', YLeaf(YType.boolean, 'is-active')),
                                ('lacp_status', YLeaf(YType.enumeration, 'lacp-status')),
                                ('mlacp_status', YLeaf(YType.enumeration, 'mlacp-status')),
                                ('ipv4bfd_status', YLeaf(YType.enumeration, 'ipv4bfd-status')),
                                ('link_order_status', YLeaf(YType.enumeration, 'link-order-status')),
                                ('ipv6bfd_status', YLeaf(YType.enumeration, 'ipv6bfd-status')),
                                ('load_balance_hash_type', YLeaf(YType.str, 'load-balance-hash-type')),
                                ('load_balance_locality_threshold', YLeaf(YType.uint16, 'load-balance-locality-threshold')),
                                ('suppression_timer', YLeaf(YType.uint16, 'suppression-timer')),
                                ('wait_while_timer', YLeaf(YType.uint16, 'wait-while-timer')),
                                ('collector_max_delay', YLeaf(YType.uint16, 'collector-max-delay')),
                                ('cisco_extensions', YLeaf(YType.boolean, 'cisco-extensions')),
                                ('lacp_nonrevertive', YLeaf(YType.boolean, 'lacp-nonrevertive')),
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ('active_foreign_member_count', YLeaf(YType.uint16, 'active-foreign-member-count')),
                                ('configured_foreign_member_count', YLeaf(YType.uint16, 'configured-foreign-member-count')),
                                ('switchover_type', YLeaf(YType.enumeration, 'switchover-type')),
                                ('maximize_threshold_value_links', YLeaf(YType.uint32, 'maximize-threshold-value-links')),
                                ('maximize_threshold_value_band_width', YLeaf(YType.uint32, 'maximize-threshold-value-band-width')),
                                ('mlacp_mode', YLeaf(YType.enumeration, 'mlacp-mode')),
                                ('recovery_delay', YLeaf(YType.uint16, 'recovery-delay')),
                                ('singleton', YLeaf(YType.boolean, 'singleton')),
                            ])
                            self.bundle_interface_name = None
                            self.available_bandwidth = None
                            self.effective_bandwidth = None
                            self.configured_bandwidth = None
                            self.minimum_active_links = None
                            self.maximum_active_links = None
                            self.maximum_active_links_source = None
                            self.minimum_bandwidth = None
                            self.primary_member = None
                            self.bundle_status = None
                            self.active_member_count = None
                            self.standby_member_count = None
                            self.configured_member_count = None
                            self.mac_source = None
                            self.mac_source_member = None
                            self.inter_chassis = None
                            self.is_active = None
                            self.lacp_status = None
                            self.mlacp_status = None
                            self.ipv4bfd_status = None
                            self.link_order_status = None
                            self.ipv6bfd_status = None
                            self.load_balance_hash_type = None
                            self.load_balance_locality_threshold = None
                            self.suppression_timer = None
                            self.wait_while_timer = None
                            self.collector_max_delay = None
                            self.cisco_extensions = None
                            self.lacp_nonrevertive = None
                            self.iccp_group_id = None
                            self.active_foreign_member_count = None
                            self.configured_foreign_member_count = None
                            self.switchover_type = None
                            self.maximize_threshold_value_links = None
                            self.maximize_threshold_value_band_width = None
                            self.mlacp_mode = None
                            self.recovery_delay = None
                            self.singleton = None

                            self.mac_address = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.MacAddress()
                            self.mac_address.parent = self
                            self._children_name_map["mac_address"] = "mac-address"
                            self._children_yang_names.add("mac-address")

                            self.bfd_config = YList(self)
                            self._segment_path = lambda: "bundle-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData, ['bundle_interface_name', 'available_bandwidth', 'effective_bandwidth', 'configured_bandwidth', 'minimum_active_links', 'maximum_active_links', 'maximum_active_links_source', 'minimum_bandwidth', 'primary_member', 'bundle_status', 'active_member_count', 'standby_member_count', 'configured_member_count', 'mac_source', 'mac_source_member', 'inter_chassis', 'is_active', 'lacp_status', 'mlacp_status', 'ipv4bfd_status', 'link_order_status', 'ipv6bfd_status', 'load_balance_hash_type', 'load_balance_locality_threshold', 'suppression_timer', 'wait_while_timer', 'collector_max_delay', 'cisco_extensions', 'lacp_nonrevertive', 'iccp_group_id', 'active_foreign_member_count', 'configured_foreign_member_count', 'switchover_type', 'maximize_threshold_value_links', 'maximize_threshold_value_band_width', 'mlacp_mode', 'recovery_delay', 'singleton'], name, value)


                        class MacAddress(Entity):
                            """
                            MAC address of this member
                            
                            .. attribute:: address
                            
                            	MAC address
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.MacAddress, self).__init__()

                                self.yang_name = "mac-address"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.str, 'address')),
                                ])
                                self.address = None
                                self._segment_path = lambda: "mac-address"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.MacAddress, ['address'], name, value)


                        class BfdConfig(Entity):
                            """
                            Configuration values for BFD on bundle members
                            
                            .. attribute:: destination_address
                            
                            	Configured destination address for BFD session
                            	**type**\:  :py:class:`DestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.BfdConfig.DestinationAddress>`
                            
                            .. attribute:: bundle_status
                            
                            	Status of BFD on the bundle
                            	**type**\:  :py:class:`BmdBfdBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBfdBdlState>`
                            
                            .. attribute:: start_timer
                            
                            	Time to wait on session start before declaring DOWN
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: nbr_unconfig_timer
                            
                            	Time to wait on session NBR\_UNCONFIG before declaring DOWN
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pref_multiplier
                            
                            	Preferred multiplier for the BFD session
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: pref_min_interval
                            
                            	Preferred minimum interval for the BFD session (ms)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pref_echo_min_interval
                            
                            	Preferred echo minimum interval for the BFD session (ms)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fast_detect
                            
                            	Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled)
                            	**type**\: bool
                            
                            .. attribute:: mode_info
                            
                            	Standard used for per\-member BFD
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.BfdConfig, self).__init__()

                                self.yang_name = "bfd-config"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("destination-address", ("destination_address", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.BfdConfig.DestinationAddress))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                    ('start_timer', YLeaf(YType.uint32, 'start-timer')),
                                    ('nbr_unconfig_timer', YLeaf(YType.uint32, 'nbr-unconfig-timer')),
                                    ('pref_multiplier', YLeaf(YType.uint16, 'pref-multiplier')),
                                    ('pref_min_interval', YLeaf(YType.uint32, 'pref-min-interval')),
                                    ('pref_echo_min_interval', YLeaf(YType.uint32, 'pref-echo-min-interval')),
                                    ('fast_detect', YLeaf(YType.boolean, 'fast-detect')),
                                    ('mode_info', YLeaf(YType.uint32, 'mode-info')),
                                ])
                                self.bundle_status = None
                                self.start_timer = None
                                self.nbr_unconfig_timer = None
                                self.pref_multiplier = None
                                self.pref_min_interval = None
                                self.pref_echo_min_interval = None
                                self.fast_detect = None
                                self.mode_info = None

                                self.destination_address = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.BfdConfig.DestinationAddress()
                                self.destination_address.parent = self
                                self._children_name_map["destination_address"] = "destination-address"
                                self._children_yang_names.add("destination-address")
                                self._segment_path = lambda: "bfd-config"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.BfdConfig, ['bundle_status', 'start_timer', 'nbr_unconfig_timer', 'pref_multiplier', 'pref_min_interval', 'pref_echo_min_interval', 'fast_detect', 'mode_info'], name, value)


                            class DestinationAddress(Entity):
                                """
                                Configured destination address for BFD session
                                
                                .. attribute:: af
                                
                                	AF
                                	**type**\:  :py:class:`BmAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmAfId>`
                                
                                .. attribute:: ipv4
                                
                                	IPv4 address type
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6
                                
                                	IPv6 address type
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.BfdConfig.DestinationAddress, self).__init__()

                                    self.yang_name = "destination-address"
                                    self.yang_parent_name = "bfd-config"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af', YLeaf(YType.enumeration, 'af')),
                                        ('ipv4', YLeaf(YType.str, 'ipv4')),
                                        ('ipv6', YLeaf(YType.str, 'ipv6')),
                                    ])
                                    self.af = None
                                    self.ipv4 = None
                                    self.ipv6 = None
                                    self._segment_path = lambda: "destination-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.BundleData.BfdConfig.DestinationAddress, ['af', 'ipv4', 'ipv6'], name, value)


                    class MemberData(Entity):
                        """
                        Member information
                        
                        .. attribute:: counters
                        
                        	Counters data about member link
                        	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.Counters>`
                        
                        .. attribute:: link_data
                        
                        	Lacp data about member link
                        	**type**\:  :py:class:`LinkData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.LinkData>`
                        
                        .. attribute:: member_mux_data
                        
                        	Mux state machine data
                        	**type**\:  :py:class:`MemberMuxData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData>`
                        
                        .. attribute:: mac_address
                        
                        	MAC address of this member (deprecated)
                        	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MacAddress>`
                        
                        .. attribute:: interface_name
                        
                        	Member's interface name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: port_priority
                        
                        	The priority of this member
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: port_number
                        
                        	Member's link number
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: underlying_link_id
                        
                        	Member's underlying link ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: link_order_number
                        
                        	Member's link order number
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: iccp_node
                        
                        	Location of member
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: bandwidth
                        
                        	Bandwidth of this member (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: lacp_enabled
                        
                        	Boolean indicating LACP enabled or not
                        	**type**\: str
                        
                        .. attribute:: member_type
                        
                        	Member's type (local/foreign)
                        	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                        
                        .. attribute:: member_name
                        
                        	Member's (short form) name
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData, self).__init__()

                            self.yang_name = "member-data"
                            self.yang_parent_name = "bundle-member-ancestor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("counters", ("counters", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.Counters)), ("link-data", ("link_data", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.LinkData)), ("member-mux-data", ("member_mux_data", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData)), ("mac-address", ("mac_address", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MacAddress))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                                ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                                ('port_number', YLeaf(YType.uint16, 'port-number')),
                                ('underlying_link_id', YLeaf(YType.uint16, 'underlying-link-id')),
                                ('link_order_number', YLeaf(YType.uint16, 'link-order-number')),
                                ('iccp_node', YLeaf(YType.uint32, 'iccp-node')),
                                ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                                ('lacp_enabled', YLeaf(YType.str, 'lacp-enabled')),
                                ('member_type', YLeaf(YType.enumeration, 'member-type')),
                                ('member_name', YLeaf(YType.str, 'member-name')),
                            ])
                            self.interface_name = None
                            self.port_priority = None
                            self.port_number = None
                            self.underlying_link_id = None
                            self.link_order_number = None
                            self.iccp_node = None
                            self.bandwidth = None
                            self.lacp_enabled = None
                            self.member_type = None
                            self.member_name = None

                            self.counters = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.Counters()
                            self.counters.parent = self
                            self._children_name_map["counters"] = "counters"
                            self._children_yang_names.add("counters")

                            self.link_data = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.LinkData()
                            self.link_data.parent = self
                            self._children_name_map["link_data"] = "link-data"
                            self._children_yang_names.add("link-data")

                            self.member_mux_data = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData()
                            self.member_mux_data.parent = self
                            self._children_name_map["member_mux_data"] = "member-mux-data"
                            self._children_yang_names.add("member-mux-data")

                            self.mac_address = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MacAddress()
                            self.mac_address.parent = self
                            self._children_name_map["mac_address"] = "mac-address"
                            self._children_yang_names.add("mac-address")
                            self._segment_path = lambda: "member-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData, ['interface_name', 'port_priority', 'port_number', 'underlying_link_id', 'link_order_number', 'iccp_node', 'bandwidth', 'lacp_enabled', 'member_type', 'member_name'], name, value)


                        class Counters(Entity):
                            """
                            Counters data about member link
                            
                            .. attribute:: lacpd_us_received
                            
                            	LACPDUs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: lacpd_us_transmitted
                            
                            	LACPDUs transmitted
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: marker_packets_received
                            
                            	Marker packets received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: marker_responses_transmitted
                            
                            	Marker response packets transmitted
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: illegal_packets_received
                            
                            	Illegal and unknown packets received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: excess_lacpd_us_received
                            
                            	LACPDUs received that exceed the rate limit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: excess_marker_packets_received
                            
                            	Marker packets received that exceed the rate limit
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: defaulted
                            
                            	State flag set to Defaulted
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: expired
                            
                            	State flag set to Expired
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: last_cleared_sec
                            
                            	Last time counters cleared (s) (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: last_cleared_nsec
                            
                            	Last time counters cleared (nsec) (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.Counters, self).__init__()

                                self.yang_name = "counters"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('lacpd_us_received', YLeaf(YType.uint32, 'lacpd-us-received')),
                                    ('lacpd_us_transmitted', YLeaf(YType.uint32, 'lacpd-us-transmitted')),
                                    ('marker_packets_received', YLeaf(YType.uint32, 'marker-packets-received')),
                                    ('marker_responses_transmitted', YLeaf(YType.uint32, 'marker-responses-transmitted')),
                                    ('illegal_packets_received', YLeaf(YType.uint32, 'illegal-packets-received')),
                                    ('excess_lacpd_us_received', YLeaf(YType.uint32, 'excess-lacpd-us-received')),
                                    ('excess_marker_packets_received', YLeaf(YType.uint32, 'excess-marker-packets-received')),
                                    ('defaulted', YLeaf(YType.uint32, 'defaulted')),
                                    ('expired', YLeaf(YType.uint32, 'expired')),
                                    ('last_cleared_sec', YLeaf(YType.uint32, 'last-cleared-sec')),
                                    ('last_cleared_nsec', YLeaf(YType.uint32, 'last-cleared-nsec')),
                                ])
                                self.lacpd_us_received = None
                                self.lacpd_us_transmitted = None
                                self.marker_packets_received = None
                                self.marker_responses_transmitted = None
                                self.illegal_packets_received = None
                                self.excess_lacpd_us_received = None
                                self.excess_marker_packets_received = None
                                self.defaulted = None
                                self.expired = None
                                self.last_cleared_sec = None
                                self.last_cleared_nsec = None
                                self._segment_path = lambda: "counters"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.Counters, ['lacpd_us_received', 'lacpd_us_transmitted', 'marker_packets_received', 'marker_responses_transmitted', 'illegal_packets_received', 'excess_lacpd_us_received', 'excess_marker_packets_received', 'defaulted', 'expired', 'last_cleared_sec', 'last_cleared_nsec'], name, value)


                        class LinkData(Entity):
                            """
                            Lacp data about member link
                            
                            .. attribute:: interface_handle
                            
                            	Member's interface handle
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: actor_system_priority
                            
                            	System priority of actor system
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: actor_system_mac_address
                            
                            	MAC Address of the actor system
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            .. attribute:: actor_operational_key
                            
                            	Operational key for this port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_system_priority
                            
                            	System priority of partner system
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_system_mac_address
                            
                            	MAC Address used to identify the partner system
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            .. attribute:: partner_operational_key
                            
                            	Operational key for partner port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: selected_aggregator_id
                            
                            	MIB ifindex of selected bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: attached_aggregator_id
                            
                            	MIB ifindex of attached bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: actor_port_id
                            
                            	Port number of this port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: actor_port_priority
                            
                            	Priority of this port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_port_id
                            
                            	Port number of the partner's port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: partner_port_priority
                            
                            	Priority of the partner's port
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: actor_port_state
                            
                            	LACP state of this port
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: partner_port_state
                            
                            	LACP state of the partner's port
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.LinkData, self).__init__()

                                self.yang_name = "link-data"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                    ('actor_system_priority', YLeaf(YType.uint16, 'actor-system-priority')),
                                    ('actor_system_mac_address', YLeaf(YType.str, 'actor-system-mac-address')),
                                    ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                                    ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                                    ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                                    ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                                    ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                                    ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                                    ('actor_port_id', YLeaf(YType.uint16, 'actor-port-id')),
                                    ('actor_port_priority', YLeaf(YType.uint16, 'actor-port-priority')),
                                    ('partner_port_id', YLeaf(YType.uint16, 'partner-port-id')),
                                    ('partner_port_priority', YLeaf(YType.uint16, 'partner-port-priority')),
                                    ('actor_port_state', YLeaf(YType.uint8, 'actor-port-state')),
                                    ('partner_port_state', YLeaf(YType.uint8, 'partner-port-state')),
                                ])
                                self.interface_handle = None
                                self.actor_system_priority = None
                                self.actor_system_mac_address = None
                                self.actor_operational_key = None
                                self.partner_system_priority = None
                                self.partner_system_mac_address = None
                                self.partner_operational_key = None
                                self.selected_aggregator_id = None
                                self.attached_aggregator_id = None
                                self.actor_port_id = None
                                self.actor_port_priority = None
                                self.partner_port_id = None
                                self.partner_port_priority = None
                                self.actor_port_state = None
                                self.partner_port_state = None
                                self._segment_path = lambda: "link-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.LinkData, ['interface_handle', 'actor_system_priority', 'actor_system_mac_address', 'actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key', 'selected_aggregator_id', 'attached_aggregator_id', 'actor_port_id', 'actor_port_priority', 'partner_port_id', 'partner_port_priority', 'actor_port_state', 'partner_port_state'], name, value)


                        class MemberMuxData(Entity):
                            """
                            Mux state machine data
                            
                            .. attribute:: member_mux_state_reason_data
                            
                            	Data regarding the reason for last Mux state change
                            	**type**\:  :py:class:`MemberMuxStateReasonData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData.MemberMuxStateReasonData>`
                            
                            .. attribute:: mux_state
                            
                            	Current state of this bundle member
                            	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                            
                            .. attribute:: error
                            
                            	Internal value indicating if an error occurred trying to put a link into the desired state
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_mux_state_reason
                            
                            	Reason for last Mux state change
                            	**type**\:  :py:class:`BmMbrStateReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMbrStateReason>`
                            
                            .. attribute:: member_state
                            
                            	Current internal state of this bundle member
                            	**type**\:  :py:class:`BmdMemberState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberState>`
                            
                            .. attribute:: mux_state_reason
                            
                            	Reason for last Mux state change (Deprecated)
                            	**type**\:  :py:class:`BmMuxreason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxreason>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData, self).__init__()

                                self.yang_name = "member-mux-data"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-mux-state-reason-data", ("member_mux_state_reason_data", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData.MemberMuxStateReasonData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                                    ('error', YLeaf(YType.uint32, 'error')),
                                    ('member_mux_state_reason', YLeaf(YType.enumeration, 'member-mux-state-reason')),
                                    ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                    ('mux_state_reason', YLeaf(YType.enumeration, 'mux-state-reason')),
                                ])
                                self.mux_state = None
                                self.error = None
                                self.member_mux_state_reason = None
                                self.member_state = None
                                self.mux_state_reason = None

                                self.member_mux_state_reason_data = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData.MemberMuxStateReasonData()
                                self.member_mux_state_reason_data.parent = self
                                self._children_name_map["member_mux_state_reason_data"] = "member-mux-state-reason-data"
                                self._children_yang_names.add("member-mux-state-reason-data")
                                self._segment_path = lambda: "member-mux-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData, ['mux_state', 'error', 'member_mux_state_reason', 'member_state', 'mux_state_reason'], name, value)


                            class MemberMuxStateReasonData(Entity):
                                """
                                Data regarding the reason for last Mux state
                                change
                                
                                .. attribute:: reason_type
                                
                                	The item the reason applies to
                                	**type**\:  :py:class:`BmStateReasonTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmStateReasonTarget>`
                                
                                .. attribute:: severity
                                
                                	The severity of the reason
                                	**type**\:  :py:class:`BmSeverity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmSeverity>`
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData.MemberMuxStateReasonData, self).__init__()

                                    self.yang_name = "member-mux-state-reason-data"
                                    self.yang_parent_name = "member-mux-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('reason_type', YLeaf(YType.enumeration, 'reason-type')),
                                        ('severity', YLeaf(YType.enumeration, 'severity')),
                                    ])
                                    self.reason_type = None
                                    self.severity = None
                                    self._segment_path = lambda: "member-mux-state-reason-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MemberMuxData.MemberMuxStateReasonData, ['reason_type', 'severity'], name, value)


                        class MacAddress(Entity):
                            """
                            MAC address of this member (deprecated)
                            
                            .. attribute:: address
                            
                            	MAC address
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MacAddress, self).__init__()

                                self.yang_name = "mac-address"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.str, 'address')),
                                ])
                                self.address = None
                                self._segment_path = lambda: "mac-address"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberAncestor.MemberData.MacAddress, ['address'], name, value)


                class BundleMemberItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: counters
                    
                    	Counters data about member link
                    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.Counters>`
                    
                    .. attribute:: link_data
                    
                    	Lacp data about member link
                    	**type**\:  :py:class:`LinkData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.LinkData>`
                    
                    .. attribute:: member_mux_data
                    
                    	Mux state machine data
                    	**type**\:  :py:class:`MemberMuxData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData>`
                    
                    .. attribute:: mac_address
                    
                    	MAC address of this member (deprecated)
                    	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MacAddress>`
                    
                    .. attribute:: interface_name
                    
                    	Member's interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: port_priority
                    
                    	The priority of this member
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: port_number
                    
                    	Member's link number
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: underlying_link_id
                    
                    	Member's underlying link ID
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: link_order_number
                    
                    	Member's link order number
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: iccp_node
                    
                    	Location of member
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bandwidth
                    
                    	Bandwidth of this member (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: lacp_enabled
                    
                    	Boolean indicating LACP enabled or not
                    	**type**\: str
                    
                    .. attribute:: member_type
                    
                    	Member's type (local/foreign)
                    	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                    
                    .. attribute:: member_name
                    
                    	Member's (short form) name
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem, self).__init__()

                        self.yang_name = "bundle-member-item"
                        self.yang_parent_name = "bundle-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("counters", ("counters", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.Counters)), ("link-data", ("link_data", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.LinkData)), ("member-mux-data", ("member_mux_data", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData)), ("mac-address", ("mac_address", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MacAddress))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                            ('port_number', YLeaf(YType.uint16, 'port-number')),
                            ('underlying_link_id', YLeaf(YType.uint16, 'underlying-link-id')),
                            ('link_order_number', YLeaf(YType.uint16, 'link-order-number')),
                            ('iccp_node', YLeaf(YType.uint32, 'iccp-node')),
                            ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                            ('lacp_enabled', YLeaf(YType.str, 'lacp-enabled')),
                            ('member_type', YLeaf(YType.enumeration, 'member-type')),
                            ('member_name', YLeaf(YType.str, 'member-name')),
                        ])
                        self.interface_name = None
                        self.port_priority = None
                        self.port_number = None
                        self.underlying_link_id = None
                        self.link_order_number = None
                        self.iccp_node = None
                        self.bandwidth = None
                        self.lacp_enabled = None
                        self.member_type = None
                        self.member_name = None

                        self.counters = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.Counters()
                        self.counters.parent = self
                        self._children_name_map["counters"] = "counters"
                        self._children_yang_names.add("counters")

                        self.link_data = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.LinkData()
                        self.link_data.parent = self
                        self._children_name_map["link_data"] = "link-data"
                        self._children_yang_names.add("link-data")

                        self.member_mux_data = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData()
                        self.member_mux_data.parent = self
                        self._children_name_map["member_mux_data"] = "member-mux-data"
                        self._children_yang_names.add("member-mux-data")

                        self.mac_address = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MacAddress()
                        self.mac_address.parent = self
                        self._children_name_map["mac_address"] = "mac-address"
                        self._children_yang_names.add("mac-address")
                        self._segment_path = lambda: "bundle-member-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem, ['interface_name', 'port_priority', 'port_number', 'underlying_link_id', 'link_order_number', 'iccp_node', 'bandwidth', 'lacp_enabled', 'member_type', 'member_name'], name, value)


                    class Counters(Entity):
                        """
                        Counters data about member link
                        
                        .. attribute:: lacpd_us_received
                        
                        	LACPDUs received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lacpd_us_transmitted
                        
                        	LACPDUs transmitted
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: marker_packets_received
                        
                        	Marker packets received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: marker_responses_transmitted
                        
                        	Marker response packets transmitted
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: illegal_packets_received
                        
                        	Illegal and unknown packets received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: excess_lacpd_us_received
                        
                        	LACPDUs received that exceed the rate limit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: excess_marker_packets_received
                        
                        	Marker packets received that exceed the rate limit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: defaulted
                        
                        	State flag set to Defaulted
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: expired
                        
                        	State flag set to Expired
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_cleared_sec
                        
                        	Last time counters cleared (s) (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_cleared_nsec
                        
                        	Last time counters cleared (nsec) (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.Counters, self).__init__()

                            self.yang_name = "counters"
                            self.yang_parent_name = "bundle-member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('lacpd_us_received', YLeaf(YType.uint32, 'lacpd-us-received')),
                                ('lacpd_us_transmitted', YLeaf(YType.uint32, 'lacpd-us-transmitted')),
                                ('marker_packets_received', YLeaf(YType.uint32, 'marker-packets-received')),
                                ('marker_responses_transmitted', YLeaf(YType.uint32, 'marker-responses-transmitted')),
                                ('illegal_packets_received', YLeaf(YType.uint32, 'illegal-packets-received')),
                                ('excess_lacpd_us_received', YLeaf(YType.uint32, 'excess-lacpd-us-received')),
                                ('excess_marker_packets_received', YLeaf(YType.uint32, 'excess-marker-packets-received')),
                                ('defaulted', YLeaf(YType.uint32, 'defaulted')),
                                ('expired', YLeaf(YType.uint32, 'expired')),
                                ('last_cleared_sec', YLeaf(YType.uint32, 'last-cleared-sec')),
                                ('last_cleared_nsec', YLeaf(YType.uint32, 'last-cleared-nsec')),
                            ])
                            self.lacpd_us_received = None
                            self.lacpd_us_transmitted = None
                            self.marker_packets_received = None
                            self.marker_responses_transmitted = None
                            self.illegal_packets_received = None
                            self.excess_lacpd_us_received = None
                            self.excess_marker_packets_received = None
                            self.defaulted = None
                            self.expired = None
                            self.last_cleared_sec = None
                            self.last_cleared_nsec = None
                            self._segment_path = lambda: "counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.Counters, ['lacpd_us_received', 'lacpd_us_transmitted', 'marker_packets_received', 'marker_responses_transmitted', 'illegal_packets_received', 'excess_lacpd_us_received', 'excess_marker_packets_received', 'defaulted', 'expired', 'last_cleared_sec', 'last_cleared_nsec'], name, value)


                    class LinkData(Entity):
                        """
                        Lacp data about member link
                        
                        .. attribute:: interface_handle
                        
                        	Member's interface handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: actor_system_priority
                        
                        	System priority of actor system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: actor_system_mac_address
                        
                        	MAC Address of the actor system
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: actor_operational_key
                        
                        	Operational key for this port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_priority
                        
                        	System priority of partner system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_mac_address
                        
                        	MAC Address used to identify the partner system
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: partner_operational_key
                        
                        	Operational key for partner port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: selected_aggregator_id
                        
                        	MIB ifindex of selected bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: attached_aggregator_id
                        
                        	MIB ifindex of attached bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: actor_port_id
                        
                        	Port number of this port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: actor_port_priority
                        
                        	Priority of this port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_port_id
                        
                        	Port number of the partner's port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_port_priority
                        
                        	Priority of the partner's port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: actor_port_state
                        
                        	LACP state of this port
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: partner_port_state
                        
                        	LACP state of the partner's port
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.LinkData, self).__init__()

                            self.yang_name = "link-data"
                            self.yang_parent_name = "bundle-member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                ('actor_system_priority', YLeaf(YType.uint16, 'actor-system-priority')),
                                ('actor_system_mac_address', YLeaf(YType.str, 'actor-system-mac-address')),
                                ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                                ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                                ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                                ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                                ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                                ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                                ('actor_port_id', YLeaf(YType.uint16, 'actor-port-id')),
                                ('actor_port_priority', YLeaf(YType.uint16, 'actor-port-priority')),
                                ('partner_port_id', YLeaf(YType.uint16, 'partner-port-id')),
                                ('partner_port_priority', YLeaf(YType.uint16, 'partner-port-priority')),
                                ('actor_port_state', YLeaf(YType.uint8, 'actor-port-state')),
                                ('partner_port_state', YLeaf(YType.uint8, 'partner-port-state')),
                            ])
                            self.interface_handle = None
                            self.actor_system_priority = None
                            self.actor_system_mac_address = None
                            self.actor_operational_key = None
                            self.partner_system_priority = None
                            self.partner_system_mac_address = None
                            self.partner_operational_key = None
                            self.selected_aggregator_id = None
                            self.attached_aggregator_id = None
                            self.actor_port_id = None
                            self.actor_port_priority = None
                            self.partner_port_id = None
                            self.partner_port_priority = None
                            self.actor_port_state = None
                            self.partner_port_state = None
                            self._segment_path = lambda: "link-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.LinkData, ['interface_handle', 'actor_system_priority', 'actor_system_mac_address', 'actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key', 'selected_aggregator_id', 'attached_aggregator_id', 'actor_port_id', 'actor_port_priority', 'partner_port_id', 'partner_port_priority', 'actor_port_state', 'partner_port_state'], name, value)


                    class MemberMuxData(Entity):
                        """
                        Mux state machine data
                        
                        .. attribute:: member_mux_state_reason_data
                        
                        	Data regarding the reason for last Mux state change
                        	**type**\:  :py:class:`MemberMuxStateReasonData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData.MemberMuxStateReasonData>`
                        
                        .. attribute:: mux_state
                        
                        	Current state of this bundle member
                        	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                        
                        .. attribute:: error
                        
                        	Internal value indicating if an error occurred trying to put a link into the desired state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: member_mux_state_reason
                        
                        	Reason for last Mux state change
                        	**type**\:  :py:class:`BmMbrStateReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMbrStateReason>`
                        
                        .. attribute:: member_state
                        
                        	Current internal state of this bundle member
                        	**type**\:  :py:class:`BmdMemberState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberState>`
                        
                        .. attribute:: mux_state_reason
                        
                        	Reason for last Mux state change (Deprecated)
                        	**type**\:  :py:class:`BmMuxreason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxreason>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData, self).__init__()

                            self.yang_name = "member-mux-data"
                            self.yang_parent_name = "bundle-member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-mux-state-reason-data", ("member_mux_state_reason_data", BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData.MemberMuxStateReasonData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                                ('error', YLeaf(YType.uint32, 'error')),
                                ('member_mux_state_reason', YLeaf(YType.enumeration, 'member-mux-state-reason')),
                                ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                ('mux_state_reason', YLeaf(YType.enumeration, 'mux-state-reason')),
                            ])
                            self.mux_state = None
                            self.error = None
                            self.member_mux_state_reason = None
                            self.member_state = None
                            self.mux_state_reason = None

                            self.member_mux_state_reason_data = BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData.MemberMuxStateReasonData()
                            self.member_mux_state_reason_data.parent = self
                            self._children_name_map["member_mux_state_reason_data"] = "member-mux-state-reason-data"
                            self._children_yang_names.add("member-mux-state-reason-data")
                            self._segment_path = lambda: "member-mux-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData, ['mux_state', 'error', 'member_mux_state_reason', 'member_state', 'mux_state_reason'], name, value)


                        class MemberMuxStateReasonData(Entity):
                            """
                            Data regarding the reason for last Mux state
                            change
                            
                            .. attribute:: reason_type
                            
                            	The item the reason applies to
                            	**type**\:  :py:class:`BmStateReasonTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmStateReasonTarget>`
                            
                            .. attribute:: severity
                            
                            	The severity of the reason
                            	**type**\:  :py:class:`BmSeverity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmSeverity>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData.MemberMuxStateReasonData, self).__init__()

                                self.yang_name = "member-mux-state-reason-data"
                                self.yang_parent_name = "member-mux-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('reason_type', YLeaf(YType.enumeration, 'reason-type')),
                                    ('severity', YLeaf(YType.enumeration, 'severity')),
                                ])
                                self.reason_type = None
                                self.severity = None
                                self._segment_path = lambda: "member-mux-state-reason-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MemberMuxData.MemberMuxStateReasonData, ['reason_type', 'severity'], name, value)


                    class MacAddress(Entity):
                        """
                        MAC address of this member (deprecated)
                        
                        .. attribute:: address
                        
                        	MAC address
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MacAddress, self).__init__()

                            self.yang_name = "mac-address"
                            self.yang_parent_name = "bundle-member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.str, 'address')),
                            ])
                            self.address = None
                            self._segment_path = lambda: "mac-address"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Bundle.BundleMembers.BundleMember.BundleMemberItem.MacAddress, ['address'], name, value)


    class EventsRg(Entity):
        """
        Bundle ICCP events information for bundles and
        members
        
        .. attribute:: events_rg_members
        
        	Bundle Member interfaces with ICCP events information
        	**type**\:  :py:class:`EventsRgMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers>`
        
        .. attribute:: events_rg_iccp_groups
        
        	ICCP events for all ICCP Groups
        	**type**\:  :py:class:`EventsRgIccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups>`
        
        .. attribute:: events_rg_bundles
        
        	Bundle interfaces with ICCP events information
        	**type**\:  :py:class:`EventsRgBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.EventsRg, self).__init__()

            self.yang_name = "events-rg"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("events-rg-members", ("events_rg_members", BundleInformation.EventsRg.EventsRgMembers)), ("events-rg-iccp-groups", ("events_rg_iccp_groups", BundleInformation.EventsRg.EventsRgIccpGroups)), ("events-rg-bundles", ("events_rg_bundles", BundleInformation.EventsRg.EventsRgBundles))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.events_rg_members = BundleInformation.EventsRg.EventsRgMembers()
            self.events_rg_members.parent = self
            self._children_name_map["events_rg_members"] = "events-rg-members"
            self._children_yang_names.add("events-rg-members")

            self.events_rg_iccp_groups = BundleInformation.EventsRg.EventsRgIccpGroups()
            self.events_rg_iccp_groups.parent = self
            self._children_name_map["events_rg_iccp_groups"] = "events-rg-iccp-groups"
            self._children_yang_names.add("events-rg-iccp-groups")

            self.events_rg_bundles = BundleInformation.EventsRg.EventsRgBundles()
            self.events_rg_bundles.parent = self
            self._children_name_map["events_rg_bundles"] = "events-rg-bundles"
            self._children_yang_names.add("events-rg-bundles")
            self._segment_path = lambda: "events-rg"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class EventsRgMembers(Entity):
            """
            Bundle Member interfaces with ICCP events
            information
            
            .. attribute:: events_rg_member
            
            	Member interface
            	**type**\: list of  		 :py:class:`EventsRgMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers.EventsRgMember>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.EventsRg.EventsRgMembers, self).__init__()

                self.yang_name = "events-rg-members"
                self.yang_parent_name = "events-rg"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-rg-member", ("events_rg_member", BundleInformation.EventsRg.EventsRgMembers.EventsRgMember))])
                self._leafs = OrderedDict()

                self.events_rg_member = YList(self)
                self._segment_path = lambda: "events-rg-members"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-rg/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers, [], name, value)


            class EventsRgMember(Entity):
                """
                Member interface
                
                .. attribute:: member_interface  (key)
                
                	Member interface
                	**type**\: str
                
                .. attribute:: events_rg_member_ancestor
                
                	Data for this item and its parent bundle
                	**type**\:  :py:class:`EventsRgMemberAncestor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember, self).__init__()

                    self.yang_name = "events-rg-member"
                    self.yang_parent_name = "events-rg-members"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['member_interface']
                    self._child_container_classes = OrderedDict([("events-rg-member-ancestor", ("events_rg_member_ancestor", BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('member_interface', YLeaf(YType.str, 'member-interface')),
                    ])
                    self.member_interface = None

                    self.events_rg_member_ancestor = BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor()
                    self.events_rg_member_ancestor.parent = self
                    self._children_name_map["events_rg_member_ancestor"] = "events-rg-member-ancestor"
                    self._children_yang_names.add("events-rg-member-ancestor")
                    self._segment_path = lambda: "events-rg-member" + "[member-interface='" + str(self.member_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-rg/events-rg-members/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember, ['member_interface'], name, value)


                class EventsRgMemberAncestor(Entity):
                    """
                    Data for this item and its parent bundle
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor, self).__init__()

                        self.yang_name = "events-rg-member-ancestor"
                        self.yang_parent_name = "events-rg-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-rg-member-ancestor"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-rg-member-ancestor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsRg.EventsRgMembers.EventsRgMember.EventsRgMemberAncestor.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


        class EventsRgIccpGroups(Entity):
            """
            ICCP events for all ICCP Groups
            
            .. attribute:: events_rg_iccp_group
            
            	ICCP Group ID
            	**type**\: list of  		 :py:class:`EventsRgIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.EventsRg.EventsRgIccpGroups, self).__init__()

                self.yang_name = "events-rg-iccp-groups"
                self.yang_parent_name = "events-rg"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-rg-iccp-group", ("events_rg_iccp_group", BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup))])
                self._leafs = OrderedDict()

                self.events_rg_iccp_group = YList(self)
                self._segment_path = lambda: "events-rg-iccp-groups"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-rg/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups, [], name, value)


            class EventsRgIccpGroup(Entity):
                """
                ICCP Group ID
                
                .. attribute:: iccp_group  (key)
                
                	ICCP Group ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: events_rg_bundle_item_iccp_group
                
                	Data for this item
                	**type**\:  :py:class:`EventsRgBundleItemIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup, self).__init__()

                    self.yang_name = "events-rg-iccp-group"
                    self.yang_parent_name = "events-rg-iccp-groups"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['iccp_group']
                    self._child_container_classes = OrderedDict([("events-rg-bundle-item-iccp-group", ("events_rg_bundle_item_iccp_group", BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', YLeaf(YType.uint32, 'iccp-group')),
                    ])
                    self.iccp_group = None

                    self.events_rg_bundle_item_iccp_group = BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup()
                    self.events_rg_bundle_item_iccp_group.parent = self
                    self._children_name_map["events_rg_bundle_item_iccp_group"] = "events-rg-bundle-item-iccp-group"
                    self._children_yang_names.add("events-rg-bundle-item-iccp-group")
                    self._segment_path = lambda: "events-rg-iccp-group" + "[iccp-group='" + str(self.iccp_group) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-rg/events-rg-iccp-groups/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup, ['iccp_group'], name, value)


                class EventsRgBundleItemIccpGroup(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup, self).__init__()

                        self.yang_name = "events-rg-bundle-item-iccp-group"
                        self.yang_parent_name = "events-rg-iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-rg-bundle-item-iccp-group"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-rg-bundle-item-iccp-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsRg.EventsRgIccpGroups.EventsRgIccpGroup.EventsRgBundleItemIccpGroup.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


        class EventsRgBundles(Entity):
            """
            Bundle interfaces with ICCP events information
            
            .. attribute:: events_rg_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`EventsRgBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.EventsRg.EventsRgBundles, self).__init__()

                self.yang_name = "events-rg-bundles"
                self.yang_parent_name = "events-rg"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-rg-bundle", ("events_rg_bundle", BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle))])
                self._leafs = OrderedDict()

                self.events_rg_bundle = YList(self)
                self._segment_path = lambda: "events-rg-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-rg/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles, [], name, value)


            class EventsRgBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: events_rg_bundle_ancestor
                
                	Data for this item and its parent bundle
                	**type**\:  :py:class:`EventsRgBundleAncestor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle, self).__init__()

                    self.yang_name = "events-rg-bundle"
                    self.yang_parent_name = "events-rg-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("events-rg-bundle-ancestor", ("events_rg_bundle_ancestor", BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.events_rg_bundle_ancestor = BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor()
                    self.events_rg_bundle_ancestor.parent = self
                    self._children_name_map["events_rg_bundle_ancestor"] = "events-rg-bundle-ancestor"
                    self._children_yang_names.add("events-rg-bundle-ancestor")
                    self._segment_path = lambda: "events-rg-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-rg/events-rg-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle, ['bundle_interface'], name, value)


                class EventsRgBundleAncestor(Entity):
                    """
                    Data for this item and its parent bundle
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor, self).__init__()

                        self.yang_name = "events-rg-bundle-ancestor"
                        self.yang_parent_name = "events-rg-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-rg-bundle-ancestor"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-rg-bundle-ancestor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsRg.EventsRgBundles.EventsRgBundle.EventsRgBundleAncestor.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


    class Lacp(Entity):
        """
        LACP information for bundles and members
        
        .. attribute:: lacp_bundles
        
        	Bundle interfaces with LACP information
        	**type**\:  :py:class:`LacpBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles>`
        
        .. attribute:: lacp_members
        
        	Member interfaces with LACP information
        	**type**\:  :py:class:`LacpMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.Lacp, self).__init__()

            self.yang_name = "lacp"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("lacp-bundles", ("lacp_bundles", BundleInformation.Lacp.LacpBundles)), ("lacp-members", ("lacp_members", BundleInformation.Lacp.LacpMembers))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.lacp_bundles = BundleInformation.Lacp.LacpBundles()
            self.lacp_bundles.parent = self
            self._children_name_map["lacp_bundles"] = "lacp-bundles"
            self._children_yang_names.add("lacp-bundles")

            self.lacp_members = BundleInformation.Lacp.LacpMembers()
            self.lacp_members.parent = self
            self._children_name_map["lacp_members"] = "lacp-members"
            self._children_yang_names.add("lacp-members")
            self._segment_path = lambda: "lacp"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class LacpBundles(Entity):
            """
            Bundle interfaces with LACP information
            
            .. attribute:: lacp_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`LacpBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.Lacp.LacpBundles, self).__init__()

                self.yang_name = "lacp-bundles"
                self.yang_parent_name = "lacp"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("lacp-bundle", ("lacp_bundle", BundleInformation.Lacp.LacpBundles.LacpBundle))])
                self._leafs = OrderedDict()

                self.lacp_bundle = YList(self)
                self._segment_path = lambda: "lacp-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/lacp/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.Lacp.LacpBundles, [], name, value)


            class LacpBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: lacp_bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`LacpBundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem>`
                
                .. attribute:: lacp_bundle_descendant
                
                	Data for this item and all its members
                	**type**\:  :py:class:`LacpBundleDescendant <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant>`
                
                .. attribute:: lacp_bundle_children_members
                
                	Children of bundle with LACP information
                	**type**\:  :py:class:`LacpBundleChildrenMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.Lacp.LacpBundles.LacpBundle, self).__init__()

                    self.yang_name = "lacp-bundle"
                    self.yang_parent_name = "lacp-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("lacp-bundle-item", ("lacp_bundle_item", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem)), ("lacp-bundle-descendant", ("lacp_bundle_descendant", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant)), ("lacp-bundle-children-members", ("lacp_bundle_children_members", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.lacp_bundle_item = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem()
                    self.lacp_bundle_item.parent = self
                    self._children_name_map["lacp_bundle_item"] = "lacp-bundle-item"
                    self._children_yang_names.add("lacp-bundle-item")

                    self.lacp_bundle_descendant = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant()
                    self.lacp_bundle_descendant.parent = self
                    self._children_name_map["lacp_bundle_descendant"] = "lacp-bundle-descendant"
                    self._children_yang_names.add("lacp-bundle-descendant")

                    self.lacp_bundle_children_members = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers()
                    self.lacp_bundle_children_members.parent = self
                    self._children_name_map["lacp_bundle_children_members"] = "lacp-bundle-children-members"
                    self._children_yang_names.add("lacp-bundle-children-members")
                    self._segment_path = lambda: "lacp-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/lacp/lacp-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle, ['bundle_interface'], name, value)


                class LacpBundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: actor_bundle_data
                    
                    	Basic bundle information
                    	**type**\:  :py:class:`ActorBundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData>`
                    
                    .. attribute:: bundle_system_id
                    
                    	System ID for the bundle
                    	**type**\:  :py:class:`BundleSystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId>`
                    
                    .. attribute:: actor_operational_key
                    
                    	Operational key of the interface
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: partner_system_priority
                    
                    	Priority of the partner system
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: partner_system_mac_address
                    
                    	MAC Address used to identify the partner system
                    	**type**\: str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    .. attribute:: partner_operational_key
                    
                    	Operational key of the partner
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem, self).__init__()

                        self.yang_name = "lacp-bundle-item"
                        self.yang_parent_name = "lacp-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("actor-bundle-data", ("actor_bundle_data", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData)), ("bundle-system-id", ("bundle_system_id", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                            ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                            ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                            ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                        ])
                        self.actor_operational_key = None
                        self.partner_system_priority = None
                        self.partner_system_mac_address = None
                        self.partner_operational_key = None

                        self.actor_bundle_data = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData()
                        self.actor_bundle_data.parent = self
                        self._children_name_map["actor_bundle_data"] = "actor-bundle-data"
                        self._children_yang_names.add("actor-bundle-data")

                        self.bundle_system_id = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId()
                        self.bundle_system_id.parent = self
                        self._children_name_map["bundle_system_id"] = "bundle-system-id"
                        self._children_yang_names.add("bundle-system-id")
                        self._segment_path = lambda: "lacp-bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem, ['actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key'], name, value)


                    class ActorBundleData(Entity):
                        """
                        Basic bundle information
                        
                        .. attribute:: mac_address
                        
                        	MAC address of this member
                        	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.MacAddress>`
                        
                        .. attribute:: bundle_interface_name
                        
                        	Bundle interface name
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: available_bandwidth
                        
                        	Bandwidth available to the bundle interface (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: effective_bandwidth
                        
                        	Effective bandwidth on the bundle interface (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: configured_bandwidth
                        
                        	Bandwidth configured on the bundle interface (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: minimum_active_links
                        
                        	Minimum number of active links for bundle to go up
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: maximum_active_links
                        
                        	Maximum number of active links in the bundle
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: maximum_active_links_source
                        
                        	Source of maximum active links value
                        	**type**\:  :py:class:`BmWhichSystem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmWhichSystem>`
                        
                        .. attribute:: minimum_bandwidth
                        
                        	Minimum bundle bandwidth for bundle to go up (kbps)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        	**units**\: kbit/s
                        
                        .. attribute:: primary_member
                        
                        	Primary bundle member (no longer applicable)
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: bundle_status
                        
                        	The state of the bundle
                        	**type**\:  :py:class:`BmBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlState>`
                        
                        .. attribute:: active_member_count
                        
                        	The number of active local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: standby_member_count
                        
                        	The number of standby local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: configured_member_count
                        
                        	The number of configured local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: mac_source
                        
                        	The source of the MAC Address
                        	**type**\:  :py:class:`BmBdlMacSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlMacSource>`
                        
                        .. attribute:: mac_source_member
                        
                        	The name of the member that supplied the MAC address
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: inter_chassis
                        
                        	Indicates if this bundle is operating as an inter\-chassis link (1 = I\-C link, 0 = normal)
                        	**type**\: bool
                        
                        .. attribute:: is_active
                        
                        	Indicates the active/standby redundancy state of the device for the bundle
                        	**type**\: bool
                        
                        .. attribute:: lacp_status
                        
                        	The status of the LACP feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: mlacp_status
                        
                        	The status of the mLACP feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: ipv4bfd_status
                        
                        	The status of the BFD (IPv4) feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: link_order_status
                        
                        	The status of the link order signaling feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: ipv6bfd_status
                        
                        	The status of the BFD (IPv6) feature on the bundle
                        	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                        
                        .. attribute:: load_balance_hash_type
                        
                        	The type of hash to use for load balancing
                        	**type**\: str
                        
                        .. attribute:: load_balance_locality_threshold
                        
                        	The number of links required per rack for localized load balancing
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: suppression_timer
                        
                        	Timer for suppressing bundle state flaps
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: wait_while_timer
                        
                        	The wait while time used for member ports
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: collector_max_delay
                        
                        	Collector Max Delay
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: cisco_extensions
                        
                        	The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled)
                        	**type**\: bool
                        
                        .. attribute:: lacp_nonrevertive
                        
                        	The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled)
                        	**type**\: bool
                        
                        .. attribute:: iccp_group_id
                        
                        	ICCP Group that the bundle is configured to
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: active_foreign_member_count
                        
                        	The number of active foreign members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: configured_foreign_member_count
                        
                        	The number of configured local members on the bundle
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: switchover_type
                        
                        	How a switchover of the bundle from this device will occur
                        	**type**\:  :py:class:`BmdMlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpSwitchover>`
                        
                        .. attribute:: maximize_threshold_value_links
                        
                        	Attempt to maximize the bundle if links are below this value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: maximize_threshold_value_band_width
                        
                        	Attempt to maximize the bundle if bandwidth is below this value
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: mlacp_mode
                        
                        	Indicates the mode of the device for the bundle
                        	**type**\:  :py:class:`BundleMlacpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMlacpMode>`
                        
                        .. attribute:: recovery_delay
                        
                        	Number of seconds to wait before becoming active after recovering from a failure
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        	**units**\: second
                        
                        .. attribute:: singleton
                        
                        	Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not singleton)
                        	**type**\: bool
                        
                        .. attribute:: bfd_config
                        
                        	Configuration values for BFD on bundle members
                        	**type**\: list of  		 :py:class:`BfdConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.BfdConfig>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData, self).__init__()

                            self.yang_name = "actor-bundle-data"
                            self.yang_parent_name = "lacp-bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.MacAddress))])
                            self._child_list_classes = OrderedDict([("bfd-config", ("bfd_config", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.BfdConfig))])
                            self._leafs = OrderedDict([
                                ('bundle_interface_name', YLeaf(YType.str, 'bundle-interface-name')),
                                ('available_bandwidth', YLeaf(YType.uint32, 'available-bandwidth')),
                                ('effective_bandwidth', YLeaf(YType.uint32, 'effective-bandwidth')),
                                ('configured_bandwidth', YLeaf(YType.uint32, 'configured-bandwidth')),
                                ('minimum_active_links', YLeaf(YType.uint8, 'minimum-active-links')),
                                ('maximum_active_links', YLeaf(YType.uint8, 'maximum-active-links')),
                                ('maximum_active_links_source', YLeaf(YType.enumeration, 'maximum-active-links-source')),
                                ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                                ('primary_member', YLeaf(YType.str, 'primary-member')),
                                ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                ('active_member_count', YLeaf(YType.uint16, 'active-member-count')),
                                ('standby_member_count', YLeaf(YType.uint16, 'standby-member-count')),
                                ('configured_member_count', YLeaf(YType.uint16, 'configured-member-count')),
                                ('mac_source', YLeaf(YType.enumeration, 'mac-source')),
                                ('mac_source_member', YLeaf(YType.str, 'mac-source-member')),
                                ('inter_chassis', YLeaf(YType.boolean, 'inter-chassis')),
                                ('is_active', YLeaf(YType.boolean, 'is-active')),
                                ('lacp_status', YLeaf(YType.enumeration, 'lacp-status')),
                                ('mlacp_status', YLeaf(YType.enumeration, 'mlacp-status')),
                                ('ipv4bfd_status', YLeaf(YType.enumeration, 'ipv4bfd-status')),
                                ('link_order_status', YLeaf(YType.enumeration, 'link-order-status')),
                                ('ipv6bfd_status', YLeaf(YType.enumeration, 'ipv6bfd-status')),
                                ('load_balance_hash_type', YLeaf(YType.str, 'load-balance-hash-type')),
                                ('load_balance_locality_threshold', YLeaf(YType.uint16, 'load-balance-locality-threshold')),
                                ('suppression_timer', YLeaf(YType.uint16, 'suppression-timer')),
                                ('wait_while_timer', YLeaf(YType.uint16, 'wait-while-timer')),
                                ('collector_max_delay', YLeaf(YType.uint16, 'collector-max-delay')),
                                ('cisco_extensions', YLeaf(YType.boolean, 'cisco-extensions')),
                                ('lacp_nonrevertive', YLeaf(YType.boolean, 'lacp-nonrevertive')),
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ('active_foreign_member_count', YLeaf(YType.uint16, 'active-foreign-member-count')),
                                ('configured_foreign_member_count', YLeaf(YType.uint16, 'configured-foreign-member-count')),
                                ('switchover_type', YLeaf(YType.enumeration, 'switchover-type')),
                                ('maximize_threshold_value_links', YLeaf(YType.uint32, 'maximize-threshold-value-links')),
                                ('maximize_threshold_value_band_width', YLeaf(YType.uint32, 'maximize-threshold-value-band-width')),
                                ('mlacp_mode', YLeaf(YType.enumeration, 'mlacp-mode')),
                                ('recovery_delay', YLeaf(YType.uint16, 'recovery-delay')),
                                ('singleton', YLeaf(YType.boolean, 'singleton')),
                            ])
                            self.bundle_interface_name = None
                            self.available_bandwidth = None
                            self.effective_bandwidth = None
                            self.configured_bandwidth = None
                            self.minimum_active_links = None
                            self.maximum_active_links = None
                            self.maximum_active_links_source = None
                            self.minimum_bandwidth = None
                            self.primary_member = None
                            self.bundle_status = None
                            self.active_member_count = None
                            self.standby_member_count = None
                            self.configured_member_count = None
                            self.mac_source = None
                            self.mac_source_member = None
                            self.inter_chassis = None
                            self.is_active = None
                            self.lacp_status = None
                            self.mlacp_status = None
                            self.ipv4bfd_status = None
                            self.link_order_status = None
                            self.ipv6bfd_status = None
                            self.load_balance_hash_type = None
                            self.load_balance_locality_threshold = None
                            self.suppression_timer = None
                            self.wait_while_timer = None
                            self.collector_max_delay = None
                            self.cisco_extensions = None
                            self.lacp_nonrevertive = None
                            self.iccp_group_id = None
                            self.active_foreign_member_count = None
                            self.configured_foreign_member_count = None
                            self.switchover_type = None
                            self.maximize_threshold_value_links = None
                            self.maximize_threshold_value_band_width = None
                            self.mlacp_mode = None
                            self.recovery_delay = None
                            self.singleton = None

                            self.mac_address = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.MacAddress()
                            self.mac_address.parent = self
                            self._children_name_map["mac_address"] = "mac-address"
                            self._children_yang_names.add("mac-address")

                            self.bfd_config = YList(self)
                            self._segment_path = lambda: "actor-bundle-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData, ['bundle_interface_name', 'available_bandwidth', 'effective_bandwidth', 'configured_bandwidth', 'minimum_active_links', 'maximum_active_links', 'maximum_active_links_source', 'minimum_bandwidth', 'primary_member', 'bundle_status', 'active_member_count', 'standby_member_count', 'configured_member_count', 'mac_source', 'mac_source_member', 'inter_chassis', 'is_active', 'lacp_status', 'mlacp_status', 'ipv4bfd_status', 'link_order_status', 'ipv6bfd_status', 'load_balance_hash_type', 'load_balance_locality_threshold', 'suppression_timer', 'wait_while_timer', 'collector_max_delay', 'cisco_extensions', 'lacp_nonrevertive', 'iccp_group_id', 'active_foreign_member_count', 'configured_foreign_member_count', 'switchover_type', 'maximize_threshold_value_links', 'maximize_threshold_value_band_width', 'mlacp_mode', 'recovery_delay', 'singleton'], name, value)


                        class MacAddress(Entity):
                            """
                            MAC address of this member
                            
                            .. attribute:: address
                            
                            	MAC address
                            	**type**\: str
                            
                            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.MacAddress, self).__init__()

                                self.yang_name = "mac-address"
                                self.yang_parent_name = "actor-bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('address', YLeaf(YType.str, 'address')),
                                ])
                                self.address = None
                                self._segment_path = lambda: "mac-address"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.MacAddress, ['address'], name, value)


                        class BfdConfig(Entity):
                            """
                            Configuration values for BFD on bundle members
                            
                            .. attribute:: destination_address
                            
                            	Configured destination address for BFD session
                            	**type**\:  :py:class:`DestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.BfdConfig.DestinationAddress>`
                            
                            .. attribute:: bundle_status
                            
                            	Status of BFD on the bundle
                            	**type**\:  :py:class:`BmdBfdBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBfdBdlState>`
                            
                            .. attribute:: start_timer
                            
                            	Time to wait on session start before declaring DOWN
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: nbr_unconfig_timer
                            
                            	Time to wait on session NBR\_UNCONFIG before declaring DOWN
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pref_multiplier
                            
                            	Preferred multiplier for the BFD session
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: pref_min_interval
                            
                            	Preferred minimum interval for the BFD session (ms)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pref_echo_min_interval
                            
                            	Preferred echo minimum interval for the BFD session (ms)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: fast_detect
                            
                            	Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled)
                            	**type**\: bool
                            
                            .. attribute:: mode_info
                            
                            	Standard used for per\-member BFD
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.BfdConfig, self).__init__()

                                self.yang_name = "bfd-config"
                                self.yang_parent_name = "actor-bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("destination-address", ("destination_address", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.BfdConfig.DestinationAddress))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                    ('start_timer', YLeaf(YType.uint32, 'start-timer')),
                                    ('nbr_unconfig_timer', YLeaf(YType.uint32, 'nbr-unconfig-timer')),
                                    ('pref_multiplier', YLeaf(YType.uint16, 'pref-multiplier')),
                                    ('pref_min_interval', YLeaf(YType.uint32, 'pref-min-interval')),
                                    ('pref_echo_min_interval', YLeaf(YType.uint32, 'pref-echo-min-interval')),
                                    ('fast_detect', YLeaf(YType.boolean, 'fast-detect')),
                                    ('mode_info', YLeaf(YType.uint32, 'mode-info')),
                                ])
                                self.bundle_status = None
                                self.start_timer = None
                                self.nbr_unconfig_timer = None
                                self.pref_multiplier = None
                                self.pref_min_interval = None
                                self.pref_echo_min_interval = None
                                self.fast_detect = None
                                self.mode_info = None

                                self.destination_address = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.BfdConfig.DestinationAddress()
                                self.destination_address.parent = self
                                self._children_name_map["destination_address"] = "destination-address"
                                self._children_yang_names.add("destination-address")
                                self._segment_path = lambda: "bfd-config"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.BfdConfig, ['bundle_status', 'start_timer', 'nbr_unconfig_timer', 'pref_multiplier', 'pref_min_interval', 'pref_echo_min_interval', 'fast_detect', 'mode_info'], name, value)


                            class DestinationAddress(Entity):
                                """
                                Configured destination address for BFD session
                                
                                .. attribute:: af
                                
                                	AF
                                	**type**\:  :py:class:`BmAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmAfId>`
                                
                                .. attribute:: ipv4
                                
                                	IPv4 address type
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: ipv6
                                
                                	IPv6 address type
                                	**type**\: str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.BfdConfig.DestinationAddress, self).__init__()

                                    self.yang_name = "destination-address"
                                    self.yang_parent_name = "bfd-config"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('af', YLeaf(YType.enumeration, 'af')),
                                        ('ipv4', YLeaf(YType.str, 'ipv4')),
                                        ('ipv6', YLeaf(YType.str, 'ipv6')),
                                    ])
                                    self.af = None
                                    self.ipv4 = None
                                    self.ipv6 = None
                                    self._segment_path = lambda: "destination-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.ActorBundleData.BfdConfig.DestinationAddress, ['af', 'ipv4', 'ipv6'], name, value)


                    class BundleSystemId(Entity):
                        """
                        System ID for the bundle
                        
                        .. attribute:: system_mac_addr
                        
                        	MAC Address used to identify the system
                        	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId.SystemMacAddr>`
                        
                        .. attribute:: system_prio
                        
                        	Priority of the system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId, self).__init__()

                            self.yang_name = "bundle-system-id"
                            self.yang_parent_name = "lacp-bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId.SystemMacAddr))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                            ])
                            self.system_prio = None

                            self.system_mac_addr = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId.SystemMacAddr()
                            self.system_mac_addr.parent = self
                            self._children_name_map["system_mac_addr"] = "system-mac-addr"
                            self._children_yang_names.add("system-mac-addr")
                            self._segment_path = lambda: "bundle-system-id"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId, ['system_prio'], name, value)


                        class SystemMacAddr(Entity):
                            """
                            MAC Address used to identify the system
                            
                            .. attribute:: macaddr
                            
                            	macaddr
                            	**type**\: str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId.SystemMacAddr, self).__init__()

                                self.yang_name = "system-mac-addr"
                                self.yang_parent_name = "bundle-system-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('macaddr', YLeaf(YType.str, 'macaddr')),
                                ])
                                self.macaddr = None
                                self._segment_path = lambda: "system-mac-addr"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleItem.BundleSystemId.SystemMacAddr, ['macaddr'], name, value)


                class LacpBundleDescendant(Entity):
                    """
                    Data for this item and all its members
                    
                    .. attribute:: bundle_data
                    
                    	Bundle information
                    	**type**\:  :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData>`
                    
                    .. attribute:: member_data
                    
                    	Member information
                    	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant, self).__init__()

                        self.yang_name = "lacp-bundle-descendant"
                        self.yang_parent_name = "lacp-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData))])
                        self._child_list_classes = OrderedDict([("member-data", ("member_data", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData))])
                        self._leafs = OrderedDict()

                        self.bundle_data = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData()
                        self.bundle_data.parent = self
                        self._children_name_map["bundle_data"] = "bundle-data"
                        self._children_yang_names.add("bundle-data")

                        self.member_data = YList(self)
                        self._segment_path = lambda: "lacp-bundle-descendant"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant, [], name, value)


                    class BundleData(Entity):
                        """
                        Bundle information
                        
                        .. attribute:: actor_bundle_data
                        
                        	Basic bundle information
                        	**type**\:  :py:class:`ActorBundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData>`
                        
                        .. attribute:: bundle_system_id
                        
                        	System ID for the bundle
                        	**type**\:  :py:class:`BundleSystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId>`
                        
                        .. attribute:: actor_operational_key
                        
                        	Operational key of the interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_priority
                        
                        	Priority of the partner system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_mac_address
                        
                        	MAC Address used to identify the partner system
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: partner_operational_key
                        
                        	Operational key of the partner
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData, self).__init__()

                            self.yang_name = "bundle-data"
                            self.yang_parent_name = "lacp-bundle-descendant"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("actor-bundle-data", ("actor_bundle_data", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData)), ("bundle-system-id", ("bundle_system_id", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                                ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                                ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                                ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                            ])
                            self.actor_operational_key = None
                            self.partner_system_priority = None
                            self.partner_system_mac_address = None
                            self.partner_operational_key = None

                            self.actor_bundle_data = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData()
                            self.actor_bundle_data.parent = self
                            self._children_name_map["actor_bundle_data"] = "actor-bundle-data"
                            self._children_yang_names.add("actor-bundle-data")

                            self.bundle_system_id = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId()
                            self.bundle_system_id.parent = self
                            self._children_name_map["bundle_system_id"] = "bundle-system-id"
                            self._children_yang_names.add("bundle-system-id")
                            self._segment_path = lambda: "bundle-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData, ['actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key'], name, value)


                        class ActorBundleData(Entity):
                            """
                            Basic bundle information
                            
                            .. attribute:: mac_address
                            
                            	MAC address of this member
                            	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.MacAddress>`
                            
                            .. attribute:: bundle_interface_name
                            
                            	Bundle interface name
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: available_bandwidth
                            
                            	Bandwidth available to the bundle interface (kbps)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: kbit/s
                            
                            .. attribute:: effective_bandwidth
                            
                            	Effective bandwidth on the bundle interface (kbps)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: kbit/s
                            
                            .. attribute:: configured_bandwidth
                            
                            	Bandwidth configured on the bundle interface (kbps)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: kbit/s
                            
                            .. attribute:: minimum_active_links
                            
                            	Minimum number of active links for bundle to go up
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: maximum_active_links
                            
                            	Maximum number of active links in the bundle
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: maximum_active_links_source
                            
                            	Source of maximum active links value
                            	**type**\:  :py:class:`BmWhichSystem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmWhichSystem>`
                            
                            .. attribute:: minimum_bandwidth
                            
                            	Minimum bundle bandwidth for bundle to go up (kbps)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: kbit/s
                            
                            .. attribute:: primary_member
                            
                            	Primary bundle member (no longer applicable)
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: bundle_status
                            
                            	The state of the bundle
                            	**type**\:  :py:class:`BmBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlState>`
                            
                            .. attribute:: active_member_count
                            
                            	The number of active local members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: standby_member_count
                            
                            	The number of standby local members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: configured_member_count
                            
                            	The number of configured local members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: mac_source
                            
                            	The source of the MAC Address
                            	**type**\:  :py:class:`BmBdlMacSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlMacSource>`
                            
                            .. attribute:: mac_source_member
                            
                            	The name of the member that supplied the MAC address
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: inter_chassis
                            
                            	Indicates if this bundle is operating as an inter\-chassis link (1 = I\-C link, 0 = normal)
                            	**type**\: bool
                            
                            .. attribute:: is_active
                            
                            	Indicates the active/standby redundancy state of the device for the bundle
                            	**type**\: bool
                            
                            .. attribute:: lacp_status
                            
                            	The status of the LACP feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: mlacp_status
                            
                            	The status of the mLACP feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: ipv4bfd_status
                            
                            	The status of the BFD (IPv4) feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: link_order_status
                            
                            	The status of the link order signaling feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: ipv6bfd_status
                            
                            	The status of the BFD (IPv6) feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: load_balance_hash_type
                            
                            	The type of hash to use for load balancing
                            	**type**\: str
                            
                            .. attribute:: load_balance_locality_threshold
                            
                            	The number of links required per rack for localized load balancing
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: suppression_timer
                            
                            	Timer for suppressing bundle state flaps
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: wait_while_timer
                            
                            	The wait while time used for member ports
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: collector_max_delay
                            
                            	Collector Max Delay
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: cisco_extensions
                            
                            	The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled)
                            	**type**\: bool
                            
                            .. attribute:: lacp_nonrevertive
                            
                            	The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled)
                            	**type**\: bool
                            
                            .. attribute:: iccp_group_id
                            
                            	ICCP Group that the bundle is configured to
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: active_foreign_member_count
                            
                            	The number of active foreign members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: configured_foreign_member_count
                            
                            	The number of configured local members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: switchover_type
                            
                            	How a switchover of the bundle from this device will occur
                            	**type**\:  :py:class:`BmdMlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpSwitchover>`
                            
                            .. attribute:: maximize_threshold_value_links
                            
                            	Attempt to maximize the bundle if links are below this value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: maximize_threshold_value_band_width
                            
                            	Attempt to maximize the bundle if bandwidth is below this value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: mlacp_mode
                            
                            	Indicates the mode of the device for the bundle
                            	**type**\:  :py:class:`BundleMlacpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMlacpMode>`
                            
                            .. attribute:: recovery_delay
                            
                            	Number of seconds to wait before becoming active after recovering from a failure
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**units**\: second
                            
                            .. attribute:: singleton
                            
                            	Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not singleton)
                            	**type**\: bool
                            
                            .. attribute:: bfd_config
                            
                            	Configuration values for BFD on bundle members
                            	**type**\: list of  		 :py:class:`BfdConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.BfdConfig>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData, self).__init__()

                                self.yang_name = "actor-bundle-data"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.MacAddress))])
                                self._child_list_classes = OrderedDict([("bfd-config", ("bfd_config", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.BfdConfig))])
                                self._leafs = OrderedDict([
                                    ('bundle_interface_name', YLeaf(YType.str, 'bundle-interface-name')),
                                    ('available_bandwidth', YLeaf(YType.uint32, 'available-bandwidth')),
                                    ('effective_bandwidth', YLeaf(YType.uint32, 'effective-bandwidth')),
                                    ('configured_bandwidth', YLeaf(YType.uint32, 'configured-bandwidth')),
                                    ('minimum_active_links', YLeaf(YType.uint8, 'minimum-active-links')),
                                    ('maximum_active_links', YLeaf(YType.uint8, 'maximum-active-links')),
                                    ('maximum_active_links_source', YLeaf(YType.enumeration, 'maximum-active-links-source')),
                                    ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                                    ('primary_member', YLeaf(YType.str, 'primary-member')),
                                    ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                    ('active_member_count', YLeaf(YType.uint16, 'active-member-count')),
                                    ('standby_member_count', YLeaf(YType.uint16, 'standby-member-count')),
                                    ('configured_member_count', YLeaf(YType.uint16, 'configured-member-count')),
                                    ('mac_source', YLeaf(YType.enumeration, 'mac-source')),
                                    ('mac_source_member', YLeaf(YType.str, 'mac-source-member')),
                                    ('inter_chassis', YLeaf(YType.boolean, 'inter-chassis')),
                                    ('is_active', YLeaf(YType.boolean, 'is-active')),
                                    ('lacp_status', YLeaf(YType.enumeration, 'lacp-status')),
                                    ('mlacp_status', YLeaf(YType.enumeration, 'mlacp-status')),
                                    ('ipv4bfd_status', YLeaf(YType.enumeration, 'ipv4bfd-status')),
                                    ('link_order_status', YLeaf(YType.enumeration, 'link-order-status')),
                                    ('ipv6bfd_status', YLeaf(YType.enumeration, 'ipv6bfd-status')),
                                    ('load_balance_hash_type', YLeaf(YType.str, 'load-balance-hash-type')),
                                    ('load_balance_locality_threshold', YLeaf(YType.uint16, 'load-balance-locality-threshold')),
                                    ('suppression_timer', YLeaf(YType.uint16, 'suppression-timer')),
                                    ('wait_while_timer', YLeaf(YType.uint16, 'wait-while-timer')),
                                    ('collector_max_delay', YLeaf(YType.uint16, 'collector-max-delay')),
                                    ('cisco_extensions', YLeaf(YType.boolean, 'cisco-extensions')),
                                    ('lacp_nonrevertive', YLeaf(YType.boolean, 'lacp-nonrevertive')),
                                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                    ('active_foreign_member_count', YLeaf(YType.uint16, 'active-foreign-member-count')),
                                    ('configured_foreign_member_count', YLeaf(YType.uint16, 'configured-foreign-member-count')),
                                    ('switchover_type', YLeaf(YType.enumeration, 'switchover-type')),
                                    ('maximize_threshold_value_links', YLeaf(YType.uint32, 'maximize-threshold-value-links')),
                                    ('maximize_threshold_value_band_width', YLeaf(YType.uint32, 'maximize-threshold-value-band-width')),
                                    ('mlacp_mode', YLeaf(YType.enumeration, 'mlacp-mode')),
                                    ('recovery_delay', YLeaf(YType.uint16, 'recovery-delay')),
                                    ('singleton', YLeaf(YType.boolean, 'singleton')),
                                ])
                                self.bundle_interface_name = None
                                self.available_bandwidth = None
                                self.effective_bandwidth = None
                                self.configured_bandwidth = None
                                self.minimum_active_links = None
                                self.maximum_active_links = None
                                self.maximum_active_links_source = None
                                self.minimum_bandwidth = None
                                self.primary_member = None
                                self.bundle_status = None
                                self.active_member_count = None
                                self.standby_member_count = None
                                self.configured_member_count = None
                                self.mac_source = None
                                self.mac_source_member = None
                                self.inter_chassis = None
                                self.is_active = None
                                self.lacp_status = None
                                self.mlacp_status = None
                                self.ipv4bfd_status = None
                                self.link_order_status = None
                                self.ipv6bfd_status = None
                                self.load_balance_hash_type = None
                                self.load_balance_locality_threshold = None
                                self.suppression_timer = None
                                self.wait_while_timer = None
                                self.collector_max_delay = None
                                self.cisco_extensions = None
                                self.lacp_nonrevertive = None
                                self.iccp_group_id = None
                                self.active_foreign_member_count = None
                                self.configured_foreign_member_count = None
                                self.switchover_type = None
                                self.maximize_threshold_value_links = None
                                self.maximize_threshold_value_band_width = None
                                self.mlacp_mode = None
                                self.recovery_delay = None
                                self.singleton = None

                                self.mac_address = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.MacAddress()
                                self.mac_address.parent = self
                                self._children_name_map["mac_address"] = "mac-address"
                                self._children_yang_names.add("mac-address")

                                self.bfd_config = YList(self)
                                self._segment_path = lambda: "actor-bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData, ['bundle_interface_name', 'available_bandwidth', 'effective_bandwidth', 'configured_bandwidth', 'minimum_active_links', 'maximum_active_links', 'maximum_active_links_source', 'minimum_bandwidth', 'primary_member', 'bundle_status', 'active_member_count', 'standby_member_count', 'configured_member_count', 'mac_source', 'mac_source_member', 'inter_chassis', 'is_active', 'lacp_status', 'mlacp_status', 'ipv4bfd_status', 'link_order_status', 'ipv6bfd_status', 'load_balance_hash_type', 'load_balance_locality_threshold', 'suppression_timer', 'wait_while_timer', 'collector_max_delay', 'cisco_extensions', 'lacp_nonrevertive', 'iccp_group_id', 'active_foreign_member_count', 'configured_foreign_member_count', 'switchover_type', 'maximize_threshold_value_links', 'maximize_threshold_value_band_width', 'mlacp_mode', 'recovery_delay', 'singleton'], name, value)


                            class MacAddress(Entity):
                                """
                                MAC address of this member
                                
                                .. attribute:: address
                                
                                	MAC address
                                	**type**\: str
                                
                                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.MacAddress, self).__init__()

                                    self.yang_name = "mac-address"
                                    self.yang_parent_name = "actor-bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.str, 'address')),
                                    ])
                                    self.address = None
                                    self._segment_path = lambda: "mac-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.MacAddress, ['address'], name, value)


                            class BfdConfig(Entity):
                                """
                                Configuration values for BFD on bundle members
                                
                                .. attribute:: destination_address
                                
                                	Configured destination address for BFD session
                                	**type**\:  :py:class:`DestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.BfdConfig.DestinationAddress>`
                                
                                .. attribute:: bundle_status
                                
                                	Status of BFD on the bundle
                                	**type**\:  :py:class:`BmdBfdBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBfdBdlState>`
                                
                                .. attribute:: start_timer
                                
                                	Time to wait on session start before declaring DOWN
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: nbr_unconfig_timer
                                
                                	Time to wait on session NBR\_UNCONFIG before declaring DOWN
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pref_multiplier
                                
                                	Preferred multiplier for the BFD session
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: pref_min_interval
                                
                                	Preferred minimum interval for the BFD session (ms)
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pref_echo_min_interval
                                
                                	Preferred echo minimum interval for the BFD session (ms)
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: fast_detect
                                
                                	Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled)
                                	**type**\: bool
                                
                                .. attribute:: mode_info
                                
                                	Standard used for per\-member BFD
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.BfdConfig, self).__init__()

                                    self.yang_name = "bfd-config"
                                    self.yang_parent_name = "actor-bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("destination-address", ("destination_address", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.BfdConfig.DestinationAddress))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                        ('start_timer', YLeaf(YType.uint32, 'start-timer')),
                                        ('nbr_unconfig_timer', YLeaf(YType.uint32, 'nbr-unconfig-timer')),
                                        ('pref_multiplier', YLeaf(YType.uint16, 'pref-multiplier')),
                                        ('pref_min_interval', YLeaf(YType.uint32, 'pref-min-interval')),
                                        ('pref_echo_min_interval', YLeaf(YType.uint32, 'pref-echo-min-interval')),
                                        ('fast_detect', YLeaf(YType.boolean, 'fast-detect')),
                                        ('mode_info', YLeaf(YType.uint32, 'mode-info')),
                                    ])
                                    self.bundle_status = None
                                    self.start_timer = None
                                    self.nbr_unconfig_timer = None
                                    self.pref_multiplier = None
                                    self.pref_min_interval = None
                                    self.pref_echo_min_interval = None
                                    self.fast_detect = None
                                    self.mode_info = None

                                    self.destination_address = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.BfdConfig.DestinationAddress()
                                    self.destination_address.parent = self
                                    self._children_name_map["destination_address"] = "destination-address"
                                    self._children_yang_names.add("destination-address")
                                    self._segment_path = lambda: "bfd-config"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.BfdConfig, ['bundle_status', 'start_timer', 'nbr_unconfig_timer', 'pref_multiplier', 'pref_min_interval', 'pref_echo_min_interval', 'fast_detect', 'mode_info'], name, value)


                                class DestinationAddress(Entity):
                                    """
                                    Configured destination address for BFD session
                                    
                                    .. attribute:: af
                                    
                                    	AF
                                    	**type**\:  :py:class:`BmAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmAfId>`
                                    
                                    .. attribute:: ipv4
                                    
                                    	IPv4 address type
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6
                                    
                                    	IPv6 address type
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.BfdConfig.DestinationAddress, self).__init__()

                                        self.yang_name = "destination-address"
                                        self.yang_parent_name = "bfd-config"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af', YLeaf(YType.enumeration, 'af')),
                                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                                        ])
                                        self.af = None
                                        self.ipv4 = None
                                        self.ipv6 = None
                                        self._segment_path = lambda: "destination-address"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.ActorBundleData.BfdConfig.DestinationAddress, ['af', 'ipv4', 'ipv6'], name, value)


                        class BundleSystemId(Entity):
                            """
                            System ID for the bundle
                            
                            .. attribute:: system_mac_addr
                            
                            	MAC Address used to identify the system
                            	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId.SystemMacAddr>`
                            
                            .. attribute:: system_prio
                            
                            	Priority of the system
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId, self).__init__()

                                self.yang_name = "bundle-system-id"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId.SystemMacAddr))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                ])
                                self.system_prio = None

                                self.system_mac_addr = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId.SystemMacAddr()
                                self.system_mac_addr.parent = self
                                self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                self._children_yang_names.add("system-mac-addr")
                                self._segment_path = lambda: "bundle-system-id"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId, ['system_prio'], name, value)


                            class SystemMacAddr(Entity):
                                """
                                MAC Address used to identify the system
                                
                                .. attribute:: macaddr
                                
                                	macaddr
                                	**type**\: str
                                
                                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId.SystemMacAddr, self).__init__()

                                    self.yang_name = "system-mac-addr"
                                    self.yang_parent_name = "bundle-system-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('macaddr', YLeaf(YType.str, 'macaddr')),
                                    ])
                                    self.macaddr = None
                                    self._segment_path = lambda: "system-mac-addr"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.BundleData.BundleSystemId.SystemMacAddr, ['macaddr'], name, value)


                    class MemberData(Entity):
                        """
                        Member information
                        
                        .. attribute:: actor_info
                        
                        	LACP information for the port from the actor
                        	**type**\:  :py:class:`ActorInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo>`
                        
                        .. attribute:: partner_info
                        
                        	LACP information for the port from the partner
                        	**type**\:  :py:class:`PartnerInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo>`
                        
                        .. attribute:: additional_info
                        
                        	Additional information for the link
                        	**type**\:  :py:class:`AdditionalInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo>`
                        
                        .. attribute:: selected_aggregator_id
                        
                        	MIB ifindex of selected bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: attached_aggregator_id
                        
                        	MIB ifindex of attached bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: selection_state
                        
                        	State of the Selection Logic state machine
                        	**type**\:  :py:class:`LacpSelState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpSelState>`
                        
                        .. attribute:: period_state
                        
                        	State of the Period state machine
                        	**type**\:  :py:class:`LacpPeriodState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpPeriodState>`
                        
                        .. attribute:: receive_machine_state
                        
                        	State of the RX state machine
                        	**type**\:  :py:class:`Rxstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Rxstates>`
                        
                        .. attribute:: mux_state
                        
                        	State of the Mux state machine
                        	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                        
                        .. attribute:: actor_churn_state
                        
                        	State of the Churn state machine for the Actor
                        	**type**\:  :py:class:`LacpChurnstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpChurnstates>`
                        
                        .. attribute:: partner_churn_state
                        
                        	State of the Churn state machine for the Partner
                        	**type**\:  :py:class:`LacpChurnstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpChurnstates>`
                        
                        .. attribute:: iccp_group_id
                        
                        	The ID of the ICCP group that the link is configured on
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData, self).__init__()

                            self.yang_name = "member-data"
                            self.yang_parent_name = "lacp-bundle-descendant"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("actor-info", ("actor_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo)), ("partner-info", ("partner_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo)), ("additional-info", ("additional_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                                ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                                ('selection_state', YLeaf(YType.enumeration, 'selection-state')),
                                ('period_state', YLeaf(YType.enumeration, 'period-state')),
                                ('receive_machine_state', YLeaf(YType.enumeration, 'receive-machine-state')),
                                ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                                ('actor_churn_state', YLeaf(YType.enumeration, 'actor-churn-state')),
                                ('partner_churn_state', YLeaf(YType.enumeration, 'partner-churn-state')),
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                            ])
                            self.selected_aggregator_id = None
                            self.attached_aggregator_id = None
                            self.selection_state = None
                            self.period_state = None
                            self.receive_machine_state = None
                            self.mux_state = None
                            self.actor_churn_state = None
                            self.partner_churn_state = None
                            self.iccp_group_id = None

                            self.actor_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo()
                            self.actor_info.parent = self
                            self._children_name_map["actor_info"] = "actor-info"
                            self._children_yang_names.add("actor-info")

                            self.partner_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo()
                            self.partner_info.parent = self
                            self._children_name_map["partner_info"] = "partner-info"
                            self._children_yang_names.add("partner-info")

                            self.additional_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo()
                            self.additional_info.parent = self
                            self._children_name_map["additional_info"] = "additional-info"
                            self._children_yang_names.add("additional-info")
                            self._segment_path = lambda: "member-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData, ['selected_aggregator_id', 'attached_aggregator_id', 'selection_state', 'period_state', 'receive_machine_state', 'mux_state', 'actor_churn_state', 'partner_churn_state', 'iccp_group_id'], name, value)


                        class ActorInfo(Entity):
                            """
                            LACP information for the port from the actor
                            
                            .. attribute:: port_info
                            
                            	LACP parameters for this device
                            	**type**\:  :py:class:`PortInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo>`
                            
                            .. attribute:: tx_period
                            
                            	Time (in ms) between transmitting LACPDUs
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo, self).__init__()

                                self.yang_name = "actor-info"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("port-info", ("port_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tx_period', YLeaf(YType.uint32, 'tx-period')),
                                ])
                                self.tx_period = None

                                self.port_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo()
                                self.port_info.parent = self
                                self._children_name_map["port_info"] = "port-info"
                                self._children_yang_names.add("port-info")
                                self._segment_path = lambda: "actor-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo, ['tx_period'], name, value)


                            class PortInfo(Entity):
                                """
                                LACP parameters for this device
                                
                                .. attribute:: system
                                
                                	system
                                	**type**\:  :py:class:`System <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System>`
                                
                                .. attribute:: port
                                
                                	port
                                	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.Port>`
                                
                                .. attribute:: key
                                
                                	key
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: state
                                
                                	state
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo, self).__init__()

                                    self.yang_name = "port-info"
                                    self.yang_parent_name = "actor-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system", ("system", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System)), ("port", ("port", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.Port))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('key', YLeaf(YType.uint16, 'key')),
                                        ('state', YLeaf(YType.uint8, 'state')),
                                    ])
                                    self.key = None
                                    self.state = None

                                    self.system = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System()
                                    self.system.parent = self
                                    self._children_name_map["system"] = "system"
                                    self._children_yang_names.add("system")

                                    self.port = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.Port()
                                    self.port.parent = self
                                    self._children_name_map["port"] = "port"
                                    self._children_yang_names.add("port")
                                    self._segment_path = lambda: "port-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo, ['key', 'state'], name, value)


                                class System(Entity):
                                    """
                                    system
                                    
                                    .. attribute:: system_mac_addr
                                    
                                    	MAC Address used to identify the system
                                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System.SystemMacAddr>`
                                    
                                    .. attribute:: system_prio
                                    
                                    	Priority of the system
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System, self).__init__()

                                        self.yang_name = "system"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System.SystemMacAddr))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                        ])
                                        self.system_prio = None

                                        self.system_mac_addr = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System.SystemMacAddr()
                                        self.system_mac_addr.parent = self
                                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                        self._children_yang_names.add("system-mac-addr")
                                        self._segment_path = lambda: "system"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System, ['system_prio'], name, value)


                                    class SystemMacAddr(Entity):
                                        """
                                        MAC Address used to identify the system
                                        
                                        .. attribute:: macaddr
                                        
                                        	macaddr
                                        	**type**\: str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System.SystemMacAddr, self).__init__()

                                            self.yang_name = "system-mac-addr"
                                            self.yang_parent_name = "system"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                                            ])
                                            self.macaddr = None
                                            self._segment_path = lambda: "system-mac-addr"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.System.SystemMacAddr, ['macaddr'], name, value)


                                class Port(Entity):
                                    """
                                    port
                                    
                                    .. attribute:: link_priority
                                    
                                    	link priority
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: link_number
                                    
                                    	link number
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.Port, self).__init__()

                                        self.yang_name = "port"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('link_priority', YLeaf(YType.uint16, 'link-priority')),
                                            ('link_number', YLeaf(YType.uint16, 'link-number')),
                                        ])
                                        self.link_priority = None
                                        self.link_number = None
                                        self._segment_path = lambda: "port"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.ActorInfo.PortInfo.Port, ['link_priority', 'link_number'], name, value)


                        class PartnerInfo(Entity):
                            """
                            LACP information for the port from the partner
                            
                            .. attribute:: port_info
                            
                            	LACP parameters for this device
                            	**type**\:  :py:class:`PortInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo>`
                            
                            .. attribute:: tx_period
                            
                            	Time (in ms) between transmitting LACPDUs
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo, self).__init__()

                                self.yang_name = "partner-info"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("port-info", ("port_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tx_period', YLeaf(YType.uint32, 'tx-period')),
                                ])
                                self.tx_period = None

                                self.port_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo()
                                self.port_info.parent = self
                                self._children_name_map["port_info"] = "port-info"
                                self._children_yang_names.add("port-info")
                                self._segment_path = lambda: "partner-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo, ['tx_period'], name, value)


                            class PortInfo(Entity):
                                """
                                LACP parameters for this device
                                
                                .. attribute:: system
                                
                                	system
                                	**type**\:  :py:class:`System <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System>`
                                
                                .. attribute:: port
                                
                                	port
                                	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.Port>`
                                
                                .. attribute:: key
                                
                                	key
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: state
                                
                                	state
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo, self).__init__()

                                    self.yang_name = "port-info"
                                    self.yang_parent_name = "partner-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system", ("system", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System)), ("port", ("port", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.Port))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('key', YLeaf(YType.uint16, 'key')),
                                        ('state', YLeaf(YType.uint8, 'state')),
                                    ])
                                    self.key = None
                                    self.state = None

                                    self.system = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System()
                                    self.system.parent = self
                                    self._children_name_map["system"] = "system"
                                    self._children_yang_names.add("system")

                                    self.port = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.Port()
                                    self.port.parent = self
                                    self._children_name_map["port"] = "port"
                                    self._children_yang_names.add("port")
                                    self._segment_path = lambda: "port-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo, ['key', 'state'], name, value)


                                class System(Entity):
                                    """
                                    system
                                    
                                    .. attribute:: system_mac_addr
                                    
                                    	MAC Address used to identify the system
                                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr>`
                                    
                                    .. attribute:: system_prio
                                    
                                    	Priority of the system
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System, self).__init__()

                                        self.yang_name = "system"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                        ])
                                        self.system_prio = None

                                        self.system_mac_addr = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr()
                                        self.system_mac_addr.parent = self
                                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                        self._children_yang_names.add("system-mac-addr")
                                        self._segment_path = lambda: "system"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System, ['system_prio'], name, value)


                                    class SystemMacAddr(Entity):
                                        """
                                        MAC Address used to identify the system
                                        
                                        .. attribute:: macaddr
                                        
                                        	macaddr
                                        	**type**\: str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr, self).__init__()

                                            self.yang_name = "system-mac-addr"
                                            self.yang_parent_name = "system"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                                            ])
                                            self.macaddr = None
                                            self._segment_path = lambda: "system-mac-addr"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr, ['macaddr'], name, value)


                                class Port(Entity):
                                    """
                                    port
                                    
                                    .. attribute:: link_priority
                                    
                                    	link priority
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: link_number
                                    
                                    	link number
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.Port, self).__init__()

                                        self.yang_name = "port"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('link_priority', YLeaf(YType.uint16, 'link-priority')),
                                            ('link_number', YLeaf(YType.uint16, 'link-number')),
                                        ])
                                        self.link_priority = None
                                        self.link_number = None
                                        self._segment_path = lambda: "port"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.PartnerInfo.PortInfo.Port, ['link_priority', 'link_number'], name, value)


                        class AdditionalInfo(Entity):
                            """
                            Additional information for the link
                            
                            .. attribute:: local
                            
                            	Information for a local port
                            	**type**\:  :py:class:`Local <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Local>`
                            
                            .. attribute:: foreign
                            
                            	Information for a foreign port
                            	**type**\:  :py:class:`Foreign <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Foreign>`
                            
                            .. attribute:: mbr_type
                            
                            	MbrType
                            	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo, self).__init__()

                                self.yang_name = "additional-info"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("local", ("local", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Local)), ("foreign", ("foreign", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Foreign))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('mbr_type', YLeaf(YType.enumeration, 'mbr-type')),
                                ])
                                self.mbr_type = None

                                self.local = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Local()
                                self.local.parent = self
                                self._children_name_map["local"] = "local"
                                self._children_yang_names.add("local")

                                self.foreign = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Foreign()
                                self.foreign.parent = self
                                self._children_name_map["foreign"] = "foreign"
                                self._children_yang_names.add("foreign")
                                self._segment_path = lambda: "additional-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo, ['mbr_type'], name, value)


                            class Local(Entity):
                                """
                                Information for a local port
                                
                                .. attribute:: interface_handle
                                
                                	Member's interface handle
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Local, self).__init__()

                                    self.yang_name = "local"
                                    self.yang_parent_name = "additional-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                    ])
                                    self.interface_handle = None
                                    self._segment_path = lambda: "local"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Local, ['interface_handle'], name, value)


                            class Foreign(Entity):
                                """
                                Information for a foreign port
                                
                                .. attribute:: peer_address
                                
                                	The LDP address of the device that the link is configured on
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: member_name
                                
                                	Member's (short form) name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Foreign, self).__init__()

                                    self.yang_name = "foreign"
                                    self.yang_parent_name = "additional-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_address', YLeaf(YType.str, 'peer-address')),
                                        ('member_name', YLeaf(YType.str, 'member-name')),
                                    ])
                                    self.peer_address = None
                                    self.member_name = None
                                    self._segment_path = lambda: "foreign"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleDescendant.MemberData.AdditionalInfo.Foreign, ['peer_address', 'member_name'], name, value)


                class LacpBundleChildrenMembers(Entity):
                    """
                    Children of bundle with LACP information
                    
                    .. attribute:: lacp_bundle_children_member
                    
                    	Bundle member item with LACP information
                    	**type**\: list of  		 :py:class:`LacpBundleChildrenMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers, self).__init__()

                        self.yang_name = "lacp-bundle-children-members"
                        self.yang_parent_name = "lacp-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("lacp-bundle-children-member", ("lacp_bundle_children_member", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember))])
                        self._leafs = OrderedDict()

                        self.lacp_bundle_children_member = YList(self)
                        self._segment_path = lambda: "lacp-bundle-children-members"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers, [], name, value)


                    class LacpBundleChildrenMember(Entity):
                        """
                        Bundle member item with LACP information
                        
                        .. attribute:: member_interface  (key)
                        
                        	Member interface
                        	**type**\: str
                        
                        .. attribute:: actor_info
                        
                        	LACP information for the port from the actor
                        	**type**\:  :py:class:`ActorInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo>`
                        
                        .. attribute:: partner_info
                        
                        	LACP information for the port from the partner
                        	**type**\:  :py:class:`PartnerInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo>`
                        
                        .. attribute:: additional_info
                        
                        	Additional information for the link
                        	**type**\:  :py:class:`AdditionalInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo>`
                        
                        .. attribute:: selected_aggregator_id
                        
                        	MIB ifindex of selected bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: attached_aggregator_id
                        
                        	MIB ifindex of attached bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: selection_state
                        
                        	State of the Selection Logic state machine
                        	**type**\:  :py:class:`LacpSelState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpSelState>`
                        
                        .. attribute:: period_state
                        
                        	State of the Period state machine
                        	**type**\:  :py:class:`LacpPeriodState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpPeriodState>`
                        
                        .. attribute:: receive_machine_state
                        
                        	State of the RX state machine
                        	**type**\:  :py:class:`Rxstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Rxstates>`
                        
                        .. attribute:: mux_state
                        
                        	State of the Mux state machine
                        	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                        
                        .. attribute:: actor_churn_state
                        
                        	State of the Churn state machine for the Actor
                        	**type**\:  :py:class:`LacpChurnstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpChurnstates>`
                        
                        .. attribute:: partner_churn_state
                        
                        	State of the Churn state machine for the Partner
                        	**type**\:  :py:class:`LacpChurnstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpChurnstates>`
                        
                        .. attribute:: iccp_group_id
                        
                        	The ID of the ICCP group that the link is configured on
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember, self).__init__()

                            self.yang_name = "lacp-bundle-children-member"
                            self.yang_parent_name = "lacp-bundle-children-members"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['member_interface']
                            self._child_container_classes = OrderedDict([("actor-info", ("actor_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo)), ("partner-info", ("partner_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo)), ("additional-info", ("additional_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('member_interface', YLeaf(YType.str, 'member-interface')),
                                ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                                ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                                ('selection_state', YLeaf(YType.enumeration, 'selection-state')),
                                ('period_state', YLeaf(YType.enumeration, 'period-state')),
                                ('receive_machine_state', YLeaf(YType.enumeration, 'receive-machine-state')),
                                ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                                ('actor_churn_state', YLeaf(YType.enumeration, 'actor-churn-state')),
                                ('partner_churn_state', YLeaf(YType.enumeration, 'partner-churn-state')),
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                            ])
                            self.member_interface = None
                            self.selected_aggregator_id = None
                            self.attached_aggregator_id = None
                            self.selection_state = None
                            self.period_state = None
                            self.receive_machine_state = None
                            self.mux_state = None
                            self.actor_churn_state = None
                            self.partner_churn_state = None
                            self.iccp_group_id = None

                            self.actor_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo()
                            self.actor_info.parent = self
                            self._children_name_map["actor_info"] = "actor-info"
                            self._children_yang_names.add("actor-info")

                            self.partner_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo()
                            self.partner_info.parent = self
                            self._children_name_map["partner_info"] = "partner-info"
                            self._children_yang_names.add("partner-info")

                            self.additional_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo()
                            self.additional_info.parent = self
                            self._children_name_map["additional_info"] = "additional-info"
                            self._children_yang_names.add("additional-info")
                            self._segment_path = lambda: "lacp-bundle-children-member" + "[member-interface='" + str(self.member_interface) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember, ['member_interface', 'selected_aggregator_id', 'attached_aggregator_id', 'selection_state', 'period_state', 'receive_machine_state', 'mux_state', 'actor_churn_state', 'partner_churn_state', 'iccp_group_id'], name, value)


                        class ActorInfo(Entity):
                            """
                            LACP information for the port from the actor
                            
                            .. attribute:: port_info
                            
                            	LACP parameters for this device
                            	**type**\:  :py:class:`PortInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo>`
                            
                            .. attribute:: tx_period
                            
                            	Time (in ms) between transmitting LACPDUs
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo, self).__init__()

                                self.yang_name = "actor-info"
                                self.yang_parent_name = "lacp-bundle-children-member"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("port-info", ("port_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tx_period', YLeaf(YType.uint32, 'tx-period')),
                                ])
                                self.tx_period = None

                                self.port_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo()
                                self.port_info.parent = self
                                self._children_name_map["port_info"] = "port-info"
                                self._children_yang_names.add("port-info")
                                self._segment_path = lambda: "actor-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo, ['tx_period'], name, value)


                            class PortInfo(Entity):
                                """
                                LACP parameters for this device
                                
                                .. attribute:: system
                                
                                	system
                                	**type**\:  :py:class:`System <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System>`
                                
                                .. attribute:: port
                                
                                	port
                                	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.Port>`
                                
                                .. attribute:: key
                                
                                	key
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: state
                                
                                	state
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo, self).__init__()

                                    self.yang_name = "port-info"
                                    self.yang_parent_name = "actor-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system", ("system", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System)), ("port", ("port", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.Port))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('key', YLeaf(YType.uint16, 'key')),
                                        ('state', YLeaf(YType.uint8, 'state')),
                                    ])
                                    self.key = None
                                    self.state = None

                                    self.system = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System()
                                    self.system.parent = self
                                    self._children_name_map["system"] = "system"
                                    self._children_yang_names.add("system")

                                    self.port = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.Port()
                                    self.port.parent = self
                                    self._children_name_map["port"] = "port"
                                    self._children_yang_names.add("port")
                                    self._segment_path = lambda: "port-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo, ['key', 'state'], name, value)


                                class System(Entity):
                                    """
                                    system
                                    
                                    .. attribute:: system_mac_addr
                                    
                                    	MAC Address used to identify the system
                                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System.SystemMacAddr>`
                                    
                                    .. attribute:: system_prio
                                    
                                    	Priority of the system
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System, self).__init__()

                                        self.yang_name = "system"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System.SystemMacAddr))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                        ])
                                        self.system_prio = None

                                        self.system_mac_addr = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System.SystemMacAddr()
                                        self.system_mac_addr.parent = self
                                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                        self._children_yang_names.add("system-mac-addr")
                                        self._segment_path = lambda: "system"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System, ['system_prio'], name, value)


                                    class SystemMacAddr(Entity):
                                        """
                                        MAC Address used to identify the system
                                        
                                        .. attribute:: macaddr
                                        
                                        	macaddr
                                        	**type**\: str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System.SystemMacAddr, self).__init__()

                                            self.yang_name = "system-mac-addr"
                                            self.yang_parent_name = "system"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                                            ])
                                            self.macaddr = None
                                            self._segment_path = lambda: "system-mac-addr"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.System.SystemMacAddr, ['macaddr'], name, value)


                                class Port(Entity):
                                    """
                                    port
                                    
                                    .. attribute:: link_priority
                                    
                                    	link priority
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: link_number
                                    
                                    	link number
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.Port, self).__init__()

                                        self.yang_name = "port"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('link_priority', YLeaf(YType.uint16, 'link-priority')),
                                            ('link_number', YLeaf(YType.uint16, 'link-number')),
                                        ])
                                        self.link_priority = None
                                        self.link_number = None
                                        self._segment_path = lambda: "port"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.ActorInfo.PortInfo.Port, ['link_priority', 'link_number'], name, value)


                        class PartnerInfo(Entity):
                            """
                            LACP information for the port from the partner
                            
                            .. attribute:: port_info
                            
                            	LACP parameters for this device
                            	**type**\:  :py:class:`PortInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo>`
                            
                            .. attribute:: tx_period
                            
                            	Time (in ms) between transmitting LACPDUs
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo, self).__init__()

                                self.yang_name = "partner-info"
                                self.yang_parent_name = "lacp-bundle-children-member"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("port-info", ("port_info", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tx_period', YLeaf(YType.uint32, 'tx-period')),
                                ])
                                self.tx_period = None

                                self.port_info = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo()
                                self.port_info.parent = self
                                self._children_name_map["port_info"] = "port-info"
                                self._children_yang_names.add("port-info")
                                self._segment_path = lambda: "partner-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo, ['tx_period'], name, value)


                            class PortInfo(Entity):
                                """
                                LACP parameters for this device
                                
                                .. attribute:: system
                                
                                	system
                                	**type**\:  :py:class:`System <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System>`
                                
                                .. attribute:: port
                                
                                	port
                                	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.Port>`
                                
                                .. attribute:: key
                                
                                	key
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: state
                                
                                	state
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo, self).__init__()

                                    self.yang_name = "port-info"
                                    self.yang_parent_name = "partner-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system", ("system", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System)), ("port", ("port", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.Port))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('key', YLeaf(YType.uint16, 'key')),
                                        ('state', YLeaf(YType.uint8, 'state')),
                                    ])
                                    self.key = None
                                    self.state = None

                                    self.system = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System()
                                    self.system.parent = self
                                    self._children_name_map["system"] = "system"
                                    self._children_yang_names.add("system")

                                    self.port = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.Port()
                                    self.port.parent = self
                                    self._children_name_map["port"] = "port"
                                    self._children_yang_names.add("port")
                                    self._segment_path = lambda: "port-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo, ['key', 'state'], name, value)


                                class System(Entity):
                                    """
                                    system
                                    
                                    .. attribute:: system_mac_addr
                                    
                                    	MAC Address used to identify the system
                                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System.SystemMacAddr>`
                                    
                                    .. attribute:: system_prio
                                    
                                    	Priority of the system
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System, self).__init__()

                                        self.yang_name = "system"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System.SystemMacAddr))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                        ])
                                        self.system_prio = None

                                        self.system_mac_addr = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System.SystemMacAddr()
                                        self.system_mac_addr.parent = self
                                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                        self._children_yang_names.add("system-mac-addr")
                                        self._segment_path = lambda: "system"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System, ['system_prio'], name, value)


                                    class SystemMacAddr(Entity):
                                        """
                                        MAC Address used to identify the system
                                        
                                        .. attribute:: macaddr
                                        
                                        	macaddr
                                        	**type**\: str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System.SystemMacAddr, self).__init__()

                                            self.yang_name = "system-mac-addr"
                                            self.yang_parent_name = "system"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                                            ])
                                            self.macaddr = None
                                            self._segment_path = lambda: "system-mac-addr"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.System.SystemMacAddr, ['macaddr'], name, value)


                                class Port(Entity):
                                    """
                                    port
                                    
                                    .. attribute:: link_priority
                                    
                                    	link priority
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: link_number
                                    
                                    	link number
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.Port, self).__init__()

                                        self.yang_name = "port"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('link_priority', YLeaf(YType.uint16, 'link-priority')),
                                            ('link_number', YLeaf(YType.uint16, 'link-number')),
                                        ])
                                        self.link_priority = None
                                        self.link_number = None
                                        self._segment_path = lambda: "port"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.PartnerInfo.PortInfo.Port, ['link_priority', 'link_number'], name, value)


                        class AdditionalInfo(Entity):
                            """
                            Additional information for the link
                            
                            .. attribute:: local
                            
                            	Information for a local port
                            	**type**\:  :py:class:`Local <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Local>`
                            
                            .. attribute:: foreign
                            
                            	Information for a foreign port
                            	**type**\:  :py:class:`Foreign <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Foreign>`
                            
                            .. attribute:: mbr_type
                            
                            	MbrType
                            	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo, self).__init__()

                                self.yang_name = "additional-info"
                                self.yang_parent_name = "lacp-bundle-children-member"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("local", ("local", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Local)), ("foreign", ("foreign", BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Foreign))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('mbr_type', YLeaf(YType.enumeration, 'mbr-type')),
                                ])
                                self.mbr_type = None

                                self.local = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Local()
                                self.local.parent = self
                                self._children_name_map["local"] = "local"
                                self._children_yang_names.add("local")

                                self.foreign = BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Foreign()
                                self.foreign.parent = self
                                self._children_name_map["foreign"] = "foreign"
                                self._children_yang_names.add("foreign")
                                self._segment_path = lambda: "additional-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo, ['mbr_type'], name, value)


                            class Local(Entity):
                                """
                                Information for a local port
                                
                                .. attribute:: interface_handle
                                
                                	Member's interface handle
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Local, self).__init__()

                                    self.yang_name = "local"
                                    self.yang_parent_name = "additional-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                    ])
                                    self.interface_handle = None
                                    self._segment_path = lambda: "local"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Local, ['interface_handle'], name, value)


                            class Foreign(Entity):
                                """
                                Information for a foreign port
                                
                                .. attribute:: peer_address
                                
                                	The LDP address of the device that the link is configured on
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: member_name
                                
                                	Member's (short form) name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Foreign, self).__init__()

                                    self.yang_name = "foreign"
                                    self.yang_parent_name = "additional-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_address', YLeaf(YType.str, 'peer-address')),
                                        ('member_name', YLeaf(YType.str, 'member-name')),
                                    ])
                                    self.peer_address = None
                                    self.member_name = None
                                    self._segment_path = lambda: "foreign"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpBundles.LacpBundle.LacpBundleChildrenMembers.LacpBundleChildrenMember.AdditionalInfo.Foreign, ['peer_address', 'member_name'], name, value)


        class LacpMembers(Entity):
            """
            Member interfaces with LACP information
            
            .. attribute:: lacp_member
            
            	Member interface
            	**type**\: list of  		 :py:class:`LacpMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.Lacp.LacpMembers, self).__init__()

                self.yang_name = "lacp-members"
                self.yang_parent_name = "lacp"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("lacp-member", ("lacp_member", BundleInformation.Lacp.LacpMembers.LacpMember))])
                self._leafs = OrderedDict()

                self.lacp_member = YList(self)
                self._segment_path = lambda: "lacp-members"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/lacp/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.Lacp.LacpMembers, [], name, value)


            class LacpMember(Entity):
                """
                Member interface
                
                .. attribute:: member_interface  (key)
                
                	Member interface
                	**type**\: str
                
                .. attribute:: lacp_member_ancestor
                
                	Data for this item and its parent bundle
                	**type**\:  :py:class:`LacpMemberAncestor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor>`
                
                .. attribute:: lacp_member_item
                
                	Data for this item
                	**type**\:  :py:class:`LacpMemberItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.Lacp.LacpMembers.LacpMember, self).__init__()

                    self.yang_name = "lacp-member"
                    self.yang_parent_name = "lacp-members"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['member_interface']
                    self._child_container_classes = OrderedDict([("lacp-member-ancestor", ("lacp_member_ancestor", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor)), ("lacp-member-item", ("lacp_member_item", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('member_interface', YLeaf(YType.str, 'member-interface')),
                    ])
                    self.member_interface = None

                    self.lacp_member_ancestor = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor()
                    self.lacp_member_ancestor.parent = self
                    self._children_name_map["lacp_member_ancestor"] = "lacp-member-ancestor"
                    self._children_yang_names.add("lacp-member-ancestor")

                    self.lacp_member_item = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem()
                    self.lacp_member_item.parent = self
                    self._children_name_map["lacp_member_item"] = "lacp-member-item"
                    self._children_yang_names.add("lacp-member-item")
                    self._segment_path = lambda: "lacp-member" + "[member-interface='" + str(self.member_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/lacp/lacp-members/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember, ['member_interface'], name, value)


                class LacpMemberAncestor(Entity):
                    """
                    Data for this item and its parent bundle
                    
                    .. attribute:: bundle_data
                    
                    	Bundle information
                    	**type**\:  :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData>`
                    
                    .. attribute:: member_data
                    
                    	Member information
                    	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor, self).__init__()

                        self.yang_name = "lacp-member-ancestor"
                        self.yang_parent_name = "lacp-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData))])
                        self._child_list_classes = OrderedDict([("member-data", ("member_data", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData))])
                        self._leafs = OrderedDict()

                        self.bundle_data = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData()
                        self.bundle_data.parent = self
                        self._children_name_map["bundle_data"] = "bundle-data"
                        self._children_yang_names.add("bundle-data")

                        self.member_data = YList(self)
                        self._segment_path = lambda: "lacp-member-ancestor"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor, [], name, value)


                    class BundleData(Entity):
                        """
                        Bundle information
                        
                        .. attribute:: actor_bundle_data
                        
                        	Basic bundle information
                        	**type**\:  :py:class:`ActorBundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData>`
                        
                        .. attribute:: bundle_system_id
                        
                        	System ID for the bundle
                        	**type**\:  :py:class:`BundleSystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId>`
                        
                        .. attribute:: actor_operational_key
                        
                        	Operational key of the interface
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_priority
                        
                        	Priority of the partner system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_mac_address
                        
                        	MAC Address used to identify the partner system
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: partner_operational_key
                        
                        	Operational key of the partner
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData, self).__init__()

                            self.yang_name = "bundle-data"
                            self.yang_parent_name = "lacp-member-ancestor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("actor-bundle-data", ("actor_bundle_data", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData)), ("bundle-system-id", ("bundle_system_id", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                                ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                                ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                                ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                            ])
                            self.actor_operational_key = None
                            self.partner_system_priority = None
                            self.partner_system_mac_address = None
                            self.partner_operational_key = None

                            self.actor_bundle_data = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData()
                            self.actor_bundle_data.parent = self
                            self._children_name_map["actor_bundle_data"] = "actor-bundle-data"
                            self._children_yang_names.add("actor-bundle-data")

                            self.bundle_system_id = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId()
                            self.bundle_system_id.parent = self
                            self._children_name_map["bundle_system_id"] = "bundle-system-id"
                            self._children_yang_names.add("bundle-system-id")
                            self._segment_path = lambda: "bundle-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData, ['actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key'], name, value)


                        class ActorBundleData(Entity):
                            """
                            Basic bundle information
                            
                            .. attribute:: mac_address
                            
                            	MAC address of this member
                            	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.MacAddress>`
                            
                            .. attribute:: bundle_interface_name
                            
                            	Bundle interface name
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: available_bandwidth
                            
                            	Bandwidth available to the bundle interface (kbps)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: kbit/s
                            
                            .. attribute:: effective_bandwidth
                            
                            	Effective bandwidth on the bundle interface (kbps)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: kbit/s
                            
                            .. attribute:: configured_bandwidth
                            
                            	Bandwidth configured on the bundle interface (kbps)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: kbit/s
                            
                            .. attribute:: minimum_active_links
                            
                            	Minimum number of active links for bundle to go up
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: maximum_active_links
                            
                            	Maximum number of active links in the bundle
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: maximum_active_links_source
                            
                            	Source of maximum active links value
                            	**type**\:  :py:class:`BmWhichSystem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmWhichSystem>`
                            
                            .. attribute:: minimum_bandwidth
                            
                            	Minimum bundle bandwidth for bundle to go up (kbps)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            	**units**\: kbit/s
                            
                            .. attribute:: primary_member
                            
                            	Primary bundle member (no longer applicable)
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: bundle_status
                            
                            	The state of the bundle
                            	**type**\:  :py:class:`BmBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlState>`
                            
                            .. attribute:: active_member_count
                            
                            	The number of active local members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: standby_member_count
                            
                            	The number of standby local members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: configured_member_count
                            
                            	The number of configured local members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: mac_source
                            
                            	The source of the MAC Address
                            	**type**\:  :py:class:`BmBdlMacSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlMacSource>`
                            
                            .. attribute:: mac_source_member
                            
                            	The name of the member that supplied the MAC address
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: inter_chassis
                            
                            	Indicates if this bundle is operating as an inter\-chassis link (1 = I\-C link, 0 = normal)
                            	**type**\: bool
                            
                            .. attribute:: is_active
                            
                            	Indicates the active/standby redundancy state of the device for the bundle
                            	**type**\: bool
                            
                            .. attribute:: lacp_status
                            
                            	The status of the LACP feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: mlacp_status
                            
                            	The status of the mLACP feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: ipv4bfd_status
                            
                            	The status of the BFD (IPv4) feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: link_order_status
                            
                            	The status of the link order signaling feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: ipv6bfd_status
                            
                            	The status of the BFD (IPv6) feature on the bundle
                            	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                            
                            .. attribute:: load_balance_hash_type
                            
                            	The type of hash to use for load balancing
                            	**type**\: str
                            
                            .. attribute:: load_balance_locality_threshold
                            
                            	The number of links required per rack for localized load balancing
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: suppression_timer
                            
                            	Timer for suppressing bundle state flaps
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: wait_while_timer
                            
                            	The wait while time used for member ports
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: collector_max_delay
                            
                            	Collector Max Delay
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: cisco_extensions
                            
                            	The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled)
                            	**type**\: bool
                            
                            .. attribute:: lacp_nonrevertive
                            
                            	The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled)
                            	**type**\: bool
                            
                            .. attribute:: iccp_group_id
                            
                            	ICCP Group that the bundle is configured to
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: active_foreign_member_count
                            
                            	The number of active foreign members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: configured_foreign_member_count
                            
                            	The number of configured local members on the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: switchover_type
                            
                            	How a switchover of the bundle from this device will occur
                            	**type**\:  :py:class:`BmdMlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpSwitchover>`
                            
                            .. attribute:: maximize_threshold_value_links
                            
                            	Attempt to maximize the bundle if links are below this value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: maximize_threshold_value_band_width
                            
                            	Attempt to maximize the bundle if bandwidth is below this value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: mlacp_mode
                            
                            	Indicates the mode of the device for the bundle
                            	**type**\:  :py:class:`BundleMlacpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMlacpMode>`
                            
                            .. attribute:: recovery_delay
                            
                            	Number of seconds to wait before becoming active after recovering from a failure
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            	**units**\: second
                            
                            .. attribute:: singleton
                            
                            	Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not singleton)
                            	**type**\: bool
                            
                            .. attribute:: bfd_config
                            
                            	Configuration values for BFD on bundle members
                            	**type**\: list of  		 :py:class:`BfdConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.BfdConfig>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData, self).__init__()

                                self.yang_name = "actor-bundle-data"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.MacAddress))])
                                self._child_list_classes = OrderedDict([("bfd-config", ("bfd_config", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.BfdConfig))])
                                self._leafs = OrderedDict([
                                    ('bundle_interface_name', YLeaf(YType.str, 'bundle-interface-name')),
                                    ('available_bandwidth', YLeaf(YType.uint32, 'available-bandwidth')),
                                    ('effective_bandwidth', YLeaf(YType.uint32, 'effective-bandwidth')),
                                    ('configured_bandwidth', YLeaf(YType.uint32, 'configured-bandwidth')),
                                    ('minimum_active_links', YLeaf(YType.uint8, 'minimum-active-links')),
                                    ('maximum_active_links', YLeaf(YType.uint8, 'maximum-active-links')),
                                    ('maximum_active_links_source', YLeaf(YType.enumeration, 'maximum-active-links-source')),
                                    ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                                    ('primary_member', YLeaf(YType.str, 'primary-member')),
                                    ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                    ('active_member_count', YLeaf(YType.uint16, 'active-member-count')),
                                    ('standby_member_count', YLeaf(YType.uint16, 'standby-member-count')),
                                    ('configured_member_count', YLeaf(YType.uint16, 'configured-member-count')),
                                    ('mac_source', YLeaf(YType.enumeration, 'mac-source')),
                                    ('mac_source_member', YLeaf(YType.str, 'mac-source-member')),
                                    ('inter_chassis', YLeaf(YType.boolean, 'inter-chassis')),
                                    ('is_active', YLeaf(YType.boolean, 'is-active')),
                                    ('lacp_status', YLeaf(YType.enumeration, 'lacp-status')),
                                    ('mlacp_status', YLeaf(YType.enumeration, 'mlacp-status')),
                                    ('ipv4bfd_status', YLeaf(YType.enumeration, 'ipv4bfd-status')),
                                    ('link_order_status', YLeaf(YType.enumeration, 'link-order-status')),
                                    ('ipv6bfd_status', YLeaf(YType.enumeration, 'ipv6bfd-status')),
                                    ('load_balance_hash_type', YLeaf(YType.str, 'load-balance-hash-type')),
                                    ('load_balance_locality_threshold', YLeaf(YType.uint16, 'load-balance-locality-threshold')),
                                    ('suppression_timer', YLeaf(YType.uint16, 'suppression-timer')),
                                    ('wait_while_timer', YLeaf(YType.uint16, 'wait-while-timer')),
                                    ('collector_max_delay', YLeaf(YType.uint16, 'collector-max-delay')),
                                    ('cisco_extensions', YLeaf(YType.boolean, 'cisco-extensions')),
                                    ('lacp_nonrevertive', YLeaf(YType.boolean, 'lacp-nonrevertive')),
                                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                    ('active_foreign_member_count', YLeaf(YType.uint16, 'active-foreign-member-count')),
                                    ('configured_foreign_member_count', YLeaf(YType.uint16, 'configured-foreign-member-count')),
                                    ('switchover_type', YLeaf(YType.enumeration, 'switchover-type')),
                                    ('maximize_threshold_value_links', YLeaf(YType.uint32, 'maximize-threshold-value-links')),
                                    ('maximize_threshold_value_band_width', YLeaf(YType.uint32, 'maximize-threshold-value-band-width')),
                                    ('mlacp_mode', YLeaf(YType.enumeration, 'mlacp-mode')),
                                    ('recovery_delay', YLeaf(YType.uint16, 'recovery-delay')),
                                    ('singleton', YLeaf(YType.boolean, 'singleton')),
                                ])
                                self.bundle_interface_name = None
                                self.available_bandwidth = None
                                self.effective_bandwidth = None
                                self.configured_bandwidth = None
                                self.minimum_active_links = None
                                self.maximum_active_links = None
                                self.maximum_active_links_source = None
                                self.minimum_bandwidth = None
                                self.primary_member = None
                                self.bundle_status = None
                                self.active_member_count = None
                                self.standby_member_count = None
                                self.configured_member_count = None
                                self.mac_source = None
                                self.mac_source_member = None
                                self.inter_chassis = None
                                self.is_active = None
                                self.lacp_status = None
                                self.mlacp_status = None
                                self.ipv4bfd_status = None
                                self.link_order_status = None
                                self.ipv6bfd_status = None
                                self.load_balance_hash_type = None
                                self.load_balance_locality_threshold = None
                                self.suppression_timer = None
                                self.wait_while_timer = None
                                self.collector_max_delay = None
                                self.cisco_extensions = None
                                self.lacp_nonrevertive = None
                                self.iccp_group_id = None
                                self.active_foreign_member_count = None
                                self.configured_foreign_member_count = None
                                self.switchover_type = None
                                self.maximize_threshold_value_links = None
                                self.maximize_threshold_value_band_width = None
                                self.mlacp_mode = None
                                self.recovery_delay = None
                                self.singleton = None

                                self.mac_address = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.MacAddress()
                                self.mac_address.parent = self
                                self._children_name_map["mac_address"] = "mac-address"
                                self._children_yang_names.add("mac-address")

                                self.bfd_config = YList(self)
                                self._segment_path = lambda: "actor-bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData, ['bundle_interface_name', 'available_bandwidth', 'effective_bandwidth', 'configured_bandwidth', 'minimum_active_links', 'maximum_active_links', 'maximum_active_links_source', 'minimum_bandwidth', 'primary_member', 'bundle_status', 'active_member_count', 'standby_member_count', 'configured_member_count', 'mac_source', 'mac_source_member', 'inter_chassis', 'is_active', 'lacp_status', 'mlacp_status', 'ipv4bfd_status', 'link_order_status', 'ipv6bfd_status', 'load_balance_hash_type', 'load_balance_locality_threshold', 'suppression_timer', 'wait_while_timer', 'collector_max_delay', 'cisco_extensions', 'lacp_nonrevertive', 'iccp_group_id', 'active_foreign_member_count', 'configured_foreign_member_count', 'switchover_type', 'maximize_threshold_value_links', 'maximize_threshold_value_band_width', 'mlacp_mode', 'recovery_delay', 'singleton'], name, value)


                            class MacAddress(Entity):
                                """
                                MAC address of this member
                                
                                .. attribute:: address
                                
                                	MAC address
                                	**type**\: str
                                
                                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.MacAddress, self).__init__()

                                    self.yang_name = "mac-address"
                                    self.yang_parent_name = "actor-bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.str, 'address')),
                                    ])
                                    self.address = None
                                    self._segment_path = lambda: "mac-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.MacAddress, ['address'], name, value)


                            class BfdConfig(Entity):
                                """
                                Configuration values for BFD on bundle members
                                
                                .. attribute:: destination_address
                                
                                	Configured destination address for BFD session
                                	**type**\:  :py:class:`DestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.BfdConfig.DestinationAddress>`
                                
                                .. attribute:: bundle_status
                                
                                	Status of BFD on the bundle
                                	**type**\:  :py:class:`BmdBfdBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBfdBdlState>`
                                
                                .. attribute:: start_timer
                                
                                	Time to wait on session start before declaring DOWN
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: nbr_unconfig_timer
                                
                                	Time to wait on session NBR\_UNCONFIG before declaring DOWN
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pref_multiplier
                                
                                	Preferred multiplier for the BFD session
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: pref_min_interval
                                
                                	Preferred minimum interval for the BFD session (ms)
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: pref_echo_min_interval
                                
                                	Preferred echo minimum interval for the BFD session (ms)
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: fast_detect
                                
                                	Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled)
                                	**type**\: bool
                                
                                .. attribute:: mode_info
                                
                                	Standard used for per\-member BFD
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.BfdConfig, self).__init__()

                                    self.yang_name = "bfd-config"
                                    self.yang_parent_name = "actor-bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("destination-address", ("destination_address", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.BfdConfig.DestinationAddress))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                                        ('start_timer', YLeaf(YType.uint32, 'start-timer')),
                                        ('nbr_unconfig_timer', YLeaf(YType.uint32, 'nbr-unconfig-timer')),
                                        ('pref_multiplier', YLeaf(YType.uint16, 'pref-multiplier')),
                                        ('pref_min_interval', YLeaf(YType.uint32, 'pref-min-interval')),
                                        ('pref_echo_min_interval', YLeaf(YType.uint32, 'pref-echo-min-interval')),
                                        ('fast_detect', YLeaf(YType.boolean, 'fast-detect')),
                                        ('mode_info', YLeaf(YType.uint32, 'mode-info')),
                                    ])
                                    self.bundle_status = None
                                    self.start_timer = None
                                    self.nbr_unconfig_timer = None
                                    self.pref_multiplier = None
                                    self.pref_min_interval = None
                                    self.pref_echo_min_interval = None
                                    self.fast_detect = None
                                    self.mode_info = None

                                    self.destination_address = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.BfdConfig.DestinationAddress()
                                    self.destination_address.parent = self
                                    self._children_name_map["destination_address"] = "destination-address"
                                    self._children_yang_names.add("destination-address")
                                    self._segment_path = lambda: "bfd-config"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.BfdConfig, ['bundle_status', 'start_timer', 'nbr_unconfig_timer', 'pref_multiplier', 'pref_min_interval', 'pref_echo_min_interval', 'fast_detect', 'mode_info'], name, value)


                                class DestinationAddress(Entity):
                                    """
                                    Configured destination address for BFD session
                                    
                                    .. attribute:: af
                                    
                                    	AF
                                    	**type**\:  :py:class:`BmAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmAfId>`
                                    
                                    .. attribute:: ipv4
                                    
                                    	IPv4 address type
                                    	**type**\: str
                                    
                                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                    
                                    .. attribute:: ipv6
                                    
                                    	IPv6 address type
                                    	**type**\: str
                                    
                                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.BfdConfig.DestinationAddress, self).__init__()

                                        self.yang_name = "destination-address"
                                        self.yang_parent_name = "bfd-config"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('af', YLeaf(YType.enumeration, 'af')),
                                            ('ipv4', YLeaf(YType.str, 'ipv4')),
                                            ('ipv6', YLeaf(YType.str, 'ipv6')),
                                        ])
                                        self.af = None
                                        self.ipv4 = None
                                        self.ipv6 = None
                                        self._segment_path = lambda: "destination-address"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.ActorBundleData.BfdConfig.DestinationAddress, ['af', 'ipv4', 'ipv6'], name, value)


                        class BundleSystemId(Entity):
                            """
                            System ID for the bundle
                            
                            .. attribute:: system_mac_addr
                            
                            	MAC Address used to identify the system
                            	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId.SystemMacAddr>`
                            
                            .. attribute:: system_prio
                            
                            	Priority of the system
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId, self).__init__()

                                self.yang_name = "bundle-system-id"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId.SystemMacAddr))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                ])
                                self.system_prio = None

                                self.system_mac_addr = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId.SystemMacAddr()
                                self.system_mac_addr.parent = self
                                self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                self._children_yang_names.add("system-mac-addr")
                                self._segment_path = lambda: "bundle-system-id"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId, ['system_prio'], name, value)


                            class SystemMacAddr(Entity):
                                """
                                MAC Address used to identify the system
                                
                                .. attribute:: macaddr
                                
                                	macaddr
                                	**type**\: str
                                
                                	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId.SystemMacAddr, self).__init__()

                                    self.yang_name = "system-mac-addr"
                                    self.yang_parent_name = "bundle-system-id"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('macaddr', YLeaf(YType.str, 'macaddr')),
                                    ])
                                    self.macaddr = None
                                    self._segment_path = lambda: "system-mac-addr"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.BundleData.BundleSystemId.SystemMacAddr, ['macaddr'], name, value)


                    class MemberData(Entity):
                        """
                        Member information
                        
                        .. attribute:: actor_info
                        
                        	LACP information for the port from the actor
                        	**type**\:  :py:class:`ActorInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo>`
                        
                        .. attribute:: partner_info
                        
                        	LACP information for the port from the partner
                        	**type**\:  :py:class:`PartnerInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo>`
                        
                        .. attribute:: additional_info
                        
                        	Additional information for the link
                        	**type**\:  :py:class:`AdditionalInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo>`
                        
                        .. attribute:: selected_aggregator_id
                        
                        	MIB ifindex of selected bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: attached_aggregator_id
                        
                        	MIB ifindex of attached bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: selection_state
                        
                        	State of the Selection Logic state machine
                        	**type**\:  :py:class:`LacpSelState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpSelState>`
                        
                        .. attribute:: period_state
                        
                        	State of the Period state machine
                        	**type**\:  :py:class:`LacpPeriodState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpPeriodState>`
                        
                        .. attribute:: receive_machine_state
                        
                        	State of the RX state machine
                        	**type**\:  :py:class:`Rxstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Rxstates>`
                        
                        .. attribute:: mux_state
                        
                        	State of the Mux state machine
                        	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                        
                        .. attribute:: actor_churn_state
                        
                        	State of the Churn state machine for the Actor
                        	**type**\:  :py:class:`LacpChurnstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpChurnstates>`
                        
                        .. attribute:: partner_churn_state
                        
                        	State of the Churn state machine for the Partner
                        	**type**\:  :py:class:`LacpChurnstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpChurnstates>`
                        
                        .. attribute:: iccp_group_id
                        
                        	The ID of the ICCP group that the link is configured on
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData, self).__init__()

                            self.yang_name = "member-data"
                            self.yang_parent_name = "lacp-member-ancestor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("actor-info", ("actor_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo)), ("partner-info", ("partner_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo)), ("additional-info", ("additional_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                                ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                                ('selection_state', YLeaf(YType.enumeration, 'selection-state')),
                                ('period_state', YLeaf(YType.enumeration, 'period-state')),
                                ('receive_machine_state', YLeaf(YType.enumeration, 'receive-machine-state')),
                                ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                                ('actor_churn_state', YLeaf(YType.enumeration, 'actor-churn-state')),
                                ('partner_churn_state', YLeaf(YType.enumeration, 'partner-churn-state')),
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                            ])
                            self.selected_aggregator_id = None
                            self.attached_aggregator_id = None
                            self.selection_state = None
                            self.period_state = None
                            self.receive_machine_state = None
                            self.mux_state = None
                            self.actor_churn_state = None
                            self.partner_churn_state = None
                            self.iccp_group_id = None

                            self.actor_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo()
                            self.actor_info.parent = self
                            self._children_name_map["actor_info"] = "actor-info"
                            self._children_yang_names.add("actor-info")

                            self.partner_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo()
                            self.partner_info.parent = self
                            self._children_name_map["partner_info"] = "partner-info"
                            self._children_yang_names.add("partner-info")

                            self.additional_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo()
                            self.additional_info.parent = self
                            self._children_name_map["additional_info"] = "additional-info"
                            self._children_yang_names.add("additional-info")
                            self._segment_path = lambda: "member-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData, ['selected_aggregator_id', 'attached_aggregator_id', 'selection_state', 'period_state', 'receive_machine_state', 'mux_state', 'actor_churn_state', 'partner_churn_state', 'iccp_group_id'], name, value)


                        class ActorInfo(Entity):
                            """
                            LACP information for the port from the actor
                            
                            .. attribute:: port_info
                            
                            	LACP parameters for this device
                            	**type**\:  :py:class:`PortInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo>`
                            
                            .. attribute:: tx_period
                            
                            	Time (in ms) between transmitting LACPDUs
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo, self).__init__()

                                self.yang_name = "actor-info"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("port-info", ("port_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tx_period', YLeaf(YType.uint32, 'tx-period')),
                                ])
                                self.tx_period = None

                                self.port_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo()
                                self.port_info.parent = self
                                self._children_name_map["port_info"] = "port-info"
                                self._children_yang_names.add("port-info")
                                self._segment_path = lambda: "actor-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo, ['tx_period'], name, value)


                            class PortInfo(Entity):
                                """
                                LACP parameters for this device
                                
                                .. attribute:: system
                                
                                	system
                                	**type**\:  :py:class:`System <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System>`
                                
                                .. attribute:: port
                                
                                	port
                                	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.Port>`
                                
                                .. attribute:: key
                                
                                	key
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: state
                                
                                	state
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo, self).__init__()

                                    self.yang_name = "port-info"
                                    self.yang_parent_name = "actor-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system", ("system", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System)), ("port", ("port", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.Port))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('key', YLeaf(YType.uint16, 'key')),
                                        ('state', YLeaf(YType.uint8, 'state')),
                                    ])
                                    self.key = None
                                    self.state = None

                                    self.system = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System()
                                    self.system.parent = self
                                    self._children_name_map["system"] = "system"
                                    self._children_yang_names.add("system")

                                    self.port = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.Port()
                                    self.port.parent = self
                                    self._children_name_map["port"] = "port"
                                    self._children_yang_names.add("port")
                                    self._segment_path = lambda: "port-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo, ['key', 'state'], name, value)


                                class System(Entity):
                                    """
                                    system
                                    
                                    .. attribute:: system_mac_addr
                                    
                                    	MAC Address used to identify the system
                                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System.SystemMacAddr>`
                                    
                                    .. attribute:: system_prio
                                    
                                    	Priority of the system
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System, self).__init__()

                                        self.yang_name = "system"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System.SystemMacAddr))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                        ])
                                        self.system_prio = None

                                        self.system_mac_addr = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System.SystemMacAddr()
                                        self.system_mac_addr.parent = self
                                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                        self._children_yang_names.add("system-mac-addr")
                                        self._segment_path = lambda: "system"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System, ['system_prio'], name, value)


                                    class SystemMacAddr(Entity):
                                        """
                                        MAC Address used to identify the system
                                        
                                        .. attribute:: macaddr
                                        
                                        	macaddr
                                        	**type**\: str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System.SystemMacAddr, self).__init__()

                                            self.yang_name = "system-mac-addr"
                                            self.yang_parent_name = "system"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                                            ])
                                            self.macaddr = None
                                            self._segment_path = lambda: "system-mac-addr"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.System.SystemMacAddr, ['macaddr'], name, value)


                                class Port(Entity):
                                    """
                                    port
                                    
                                    .. attribute:: link_priority
                                    
                                    	link priority
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: link_number
                                    
                                    	link number
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.Port, self).__init__()

                                        self.yang_name = "port"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('link_priority', YLeaf(YType.uint16, 'link-priority')),
                                            ('link_number', YLeaf(YType.uint16, 'link-number')),
                                        ])
                                        self.link_priority = None
                                        self.link_number = None
                                        self._segment_path = lambda: "port"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.ActorInfo.PortInfo.Port, ['link_priority', 'link_number'], name, value)


                        class PartnerInfo(Entity):
                            """
                            LACP information for the port from the partner
                            
                            .. attribute:: port_info
                            
                            	LACP parameters for this device
                            	**type**\:  :py:class:`PortInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo>`
                            
                            .. attribute:: tx_period
                            
                            	Time (in ms) between transmitting LACPDUs
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo, self).__init__()

                                self.yang_name = "partner-info"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("port-info", ("port_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('tx_period', YLeaf(YType.uint32, 'tx-period')),
                                ])
                                self.tx_period = None

                                self.port_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo()
                                self.port_info.parent = self
                                self._children_name_map["port_info"] = "port-info"
                                self._children_yang_names.add("port-info")
                                self._segment_path = lambda: "partner-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo, ['tx_period'], name, value)


                            class PortInfo(Entity):
                                """
                                LACP parameters for this device
                                
                                .. attribute:: system
                                
                                	system
                                	**type**\:  :py:class:`System <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System>`
                                
                                .. attribute:: port
                                
                                	port
                                	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.Port>`
                                
                                .. attribute:: key
                                
                                	key
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: state
                                
                                	state
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo, self).__init__()

                                    self.yang_name = "port-info"
                                    self.yang_parent_name = "partner-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system", ("system", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System)), ("port", ("port", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.Port))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('key', YLeaf(YType.uint16, 'key')),
                                        ('state', YLeaf(YType.uint8, 'state')),
                                    ])
                                    self.key = None
                                    self.state = None

                                    self.system = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System()
                                    self.system.parent = self
                                    self._children_name_map["system"] = "system"
                                    self._children_yang_names.add("system")

                                    self.port = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.Port()
                                    self.port.parent = self
                                    self._children_name_map["port"] = "port"
                                    self._children_yang_names.add("port")
                                    self._segment_path = lambda: "port-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo, ['key', 'state'], name, value)


                                class System(Entity):
                                    """
                                    system
                                    
                                    .. attribute:: system_mac_addr
                                    
                                    	MAC Address used to identify the system
                                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr>`
                                    
                                    .. attribute:: system_prio
                                    
                                    	Priority of the system
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System, self).__init__()

                                        self.yang_name = "system"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                        ])
                                        self.system_prio = None

                                        self.system_mac_addr = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr()
                                        self.system_mac_addr.parent = self
                                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                        self._children_yang_names.add("system-mac-addr")
                                        self._segment_path = lambda: "system"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System, ['system_prio'], name, value)


                                    class SystemMacAddr(Entity):
                                        """
                                        MAC Address used to identify the system
                                        
                                        .. attribute:: macaddr
                                        
                                        	macaddr
                                        	**type**\: str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr, self).__init__()

                                            self.yang_name = "system-mac-addr"
                                            self.yang_parent_name = "system"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                                            ])
                                            self.macaddr = None
                                            self._segment_path = lambda: "system-mac-addr"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.System.SystemMacAddr, ['macaddr'], name, value)


                                class Port(Entity):
                                    """
                                    port
                                    
                                    .. attribute:: link_priority
                                    
                                    	link priority
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    .. attribute:: link_number
                                    
                                    	link number
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.Port, self).__init__()

                                        self.yang_name = "port"
                                        self.yang_parent_name = "port-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('link_priority', YLeaf(YType.uint16, 'link-priority')),
                                            ('link_number', YLeaf(YType.uint16, 'link-number')),
                                        ])
                                        self.link_priority = None
                                        self.link_number = None
                                        self._segment_path = lambda: "port"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.PartnerInfo.PortInfo.Port, ['link_priority', 'link_number'], name, value)


                        class AdditionalInfo(Entity):
                            """
                            Additional information for the link
                            
                            .. attribute:: local
                            
                            	Information for a local port
                            	**type**\:  :py:class:`Local <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Local>`
                            
                            .. attribute:: foreign
                            
                            	Information for a foreign port
                            	**type**\:  :py:class:`Foreign <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Foreign>`
                            
                            .. attribute:: mbr_type
                            
                            	MbrType
                            	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo, self).__init__()

                                self.yang_name = "additional-info"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("local", ("local", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Local)), ("foreign", ("foreign", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Foreign))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('mbr_type', YLeaf(YType.enumeration, 'mbr-type')),
                                ])
                                self.mbr_type = None

                                self.local = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Local()
                                self.local.parent = self
                                self._children_name_map["local"] = "local"
                                self._children_yang_names.add("local")

                                self.foreign = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Foreign()
                                self.foreign.parent = self
                                self._children_name_map["foreign"] = "foreign"
                                self._children_yang_names.add("foreign")
                                self._segment_path = lambda: "additional-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo, ['mbr_type'], name, value)


                            class Local(Entity):
                                """
                                Information for a local port
                                
                                .. attribute:: interface_handle
                                
                                	Member's interface handle
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Local, self).__init__()

                                    self.yang_name = "local"
                                    self.yang_parent_name = "additional-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                    ])
                                    self.interface_handle = None
                                    self._segment_path = lambda: "local"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Local, ['interface_handle'], name, value)


                            class Foreign(Entity):
                                """
                                Information for a foreign port
                                
                                .. attribute:: peer_address
                                
                                	The LDP address of the device that the link is configured on
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: member_name
                                
                                	Member's (short form) name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Foreign, self).__init__()

                                    self.yang_name = "foreign"
                                    self.yang_parent_name = "additional-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('peer_address', YLeaf(YType.str, 'peer-address')),
                                        ('member_name', YLeaf(YType.str, 'member-name')),
                                    ])
                                    self.peer_address = None
                                    self.member_name = None
                                    self._segment_path = lambda: "foreign"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberAncestor.MemberData.AdditionalInfo.Foreign, ['peer_address', 'member_name'], name, value)


                class LacpMemberItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: actor_info
                    
                    	LACP information for the port from the actor
                    	**type**\:  :py:class:`ActorInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo>`
                    
                    .. attribute:: partner_info
                    
                    	LACP information for the port from the partner
                    	**type**\:  :py:class:`PartnerInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo>`
                    
                    .. attribute:: additional_info
                    
                    	Additional information for the link
                    	**type**\:  :py:class:`AdditionalInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo>`
                    
                    .. attribute:: selected_aggregator_id
                    
                    	MIB ifindex of selected bundle
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: attached_aggregator_id
                    
                    	MIB ifindex of attached bundle
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: selection_state
                    
                    	State of the Selection Logic state machine
                    	**type**\:  :py:class:`LacpSelState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpSelState>`
                    
                    .. attribute:: period_state
                    
                    	State of the Period state machine
                    	**type**\:  :py:class:`LacpPeriodState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpPeriodState>`
                    
                    .. attribute:: receive_machine_state
                    
                    	State of the RX state machine
                    	**type**\:  :py:class:`Rxstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Rxstates>`
                    
                    .. attribute:: mux_state
                    
                    	State of the Mux state machine
                    	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                    
                    .. attribute:: actor_churn_state
                    
                    	State of the Churn state machine for the Actor
                    	**type**\:  :py:class:`LacpChurnstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpChurnstates>`
                    
                    .. attribute:: partner_churn_state
                    
                    	State of the Churn state machine for the Partner
                    	**type**\:  :py:class:`LacpChurnstates <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpChurnstates>`
                    
                    .. attribute:: iccp_group_id
                    
                    	The ID of the ICCP group that the link is configured on
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem, self).__init__()

                        self.yang_name = "lacp-member-item"
                        self.yang_parent_name = "lacp-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("actor-info", ("actor_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo)), ("partner-info", ("partner_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo)), ("additional-info", ("additional_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                            ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                            ('selection_state', YLeaf(YType.enumeration, 'selection-state')),
                            ('period_state', YLeaf(YType.enumeration, 'period-state')),
                            ('receive_machine_state', YLeaf(YType.enumeration, 'receive-machine-state')),
                            ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                            ('actor_churn_state', YLeaf(YType.enumeration, 'actor-churn-state')),
                            ('partner_churn_state', YLeaf(YType.enumeration, 'partner-churn-state')),
                            ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                        ])
                        self.selected_aggregator_id = None
                        self.attached_aggregator_id = None
                        self.selection_state = None
                        self.period_state = None
                        self.receive_machine_state = None
                        self.mux_state = None
                        self.actor_churn_state = None
                        self.partner_churn_state = None
                        self.iccp_group_id = None

                        self.actor_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo()
                        self.actor_info.parent = self
                        self._children_name_map["actor_info"] = "actor-info"
                        self._children_yang_names.add("actor-info")

                        self.partner_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo()
                        self.partner_info.parent = self
                        self._children_name_map["partner_info"] = "partner-info"
                        self._children_yang_names.add("partner-info")

                        self.additional_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo()
                        self.additional_info.parent = self
                        self._children_name_map["additional_info"] = "additional-info"
                        self._children_yang_names.add("additional-info")
                        self._segment_path = lambda: "lacp-member-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem, ['selected_aggregator_id', 'attached_aggregator_id', 'selection_state', 'period_state', 'receive_machine_state', 'mux_state', 'actor_churn_state', 'partner_churn_state', 'iccp_group_id'], name, value)


                    class ActorInfo(Entity):
                        """
                        LACP information for the port from the actor
                        
                        .. attribute:: port_info
                        
                        	LACP parameters for this device
                        	**type**\:  :py:class:`PortInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo>`
                        
                        .. attribute:: tx_period
                        
                        	Time (in ms) between transmitting LACPDUs
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo, self).__init__()

                            self.yang_name = "actor-info"
                            self.yang_parent_name = "lacp-member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("port-info", ("port_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('tx_period', YLeaf(YType.uint32, 'tx-period')),
                            ])
                            self.tx_period = None

                            self.port_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo()
                            self.port_info.parent = self
                            self._children_name_map["port_info"] = "port-info"
                            self._children_yang_names.add("port-info")
                            self._segment_path = lambda: "actor-info"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo, ['tx_period'], name, value)


                        class PortInfo(Entity):
                            """
                            LACP parameters for this device
                            
                            .. attribute:: system
                            
                            	system
                            	**type**\:  :py:class:`System <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System>`
                            
                            .. attribute:: port
                            
                            	port
                            	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.Port>`
                            
                            .. attribute:: key
                            
                            	key
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: state
                            
                            	state
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo, self).__init__()

                                self.yang_name = "port-info"
                                self.yang_parent_name = "actor-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("system", ("system", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System)), ("port", ("port", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.Port))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('key', YLeaf(YType.uint16, 'key')),
                                    ('state', YLeaf(YType.uint8, 'state')),
                                ])
                                self.key = None
                                self.state = None

                                self.system = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System()
                                self.system.parent = self
                                self._children_name_map["system"] = "system"
                                self._children_yang_names.add("system")

                                self.port = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.Port()
                                self.port.parent = self
                                self._children_name_map["port"] = "port"
                                self._children_yang_names.add("port")
                                self._segment_path = lambda: "port-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo, ['key', 'state'], name, value)


                            class System(Entity):
                                """
                                system
                                
                                .. attribute:: system_mac_addr
                                
                                	MAC Address used to identify the system
                                	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System.SystemMacAddr>`
                                
                                .. attribute:: system_prio
                                
                                	Priority of the system
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System, self).__init__()

                                    self.yang_name = "system"
                                    self.yang_parent_name = "port-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System.SystemMacAddr))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                    ])
                                    self.system_prio = None

                                    self.system_mac_addr = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System.SystemMacAddr()
                                    self.system_mac_addr.parent = self
                                    self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                    self._children_yang_names.add("system-mac-addr")
                                    self._segment_path = lambda: "system"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System, ['system_prio'], name, value)


                                class SystemMacAddr(Entity):
                                    """
                                    MAC Address used to identify the system
                                    
                                    .. attribute:: macaddr
                                    
                                    	macaddr
                                    	**type**\: str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System.SystemMacAddr, self).__init__()

                                        self.yang_name = "system-mac-addr"
                                        self.yang_parent_name = "system"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('macaddr', YLeaf(YType.str, 'macaddr')),
                                        ])
                                        self.macaddr = None
                                        self._segment_path = lambda: "system-mac-addr"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.System.SystemMacAddr, ['macaddr'], name, value)


                            class Port(Entity):
                                """
                                port
                                
                                .. attribute:: link_priority
                                
                                	link priority
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: link_number
                                
                                	link number
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.Port, self).__init__()

                                    self.yang_name = "port"
                                    self.yang_parent_name = "port-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('link_priority', YLeaf(YType.uint16, 'link-priority')),
                                        ('link_number', YLeaf(YType.uint16, 'link-number')),
                                    ])
                                    self.link_priority = None
                                    self.link_number = None
                                    self._segment_path = lambda: "port"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.ActorInfo.PortInfo.Port, ['link_priority', 'link_number'], name, value)


                    class PartnerInfo(Entity):
                        """
                        LACP information for the port from the partner
                        
                        .. attribute:: port_info
                        
                        	LACP parameters for this device
                        	**type**\:  :py:class:`PortInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo>`
                        
                        .. attribute:: tx_period
                        
                        	Time (in ms) between transmitting LACPDUs
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo, self).__init__()

                            self.yang_name = "partner-info"
                            self.yang_parent_name = "lacp-member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("port-info", ("port_info", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('tx_period', YLeaf(YType.uint32, 'tx-period')),
                            ])
                            self.tx_period = None

                            self.port_info = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo()
                            self.port_info.parent = self
                            self._children_name_map["port_info"] = "port-info"
                            self._children_yang_names.add("port-info")
                            self._segment_path = lambda: "partner-info"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo, ['tx_period'], name, value)


                        class PortInfo(Entity):
                            """
                            LACP parameters for this device
                            
                            .. attribute:: system
                            
                            	system
                            	**type**\:  :py:class:`System <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System>`
                            
                            .. attribute:: port
                            
                            	port
                            	**type**\:  :py:class:`Port <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.Port>`
                            
                            .. attribute:: key
                            
                            	key
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: state
                            
                            	state
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo, self).__init__()

                                self.yang_name = "port-info"
                                self.yang_parent_name = "partner-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("system", ("system", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System)), ("port", ("port", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.Port))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('key', YLeaf(YType.uint16, 'key')),
                                    ('state', YLeaf(YType.uint8, 'state')),
                                ])
                                self.key = None
                                self.state = None

                                self.system = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System()
                                self.system.parent = self
                                self._children_name_map["system"] = "system"
                                self._children_yang_names.add("system")

                                self.port = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.Port()
                                self.port.parent = self
                                self._children_name_map["port"] = "port"
                                self._children_yang_names.add("port")
                                self._segment_path = lambda: "port-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo, ['key', 'state'], name, value)


                            class System(Entity):
                                """
                                system
                                
                                .. attribute:: system_mac_addr
                                
                                	MAC Address used to identify the system
                                	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System.SystemMacAddr>`
                                
                                .. attribute:: system_prio
                                
                                	Priority of the system
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System, self).__init__()

                                    self.yang_name = "system"
                                    self.yang_parent_name = "port-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System.SystemMacAddr))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                    ])
                                    self.system_prio = None

                                    self.system_mac_addr = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System.SystemMacAddr()
                                    self.system_mac_addr.parent = self
                                    self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                    self._children_yang_names.add("system-mac-addr")
                                    self._segment_path = lambda: "system"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System, ['system_prio'], name, value)


                                class SystemMacAddr(Entity):
                                    """
                                    MAC Address used to identify the system
                                    
                                    .. attribute:: macaddr
                                    
                                    	macaddr
                                    	**type**\: str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System.SystemMacAddr, self).__init__()

                                        self.yang_name = "system-mac-addr"
                                        self.yang_parent_name = "system"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('macaddr', YLeaf(YType.str, 'macaddr')),
                                        ])
                                        self.macaddr = None
                                        self._segment_path = lambda: "system-mac-addr"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.System.SystemMacAddr, ['macaddr'], name, value)


                            class Port(Entity):
                                """
                                port
                                
                                .. attribute:: link_priority
                                
                                	link priority
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: link_number
                                
                                	link number
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.Port, self).__init__()

                                    self.yang_name = "port"
                                    self.yang_parent_name = "port-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('link_priority', YLeaf(YType.uint16, 'link-priority')),
                                        ('link_number', YLeaf(YType.uint16, 'link-number')),
                                    ])
                                    self.link_priority = None
                                    self.link_number = None
                                    self._segment_path = lambda: "port"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.PartnerInfo.PortInfo.Port, ['link_priority', 'link_number'], name, value)


                    class AdditionalInfo(Entity):
                        """
                        Additional information for the link
                        
                        .. attribute:: local
                        
                        	Information for a local port
                        	**type**\:  :py:class:`Local <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Local>`
                        
                        .. attribute:: foreign
                        
                        	Information for a foreign port
                        	**type**\:  :py:class:`Foreign <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Foreign>`
                        
                        .. attribute:: mbr_type
                        
                        	MbrType
                        	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo, self).__init__()

                            self.yang_name = "additional-info"
                            self.yang_parent_name = "lacp-member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("local", ("local", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Local)), ("foreign", ("foreign", BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Foreign))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('mbr_type', YLeaf(YType.enumeration, 'mbr-type')),
                            ])
                            self.mbr_type = None

                            self.local = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Local()
                            self.local.parent = self
                            self._children_name_map["local"] = "local"
                            self._children_yang_names.add("local")

                            self.foreign = BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Foreign()
                            self.foreign.parent = self
                            self._children_name_map["foreign"] = "foreign"
                            self._children_yang_names.add("foreign")
                            self._segment_path = lambda: "additional-info"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo, ['mbr_type'], name, value)


                        class Local(Entity):
                            """
                            Information for a local port
                            
                            .. attribute:: interface_handle
                            
                            	Member's interface handle
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Local, self).__init__()

                                self.yang_name = "local"
                                self.yang_parent_name = "additional-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                ])
                                self.interface_handle = None
                                self._segment_path = lambda: "local"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Local, ['interface_handle'], name, value)


                        class Foreign(Entity):
                            """
                            Information for a foreign port
                            
                            .. attribute:: peer_address
                            
                            	The LDP address of the device that the link is configured on
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: member_name
                            
                            	Member's (short form) name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Foreign, self).__init__()

                                self.yang_name = "foreign"
                                self.yang_parent_name = "additional-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('peer_address', YLeaf(YType.str, 'peer-address')),
                                    ('member_name', YLeaf(YType.str, 'member-name')),
                                ])
                                self.peer_address = None
                                self.member_name = None
                                self._segment_path = lambda: "foreign"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Lacp.LacpMembers.LacpMember.LacpMemberItem.AdditionalInfo.Foreign, ['peer_address', 'member_name'], name, value)


    class MlacpBundleCounters(Entity):
        """
        Bundle specific counters of mLACP events
        
        .. attribute:: iccp_groups
        
        	ICCP Groups with counters of their bundle's mLACP events
        	**type**\:  :py:class:`IccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups>`
        
        .. attribute:: bundles
        
        	Bundle interfaces with counters of mLACP events
        	**type**\:  :py:class:`Bundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles>`
        
        .. attribute:: nodes
        
        	Devices with counters of their bundle's mLACP events
        	**type**\:  :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.MlacpBundleCounters, self).__init__()

            self.yang_name = "mlacp-bundle-counters"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("iccp-groups", ("iccp_groups", BundleInformation.MlacpBundleCounters.IccpGroups)), ("bundles", ("bundles", BundleInformation.MlacpBundleCounters.Bundles)), ("nodes", ("nodes", BundleInformation.MlacpBundleCounters.Nodes))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.iccp_groups = BundleInformation.MlacpBundleCounters.IccpGroups()
            self.iccp_groups.parent = self
            self._children_name_map["iccp_groups"] = "iccp-groups"
            self._children_yang_names.add("iccp-groups")

            self.bundles = BundleInformation.MlacpBundleCounters.Bundles()
            self.bundles.parent = self
            self._children_name_map["bundles"] = "bundles"
            self._children_yang_names.add("bundles")

            self.nodes = BundleInformation.MlacpBundleCounters.Nodes()
            self.nodes.parent = self
            self._children_name_map["nodes"] = "nodes"
            self._children_yang_names.add("nodes")
            self._segment_path = lambda: "mlacp-bundle-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class IccpGroups(Entity):
            """
            ICCP Groups with counters of their bundle's
            mLACP events
            
            .. attribute:: iccp_group
            
            	ICCP Group ID
            	**type**\: list of  		 :py:class:`IccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpBundleCounters.IccpGroups, self).__init__()

                self.yang_name = "iccp-groups"
                self.yang_parent_name = "mlacp-bundle-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("iccp-group", ("iccp_group", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup))])
                self._leafs = OrderedDict()

                self.iccp_group = YList(self)
                self._segment_path = lambda: "iccp-groups"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-bundle-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups, [], name, value)


            class IccpGroup(Entity):
                """
                ICCP Group ID
                
                .. attribute:: iccp_group  (key)
                
                	ICCP Group ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: iccp_group_item
                
                	Data for this item
                	**type**\:  :py:class:`IccpGroupItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup, self).__init__()

                    self.yang_name = "iccp-group"
                    self.yang_parent_name = "iccp-groups"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['iccp_group']
                    self._child_container_classes = OrderedDict([("iccp-group-item", ("iccp_group_item", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', YLeaf(YType.uint32, 'iccp-group')),
                    ])
                    self.iccp_group = None

                    self.iccp_group_item = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem()
                    self.iccp_group_item.parent = self
                    self._children_name_map["iccp_group_item"] = "iccp-group-item"
                    self._children_yang_names.add("iccp-group-item")
                    self._segment_path = lambda: "iccp-group" + "[iccp-group='" + str(self.iccp_group) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-bundle-counters/iccp-groups/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup, ['iccp_group'], name, value)


                class IccpGroupItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: iccp_group_data
                    
                    	ICCP Group mLACP TLV counter information
                    	**type**\:  :py:class:`IccpGroupData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData>`
                    
                    .. attribute:: node_data
                    
                    	Peer device bundle mLACP counter information
                    	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem, self).__init__()

                        self.yang_name = "iccp-group-item"
                        self.yang_parent_name = "iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("iccp-group-data", ("iccp_group_data", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData))])
                        self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData))])
                        self._leafs = OrderedDict()

                        self.iccp_group_data = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData()
                        self.iccp_group_data.parent = self
                        self._children_name_map["iccp_group_data"] = "iccp-group-data"
                        self._children_yang_names.add("iccp-group-data")

                        self.node_data = YList(self)
                        self._segment_path = lambda: "iccp-group-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem, [], name, value)


                    class IccpGroupData(Entity):
                        """
                        ICCP Group mLACP TLV counter information
                        
                        .. attribute:: mlacp_sync_requests_on_all_local_ports
                        
                        	Counts of mLACP sync request TLVs on all ports
                        	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts>`
                        
                        .. attribute:: mlacp_sync_requests_on_all_local_bundles
                        
                        	Counts of mLACP sync request TLVs on all bundles
                        	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles>`
                        
                        .. attribute:: iccp_group_id
                        
                        	ICCP Group ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: bundle_data
                        
                        	Local device bundle mLACP counter information
                        	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData, self).__init__()

                            self.yang_name = "iccp-group-data"
                            self.yang_parent_name = "iccp-group-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-local-ports", ("mlacp_sync_requests_on_all_local_ports", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts)), ("mlacp-sync-requests-on-all-local-bundles", ("mlacp_sync_requests_on_all_local_bundles", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles))])
                            self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData))])
                            self._leafs = OrderedDict([
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                            ])
                            self.iccp_group_id = None

                            self.mlacp_sync_requests_on_all_local_ports = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts()
                            self.mlacp_sync_requests_on_all_local_ports.parent = self
                            self._children_name_map["mlacp_sync_requests_on_all_local_ports"] = "mlacp-sync-requests-on-all-local-ports"
                            self._children_yang_names.add("mlacp-sync-requests-on-all-local-ports")

                            self.mlacp_sync_requests_on_all_local_bundles = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles()
                            self.mlacp_sync_requests_on_all_local_bundles.parent = self
                            self._children_name_map["mlacp_sync_requests_on_all_local_bundles"] = "mlacp-sync-requests-on-all-local-bundles"
                            self._children_yang_names.add("mlacp-sync-requests-on-all-local-bundles")

                            self.bundle_data = YList(self)
                            self._segment_path = lambda: "iccp-group-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData, ['iccp_group_id'], name, value)


                        class MlacpSyncRequestsOnAllLocalPorts(Entity):
                            """
                            Counts of mLACP sync request TLVs on all ports
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of mLACP sync request TLVs received
                            	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests>`
                            
                            .. attribute:: last_time_cleared
                            
                            	Time in nsecs from boot when counters were last cleared (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: time_since_cleared
                            
                            	Elapsed time in nsecs since counters were last cleared
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts, self).__init__()

                                self.yang_name = "mlacp-sync-requests-on-all-local-ports"
                                self.yang_parent_name = "iccp-group-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                    ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ])
                                self.last_time_cleared = None
                                self.time_since_cleared = None

                                self.received_sync_requests = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests()
                                self.received_sync_requests.parent = self
                                self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                self._children_yang_names.add("received-sync-requests")
                                self._segment_path = lambda: "mlacp-sync-requests-on-all-local-ports"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                            class ReceivedSyncRequests(Entity):
                                """
                                Number of mLACP sync request TLVs received
                                
                                .. attribute:: all_syncs
                                
                                	Total number of sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: config_syncs
                                
                                	Number of config sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: state_syncs
                                
                                	Number of state sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, self).__init__()

                                    self.yang_name = "received-sync-requests"
                                    self.yang_parent_name = "mlacp-sync-requests-on-all-local-ports"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                        ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                        ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                    ])
                                    self.all_syncs = None
                                    self.config_syncs = None
                                    self.state_syncs = None
                                    self._segment_path = lambda: "received-sync-requests"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class MlacpSyncRequestsOnAllLocalBundles(Entity):
                            """
                            Counts of mLACP sync request TLVs on all bundles
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of mLACP sync request TLVs received
                            	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests>`
                            
                            .. attribute:: last_time_cleared
                            
                            	Time in nsecs from boot when counters were last cleared (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: time_since_cleared
                            
                            	Elapsed time in nsecs since counters were last cleared
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles, self).__init__()

                                self.yang_name = "mlacp-sync-requests-on-all-local-bundles"
                                self.yang_parent_name = "iccp-group-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                    ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ])
                                self.last_time_cleared = None
                                self.time_since_cleared = None

                                self.received_sync_requests = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests()
                                self.received_sync_requests.parent = self
                                self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                self._children_yang_names.add("received-sync-requests")
                                self._segment_path = lambda: "mlacp-sync-requests-on-all-local-bundles"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles, ['last_time_cleared', 'time_since_cleared'], name, value)


                            class ReceivedSyncRequests(Entity):
                                """
                                Number of mLACP sync request TLVs received
                                
                                .. attribute:: all_syncs
                                
                                	Total number of sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: config_syncs
                                
                                	Number of config sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: state_syncs
                                
                                	Number of state sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests, self).__init__()

                                    self.yang_name = "received-sync-requests"
                                    self.yang_parent_name = "mlacp-sync-requests-on-all-local-bundles"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                        ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                        ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                    ])
                                    self.all_syncs = None
                                    self.config_syncs = None
                                    self.state_syncs = None
                                    self._segment_path = lambda: "received-sync-requests"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class BundleData(Entity):
                            """
                            Local device bundle mLACP counter information
                            
                            .. attribute:: mlacp_tlv_counters
                            
                            	Counts of mLACP TLVs sent and received
                            	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters>`
                            
                            .. attribute:: bundle_name
                            
                            	Bundle name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData, self).__init__()

                                self.yang_name = "bundle-data"
                                self.yang_parent_name = "iccp-group-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                ])
                                self.bundle_name = None

                                self.mlacp_tlv_counters = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters()
                                self.mlacp_tlv_counters.parent = self
                                self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                self._children_yang_names.add("mlacp-tlv-counters")
                                self._segment_path = lambda: "bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData, ['bundle_name'], name, value)


                            class MlacpTlvCounters(Entity):
                                """
                                Counts of mLACP TLVs sent and received
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests>`
                                
                                .. attribute:: sent_config_tl_vs
                                
                                	Number of mLACP config TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_state_tl_vs
                                
                                	Number of mLACP state TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_priority_tl_vs
                                
                                	Number of mLACP priority TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_priority_tl_vs
                                
                                	Number of mLACP priority TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_nak_tl_vs
                                
                                	Number of mLACP NAK TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: last_unexpected_event
                                
                                	Elapsed time in nsecs since last unexpected event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters, self).__init__()

                                    self.yang_name = "mlacp-tlv-counters"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                        ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                        ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                        ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                        ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                    ])
                                    self.sent_config_tl_vs = None
                                    self.sent_state_tl_vs = None
                                    self.sent_priority_tl_vs = None
                                    self.received_priority_tl_vs = None
                                    self.received_nak_tl_vs = None
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None
                                    self.last_unexpected_event = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-tlv-counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-tlv-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                    class NodeData(Entity):
                        """
                        Peer device bundle mLACP counter information
                        
                        .. attribute:: node_data
                        
                        	Peer device mLACP TLV counter information
                        	**type**\:  :py:class:`NodeData_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_>`
                        
                        .. attribute:: bundle_data
                        
                        	Peer device bundle mLACP TLV counter information
                        	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData, self).__init__()

                            self.yang_name = "node-data"
                            self.yang_parent_name = "iccp-group-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_))])
                            self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData))])
                            self._leafs = OrderedDict()

                            self.node_data = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_()
                            self.node_data.parent = self
                            self._children_name_map["node_data"] = "node-data"
                            self._children_yang_names.add("node-data")

                            self.bundle_data = YList(self)
                            self._segment_path = lambda: "node-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData, [], name, value)


                        class NodeData_(Entity):
                            """
                            Peer device mLACP TLV counter information
                            
                            .. attribute:: mlacp_sync_requests_on_all_foreign_ports
                            
                            	Counts of mLACP sync request TLVs on all ports
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts>`
                            
                            .. attribute:: mlacp_sync_requests_on_all_foreign_bundles
                            
                            	Counts of mLACP sync request TLVs on all bundles
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles>`
                            
                            .. attribute:: node_id
                            
                            	Device ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_, self).__init__()

                                self.yang_name = "node-data"
                                self.yang_parent_name = "node-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-foreign-ports", ("mlacp_sync_requests_on_all_foreign_ports", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts)), ("mlacp-sync-requests-on-all-foreign-bundles", ("mlacp_sync_requests_on_all_foreign_bundles", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('node_id', YLeaf(YType.uint32, 'node-id')),
                                ])
                                self.node_id = None

                                self.mlacp_sync_requests_on_all_foreign_ports = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts()
                                self.mlacp_sync_requests_on_all_foreign_ports.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_foreign_ports"] = "mlacp-sync-requests-on-all-foreign-ports"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-ports")

                                self.mlacp_sync_requests_on_all_foreign_bundles = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles()
                                self.mlacp_sync_requests_on_all_foreign_bundles.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_foreign_bundles"] = "mlacp-sync-requests-on-all-foreign-bundles"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-bundles")
                                self._segment_path = lambda: "node-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_, ['node_id'], name, value)


                            class MlacpSyncRequestsOnAllForeignPorts(Entity):
                                """
                                Counts of mLACP sync request TLVs on all ports
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-foreign-ports"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-ports"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-ports"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                            class MlacpSyncRequestsOnAllForeignBundles(Entity):
                                """
                                Counts of mLACP sync request TLVs on all bundles
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-foreign-bundles"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-bundles"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-bundles"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class BundleData(Entity):
                            """
                            Peer device bundle mLACP TLV counter information
                            
                            .. attribute:: mlacp_tlv_counters
                            
                            	Counts of mLACP TLVs sent and received
                            	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters>`
                            
                            .. attribute:: bundle_name
                            
                            	Bundle name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData, self).__init__()

                                self.yang_name = "bundle-data"
                                self.yang_parent_name = "node-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                ])
                                self.bundle_name = None

                                self.mlacp_tlv_counters = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters()
                                self.mlacp_tlv_counters.parent = self
                                self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                self._children_yang_names.add("mlacp-tlv-counters")
                                self._segment_path = lambda: "bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData, ['bundle_name'], name, value)


                            class MlacpTlvCounters(Entity):
                                """
                                Counts of mLACP TLVs sent and received
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests>`
                                
                                .. attribute:: sent_config_tl_vs
                                
                                	Number of mLACP config TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_state_tl_vs
                                
                                	Number of mLACP state TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_priority_tl_vs
                                
                                	Number of mLACP priority TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_priority_tl_vs
                                
                                	Number of mLACP priority TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_nak_tl_vs
                                
                                	Number of mLACP NAK TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: last_unexpected_event
                                
                                	Elapsed time in nsecs since last unexpected event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters, self).__init__()

                                    self.yang_name = "mlacp-tlv-counters"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                        ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                        ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                        ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                        ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                    ])
                                    self.sent_config_tl_vs = None
                                    self.sent_state_tl_vs = None
                                    self.sent_priority_tl_vs = None
                                    self.received_priority_tl_vs = None
                                    self.received_nak_tl_vs = None
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None
                                    self.last_unexpected_event = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-tlv-counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-tlv-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.IccpGroups.IccpGroup.IccpGroupItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


        class Bundles(Entity):
            """
            Bundle interfaces with counters of mLACP events
            
            .. attribute:: bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`Bundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpBundleCounters.Bundles, self).__init__()

                self.yang_name = "bundles"
                self.yang_parent_name = "mlacp-bundle-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("bundle", ("bundle", BundleInformation.MlacpBundleCounters.Bundles.Bundle))])
                self._leafs = OrderedDict()

                self.bundle = YList(self)
                self._segment_path = lambda: "bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-bundle-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles, [], name, value)


            class Bundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`BundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpBundleCounters.Bundles.Bundle, self).__init__()

                    self.yang_name = "bundle"
                    self.yang_parent_name = "bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("bundle-item", ("bundle_item", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.bundle_item = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem()
                    self.bundle_item.parent = self
                    self._children_name_map["bundle_item"] = "bundle-item"
                    self._children_yang_names.add("bundle-item")
                    self._segment_path = lambda: "bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-bundle-counters/bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle, ['bundle_interface'], name, value)


                class BundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: iccp_group
                    
                    	ICCP Group mLACP TLV counter information
                    	**type**\: list of  		 :py:class:`IccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem, self).__init__()

                        self.yang_name = "bundle-item"
                        self.yang_parent_name = "bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("iccp-group", ("iccp_group", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup))])
                        self._leafs = OrderedDict()

                        self.iccp_group = YList(self)
                        self._segment_path = lambda: "bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem, [], name, value)


                    class IccpGroup(Entity):
                        """
                        ICCP Group mLACP TLV counter information
                        
                        .. attribute:: iccp_group_data
                        
                        	ICCP Group mLACP TLV counter information
                        	**type**\:  :py:class:`IccpGroupData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData>`
                        
                        .. attribute:: node_data
                        
                        	Peer device bundle mLACP counter information
                        	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup, self).__init__()

                            self.yang_name = "iccp-group"
                            self.yang_parent_name = "bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("iccp-group-data", ("iccp_group_data", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData))])
                            self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData))])
                            self._leafs = OrderedDict()

                            self.iccp_group_data = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData()
                            self.iccp_group_data.parent = self
                            self._children_name_map["iccp_group_data"] = "iccp-group-data"
                            self._children_yang_names.add("iccp-group-data")

                            self.node_data = YList(self)
                            self._segment_path = lambda: "iccp-group"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup, [], name, value)


                        class IccpGroupData(Entity):
                            """
                            ICCP Group mLACP TLV counter information
                            
                            .. attribute:: mlacp_sync_requests_on_all_local_ports
                            
                            	Counts of mLACP sync request TLVs on all ports
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts>`
                            
                            .. attribute:: mlacp_sync_requests_on_all_local_bundles
                            
                            	Counts of mLACP sync request TLVs on all bundles
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles>`
                            
                            .. attribute:: iccp_group_id
                            
                            	ICCP Group ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: bundle_data
                            
                            	Local device bundle mLACP counter information
                            	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData, self).__init__()

                                self.yang_name = "iccp-group-data"
                                self.yang_parent_name = "iccp-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-local-ports", ("mlacp_sync_requests_on_all_local_ports", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts)), ("mlacp-sync-requests-on-all-local-bundles", ("mlacp_sync_requests_on_all_local_bundles", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles))])
                                self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData))])
                                self._leafs = OrderedDict([
                                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ])
                                self.iccp_group_id = None

                                self.mlacp_sync_requests_on_all_local_ports = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts()
                                self.mlacp_sync_requests_on_all_local_ports.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_local_ports"] = "mlacp-sync-requests-on-all-local-ports"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-local-ports")

                                self.mlacp_sync_requests_on_all_local_bundles = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles()
                                self.mlacp_sync_requests_on_all_local_bundles.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_local_bundles"] = "mlacp-sync-requests-on-all-local-bundles"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-local-bundles")

                                self.bundle_data = YList(self)
                                self._segment_path = lambda: "iccp-group-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData, ['iccp_group_id'], name, value)


                            class MlacpSyncRequestsOnAllLocalPorts(Entity):
                                """
                                Counts of mLACP sync request TLVs on all ports
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-local-ports"
                                    self.yang_parent_name = "iccp-group-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-local-ports"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-local-ports"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                            class MlacpSyncRequestsOnAllLocalBundles(Entity):
                                """
                                Counts of mLACP sync request TLVs on all bundles
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-local-bundles"
                                    self.yang_parent_name = "iccp-group-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-local-bundles"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-local-bundles"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                            class BundleData(Entity):
                                """
                                Local device bundle mLACP counter information
                                
                                .. attribute:: mlacp_tlv_counters
                                
                                	Counts of mLACP TLVs sent and received
                                	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters>`
                                
                                .. attribute:: bundle_name
                                
                                	Bundle name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData, self).__init__()

                                    self.yang_name = "bundle-data"
                                    self.yang_parent_name = "iccp-group-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                    ])
                                    self.bundle_name = None

                                    self.mlacp_tlv_counters = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters()
                                    self.mlacp_tlv_counters.parent = self
                                    self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                    self._children_yang_names.add("mlacp-tlv-counters")
                                    self._segment_path = lambda: "bundle-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData, ['bundle_name'], name, value)


                                class MlacpTlvCounters(Entity):
                                    """
                                    Counts of mLACP TLVs sent and received
                                    
                                    .. attribute:: received_sync_requests
                                    
                                    	Number of mLACP sync request TLVs received
                                    	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests>`
                                    
                                    .. attribute:: sent_config_tl_vs
                                    
                                    	Number of mLACP config TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_state_tl_vs
                                    
                                    	Number of mLACP state TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_nak_tl_vs
                                    
                                    	Number of mLACP NAK TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_time_cleared
                                    
                                    	Time in nsecs from boot when counters were last cleared (deprecated)
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: time_since_cleared
                                    
                                    	Elapsed time in nsecs since counters were last cleared
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: last_unexpected_event
                                    
                                    	Elapsed time in nsecs since last unexpected event
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters, self).__init__()

                                        self.yang_name = "mlacp-tlv-counters"
                                        self.yang_parent_name = "bundle-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                            ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                            ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                            ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                            ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                            ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                            ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                            ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                        ])
                                        self.sent_config_tl_vs = None
                                        self.sent_state_tl_vs = None
                                        self.sent_priority_tl_vs = None
                                        self.received_priority_tl_vs = None
                                        self.received_nak_tl_vs = None
                                        self.last_time_cleared = None
                                        self.time_since_cleared = None
                                        self.last_unexpected_event = None

                                        self.received_sync_requests = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests()
                                        self.received_sync_requests.parent = self
                                        self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                        self._children_yang_names.add("received-sync-requests")
                                        self._segment_path = lambda: "mlacp-tlv-counters"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                    class ReceivedSyncRequests(Entity):
                                        """
                                        Number of mLACP sync request TLVs received
                                        
                                        .. attribute:: all_syncs
                                        
                                        	Total number of sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: config_syncs
                                        
                                        	Number of config sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: state_syncs
                                        
                                        	Number of state sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                            self.yang_name = "received-sync-requests"
                                            self.yang_parent_name = "mlacp-tlv-counters"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                                ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                                ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                            ])
                                            self.all_syncs = None
                                            self.config_syncs = None
                                            self.state_syncs = None
                                            self._segment_path = lambda: "received-sync-requests"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class NodeData(Entity):
                            """
                            Peer device bundle mLACP counter information
                            
                            .. attribute:: node_data
                            
                            	Peer device mLACP TLV counter information
                            	**type**\:  :py:class:`NodeData_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_>`
                            
                            .. attribute:: bundle_data
                            
                            	Peer device bundle mLACP TLV counter information
                            	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData, self).__init__()

                                self.yang_name = "node-data"
                                self.yang_parent_name = "iccp-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_))])
                                self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData))])
                                self._leafs = OrderedDict()

                                self.node_data = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_()
                                self.node_data.parent = self
                                self._children_name_map["node_data"] = "node-data"
                                self._children_yang_names.add("node-data")

                                self.bundle_data = YList(self)
                                self._segment_path = lambda: "node-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData, [], name, value)


                            class NodeData_(Entity):
                                """
                                Peer device mLACP TLV counter information
                                
                                .. attribute:: mlacp_sync_requests_on_all_foreign_ports
                                
                                	Counts of mLACP sync request TLVs on all ports
                                	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts>`
                                
                                .. attribute:: mlacp_sync_requests_on_all_foreign_bundles
                                
                                	Counts of mLACP sync request TLVs on all bundles
                                	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles>`
                                
                                .. attribute:: node_id
                                
                                	Device ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_, self).__init__()

                                    self.yang_name = "node-data"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-foreign-ports", ("mlacp_sync_requests_on_all_foreign_ports", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts)), ("mlacp-sync-requests-on-all-foreign-bundles", ("mlacp_sync_requests_on_all_foreign_bundles", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('node_id', YLeaf(YType.uint32, 'node-id')),
                                    ])
                                    self.node_id = None

                                    self.mlacp_sync_requests_on_all_foreign_ports = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts()
                                    self.mlacp_sync_requests_on_all_foreign_ports.parent = self
                                    self._children_name_map["mlacp_sync_requests_on_all_foreign_ports"] = "mlacp-sync-requests-on-all-foreign-ports"
                                    self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-ports")

                                    self.mlacp_sync_requests_on_all_foreign_bundles = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles()
                                    self.mlacp_sync_requests_on_all_foreign_bundles.parent = self
                                    self._children_name_map["mlacp_sync_requests_on_all_foreign_bundles"] = "mlacp-sync-requests-on-all-foreign-bundles"
                                    self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-bundles")
                                    self._segment_path = lambda: "node-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_, ['node_id'], name, value)


                                class MlacpSyncRequestsOnAllForeignPorts(Entity):
                                    """
                                    Counts of mLACP sync request TLVs on all ports
                                    
                                    .. attribute:: received_sync_requests
                                    
                                    	Number of mLACP sync request TLVs received
                                    	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests>`
                                    
                                    .. attribute:: last_time_cleared
                                    
                                    	Time in nsecs from boot when counters were last cleared (deprecated)
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: time_since_cleared
                                    
                                    	Elapsed time in nsecs since counters were last cleared
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts, self).__init__()

                                        self.yang_name = "mlacp-sync-requests-on-all-foreign-ports"
                                        self.yang_parent_name = "node-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                            ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ])
                                        self.last_time_cleared = None
                                        self.time_since_cleared = None

                                        self.received_sync_requests = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests()
                                        self.received_sync_requests.parent = self
                                        self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                        self._children_yang_names.add("received-sync-requests")
                                        self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-ports"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                    class ReceivedSyncRequests(Entity):
                                        """
                                        Number of mLACP sync request TLVs received
                                        
                                        .. attribute:: all_syncs
                                        
                                        	Total number of sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: config_syncs
                                        
                                        	Number of config sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: state_syncs
                                        
                                        	Number of state sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, self).__init__()

                                            self.yang_name = "received-sync-requests"
                                            self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-ports"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                                ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                                ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                            ])
                                            self.all_syncs = None
                                            self.config_syncs = None
                                            self.state_syncs = None
                                            self._segment_path = lambda: "received-sync-requests"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                                class MlacpSyncRequestsOnAllForeignBundles(Entity):
                                    """
                                    Counts of mLACP sync request TLVs on all bundles
                                    
                                    .. attribute:: received_sync_requests
                                    
                                    	Number of mLACP sync request TLVs received
                                    	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests>`
                                    
                                    .. attribute:: last_time_cleared
                                    
                                    	Time in nsecs from boot when counters were last cleared (deprecated)
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: time_since_cleared
                                    
                                    	Elapsed time in nsecs since counters were last cleared
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles, self).__init__()

                                        self.yang_name = "mlacp-sync-requests-on-all-foreign-bundles"
                                        self.yang_parent_name = "node-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                            ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ])
                                        self.last_time_cleared = None
                                        self.time_since_cleared = None

                                        self.received_sync_requests = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests()
                                        self.received_sync_requests.parent = self
                                        self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                        self._children_yang_names.add("received-sync-requests")
                                        self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-bundles"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles, ['last_time_cleared', 'time_since_cleared'], name, value)


                                    class ReceivedSyncRequests(Entity):
                                        """
                                        Number of mLACP sync request TLVs received
                                        
                                        .. attribute:: all_syncs
                                        
                                        	Total number of sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: config_syncs
                                        
                                        	Number of config sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: state_syncs
                                        
                                        	Number of state sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests, self).__init__()

                                            self.yang_name = "received-sync-requests"
                                            self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-bundles"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                                ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                                ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                            ])
                                            self.all_syncs = None
                                            self.config_syncs = None
                                            self.state_syncs = None
                                            self._segment_path = lambda: "received-sync-requests"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                            class BundleData(Entity):
                                """
                                Peer device bundle mLACP TLV counter information
                                
                                .. attribute:: mlacp_tlv_counters
                                
                                	Counts of mLACP TLVs sent and received
                                	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters>`
                                
                                .. attribute:: bundle_name
                                
                                	Bundle name
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData, self).__init__()

                                    self.yang_name = "bundle-data"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                    ])
                                    self.bundle_name = None

                                    self.mlacp_tlv_counters = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters()
                                    self.mlacp_tlv_counters.parent = self
                                    self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                    self._children_yang_names.add("mlacp-tlv-counters")
                                    self._segment_path = lambda: "bundle-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData, ['bundle_name'], name, value)


                                class MlacpTlvCounters(Entity):
                                    """
                                    Counts of mLACP TLVs sent and received
                                    
                                    .. attribute:: received_sync_requests
                                    
                                    	Number of mLACP sync request TLVs received
                                    	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests>`
                                    
                                    .. attribute:: sent_config_tl_vs
                                    
                                    	Number of mLACP config TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_state_tl_vs
                                    
                                    	Number of mLACP state TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_nak_tl_vs
                                    
                                    	Number of mLACP NAK TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_time_cleared
                                    
                                    	Time in nsecs from boot when counters were last cleared (deprecated)
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: time_since_cleared
                                    
                                    	Elapsed time in nsecs since counters were last cleared
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: last_unexpected_event
                                    
                                    	Elapsed time in nsecs since last unexpected event
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters, self).__init__()

                                        self.yang_name = "mlacp-tlv-counters"
                                        self.yang_parent_name = "bundle-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                            ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                            ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                            ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                            ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                            ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                            ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                            ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                        ])
                                        self.sent_config_tl_vs = None
                                        self.sent_state_tl_vs = None
                                        self.sent_priority_tl_vs = None
                                        self.received_priority_tl_vs = None
                                        self.received_nak_tl_vs = None
                                        self.last_time_cleared = None
                                        self.time_since_cleared = None
                                        self.last_unexpected_event = None

                                        self.received_sync_requests = BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests()
                                        self.received_sync_requests.parent = self
                                        self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                        self._children_yang_names.add("received-sync-requests")
                                        self._segment_path = lambda: "mlacp-tlv-counters"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                    class ReceivedSyncRequests(Entity):
                                        """
                                        Number of mLACP sync request TLVs received
                                        
                                        .. attribute:: all_syncs
                                        
                                        	Total number of sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: config_syncs
                                        
                                        	Number of config sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: state_syncs
                                        
                                        	Number of state sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                            self.yang_name = "received-sync-requests"
                                            self.yang_parent_name = "mlacp-tlv-counters"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                                ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                                ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                            ])
                                            self.all_syncs = None
                                            self.config_syncs = None
                                            self.state_syncs = None
                                            self._segment_path = lambda: "received-sync-requests"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.MlacpBundleCounters.Bundles.Bundle.BundleItem.IccpGroup.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


        class Nodes(Entity):
            """
            Devices with counters of their bundle's mLACP
            events
            
            .. attribute:: node
            
            	Node ID
            	**type**\: list of  		 :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpBundleCounters.Nodes, self).__init__()

                self.yang_name = "nodes"
                self.yang_parent_name = "mlacp-bundle-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("node", ("node", BundleInformation.MlacpBundleCounters.Nodes.Node))])
                self._leafs = OrderedDict()

                self.node = YList(self)
                self._segment_path = lambda: "nodes"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-bundle-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes, [], name, value)


            class Node(Entity):
                """
                Node ID
                
                .. attribute:: node  (key)
                
                	For a local device the Node ID e.g. '0\_0\_CPU0', for a peer device the LDP ID followed by the ICCP Group ID e.g. '5.4.3.2 ,4'
                	**type**\: str
                
                .. attribute:: node_item
                
                	Data for this item
                	**type**\:  :py:class:`NodeItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpBundleCounters.Nodes.Node, self).__init__()

                    self.yang_name = "node"
                    self.yang_parent_name = "nodes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['node']
                    self._child_container_classes = OrderedDict([("node-item", ("node_item", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('node', YLeaf(YType.str, 'node')),
                    ])
                    self.node = None

                    self.node_item = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem()
                    self.node_item.parent = self
                    self._children_name_map["node_item"] = "node-item"
                    self._children_yang_names.add("node-item")
                    self._segment_path = lambda: "node" + "[node='" + str(self.node) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-bundle-counters/nodes/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node, ['node'], name, value)


                class NodeItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: iccp_group_data
                    
                    	ICCP Group mLACP TLV counter information
                    	**type**\:  :py:class:`IccpGroupData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData>`
                    
                    .. attribute:: node_data
                    
                    	Peer device bundle mLACP counter information
                    	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem, self).__init__()

                        self.yang_name = "node-item"
                        self.yang_parent_name = "node"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("iccp-group-data", ("iccp_group_data", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData))])
                        self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData))])
                        self._leafs = OrderedDict()

                        self.iccp_group_data = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData()
                        self.iccp_group_data.parent = self
                        self._children_name_map["iccp_group_data"] = "iccp-group-data"
                        self._children_yang_names.add("iccp-group-data")

                        self.node_data = YList(self)
                        self._segment_path = lambda: "node-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem, [], name, value)


                    class IccpGroupData(Entity):
                        """
                        ICCP Group mLACP TLV counter information
                        
                        .. attribute:: mlacp_sync_requests_on_all_local_ports
                        
                        	Counts of mLACP sync request TLVs on all ports
                        	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts>`
                        
                        .. attribute:: mlacp_sync_requests_on_all_local_bundles
                        
                        	Counts of mLACP sync request TLVs on all bundles
                        	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles>`
                        
                        .. attribute:: iccp_group_id
                        
                        	ICCP Group ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: bundle_data
                        
                        	Local device bundle mLACP counter information
                        	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData, self).__init__()

                            self.yang_name = "iccp-group-data"
                            self.yang_parent_name = "node-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-local-ports", ("mlacp_sync_requests_on_all_local_ports", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts)), ("mlacp-sync-requests-on-all-local-bundles", ("mlacp_sync_requests_on_all_local_bundles", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles))])
                            self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData))])
                            self._leafs = OrderedDict([
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                            ])
                            self.iccp_group_id = None

                            self.mlacp_sync_requests_on_all_local_ports = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts()
                            self.mlacp_sync_requests_on_all_local_ports.parent = self
                            self._children_name_map["mlacp_sync_requests_on_all_local_ports"] = "mlacp-sync-requests-on-all-local-ports"
                            self._children_yang_names.add("mlacp-sync-requests-on-all-local-ports")

                            self.mlacp_sync_requests_on_all_local_bundles = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles()
                            self.mlacp_sync_requests_on_all_local_bundles.parent = self
                            self._children_name_map["mlacp_sync_requests_on_all_local_bundles"] = "mlacp-sync-requests-on-all-local-bundles"
                            self._children_yang_names.add("mlacp-sync-requests-on-all-local-bundles")

                            self.bundle_data = YList(self)
                            self._segment_path = lambda: "iccp-group-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData, ['iccp_group_id'], name, value)


                        class MlacpSyncRequestsOnAllLocalPorts(Entity):
                            """
                            Counts of mLACP sync request TLVs on all ports
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of mLACP sync request TLVs received
                            	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests>`
                            
                            .. attribute:: last_time_cleared
                            
                            	Time in nsecs from boot when counters were last cleared (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: time_since_cleared
                            
                            	Elapsed time in nsecs since counters were last cleared
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts, self).__init__()

                                self.yang_name = "mlacp-sync-requests-on-all-local-ports"
                                self.yang_parent_name = "iccp-group-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                    ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ])
                                self.last_time_cleared = None
                                self.time_since_cleared = None

                                self.received_sync_requests = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests()
                                self.received_sync_requests.parent = self
                                self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                self._children_yang_names.add("received-sync-requests")
                                self._segment_path = lambda: "mlacp-sync-requests-on-all-local-ports"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                            class ReceivedSyncRequests(Entity):
                                """
                                Number of mLACP sync request TLVs received
                                
                                .. attribute:: all_syncs
                                
                                	Total number of sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: config_syncs
                                
                                	Number of config sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: state_syncs
                                
                                	Number of state sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, self).__init__()

                                    self.yang_name = "received-sync-requests"
                                    self.yang_parent_name = "mlacp-sync-requests-on-all-local-ports"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                        ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                        ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                    ])
                                    self.all_syncs = None
                                    self.config_syncs = None
                                    self.state_syncs = None
                                    self._segment_path = lambda: "received-sync-requests"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class MlacpSyncRequestsOnAllLocalBundles(Entity):
                            """
                            Counts of mLACP sync request TLVs on all bundles
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of mLACP sync request TLVs received
                            	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests>`
                            
                            .. attribute:: last_time_cleared
                            
                            	Time in nsecs from boot when counters were last cleared (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: time_since_cleared
                            
                            	Elapsed time in nsecs since counters were last cleared
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles, self).__init__()

                                self.yang_name = "mlacp-sync-requests-on-all-local-bundles"
                                self.yang_parent_name = "iccp-group-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                    ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ])
                                self.last_time_cleared = None
                                self.time_since_cleared = None

                                self.received_sync_requests = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests()
                                self.received_sync_requests.parent = self
                                self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                self._children_yang_names.add("received-sync-requests")
                                self._segment_path = lambda: "mlacp-sync-requests-on-all-local-bundles"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles, ['last_time_cleared', 'time_since_cleared'], name, value)


                            class ReceivedSyncRequests(Entity):
                                """
                                Number of mLACP sync request TLVs received
                                
                                .. attribute:: all_syncs
                                
                                	Total number of sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: config_syncs
                                
                                	Number of config sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: state_syncs
                                
                                	Number of state sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests, self).__init__()

                                    self.yang_name = "received-sync-requests"
                                    self.yang_parent_name = "mlacp-sync-requests-on-all-local-bundles"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                        ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                        ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                    ])
                                    self.all_syncs = None
                                    self.config_syncs = None
                                    self.state_syncs = None
                                    self._segment_path = lambda: "received-sync-requests"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.MlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class BundleData(Entity):
                            """
                            Local device bundle mLACP counter information
                            
                            .. attribute:: mlacp_tlv_counters
                            
                            	Counts of mLACP TLVs sent and received
                            	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters>`
                            
                            .. attribute:: bundle_name
                            
                            	Bundle name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData, self).__init__()

                                self.yang_name = "bundle-data"
                                self.yang_parent_name = "iccp-group-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                ])
                                self.bundle_name = None

                                self.mlacp_tlv_counters = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters()
                                self.mlacp_tlv_counters.parent = self
                                self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                self._children_yang_names.add("mlacp-tlv-counters")
                                self._segment_path = lambda: "bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData, ['bundle_name'], name, value)


                            class MlacpTlvCounters(Entity):
                                """
                                Counts of mLACP TLVs sent and received
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests>`
                                
                                .. attribute:: sent_config_tl_vs
                                
                                	Number of mLACP config TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_state_tl_vs
                                
                                	Number of mLACP state TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_priority_tl_vs
                                
                                	Number of mLACP priority TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_priority_tl_vs
                                
                                	Number of mLACP priority TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_nak_tl_vs
                                
                                	Number of mLACP NAK TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: last_unexpected_event
                                
                                	Elapsed time in nsecs since last unexpected event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters, self).__init__()

                                    self.yang_name = "mlacp-tlv-counters"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                        ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                        ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                        ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                        ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                    ])
                                    self.sent_config_tl_vs = None
                                    self.sent_state_tl_vs = None
                                    self.sent_priority_tl_vs = None
                                    self.received_priority_tl_vs = None
                                    self.received_nak_tl_vs = None
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None
                                    self.last_unexpected_event = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-tlv-counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-tlv-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.IccpGroupData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                    class NodeData(Entity):
                        """
                        Peer device bundle mLACP counter information
                        
                        .. attribute:: node_data
                        
                        	Peer device mLACP TLV counter information
                        	**type**\:  :py:class:`NodeData_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_>`
                        
                        .. attribute:: bundle_data
                        
                        	Peer device bundle mLACP TLV counter information
                        	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData, self).__init__()

                            self.yang_name = "node-data"
                            self.yang_parent_name = "node-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_))])
                            self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData))])
                            self._leafs = OrderedDict()

                            self.node_data = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_()
                            self.node_data.parent = self
                            self._children_name_map["node_data"] = "node-data"
                            self._children_yang_names.add("node-data")

                            self.bundle_data = YList(self)
                            self._segment_path = lambda: "node-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData, [], name, value)


                        class NodeData_(Entity):
                            """
                            Peer device mLACP TLV counter information
                            
                            .. attribute:: mlacp_sync_requests_on_all_foreign_ports
                            
                            	Counts of mLACP sync request TLVs on all ports
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts>`
                            
                            .. attribute:: mlacp_sync_requests_on_all_foreign_bundles
                            
                            	Counts of mLACP sync request TLVs on all bundles
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles>`
                            
                            .. attribute:: node_id
                            
                            	Device ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_, self).__init__()

                                self.yang_name = "node-data"
                                self.yang_parent_name = "node-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-foreign-ports", ("mlacp_sync_requests_on_all_foreign_ports", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts)), ("mlacp-sync-requests-on-all-foreign-bundles", ("mlacp_sync_requests_on_all_foreign_bundles", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('node_id', YLeaf(YType.uint32, 'node-id')),
                                ])
                                self.node_id = None

                                self.mlacp_sync_requests_on_all_foreign_ports = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts()
                                self.mlacp_sync_requests_on_all_foreign_ports.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_foreign_ports"] = "mlacp-sync-requests-on-all-foreign-ports"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-ports")

                                self.mlacp_sync_requests_on_all_foreign_bundles = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles()
                                self.mlacp_sync_requests_on_all_foreign_bundles.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_foreign_bundles"] = "mlacp-sync-requests-on-all-foreign-bundles"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-bundles")
                                self._segment_path = lambda: "node-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_, ['node_id'], name, value)


                            class MlacpSyncRequestsOnAllForeignPorts(Entity):
                                """
                                Counts of mLACP sync request TLVs on all ports
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-foreign-ports"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-ports"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-ports"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                            class MlacpSyncRequestsOnAllForeignBundles(Entity):
                                """
                                Counts of mLACP sync request TLVs on all bundles
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-foreign-bundles"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-bundles"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-bundles"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.NodeData_.MlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class BundleData(Entity):
                            """
                            Peer device bundle mLACP TLV counter information
                            
                            .. attribute:: mlacp_tlv_counters
                            
                            	Counts of mLACP TLVs sent and received
                            	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters>`
                            
                            .. attribute:: bundle_name
                            
                            	Bundle name
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData, self).__init__()

                                self.yang_name = "bundle-data"
                                self.yang_parent_name = "node-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                ])
                                self.bundle_name = None

                                self.mlacp_tlv_counters = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters()
                                self.mlacp_tlv_counters.parent = self
                                self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                self._children_yang_names.add("mlacp-tlv-counters")
                                self._segment_path = lambda: "bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData, ['bundle_name'], name, value)


                            class MlacpTlvCounters(Entity):
                                """
                                Counts of mLACP TLVs sent and received
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests>`
                                
                                .. attribute:: sent_config_tl_vs
                                
                                	Number of mLACP config TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_state_tl_vs
                                
                                	Number of mLACP state TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_priority_tl_vs
                                
                                	Number of mLACP priority TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_priority_tl_vs
                                
                                	Number of mLACP priority TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_nak_tl_vs
                                
                                	Number of mLACP NAK TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: last_unexpected_event
                                
                                	Elapsed time in nsecs since last unexpected event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters, self).__init__()

                                    self.yang_name = "mlacp-tlv-counters"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                        ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                        ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                        ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                        ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                    ])
                                    self.sent_config_tl_vs = None
                                    self.sent_state_tl_vs = None
                                    self.sent_priority_tl_vs = None
                                    self.received_priority_tl_vs = None
                                    self.received_nak_tl_vs = None
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None
                                    self.last_unexpected_event = None

                                    self.received_sync_requests = BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-tlv-counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-tlv-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBundleCounters.Nodes.Node.NodeItem.NodeData.BundleData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


    class Protect(Entity):
        """
        Information for bundles and members that are in
        the protect database
        
        .. attribute:: protect_bundles
        
        	Bundle interfaces with information in the protect database
        	**type**\:  :py:class:`ProtectBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Protect.ProtectBundles>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.Protect, self).__init__()

            self.yang_name = "protect"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("protect-bundles", ("protect_bundles", BundleInformation.Protect.ProtectBundles))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.protect_bundles = BundleInformation.Protect.ProtectBundles()
            self.protect_bundles.parent = self
            self._children_name_map["protect_bundles"] = "protect-bundles"
            self._children_yang_names.add("protect-bundles")
            self._segment_path = lambda: "protect"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class ProtectBundles(Entity):
            """
            Bundle interfaces with information in the
            protect database
            
            .. attribute:: protect_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`ProtectBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Protect.ProtectBundles.ProtectBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.Protect.ProtectBundles, self).__init__()

                self.yang_name = "protect-bundles"
                self.yang_parent_name = "protect"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("protect-bundle", ("protect_bundle", BundleInformation.Protect.ProtectBundles.ProtectBundle))])
                self._leafs = OrderedDict()

                self.protect_bundle = YList(self)
                self._segment_path = lambda: "protect-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/protect/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.Protect.ProtectBundles, [], name, value)


            class ProtectBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: protect_bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`ProtectBundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Protect.ProtectBundles.ProtectBundle.ProtectBundleItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.Protect.ProtectBundles.ProtectBundle, self).__init__()

                    self.yang_name = "protect-bundle"
                    self.yang_parent_name = "protect-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("protect-bundle-item", ("protect_bundle_item", BundleInformation.Protect.ProtectBundles.ProtectBundle.ProtectBundleItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.protect_bundle_item = BundleInformation.Protect.ProtectBundles.ProtectBundle.ProtectBundleItem()
                    self.protect_bundle_item.parent = self
                    self._children_name_map["protect_bundle_item"] = "protect-bundle-item"
                    self._children_yang_names.add("protect-bundle-item")
                    self._segment_path = lambda: "protect-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/protect/protect-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.Protect.ProtectBundles.ProtectBundle, ['bundle_interface'], name, value)


                class ProtectBundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: bundle_interface_handle
                    
                    	Bundle's interface handle
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: interface_up
                    
                    	Whether the bundle interface is up
                    	**type**\: bool
                    
                    .. attribute:: registered
                    
                    	Whether there is a client protect registration on the bundle interface
                    	**type**\: bool
                    
                    .. attribute:: slow_path_up
                    
                    	Bundle is up in the slow path
                    	**type**\: bool
                    
                    .. attribute:: slow_path_trigger
                    
                    	Whether the last protect trigger originated in the slow path
                    	**type**\: bool
                    
                    .. attribute:: minimum_active_links
                    
                    	Minimum active links threshold
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minimum_bandwidth
                    
                    	Minimum bandwidth threshold
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: event_type
                    
                    	Scope of the last event that impacted the bundle
                    	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                    
                    .. attribute:: time_stamp
                    
                    	Last event for the bundle
                    	**type**\: int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: member_info
                    
                    	Information about the members
                    	**type**\: list of  		 :py:class:`MemberInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Protect.ProtectBundles.ProtectBundle.ProtectBundleItem.MemberInfo>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Protect.ProtectBundles.ProtectBundle.ProtectBundleItem, self).__init__()

                        self.yang_name = "protect-bundle-item"
                        self.yang_parent_name = "protect-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("member-info", ("member_info", BundleInformation.Protect.ProtectBundles.ProtectBundle.ProtectBundleItem.MemberInfo))])
                        self._leafs = OrderedDict([
                            ('bundle_interface_handle', YLeaf(YType.str, 'bundle-interface-handle')),
                            ('interface_up', YLeaf(YType.boolean, 'interface-up')),
                            ('registered', YLeaf(YType.boolean, 'registered')),
                            ('slow_path_up', YLeaf(YType.boolean, 'slow-path-up')),
                            ('slow_path_trigger', YLeaf(YType.boolean, 'slow-path-trigger')),
                            ('minimum_active_links', YLeaf(YType.uint32, 'minimum-active-links')),
                            ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                            ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                        ])
                        self.bundle_interface_handle = None
                        self.interface_up = None
                        self.registered = None
                        self.slow_path_up = None
                        self.slow_path_trigger = None
                        self.minimum_active_links = None
                        self.minimum_bandwidth = None
                        self.event_type = None
                        self.time_stamp = None

                        self.member_info = YList(self)
                        self._segment_path = lambda: "protect-bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Protect.ProtectBundles.ProtectBundle.ProtectBundleItem, ['bundle_interface_handle', 'interface_up', 'registered', 'slow_path_up', 'slow_path_trigger', 'minimum_active_links', 'minimum_bandwidth', 'event_type', 'time_stamp'], name, value)


                    class MemberInfo(Entity):
                        """
                        Information about the members
                        
                        .. attribute:: interface_handle
                        
                        	Member's interface handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: underlying_link_id
                        
                        	Member's underlying link ID
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: link_order_number
                        
                        	Member's link order number
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: bandwidth
                        
                        	Member's bandwidth
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: node
                        
                        	Member's node ID
                        	**type**\: str
                        
                        	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                        
                        .. attribute:: active
                        
                        	Member is active within its bundle
                        	**type**\: bool
                        
                        .. attribute:: notification_received
                        
                        	Received a notification on the member
                        	**type**\: bool
                        
                        .. attribute:: slow_path_up
                        
                        	Member is up in the slow path
                        	**type**\: bool
                        
                        .. attribute:: time_stamp
                        
                        	Last event for the member
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Protect.ProtectBundles.ProtectBundle.ProtectBundleItem.MemberInfo, self).__init__()

                            self.yang_name = "member-info"
                            self.yang_parent_name = "protect-bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                ('underlying_link_id', YLeaf(YType.uint16, 'underlying-link-id')),
                                ('link_order_number', YLeaf(YType.uint16, 'link-order-number')),
                                ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                                ('node', YLeaf(YType.str, 'node')),
                                ('active', YLeaf(YType.boolean, 'active')),
                                ('notification_received', YLeaf(YType.boolean, 'notification-received')),
                                ('slow_path_up', YLeaf(YType.boolean, 'slow-path-up')),
                                ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                            ])
                            self.interface_handle = None
                            self.underlying_link_id = None
                            self.link_order_number = None
                            self.bandwidth = None
                            self.node = None
                            self.active = None
                            self.notification_received = None
                            self.slow_path_up = None
                            self.time_stamp = None
                            self._segment_path = lambda: "member-info"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Protect.ProtectBundles.ProtectBundle.ProtectBundleItem.MemberInfo, ['interface_handle', 'underlying_link_id', 'link_order_number', 'bandwidth', 'node', 'active', 'notification_received', 'slow_path_up', 'time_stamp'], name, value)


    class MlacpBrief(Entity):
        """
        mLACP Information for Interchassis Groups and
        bundles
        
        .. attribute:: mlacp_bundle_briefs
        
        	Bundle interfaces with brief mLACP information
        	**type**\:  :py:class:`MlacpBundleBriefs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs>`
        
        .. attribute:: mlacp_brief_iccp_groups
        
        	ICCP Groups with brief mLACP information
        	**type**\:  :py:class:`MlacpBriefIccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.MlacpBrief, self).__init__()

            self.yang_name = "mlacp-brief"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("mlacp-bundle-briefs", ("mlacp_bundle_briefs", BundleInformation.MlacpBrief.MlacpBundleBriefs)), ("mlacp-brief-iccp-groups", ("mlacp_brief_iccp_groups", BundleInformation.MlacpBrief.MlacpBriefIccpGroups))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.mlacp_bundle_briefs = BundleInformation.MlacpBrief.MlacpBundleBriefs()
            self.mlacp_bundle_briefs.parent = self
            self._children_name_map["mlacp_bundle_briefs"] = "mlacp-bundle-briefs"
            self._children_yang_names.add("mlacp-bundle-briefs")

            self.mlacp_brief_iccp_groups = BundleInformation.MlacpBrief.MlacpBriefIccpGroups()
            self.mlacp_brief_iccp_groups.parent = self
            self._children_name_map["mlacp_brief_iccp_groups"] = "mlacp-brief-iccp-groups"
            self._children_yang_names.add("mlacp-brief-iccp-groups")
            self._segment_path = lambda: "mlacp-brief"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class MlacpBundleBriefs(Entity):
            """
            Bundle interfaces with brief mLACP information
            
            .. attribute:: mlacp_bundle_brief
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`MlacpBundleBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpBrief.MlacpBundleBriefs, self).__init__()

                self.yang_name = "mlacp-bundle-briefs"
                self.yang_parent_name = "mlacp-brief"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("mlacp-bundle-brief", ("mlacp_bundle_brief", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief))])
                self._leafs = OrderedDict()

                self.mlacp_bundle_brief = YList(self)
                self._segment_path = lambda: "mlacp-bundle-briefs"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-brief/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs, [], name, value)


            class MlacpBundleBrief(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: mlacp_bundle_item_brief
                
                	Data for this item
                	**type**\:  :py:class:`MlacpBundleItemBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief, self).__init__()

                    self.yang_name = "mlacp-bundle-brief"
                    self.yang_parent_name = "mlacp-bundle-briefs"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("mlacp-bundle-item-brief", ("mlacp_bundle_item_brief", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.mlacp_bundle_item_brief = BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief()
                    self.mlacp_bundle_item_brief.parent = self
                    self._children_name_map["mlacp_bundle_item_brief"] = "mlacp-bundle-item-brief"
                    self._children_yang_names.add("mlacp-bundle-item-brief")
                    self._segment_path = lambda: "mlacp-bundle-brief" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-brief/mlacp-bundle-briefs/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief, ['bundle_interface'], name, value)


                class MlacpBundleItemBrief(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: mlacp_data
                    
                    	mLACP data for multiple ICCP Groups
                    	**type**\: list of  		 :py:class:`MlacpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief, self).__init__()

                        self.yang_name = "mlacp-bundle-item-brief"
                        self.yang_parent_name = "mlacp-bundle-brief"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("mlacp-data", ("mlacp_data", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData))])
                        self._leafs = OrderedDict()

                        self.mlacp_data = YList(self)
                        self._segment_path = lambda: "mlacp-bundle-item-brief"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief, [], name, value)


                    class MlacpData(Entity):
                        """
                        mLACP data for multiple ICCP Groups
                        
                        .. attribute:: iccp_group_data
                        
                        	ICCP Group information
                        	**type**\:  :py:class:`IccpGroupData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData>`
                        
                        .. attribute:: bundle_data
                        
                        	Bundle information
                        	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData, self).__init__()

                            self.yang_name = "mlacp-data"
                            self.yang_parent_name = "mlacp-bundle-item-brief"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("iccp-group-data", ("iccp_group_data", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData))])
                            self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData))])
                            self._leafs = OrderedDict()

                            self.iccp_group_data = BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData()
                            self.iccp_group_data.parent = self
                            self._children_name_map["iccp_group_data"] = "iccp-group-data"
                            self._children_yang_names.add("iccp-group-data")

                            self.bundle_data = YList(self)
                            self._segment_path = lambda: "mlacp-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData, [], name, value)


                        class IccpGroupData(Entity):
                            """
                            ICCP Group information
                            
                            .. attribute:: iccp_group_id
                            
                            	ICCP Group that the mLACP information is for
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: singleton
                            
                            	Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton)
                            	**type**\: bool
                            
                            .. attribute:: connect_timer_running
                            
                            	Time remaining on connect timer innsecs
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: node_data
                            
                            	Information for the IG from the local and peer devices
                            	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData, self).__init__()

                                self.yang_name = "iccp-group-data"
                                self.yang_parent_name = "mlacp-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData))])
                                self._leafs = OrderedDict([
                                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                    ('singleton', YLeaf(YType.boolean, 'singleton')),
                                    ('connect_timer_running', YLeaf(YType.uint64, 'connect-timer-running')),
                                ])
                                self.iccp_group_id = None
                                self.singleton = None
                                self.connect_timer_running = None

                                self.node_data = YList(self)
                                self._segment_path = lambda: "iccp-group-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData, ['iccp_group_id', 'singleton', 'connect_timer_running'], name, value)


                            class NodeData(Entity):
                                """
                                Information for the IG from the local and peer
                                devices
                                
                                .. attribute:: system_id
                                
                                	System ID for the ICCP Group
                                	**type**\:  :py:class:`SystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId>`
                                
                                .. attribute:: mlacp_node_id
                                
                                	mLACP Device ID
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ldp_id
                                
                                	LDP ID of the device
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: version_number
                                
                                	Version of the protocol being used
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: node_state
                                
                                	Node state
                                	**type**\:  :py:class:`BmdMlacpNodeStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpNodeStateEnum>`
                                
                                .. attribute:: iccp_group_state
                                
                                	Node synchronization state
                                	**type**\:  :py:class:`BmdMlacpNodeSyncEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpNodeSyncEnum>`
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData, self).__init__()

                                    self.yang_name = "node-data"
                                    self.yang_parent_name = "iccp-group-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system-id", ("system_id", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                        ('ldp_id', YLeaf(YType.str, 'ldp-id')),
                                        ('version_number', YLeaf(YType.uint32, 'version-number')),
                                        ('node_state', YLeaf(YType.enumeration, 'node-state')),
                                        ('iccp_group_state', YLeaf(YType.enumeration, 'iccp-group-state')),
                                    ])
                                    self.mlacp_node_id = None
                                    self.ldp_id = None
                                    self.version_number = None
                                    self.node_state = None
                                    self.iccp_group_state = None

                                    self.system_id = BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId()
                                    self.system_id.parent = self
                                    self._children_name_map["system_id"] = "system-id"
                                    self._children_yang_names.add("system-id")
                                    self._segment_path = lambda: "node-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData, ['mlacp_node_id', 'ldp_id', 'version_number', 'node_state', 'iccp_group_state'], name, value)


                                class SystemId(Entity):
                                    """
                                    System ID for the ICCP Group
                                    
                                    .. attribute:: system_mac_addr
                                    
                                    	MAC Address used to identify the system
                                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr>`
                                    
                                    .. attribute:: system_prio
                                    
                                    	Priority of the system
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId, self).__init__()

                                        self.yang_name = "system-id"
                                        self.yang_parent_name = "node-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                        ])
                                        self.system_prio = None

                                        self.system_mac_addr = BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr()
                                        self.system_mac_addr.parent = self
                                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                        self._children_yang_names.add("system-mac-addr")
                                        self._segment_path = lambda: "system-id"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId, ['system_prio'], name, value)


                                    class SystemMacAddr(Entity):
                                        """
                                        MAC Address used to identify the system
                                        
                                        .. attribute:: macaddr
                                        
                                        	macaddr
                                        	**type**\: str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr, self).__init__()

                                            self.yang_name = "system-mac-addr"
                                            self.yang_parent_name = "system-id"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                                            ])
                                            self.macaddr = None
                                            self._segment_path = lambda: "system-mac-addr"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr, ['macaddr'], name, value)


                        class BundleData(Entity):
                            """
                            Bundle information
                            
                            .. attribute:: bundle_interface_key
                            
                            	Bundle interface key
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: media_type
                            
                            	The media type of the bundle interface
                            	**type**\:  :py:class:`BundleMedia <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMedia>`
                            
                            .. attribute:: redundancy_object_id
                            
                            	Redundancy Object ID of the bundle
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: mlacp_bundle_data
                            
                            	mLACP information for the bundle
                            	**type**\: list of  		 :py:class:`MlacpBundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpBundleData>`
                            
                            .. attribute:: mlacp_member_data
                            
                            	mLACP information for the member
                            	**type**\: list of  		 :py:class:`MlacpMemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpMemberData>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData, self).__init__()

                                self.yang_name = "bundle-data"
                                self.yang_parent_name = "mlacp-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("mlacp-bundle-data", ("mlacp_bundle_data", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpBundleData)), ("mlacp-member-data", ("mlacp_member_data", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpMemberData))])
                                self._leafs = OrderedDict([
                                    ('bundle_interface_key', YLeaf(YType.uint16, 'bundle-interface-key')),
                                    ('media_type', YLeaf(YType.enumeration, 'media-type')),
                                    ('redundancy_object_id', YLeaf(YType.uint64, 'redundancy-object-id')),
                                ])
                                self.bundle_interface_key = None
                                self.media_type = None
                                self.redundancy_object_id = None

                                self.mlacp_bundle_data = YList(self)
                                self.mlacp_member_data = YList(self)
                                self._segment_path = lambda: "bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData, ['bundle_interface_key', 'media_type', 'redundancy_object_id'], name, value)


                            class MlacpBundleData(Entity):
                                """
                                mLACP information for the bundle
                                
                                .. attribute:: mac_address
                                
                                	Bundle MAC address
                                	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpBundleData.MacAddress>`
                                
                                .. attribute:: bundle_name
                                
                                	Bundle name
                                	**type**\: str
                                
                                .. attribute:: mlacp_node_id
                                
                                	mLACP Device ID
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: aggregator_id
                                
                                	Bundle aggregrator ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: bundle_state
                                
                                	Bundle state
                                	**type**\:  :py:class:`BmdMlacpBdlStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpBdlStateEnum>`
                                
                                .. attribute:: port_priority
                                
                                	Bundle port priority
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpBundleData, self).__init__()

                                    self.yang_name = "mlacp-bundle-data"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpBundleData.MacAddress))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                        ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                        ('aggregator_id', YLeaf(YType.uint16, 'aggregator-id')),
                                        ('bundle_state', YLeaf(YType.enumeration, 'bundle-state')),
                                        ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                                    ])
                                    self.bundle_name = None
                                    self.mlacp_node_id = None
                                    self.aggregator_id = None
                                    self.bundle_state = None
                                    self.port_priority = None

                                    self.mac_address = BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpBundleData.MacAddress()
                                    self.mac_address.parent = self
                                    self._children_name_map["mac_address"] = "mac-address"
                                    self._children_yang_names.add("mac-address")
                                    self._segment_path = lambda: "mlacp-bundle-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpBundleData, ['bundle_name', 'mlacp_node_id', 'aggregator_id', 'bundle_state', 'port_priority'], name, value)


                                class MacAddress(Entity):
                                    """
                                    Bundle MAC address
                                    
                                    .. attribute:: address
                                    
                                    	MAC address
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpBundleData.MacAddress, self).__init__()

                                        self.yang_name = "mac-address"
                                        self.yang_parent_name = "mlacp-bundle-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('address', YLeaf(YType.str, 'address')),
                                        ])
                                        self.address = None
                                        self._segment_path = lambda: "mac-address"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpBundleData.MacAddress, ['address'], name, value)


                            class MlacpMemberData(Entity):
                                """
                                mLACP information for the member
                                
                                .. attribute:: port_name
                                
                                	Port Name
                                	**type**\: str
                                
                                .. attribute:: interface_handle
                                
                                	Member's interface handle (local device's members only)
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: mlacp_node_id
                                
                                	mLACP Device ID
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: port_number
                                
                                	Port number of the member
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: operational_priority
                                
                                	Operational priority of the member in the bundle
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: configured_priority
                                
                                	Configured priority of the member in the bundle
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: member_state
                                
                                	Member state
                                	**type**\:  :py:class:`BmdMlacpMbrStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpMbrStateEnum>`
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpMemberData, self).__init__()

                                    self.yang_name = "mlacp-member-data"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('port_name', YLeaf(YType.str, 'port-name')),
                                        ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                        ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                        ('port_number', YLeaf(YType.uint16, 'port-number')),
                                        ('operational_priority', YLeaf(YType.uint16, 'operational-priority')),
                                        ('configured_priority', YLeaf(YType.uint16, 'configured-priority')),
                                        ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                    ])
                                    self.port_name = None
                                    self.interface_handle = None
                                    self.mlacp_node_id = None
                                    self.port_number = None
                                    self.operational_priority = None
                                    self.configured_priority = None
                                    self.member_state = None
                                    self._segment_path = lambda: "mlacp-member-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBrief.MlacpBundleBriefs.MlacpBundleBrief.MlacpBundleItemBrief.MlacpData.BundleData.MlacpMemberData, ['port_name', 'interface_handle', 'mlacp_node_id', 'port_number', 'operational_priority', 'configured_priority', 'member_state'], name, value)


        class MlacpBriefIccpGroups(Entity):
            """
            ICCP Groups with brief mLACP information
            
            .. attribute:: mlacp_brief_iccp_group
            
            	ICCP Group ID
            	**type**\: list of  		 :py:class:`MlacpBriefIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups, self).__init__()

                self.yang_name = "mlacp-brief-iccp-groups"
                self.yang_parent_name = "mlacp-brief"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("mlacp-brief-iccp-group", ("mlacp_brief_iccp_group", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup))])
                self._leafs = OrderedDict()

                self.mlacp_brief_iccp_group = YList(self)
                self._segment_path = lambda: "mlacp-brief-iccp-groups"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-brief/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups, [], name, value)


            class MlacpBriefIccpGroup(Entity):
                """
                ICCP Group ID
                
                .. attribute:: iccp_group  (key)
                
                	ICCP Group ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: mlacp_brief_iccp_group_item
                
                	Data for this item
                	**type**\:  :py:class:`MlacpBriefIccpGroupItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup, self).__init__()

                    self.yang_name = "mlacp-brief-iccp-group"
                    self.yang_parent_name = "mlacp-brief-iccp-groups"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['iccp_group']
                    self._child_container_classes = OrderedDict([("mlacp-brief-iccp-group-item", ("mlacp_brief_iccp_group_item", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', YLeaf(YType.uint32, 'iccp-group')),
                    ])
                    self.iccp_group = None

                    self.mlacp_brief_iccp_group_item = BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem()
                    self.mlacp_brief_iccp_group_item.parent = self
                    self._children_name_map["mlacp_brief_iccp_group_item"] = "mlacp-brief-iccp-group-item"
                    self._children_yang_names.add("mlacp-brief-iccp-group-item")
                    self._segment_path = lambda: "mlacp-brief-iccp-group" + "[iccp-group='" + str(self.iccp_group) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-brief/mlacp-brief-iccp-groups/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup, ['iccp_group'], name, value)


                class MlacpBriefIccpGroupItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: iccp_group_data
                    
                    	ICCP Group information
                    	**type**\:  :py:class:`IccpGroupData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData>`
                    
                    .. attribute:: bundle_data
                    
                    	Bundle information
                    	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem, self).__init__()

                        self.yang_name = "mlacp-brief-iccp-group-item"
                        self.yang_parent_name = "mlacp-brief-iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("iccp-group-data", ("iccp_group_data", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData))])
                        self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData))])
                        self._leafs = OrderedDict()

                        self.iccp_group_data = BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData()
                        self.iccp_group_data.parent = self
                        self._children_name_map["iccp_group_data"] = "iccp-group-data"
                        self._children_yang_names.add("iccp-group-data")

                        self.bundle_data = YList(self)
                        self._segment_path = lambda: "mlacp-brief-iccp-group-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem, [], name, value)


                    class IccpGroupData(Entity):
                        """
                        ICCP Group information
                        
                        .. attribute:: iccp_group_id
                        
                        	ICCP Group that the mLACP information is for
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: singleton
                        
                        	Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton)
                        	**type**\: bool
                        
                        .. attribute:: connect_timer_running
                        
                        	Time remaining on connect timer innsecs
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: node_data
                        
                        	Information for the IG from the local and peer devices
                        	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData, self).__init__()

                            self.yang_name = "iccp-group-data"
                            self.yang_parent_name = "mlacp-brief-iccp-group-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData))])
                            self._leafs = OrderedDict([
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ('singleton', YLeaf(YType.boolean, 'singleton')),
                                ('connect_timer_running', YLeaf(YType.uint64, 'connect-timer-running')),
                            ])
                            self.iccp_group_id = None
                            self.singleton = None
                            self.connect_timer_running = None

                            self.node_data = YList(self)
                            self._segment_path = lambda: "iccp-group-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData, ['iccp_group_id', 'singleton', 'connect_timer_running'], name, value)


                        class NodeData(Entity):
                            """
                            Information for the IG from the local and peer
                            devices
                            
                            .. attribute:: system_id
                            
                            	System ID for the ICCP Group
                            	**type**\:  :py:class:`SystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId>`
                            
                            .. attribute:: mlacp_node_id
                            
                            	mLACP Device ID
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ldp_id
                            
                            	LDP ID of the device
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: version_number
                            
                            	Version of the protocol being used
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: node_state
                            
                            	Node state
                            	**type**\:  :py:class:`BmdMlacpNodeStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpNodeStateEnum>`
                            
                            .. attribute:: iccp_group_state
                            
                            	Node synchronization state
                            	**type**\:  :py:class:`BmdMlacpNodeSyncEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpNodeSyncEnum>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData, self).__init__()

                                self.yang_name = "node-data"
                                self.yang_parent_name = "iccp-group-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("system-id", ("system_id", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                    ('ldp_id', YLeaf(YType.str, 'ldp-id')),
                                    ('version_number', YLeaf(YType.uint32, 'version-number')),
                                    ('node_state', YLeaf(YType.enumeration, 'node-state')),
                                    ('iccp_group_state', YLeaf(YType.enumeration, 'iccp-group-state')),
                                ])
                                self.mlacp_node_id = None
                                self.ldp_id = None
                                self.version_number = None
                                self.node_state = None
                                self.iccp_group_state = None

                                self.system_id = BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId()
                                self.system_id.parent = self
                                self._children_name_map["system_id"] = "system-id"
                                self._children_yang_names.add("system-id")
                                self._segment_path = lambda: "node-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData, ['mlacp_node_id', 'ldp_id', 'version_number', 'node_state', 'iccp_group_state'], name, value)


                            class SystemId(Entity):
                                """
                                System ID for the ICCP Group
                                
                                .. attribute:: system_mac_addr
                                
                                	MAC Address used to identify the system
                                	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr>`
                                
                                .. attribute:: system_prio
                                
                                	Priority of the system
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId, self).__init__()

                                    self.yang_name = "system-id"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                    ])
                                    self.system_prio = None

                                    self.system_mac_addr = BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr()
                                    self.system_mac_addr.parent = self
                                    self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                    self._children_yang_names.add("system-mac-addr")
                                    self._segment_path = lambda: "system-id"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId, ['system_prio'], name, value)


                                class SystemMacAddr(Entity):
                                    """
                                    MAC Address used to identify the system
                                    
                                    .. attribute:: macaddr
                                    
                                    	macaddr
                                    	**type**\: str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr, self).__init__()

                                        self.yang_name = "system-mac-addr"
                                        self.yang_parent_name = "system-id"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('macaddr', YLeaf(YType.str, 'macaddr')),
                                        ])
                                        self.macaddr = None
                                        self._segment_path = lambda: "system-mac-addr"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr, ['macaddr'], name, value)


                    class BundleData(Entity):
                        """
                        Bundle information
                        
                        .. attribute:: bundle_interface_key
                        
                        	Bundle interface key
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: media_type
                        
                        	The media type of the bundle interface
                        	**type**\:  :py:class:`BundleMedia <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMedia>`
                        
                        .. attribute:: redundancy_object_id
                        
                        	Redundancy Object ID of the bundle
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: mlacp_bundle_data
                        
                        	mLACP information for the bundle
                        	**type**\: list of  		 :py:class:`MlacpBundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpBundleData>`
                        
                        .. attribute:: mlacp_member_data
                        
                        	mLACP information for the member
                        	**type**\: list of  		 :py:class:`MlacpMemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpMemberData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData, self).__init__()

                            self.yang_name = "bundle-data"
                            self.yang_parent_name = "mlacp-brief-iccp-group-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("mlacp-bundle-data", ("mlacp_bundle_data", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpBundleData)), ("mlacp-member-data", ("mlacp_member_data", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpMemberData))])
                            self._leafs = OrderedDict([
                                ('bundle_interface_key', YLeaf(YType.uint16, 'bundle-interface-key')),
                                ('media_type', YLeaf(YType.enumeration, 'media-type')),
                                ('redundancy_object_id', YLeaf(YType.uint64, 'redundancy-object-id')),
                            ])
                            self.bundle_interface_key = None
                            self.media_type = None
                            self.redundancy_object_id = None

                            self.mlacp_bundle_data = YList(self)
                            self.mlacp_member_data = YList(self)
                            self._segment_path = lambda: "bundle-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData, ['bundle_interface_key', 'media_type', 'redundancy_object_id'], name, value)


                        class MlacpBundleData(Entity):
                            """
                            mLACP information for the bundle
                            
                            .. attribute:: mac_address
                            
                            	Bundle MAC address
                            	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpBundleData.MacAddress>`
                            
                            .. attribute:: bundle_name
                            
                            	Bundle name
                            	**type**\: str
                            
                            .. attribute:: mlacp_node_id
                            
                            	mLACP Device ID
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: aggregator_id
                            
                            	Bundle aggregrator ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: bundle_state
                            
                            	Bundle state
                            	**type**\:  :py:class:`BmdMlacpBdlStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpBdlStateEnum>`
                            
                            .. attribute:: port_priority
                            
                            	Bundle port priority
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpBundleData, self).__init__()

                                self.yang_name = "mlacp-bundle-data"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpBundleData.MacAddress))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                    ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                    ('aggregator_id', YLeaf(YType.uint16, 'aggregator-id')),
                                    ('bundle_state', YLeaf(YType.enumeration, 'bundle-state')),
                                    ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                                ])
                                self.bundle_name = None
                                self.mlacp_node_id = None
                                self.aggregator_id = None
                                self.bundle_state = None
                                self.port_priority = None

                                self.mac_address = BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpBundleData.MacAddress()
                                self.mac_address.parent = self
                                self._children_name_map["mac_address"] = "mac-address"
                                self._children_yang_names.add("mac-address")
                                self._segment_path = lambda: "mlacp-bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpBundleData, ['bundle_name', 'mlacp_node_id', 'aggregator_id', 'bundle_state', 'port_priority'], name, value)


                            class MacAddress(Entity):
                                """
                                Bundle MAC address
                                
                                .. attribute:: address
                                
                                	MAC address
                                	**type**\: str
                                
                                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpBundleData.MacAddress, self).__init__()

                                    self.yang_name = "mac-address"
                                    self.yang_parent_name = "mlacp-bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.str, 'address')),
                                    ])
                                    self.address = None
                                    self._segment_path = lambda: "mac-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpBundleData.MacAddress, ['address'], name, value)


                        class MlacpMemberData(Entity):
                            """
                            mLACP information for the member
                            
                            .. attribute:: port_name
                            
                            	Port Name
                            	**type**\: str
                            
                            .. attribute:: interface_handle
                            
                            	Member's interface handle (local device's members only)
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: mlacp_node_id
                            
                            	mLACP Device ID
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: port_number
                            
                            	Port number of the member
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: operational_priority
                            
                            	Operational priority of the member in the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: configured_priority
                            
                            	Configured priority of the member in the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: member_state
                            
                            	Member state
                            	**type**\:  :py:class:`BmdMlacpMbrStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpMbrStateEnum>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpMemberData, self).__init__()

                                self.yang_name = "mlacp-member-data"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port_name', YLeaf(YType.str, 'port-name')),
                                    ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                    ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                    ('port_number', YLeaf(YType.uint16, 'port-number')),
                                    ('operational_priority', YLeaf(YType.uint16, 'operational-priority')),
                                    ('configured_priority', YLeaf(YType.uint16, 'configured-priority')),
                                    ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                ])
                                self.port_name = None
                                self.interface_handle = None
                                self.mlacp_node_id = None
                                self.port_number = None
                                self.operational_priority = None
                                self.configured_priority = None
                                self.member_state = None
                                self._segment_path = lambda: "mlacp-member-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpBrief.MlacpBriefIccpGroups.MlacpBriefIccpGroup.MlacpBriefIccpGroupItem.BundleData.MlacpMemberData, ['port_name', 'interface_handle', 'mlacp_node_id', 'port_number', 'operational_priority', 'configured_priority', 'member_state'], name, value)


    class Mlacp(Entity):
        """
        mLACP Information for Interchassis Groups and
        bundles
        
        .. attribute:: mlacp_bundles
        
        	Bundle interfaces with mLACP information
        	**type**\:  :py:class:`MlacpBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles>`
        
        .. attribute:: mlacp_iccp_groups
        
        	ICCP Groups with mLACP information
        	**type**\:  :py:class:`MlacpIccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.Mlacp, self).__init__()

            self.yang_name = "mlacp"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("mlacp-bundles", ("mlacp_bundles", BundleInformation.Mlacp.MlacpBundles)), ("mlacp-iccp-groups", ("mlacp_iccp_groups", BundleInformation.Mlacp.MlacpIccpGroups))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.mlacp_bundles = BundleInformation.Mlacp.MlacpBundles()
            self.mlacp_bundles.parent = self
            self._children_name_map["mlacp_bundles"] = "mlacp-bundles"
            self._children_yang_names.add("mlacp-bundles")

            self.mlacp_iccp_groups = BundleInformation.Mlacp.MlacpIccpGroups()
            self.mlacp_iccp_groups.parent = self
            self._children_name_map["mlacp_iccp_groups"] = "mlacp-iccp-groups"
            self._children_yang_names.add("mlacp-iccp-groups")
            self._segment_path = lambda: "mlacp"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class MlacpBundles(Entity):
            """
            Bundle interfaces with mLACP information
            
            .. attribute:: mlacp_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`MlacpBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.Mlacp.MlacpBundles, self).__init__()

                self.yang_name = "mlacp-bundles"
                self.yang_parent_name = "mlacp"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("mlacp-bundle", ("mlacp_bundle", BundleInformation.Mlacp.MlacpBundles.MlacpBundle))])
                self._leafs = OrderedDict()

                self.mlacp_bundle = YList(self)
                self._segment_path = lambda: "mlacp-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.Mlacp.MlacpBundles, [], name, value)


            class MlacpBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: mlacp_bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`MlacpBundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle, self).__init__()

                    self.yang_name = "mlacp-bundle"
                    self.yang_parent_name = "mlacp-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("mlacp-bundle-item", ("mlacp_bundle_item", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.mlacp_bundle_item = BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem()
                    self.mlacp_bundle_item.parent = self
                    self._children_name_map["mlacp_bundle_item"] = "mlacp-bundle-item"
                    self._children_yang_names.add("mlacp-bundle-item")
                    self._segment_path = lambda: "mlacp-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp/mlacp-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle, ['bundle_interface'], name, value)


                class MlacpBundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: mlacp_data
                    
                    	mLACP data for multiple ICCP Groups
                    	**type**\: list of  		 :py:class:`MlacpData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem, self).__init__()

                        self.yang_name = "mlacp-bundle-item"
                        self.yang_parent_name = "mlacp-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("mlacp-data", ("mlacp_data", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData))])
                        self._leafs = OrderedDict()

                        self.mlacp_data = YList(self)
                        self._segment_path = lambda: "mlacp-bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem, [], name, value)


                    class MlacpData(Entity):
                        """
                        mLACP data for multiple ICCP Groups
                        
                        .. attribute:: iccp_group_data
                        
                        	ICCP Group information
                        	**type**\:  :py:class:`IccpGroupData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData>`
                        
                        .. attribute:: bundle_data
                        
                        	Bundle information
                        	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData, self).__init__()

                            self.yang_name = "mlacp-data"
                            self.yang_parent_name = "mlacp-bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("iccp-group-data", ("iccp_group_data", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData))])
                            self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData))])
                            self._leafs = OrderedDict()

                            self.iccp_group_data = BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData()
                            self.iccp_group_data.parent = self
                            self._children_name_map["iccp_group_data"] = "iccp-group-data"
                            self._children_yang_names.add("iccp-group-data")

                            self.bundle_data = YList(self)
                            self._segment_path = lambda: "mlacp-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData, [], name, value)


                        class IccpGroupData(Entity):
                            """
                            ICCP Group information
                            
                            .. attribute:: iccp_group_id
                            
                            	ICCP Group that the mLACP information is for
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: singleton
                            
                            	Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton)
                            	**type**\: bool
                            
                            .. attribute:: connect_timer_running
                            
                            	Time remaining on connect timer innsecs
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: node_data
                            
                            	Information for the IG from the local and peer devices
                            	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData, self).__init__()

                                self.yang_name = "iccp-group-data"
                                self.yang_parent_name = "mlacp-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData))])
                                self._leafs = OrderedDict([
                                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                    ('singleton', YLeaf(YType.boolean, 'singleton')),
                                    ('connect_timer_running', YLeaf(YType.uint64, 'connect-timer-running')),
                                ])
                                self.iccp_group_id = None
                                self.singleton = None
                                self.connect_timer_running = None

                                self.node_data = YList(self)
                                self._segment_path = lambda: "iccp-group-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData, ['iccp_group_id', 'singleton', 'connect_timer_running'], name, value)


                            class NodeData(Entity):
                                """
                                Information for the IG from the local and peer
                                devices
                                
                                .. attribute:: system_id
                                
                                	System ID for the ICCP Group
                                	**type**\:  :py:class:`SystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId>`
                                
                                .. attribute:: mlacp_node_id
                                
                                	mLACP Device ID
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ldp_id
                                
                                	LDP ID of the device
                                	**type**\: str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                .. attribute:: version_number
                                
                                	Version of the protocol being used
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: node_state
                                
                                	Node state
                                	**type**\:  :py:class:`BmdMlacpNodeStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpNodeStateEnum>`
                                
                                .. attribute:: iccp_group_state
                                
                                	Node synchronization state
                                	**type**\:  :py:class:`BmdMlacpNodeSyncEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpNodeSyncEnum>`
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData, self).__init__()

                                    self.yang_name = "node-data"
                                    self.yang_parent_name = "iccp-group-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system-id", ("system_id", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                        ('ldp_id', YLeaf(YType.str, 'ldp-id')),
                                        ('version_number', YLeaf(YType.uint32, 'version-number')),
                                        ('node_state', YLeaf(YType.enumeration, 'node-state')),
                                        ('iccp_group_state', YLeaf(YType.enumeration, 'iccp-group-state')),
                                    ])
                                    self.mlacp_node_id = None
                                    self.ldp_id = None
                                    self.version_number = None
                                    self.node_state = None
                                    self.iccp_group_state = None

                                    self.system_id = BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId()
                                    self.system_id.parent = self
                                    self._children_name_map["system_id"] = "system-id"
                                    self._children_yang_names.add("system-id")
                                    self._segment_path = lambda: "node-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData, ['mlacp_node_id', 'ldp_id', 'version_number', 'node_state', 'iccp_group_state'], name, value)


                                class SystemId(Entity):
                                    """
                                    System ID for the ICCP Group
                                    
                                    .. attribute:: system_mac_addr
                                    
                                    	MAC Address used to identify the system
                                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr>`
                                    
                                    .. attribute:: system_prio
                                    
                                    	Priority of the system
                                    	**type**\: int
                                    
                                    	**range:** 0..65535
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId, self).__init__()

                                        self.yang_name = "system-id"
                                        self.yang_parent_name = "node-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                        ])
                                        self.system_prio = None

                                        self.system_mac_addr = BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr()
                                        self.system_mac_addr.parent = self
                                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                        self._children_yang_names.add("system-mac-addr")
                                        self._segment_path = lambda: "system-id"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId, ['system_prio'], name, value)


                                    class SystemMacAddr(Entity):
                                        """
                                        MAC Address used to identify the system
                                        
                                        .. attribute:: macaddr
                                        
                                        	macaddr
                                        	**type**\: str
                                        
                                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr, self).__init__()

                                            self.yang_name = "system-mac-addr"
                                            self.yang_parent_name = "system-id"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                                            ])
                                            self.macaddr = None
                                            self._segment_path = lambda: "system-mac-addr"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.IccpGroupData.NodeData.SystemId.SystemMacAddr, ['macaddr'], name, value)


                        class BundleData(Entity):
                            """
                            Bundle information
                            
                            .. attribute:: bundle_interface_key
                            
                            	Bundle interface key
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: media_type
                            
                            	The media type of the bundle interface
                            	**type**\:  :py:class:`BundleMedia <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMedia>`
                            
                            .. attribute:: redundancy_object_id
                            
                            	Redundancy Object ID of the bundle
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: mlacp_bundle_data
                            
                            	mLACP information for the bundle
                            	**type**\: list of  		 :py:class:`MlacpBundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpBundleData>`
                            
                            .. attribute:: mlacp_member_data
                            
                            	mLACP information for the member
                            	**type**\: list of  		 :py:class:`MlacpMemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpMemberData>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData, self).__init__()

                                self.yang_name = "bundle-data"
                                self.yang_parent_name = "mlacp-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("mlacp-bundle-data", ("mlacp_bundle_data", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpBundleData)), ("mlacp-member-data", ("mlacp_member_data", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpMemberData))])
                                self._leafs = OrderedDict([
                                    ('bundle_interface_key', YLeaf(YType.uint16, 'bundle-interface-key')),
                                    ('media_type', YLeaf(YType.enumeration, 'media-type')),
                                    ('redundancy_object_id', YLeaf(YType.uint64, 'redundancy-object-id')),
                                ])
                                self.bundle_interface_key = None
                                self.media_type = None
                                self.redundancy_object_id = None

                                self.mlacp_bundle_data = YList(self)
                                self.mlacp_member_data = YList(self)
                                self._segment_path = lambda: "bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData, ['bundle_interface_key', 'media_type', 'redundancy_object_id'], name, value)


                            class MlacpBundleData(Entity):
                                """
                                mLACP information for the bundle
                                
                                .. attribute:: mac_address
                                
                                	Bundle MAC address
                                	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpBundleData.MacAddress>`
                                
                                .. attribute:: bundle_name
                                
                                	Bundle name
                                	**type**\: str
                                
                                .. attribute:: mlacp_node_id
                                
                                	mLACP Device ID
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: aggregator_id
                                
                                	Bundle aggregrator ID
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: bundle_state
                                
                                	Bundle state
                                	**type**\:  :py:class:`BmdMlacpBdlStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpBdlStateEnum>`
                                
                                .. attribute:: port_priority
                                
                                	Bundle port priority
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpBundleData, self).__init__()

                                    self.yang_name = "mlacp-bundle-data"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpBundleData.MacAddress))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                        ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                        ('aggregator_id', YLeaf(YType.uint16, 'aggregator-id')),
                                        ('bundle_state', YLeaf(YType.enumeration, 'bundle-state')),
                                        ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                                    ])
                                    self.bundle_name = None
                                    self.mlacp_node_id = None
                                    self.aggregator_id = None
                                    self.bundle_state = None
                                    self.port_priority = None

                                    self.mac_address = BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpBundleData.MacAddress()
                                    self.mac_address.parent = self
                                    self._children_name_map["mac_address"] = "mac-address"
                                    self._children_yang_names.add("mac-address")
                                    self._segment_path = lambda: "mlacp-bundle-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpBundleData, ['bundle_name', 'mlacp_node_id', 'aggregator_id', 'bundle_state', 'port_priority'], name, value)


                                class MacAddress(Entity):
                                    """
                                    Bundle MAC address
                                    
                                    .. attribute:: address
                                    
                                    	MAC address
                                    	**type**\: str
                                    
                                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpBundleData.MacAddress, self).__init__()

                                        self.yang_name = "mac-address"
                                        self.yang_parent_name = "mlacp-bundle-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('address', YLeaf(YType.str, 'address')),
                                        ])
                                        self.address = None
                                        self._segment_path = lambda: "mac-address"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpBundleData.MacAddress, ['address'], name, value)


                            class MlacpMemberData(Entity):
                                """
                                mLACP information for the member
                                
                                .. attribute:: port_name
                                
                                	Port Name
                                	**type**\: str
                                
                                .. attribute:: interface_handle
                                
                                	Member's interface handle (local device's members only)
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                .. attribute:: mlacp_node_id
                                
                                	mLACP Device ID
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: port_number
                                
                                	Port number of the member
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: operational_priority
                                
                                	Operational priority of the member in the bundle
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: configured_priority
                                
                                	Configured priority of the member in the bundle
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: member_state
                                
                                	Member state
                                	**type**\:  :py:class:`BmdMlacpMbrStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpMbrStateEnum>`
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpMemberData, self).__init__()

                                    self.yang_name = "mlacp-member-data"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('port_name', YLeaf(YType.str, 'port-name')),
                                        ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                        ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                        ('port_number', YLeaf(YType.uint16, 'port-number')),
                                        ('operational_priority', YLeaf(YType.uint16, 'operational-priority')),
                                        ('configured_priority', YLeaf(YType.uint16, 'configured-priority')),
                                        ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                    ])
                                    self.port_name = None
                                    self.interface_handle = None
                                    self.mlacp_node_id = None
                                    self.port_number = None
                                    self.operational_priority = None
                                    self.configured_priority = None
                                    self.member_state = None
                                    self._segment_path = lambda: "mlacp-member-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Mlacp.MlacpBundles.MlacpBundle.MlacpBundleItem.MlacpData.BundleData.MlacpMemberData, ['port_name', 'interface_handle', 'mlacp_node_id', 'port_number', 'operational_priority', 'configured_priority', 'member_state'], name, value)


        class MlacpIccpGroups(Entity):
            """
            ICCP Groups with mLACP information
            
            .. attribute:: mlacp_iccp_group
            
            	ICCP Group ID
            	**type**\: list of  		 :py:class:`MlacpIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.Mlacp.MlacpIccpGroups, self).__init__()

                self.yang_name = "mlacp-iccp-groups"
                self.yang_parent_name = "mlacp"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("mlacp-iccp-group", ("mlacp_iccp_group", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup))])
                self._leafs = OrderedDict()

                self.mlacp_iccp_group = YList(self)
                self._segment_path = lambda: "mlacp-iccp-groups"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups, [], name, value)


            class MlacpIccpGroup(Entity):
                """
                ICCP Group ID
                
                .. attribute:: iccp_group  (key)
                
                	ICCP Group ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: mlacp_iccp_group_item
                
                	Data for this item
                	**type**\:  :py:class:`MlacpIccpGroupItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup, self).__init__()

                    self.yang_name = "mlacp-iccp-group"
                    self.yang_parent_name = "mlacp-iccp-groups"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['iccp_group']
                    self._child_container_classes = OrderedDict([("mlacp-iccp-group-item", ("mlacp_iccp_group_item", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', YLeaf(YType.uint32, 'iccp-group')),
                    ])
                    self.iccp_group = None

                    self.mlacp_iccp_group_item = BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem()
                    self.mlacp_iccp_group_item.parent = self
                    self._children_name_map["mlacp_iccp_group_item"] = "mlacp-iccp-group-item"
                    self._children_yang_names.add("mlacp-iccp-group-item")
                    self._segment_path = lambda: "mlacp-iccp-group" + "[iccp-group='" + str(self.iccp_group) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp/mlacp-iccp-groups/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup, ['iccp_group'], name, value)


                class MlacpIccpGroupItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: iccp_group_data
                    
                    	ICCP Group information
                    	**type**\:  :py:class:`IccpGroupData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData>`
                    
                    .. attribute:: bundle_data
                    
                    	Bundle information
                    	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem, self).__init__()

                        self.yang_name = "mlacp-iccp-group-item"
                        self.yang_parent_name = "mlacp-iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("iccp-group-data", ("iccp_group_data", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData))])
                        self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData))])
                        self._leafs = OrderedDict()

                        self.iccp_group_data = BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData()
                        self.iccp_group_data.parent = self
                        self._children_name_map["iccp_group_data"] = "iccp-group-data"
                        self._children_yang_names.add("iccp-group-data")

                        self.bundle_data = YList(self)
                        self._segment_path = lambda: "mlacp-iccp-group-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem, [], name, value)


                    class IccpGroupData(Entity):
                        """
                        ICCP Group information
                        
                        .. attribute:: iccp_group_id
                        
                        	ICCP Group that the mLACP information is for
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: singleton
                        
                        	Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton)
                        	**type**\: bool
                        
                        .. attribute:: connect_timer_running
                        
                        	Time remaining on connect timer innsecs
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: node_data
                        
                        	Information for the IG from the local and peer devices
                        	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData, self).__init__()

                            self.yang_name = "iccp-group-data"
                            self.yang_parent_name = "mlacp-iccp-group-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData))])
                            self._leafs = OrderedDict([
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ('singleton', YLeaf(YType.boolean, 'singleton')),
                                ('connect_timer_running', YLeaf(YType.uint64, 'connect-timer-running')),
                            ])
                            self.iccp_group_id = None
                            self.singleton = None
                            self.connect_timer_running = None

                            self.node_data = YList(self)
                            self._segment_path = lambda: "iccp-group-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData, ['iccp_group_id', 'singleton', 'connect_timer_running'], name, value)


                        class NodeData(Entity):
                            """
                            Information for the IG from the local and peer
                            devices
                            
                            .. attribute:: system_id
                            
                            	System ID for the ICCP Group
                            	**type**\:  :py:class:`SystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId>`
                            
                            .. attribute:: mlacp_node_id
                            
                            	mLACP Device ID
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ldp_id
                            
                            	LDP ID of the device
                            	**type**\: str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            .. attribute:: version_number
                            
                            	Version of the protocol being used
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: node_state
                            
                            	Node state
                            	**type**\:  :py:class:`BmdMlacpNodeStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpNodeStateEnum>`
                            
                            .. attribute:: iccp_group_state
                            
                            	Node synchronization state
                            	**type**\:  :py:class:`BmdMlacpNodeSyncEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpNodeSyncEnum>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData, self).__init__()

                                self.yang_name = "node-data"
                                self.yang_parent_name = "iccp-group-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("system-id", ("system_id", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                    ('ldp_id', YLeaf(YType.str, 'ldp-id')),
                                    ('version_number', YLeaf(YType.uint32, 'version-number')),
                                    ('node_state', YLeaf(YType.enumeration, 'node-state')),
                                    ('iccp_group_state', YLeaf(YType.enumeration, 'iccp-group-state')),
                                ])
                                self.mlacp_node_id = None
                                self.ldp_id = None
                                self.version_number = None
                                self.node_state = None
                                self.iccp_group_state = None

                                self.system_id = BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId()
                                self.system_id.parent = self
                                self._children_name_map["system_id"] = "system-id"
                                self._children_yang_names.add("system-id")
                                self._segment_path = lambda: "node-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData, ['mlacp_node_id', 'ldp_id', 'version_number', 'node_state', 'iccp_group_state'], name, value)


                            class SystemId(Entity):
                                """
                                System ID for the ICCP Group
                                
                                .. attribute:: system_mac_addr
                                
                                	MAC Address used to identify the system
                                	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr>`
                                
                                .. attribute:: system_prio
                                
                                	Priority of the system
                                	**type**\: int
                                
                                	**range:** 0..65535
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId, self).__init__()

                                    self.yang_name = "system-id"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                                    ])
                                    self.system_prio = None

                                    self.system_mac_addr = BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr()
                                    self.system_mac_addr.parent = self
                                    self._children_name_map["system_mac_addr"] = "system-mac-addr"
                                    self._children_yang_names.add("system-mac-addr")
                                    self._segment_path = lambda: "system-id"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId, ['system_prio'], name, value)


                                class SystemMacAddr(Entity):
                                    """
                                    MAC Address used to identify the system
                                    
                                    .. attribute:: macaddr
                                    
                                    	macaddr
                                    	**type**\: str
                                    
                                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr, self).__init__()

                                        self.yang_name = "system-mac-addr"
                                        self.yang_parent_name = "system-id"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('macaddr', YLeaf(YType.str, 'macaddr')),
                                        ])
                                        self.macaddr = None
                                        self._segment_path = lambda: "system-mac-addr"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.IccpGroupData.NodeData.SystemId.SystemMacAddr, ['macaddr'], name, value)


                    class BundleData(Entity):
                        """
                        Bundle information
                        
                        .. attribute:: bundle_interface_key
                        
                        	Bundle interface key
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: media_type
                        
                        	The media type of the bundle interface
                        	**type**\:  :py:class:`BundleMedia <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMedia>`
                        
                        .. attribute:: redundancy_object_id
                        
                        	Redundancy Object ID of the bundle
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: mlacp_bundle_data
                        
                        	mLACP information for the bundle
                        	**type**\: list of  		 :py:class:`MlacpBundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpBundleData>`
                        
                        .. attribute:: mlacp_member_data
                        
                        	mLACP information for the member
                        	**type**\: list of  		 :py:class:`MlacpMemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpMemberData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData, self).__init__()

                            self.yang_name = "bundle-data"
                            self.yang_parent_name = "mlacp-iccp-group-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("mlacp-bundle-data", ("mlacp_bundle_data", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpBundleData)), ("mlacp-member-data", ("mlacp_member_data", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpMemberData))])
                            self._leafs = OrderedDict([
                                ('bundle_interface_key', YLeaf(YType.uint16, 'bundle-interface-key')),
                                ('media_type', YLeaf(YType.enumeration, 'media-type')),
                                ('redundancy_object_id', YLeaf(YType.uint64, 'redundancy-object-id')),
                            ])
                            self.bundle_interface_key = None
                            self.media_type = None
                            self.redundancy_object_id = None

                            self.mlacp_bundle_data = YList(self)
                            self.mlacp_member_data = YList(self)
                            self._segment_path = lambda: "bundle-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData, ['bundle_interface_key', 'media_type', 'redundancy_object_id'], name, value)


                        class MlacpBundleData(Entity):
                            """
                            mLACP information for the bundle
                            
                            .. attribute:: mac_address
                            
                            	Bundle MAC address
                            	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpBundleData.MacAddress>`
                            
                            .. attribute:: bundle_name
                            
                            	Bundle name
                            	**type**\: str
                            
                            .. attribute:: mlacp_node_id
                            
                            	mLACP Device ID
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: aggregator_id
                            
                            	Bundle aggregrator ID
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: bundle_state
                            
                            	Bundle state
                            	**type**\:  :py:class:`BmdMlacpBdlStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpBdlStateEnum>`
                            
                            .. attribute:: port_priority
                            
                            	Bundle port priority
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpBundleData, self).__init__()

                                self.yang_name = "mlacp-bundle-data"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpBundleData.MacAddress))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                    ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                    ('aggregator_id', YLeaf(YType.uint16, 'aggregator-id')),
                                    ('bundle_state', YLeaf(YType.enumeration, 'bundle-state')),
                                    ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                                ])
                                self.bundle_name = None
                                self.mlacp_node_id = None
                                self.aggregator_id = None
                                self.bundle_state = None
                                self.port_priority = None

                                self.mac_address = BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpBundleData.MacAddress()
                                self.mac_address.parent = self
                                self._children_name_map["mac_address"] = "mac-address"
                                self._children_yang_names.add("mac-address")
                                self._segment_path = lambda: "mlacp-bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpBundleData, ['bundle_name', 'mlacp_node_id', 'aggregator_id', 'bundle_state', 'port_priority'], name, value)


                            class MacAddress(Entity):
                                """
                                Bundle MAC address
                                
                                .. attribute:: address
                                
                                	MAC address
                                	**type**\: str
                                
                                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpBundleData.MacAddress, self).__init__()

                                    self.yang_name = "mac-address"
                                    self.yang_parent_name = "mlacp-bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('address', YLeaf(YType.str, 'address')),
                                    ])
                                    self.address = None
                                    self._segment_path = lambda: "mac-address"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpBundleData.MacAddress, ['address'], name, value)


                        class MlacpMemberData(Entity):
                            """
                            mLACP information for the member
                            
                            .. attribute:: port_name
                            
                            	Port Name
                            	**type**\: str
                            
                            .. attribute:: interface_handle
                            
                            	Member's interface handle (local device's members only)
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: mlacp_node_id
                            
                            	mLACP Device ID
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: port_number
                            
                            	Port number of the member
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: operational_priority
                            
                            	Operational priority of the member in the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: configured_priority
                            
                            	Configured priority of the member in the bundle
                            	**type**\: int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: member_state
                            
                            	Member state
                            	**type**\:  :py:class:`BmdMlacpMbrStateEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpMbrStateEnum>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpMemberData, self).__init__()

                                self.yang_name = "mlacp-member-data"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port_name', YLeaf(YType.str, 'port-name')),
                                    ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                    ('mlacp_node_id', YLeaf(YType.uint8, 'mlacp-node-id')),
                                    ('port_number', YLeaf(YType.uint16, 'port-number')),
                                    ('operational_priority', YLeaf(YType.uint16, 'operational-priority')),
                                    ('configured_priority', YLeaf(YType.uint16, 'configured-priority')),
                                    ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                ])
                                self.port_name = None
                                self.interface_handle = None
                                self.mlacp_node_id = None
                                self.port_number = None
                                self.operational_priority = None
                                self.configured_priority = None
                                self.member_state = None
                                self._segment_path = lambda: "mlacp-member-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Mlacp.MlacpIccpGroups.MlacpIccpGroup.MlacpIccpGroupItem.BundleData.MlacpMemberData, ['port_name', 'interface_handle', 'mlacp_node_id', 'port_number', 'operational_priority', 'configured_priority', 'member_state'], name, value)


    class MacAllocation(Entity):
        """
        Information about allocated MAC addresses that
        are not in use
        
        .. attribute:: mac_allocation_global
        
        	All MAC addresses that are allocated but currently not in use
        	**type**\:  :py:class:`MacAllocationGlobal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MacAllocation.MacAllocationGlobal>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.MacAllocation, self).__init__()

            self.yang_name = "mac-allocation"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("mac-allocation-global", ("mac_allocation_global", BundleInformation.MacAllocation.MacAllocationGlobal))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.mac_allocation_global = BundleInformation.MacAllocation.MacAllocationGlobal()
            self.mac_allocation_global.parent = self
            self._children_name_map["mac_allocation_global"] = "mac-allocation-global"
            self._children_yang_names.add("mac-allocation-global")
            self._segment_path = lambda: "mac-allocation"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class MacAllocationGlobal(Entity):
            """
            All MAC addresses that are allocated but
            currently not in use
            
            .. attribute:: mac_allocation_global_item
            
            	Data for this item
            	**type**\:  :py:class:`MacAllocationGlobalItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MacAllocation.MacAllocationGlobal.MacAllocationGlobalItem>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MacAllocation.MacAllocationGlobal, self).__init__()

                self.yang_name = "mac-allocation-global"
                self.yang_parent_name = "mac-allocation"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("mac-allocation-global-item", ("mac_allocation_global_item", BundleInformation.MacAllocation.MacAllocationGlobal.MacAllocationGlobalItem))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.mac_allocation_global_item = BundleInformation.MacAllocation.MacAllocationGlobal.MacAllocationGlobalItem()
                self.mac_allocation_global_item.parent = self
                self._children_name_map["mac_allocation_global_item"] = "mac-allocation-global-item"
                self._children_yang_names.add("mac-allocation-global-item")
                self._segment_path = lambda: "mac-allocation-global"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mac-allocation/%s" % self._segment_path()


            class MacAllocationGlobalItem(Entity):
                """
                Data for this item
                
                .. attribute:: mac_address
                
                	MAC addresses allocated but unused
                	**type**\: list of  		 :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MacAllocation.MacAllocationGlobal.MacAllocationGlobalItem.MacAddress>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MacAllocation.MacAllocationGlobal.MacAllocationGlobalItem, self).__init__()

                    self.yang_name = "mac-allocation-global-item"
                    self.yang_parent_name = "mac-allocation-global"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.MacAllocation.MacAllocationGlobal.MacAllocationGlobalItem.MacAddress))])
                    self._leafs = OrderedDict()

                    self.mac_address = YList(self)
                    self._segment_path = lambda: "mac-allocation-global-item"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mac-allocation/mac-allocation-global/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MacAllocation.MacAllocationGlobal.MacAllocationGlobalItem, [], name, value)


                class MacAddress(Entity):
                    """
                    MAC addresses allocated but unused
                    
                    .. attribute:: address
                    
                    	MAC address
                    	**type**\: str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MacAllocation.MacAllocationGlobal.MacAllocationGlobalItem.MacAddress, self).__init__()

                        self.yang_name = "mac-address"
                        self.yang_parent_name = "mac-allocation-global-item"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('address', YLeaf(YType.str, 'address')),
                        ])
                        self.address = None
                        self._segment_path = lambda: "mac-address"
                        self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mac-allocation/mac-allocation-global/mac-allocation-global-item/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MacAllocation.MacAllocationGlobal.MacAllocationGlobalItem.MacAddress, ['address'], name, value)


    class Events(Entity):
        """
        Events information for bundles and members
        
        .. attribute:: events_members
        
        	Member interfaces with events information
        	**type**\:  :py:class:`EventsMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers>`
        
        .. attribute:: events_bundles
        
        	Bundle interfaces with events information
        	**type**\:  :py:class:`EventsBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.Events, self).__init__()

            self.yang_name = "events"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("events-members", ("events_members", BundleInformation.Events.EventsMembers)), ("events-bundles", ("events_bundles", BundleInformation.Events.EventsBundles))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.events_members = BundleInformation.Events.EventsMembers()
            self.events_members.parent = self
            self._children_name_map["events_members"] = "events-members"
            self._children_yang_names.add("events-members")

            self.events_bundles = BundleInformation.Events.EventsBundles()
            self.events_bundles.parent = self
            self._children_name_map["events_bundles"] = "events-bundles"
            self._children_yang_names.add("events-bundles")
            self._segment_path = lambda: "events"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class EventsMembers(Entity):
            """
            Member interfaces with events information
            
            .. attribute:: events_member
            
            	Member interface
            	**type**\: list of  		 :py:class:`EventsMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.Events.EventsMembers, self).__init__()

                self.yang_name = "events-members"
                self.yang_parent_name = "events"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-member", ("events_member", BundleInformation.Events.EventsMembers.EventsMember))])
                self._leafs = OrderedDict()

                self.events_member = YList(self)
                self._segment_path = lambda: "events-members"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.Events.EventsMembers, [], name, value)


            class EventsMember(Entity):
                """
                Member interface
                
                .. attribute:: member_interface  (key)
                
                	Member interface
                	**type**\: str
                
                .. attribute:: events_member_item
                
                	Data for this item
                	**type**\:  :py:class:`EventsMemberItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem>`
                
                .. attribute:: events_member_ancestor
                
                	Data for this item and its parent bundle
                	**type**\:  :py:class:`EventsMemberAncestor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.Events.EventsMembers.EventsMember, self).__init__()

                    self.yang_name = "events-member"
                    self.yang_parent_name = "events-members"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['member_interface']
                    self._child_container_classes = OrderedDict([("events-member-item", ("events_member_item", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem)), ("events-member-ancestor", ("events_member_ancestor", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('member_interface', YLeaf(YType.str, 'member-interface')),
                    ])
                    self.member_interface = None

                    self.events_member_item = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem()
                    self.events_member_item.parent = self
                    self._children_name_map["events_member_item"] = "events-member-item"
                    self._children_yang_names.add("events-member-item")

                    self.events_member_ancestor = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor()
                    self.events_member_ancestor.parent = self
                    self._children_name_map["events_member_ancestor"] = "events-member-ancestor"
                    self._children_yang_names.add("events-member-ancestor")
                    self._segment_path = lambda: "events-member" + "[member-interface='" + str(self.member_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events/events-members/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember, ['member_interface'], name, value)


                class EventsMemberItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem, self).__init__()

                        self.yang_name = "events-member-item"
                        self.yang_parent_name = "events-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-member-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberItem.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                class EventsMemberAncestor(Entity):
                    """
                    Data for this item and its parent bundle
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor, self).__init__()

                        self.yang_name = "events-member-ancestor"
                        self.yang_parent_name = "events-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-member-ancestor"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-member-ancestor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsMembers.EventsMember.EventsMemberAncestor.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


        class EventsBundles(Entity):
            """
            Bundle interfaces with events information
            
            .. attribute:: events_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`EventsBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.Events.EventsBundles, self).__init__()

                self.yang_name = "events-bundles"
                self.yang_parent_name = "events"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-bundle", ("events_bundle", BundleInformation.Events.EventsBundles.EventsBundle))])
                self._leafs = OrderedDict()

                self.events_bundle = YList(self)
                self._segment_path = lambda: "events-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.Events.EventsBundles, [], name, value)


            class EventsBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: events_bundle_ancestor
                
                	Data for this item and its parent bundle
                	**type**\:  :py:class:`EventsBundleAncestor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor>`
                
                .. attribute:: events_bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`EventsBundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem>`
                
                .. attribute:: events_bundle_descendant
                
                	Data for this item and all its members
                	**type**\:  :py:class:`EventsBundleDescendant <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant>`
                
                .. attribute:: events_bundle_children_members
                
                	Children of bundle with events information
                	**type**\:  :py:class:`EventsBundleChildrenMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.Events.EventsBundles.EventsBundle, self).__init__()

                    self.yang_name = "events-bundle"
                    self.yang_parent_name = "events-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("events-bundle-ancestor", ("events_bundle_ancestor", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor)), ("events-bundle-item", ("events_bundle_item", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem)), ("events-bundle-descendant", ("events_bundle_descendant", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant)), ("events-bundle-children-members", ("events_bundle_children_members", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.events_bundle_ancestor = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor()
                    self.events_bundle_ancestor.parent = self
                    self._children_name_map["events_bundle_ancestor"] = "events-bundle-ancestor"
                    self._children_yang_names.add("events-bundle-ancestor")

                    self.events_bundle_item = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem()
                    self.events_bundle_item.parent = self
                    self._children_name_map["events_bundle_item"] = "events-bundle-item"
                    self._children_yang_names.add("events-bundle-item")

                    self.events_bundle_descendant = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant()
                    self.events_bundle_descendant.parent = self
                    self._children_name_map["events_bundle_descendant"] = "events-bundle-descendant"
                    self._children_yang_names.add("events-bundle-descendant")

                    self.events_bundle_children_members = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers()
                    self.events_bundle_children_members.parent = self
                    self._children_name_map["events_bundle_children_members"] = "events-bundle-children-members"
                    self._children_yang_names.add("events-bundle-children-members")
                    self._segment_path = lambda: "events-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events/events-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle, ['bundle_interface'], name, value)


                class EventsBundleAncestor(Entity):
                    """
                    Data for this item and its parent bundle
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor, self).__init__()

                        self.yang_name = "events-bundle-ancestor"
                        self.yang_parent_name = "events-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-bundle-ancestor"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-bundle-ancestor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleAncestor.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                class EventsBundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem, self).__init__()

                        self.yang_name = "events-bundle-item"
                        self.yang_parent_name = "events-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleItem.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                class EventsBundleDescendant(Entity):
                    """
                    Data for this item and all its members
                    
                    .. attribute:: events_item
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`EventsItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant, self).__init__()

                        self.yang_name = "events-bundle-descendant"
                        self.yang_parent_name = "events-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("events-item", ("events_item", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem))])
                        self._leafs = OrderedDict()

                        self.events_item = YList(self)
                        self._segment_path = lambda: "events-bundle-descendant"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant, [], name, value)


                    class EventsItem(Entity):
                        """
                        Event items
                        
                        .. attribute:: item_name
                        
                        	Name for the current item to use
                        	**type**\: str
                        
                        .. attribute:: items
                        
                        	Event items
                        	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem, self).__init__()

                            self.yang_name = "events-item"
                            self.yang_parent_name = "events-bundle-descendant"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items))])
                            self._leafs = OrderedDict([
                                ('item_name', YLeaf(YType.str, 'item-name')),
                            ])
                            self.item_name = None

                            self.items = YList(self)
                            self._segment_path = lambda: "events-item"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem, ['item_name'], name, value)


                        class Items(Entity):
                            """
                            Event items
                            
                            .. attribute:: member_evt_info
                            
                            	Event information for a member
                            	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo>`
                            
                            .. attribute:: bundle_evt_info
                            
                            	Event information for a bundle
                            	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo>`
                            
                            .. attribute:: rg_evt_info
                            
                            	Event information for an RG
                            	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo>`
                            
                            .. attribute:: event_type
                            
                            	EventType
                            	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items, self).__init__()

                                self.yang_name = "items"
                                self.yang_parent_name = "events-item"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('event_type', YLeaf(YType.enumeration, 'event-type')),
                                ])
                                self.event_type = None

                                self.member_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo()
                                self.member_evt_info.parent = self
                                self._children_name_map["member_evt_info"] = "member-evt-info"
                                self._children_yang_names.add("member-evt-info")

                                self.bundle_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo()
                                self.bundle_evt_info.parent = self
                                self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                                self._children_yang_names.add("bundle-evt-info")

                                self.rg_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo()
                                self.rg_evt_info.parent = self
                                self._children_name_map["rg_evt_info"] = "rg-evt-info"
                                self._children_yang_names.add("rg-evt-info")
                                self._segment_path = lambda: "items"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items, ['event_type'], name, value)


                            class MemberEvtInfo(Entity):
                                """
                                Event information for a member
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo.Data>`
                                
                                .. attribute:: member_event_type
                                
                                	Type of event for member
                                	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo, self).__init__()

                                    self.yang_name = "member-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.member_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "member-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "member-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class BundleEvtInfo(Entity):
                                """
                                Event information for a bundle
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo.Data>`
                                
                                .. attribute:: bundle_event_type
                                
                                	Type of event for bundle
                                	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo, self).__init__()

                                    self.yang_name = "bundle-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.bundle_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "bundle-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "bundle-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class RgEvtInfo(Entity):
                                """
                                Event information for an RG
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo.Data>`
                                
                                .. attribute:: rg_event_type
                                
                                	Type of event for RG
                                	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo, self).__init__()

                                    self.yang_name = "rg-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.rg_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "rg-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "rg-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleDescendant.EventsItem.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                class EventsBundleChildrenMembers(Entity):
                    """
                    Children of bundle with events information
                    
                    .. attribute:: events_bundle_children_member
                    
                    	Bundle member item with events information
                    	**type**\: list of  		 :py:class:`EventsBundleChildrenMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers, self).__init__()

                        self.yang_name = "events-bundle-children-members"
                        self.yang_parent_name = "events-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("events-bundle-children-member", ("events_bundle_children_member", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember))])
                        self._leafs = OrderedDict()

                        self.events_bundle_children_member = YList(self)
                        self._segment_path = lambda: "events-bundle-children-members"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers, [], name, value)


                    class EventsBundleChildrenMember(Entity):
                        """
                        Bundle member item with events information
                        
                        .. attribute:: member_interface  (key)
                        
                        	Member interface
                        	**type**\: str
                        
                        .. attribute:: item_name
                        
                        	Name for the current item to use
                        	**type**\: str
                        
                        .. attribute:: items
                        
                        	Event items
                        	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember, self).__init__()

                            self.yang_name = "events-bundle-children-member"
                            self.yang_parent_name = "events-bundle-children-members"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['member_interface']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items))])
                            self._leafs = OrderedDict([
                                ('member_interface', YLeaf(YType.str, 'member-interface')),
                                ('item_name', YLeaf(YType.str, 'item-name')),
                            ])
                            self.member_interface = None
                            self.item_name = None

                            self.items = YList(self)
                            self._segment_path = lambda: "events-bundle-children-member" + "[member-interface='" + str(self.member_interface) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember, ['member_interface', 'item_name'], name, value)


                        class Items(Entity):
                            """
                            Event items
                            
                            .. attribute:: member_evt_info
                            
                            	Event information for a member
                            	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo>`
                            
                            .. attribute:: bundle_evt_info
                            
                            	Event information for a bundle
                            	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo>`
                            
                            .. attribute:: rg_evt_info
                            
                            	Event information for an RG
                            	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo>`
                            
                            .. attribute:: event_type
                            
                            	EventType
                            	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items, self).__init__()

                                self.yang_name = "items"
                                self.yang_parent_name = "events-bundle-children-member"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('event_type', YLeaf(YType.enumeration, 'event-type')),
                                ])
                                self.event_type = None

                                self.member_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo()
                                self.member_evt_info.parent = self
                                self._children_name_map["member_evt_info"] = "member-evt-info"
                                self._children_yang_names.add("member-evt-info")

                                self.bundle_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo()
                                self.bundle_evt_info.parent = self
                                self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                                self._children_yang_names.add("bundle-evt-info")

                                self.rg_evt_info = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo()
                                self.rg_evt_info.parent = self
                                self._children_name_map["rg_evt_info"] = "rg-evt-info"
                                self._children_yang_names.add("rg-evt-info")
                                self._segment_path = lambda: "items"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items, ['event_type'], name, value)


                            class MemberEvtInfo(Entity):
                                """
                                Event information for a member
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo.Data>`
                                
                                .. attribute:: member_event_type
                                
                                	Type of event for member
                                	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo, self).__init__()

                                    self.yang_name = "member-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.member_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "member-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "member-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class BundleEvtInfo(Entity):
                                """
                                Event information for a bundle
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo.Data>`
                                
                                .. attribute:: bundle_event_type
                                
                                	Type of event for bundle
                                	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo, self).__init__()

                                    self.yang_name = "bundle-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.bundle_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "bundle-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "bundle-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class RgEvtInfo(Entity):
                                """
                                Event information for an RG
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo.Data>`
                                
                                .. attribute:: rg_event_type
                                
                                	Type of event for RG
                                	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo, self).__init__()

                                    self.yang_name = "rg-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.rg_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "rg-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "rg-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.Events.EventsBundles.EventsBundle.EventsBundleChildrenMembers.EventsBundleChildrenMember.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


    class EventsBdl(Entity):
        """
        Bundle events information for bundles and
        members
        
        .. attribute:: events_bdl_members
        
        	Member interfaces with bundle events information
        	**type**\:  :py:class:`EventsBdlMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers>`
        
        .. attribute:: events_bdl_bundles
        
        	Bundle interfaces with bundle events information
        	**type**\:  :py:class:`EventsBdlBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles>`
        
        .. attribute:: events_bdl_iccp_groups
        
        	Bundle events for all ICCP Groups
        	**type**\:  :py:class:`EventsBdlIccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.EventsBdl, self).__init__()

            self.yang_name = "events-bdl"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("events-bdl-members", ("events_bdl_members", BundleInformation.EventsBdl.EventsBdlMembers)), ("events-bdl-bundles", ("events_bdl_bundles", BundleInformation.EventsBdl.EventsBdlBundles)), ("events-bdl-iccp-groups", ("events_bdl_iccp_groups", BundleInformation.EventsBdl.EventsBdlIccpGroups))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.events_bdl_members = BundleInformation.EventsBdl.EventsBdlMembers()
            self.events_bdl_members.parent = self
            self._children_name_map["events_bdl_members"] = "events-bdl-members"
            self._children_yang_names.add("events-bdl-members")

            self.events_bdl_bundles = BundleInformation.EventsBdl.EventsBdlBundles()
            self.events_bdl_bundles.parent = self
            self._children_name_map["events_bdl_bundles"] = "events-bdl-bundles"
            self._children_yang_names.add("events-bdl-bundles")

            self.events_bdl_iccp_groups = BundleInformation.EventsBdl.EventsBdlIccpGroups()
            self.events_bdl_iccp_groups.parent = self
            self._children_name_map["events_bdl_iccp_groups"] = "events-bdl-iccp-groups"
            self._children_yang_names.add("events-bdl-iccp-groups")
            self._segment_path = lambda: "events-bdl"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class EventsBdlMembers(Entity):
            """
            Member interfaces with bundle events
            information
            
            .. attribute:: events_bdl_member
            
            	Member interface
            	**type**\: list of  		 :py:class:`EventsBdlMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.EventsBdl.EventsBdlMembers, self).__init__()

                self.yang_name = "events-bdl-members"
                self.yang_parent_name = "events-bdl"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-bdl-member", ("events_bdl_member", BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember))])
                self._leafs = OrderedDict()

                self.events_bdl_member = YList(self)
                self._segment_path = lambda: "events-bdl-members"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-bdl/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers, [], name, value)


            class EventsBdlMember(Entity):
                """
                Member interface
                
                .. attribute:: member_interface  (key)
                
                	Member interface
                	**type**\: str
                
                .. attribute:: events_bdl_member_ancestor
                
                	Data for this item and its parent bundle
                	**type**\:  :py:class:`EventsBdlMemberAncestor <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember, self).__init__()

                    self.yang_name = "events-bdl-member"
                    self.yang_parent_name = "events-bdl-members"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['member_interface']
                    self._child_container_classes = OrderedDict([("events-bdl-member-ancestor", ("events_bdl_member_ancestor", BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('member_interface', YLeaf(YType.str, 'member-interface')),
                    ])
                    self.member_interface = None

                    self.events_bdl_member_ancestor = BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor()
                    self.events_bdl_member_ancestor.parent = self
                    self._children_name_map["events_bdl_member_ancestor"] = "events-bdl-member-ancestor"
                    self._children_yang_names.add("events-bdl-member-ancestor")
                    self._segment_path = lambda: "events-bdl-member" + "[member-interface='" + str(self.member_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-bdl/events-bdl-members/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember, ['member_interface'], name, value)


                class EventsBdlMemberAncestor(Entity):
                    """
                    Data for this item and its parent bundle
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor, self).__init__()

                        self.yang_name = "events-bdl-member-ancestor"
                        self.yang_parent_name = "events-bdl-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-bdl-member-ancestor"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-bdl-member-ancestor"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlMembers.EventsBdlMember.EventsBdlMemberAncestor.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


        class EventsBdlBundles(Entity):
            """
            Bundle interfaces with bundle events
            information
            
            .. attribute:: events_bdl_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`EventsBdlBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.EventsBdl.EventsBdlBundles, self).__init__()

                self.yang_name = "events-bdl-bundles"
                self.yang_parent_name = "events-bdl"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-bdl-bundle", ("events_bdl_bundle", BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle))])
                self._leafs = OrderedDict()

                self.events_bdl_bundle = YList(self)
                self._segment_path = lambda: "events-bdl-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-bdl/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles, [], name, value)


            class EventsBdlBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: events_bdl_bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`EventsBdlBundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle, self).__init__()

                    self.yang_name = "events-bdl-bundle"
                    self.yang_parent_name = "events-bdl-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("events-bdl-bundle-item", ("events_bdl_bundle_item", BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.events_bdl_bundle_item = BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem()
                    self.events_bdl_bundle_item.parent = self
                    self._children_name_map["events_bdl_bundle_item"] = "events-bdl-bundle-item"
                    self._children_yang_names.add("events-bdl-bundle-item")
                    self._segment_path = lambda: "events-bdl-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-bdl/events-bdl-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle, ['bundle_interface'], name, value)


                class EventsBdlBundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem, self).__init__()

                        self.yang_name = "events-bdl-bundle-item"
                        self.yang_parent_name = "events-bdl-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-bdl-bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-bdl-bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlBundles.EventsBdlBundle.EventsBdlBundleItem.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


        class EventsBdlIccpGroups(Entity):
            """
            Bundle events for all ICCP Groups
            
            .. attribute:: events_bdl_iccp_group
            
            	ICCP Group ID
            	**type**\: list of  		 :py:class:`EventsBdlIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.EventsBdl.EventsBdlIccpGroups, self).__init__()

                self.yang_name = "events-bdl-iccp-groups"
                self.yang_parent_name = "events-bdl"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-bdl-iccp-group", ("events_bdl_iccp_group", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup))])
                self._leafs = OrderedDict()

                self.events_bdl_iccp_group = YList(self)
                self._segment_path = lambda: "events-bdl-iccp-groups"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-bdl/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups, [], name, value)


            class EventsBdlIccpGroup(Entity):
                """
                ICCP Group ID
                
                .. attribute:: iccp_group  (key)
                
                	ICCP Group ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: events_bdl_bundle_descendant_iccp_group
                
                	Data for this item and all its members
                	**type**\:  :py:class:`EventsBdlBundleDescendantIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup, self).__init__()

                    self.yang_name = "events-bdl-iccp-group"
                    self.yang_parent_name = "events-bdl-iccp-groups"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['iccp_group']
                    self._child_container_classes = OrderedDict([("events-bdl-bundle-descendant-iccp-group", ("events_bdl_bundle_descendant_iccp_group", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', YLeaf(YType.uint32, 'iccp-group')),
                    ])
                    self.iccp_group = None

                    self.events_bdl_bundle_descendant_iccp_group = BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup()
                    self.events_bdl_bundle_descendant_iccp_group.parent = self
                    self._children_name_map["events_bdl_bundle_descendant_iccp_group"] = "events-bdl-bundle-descendant-iccp-group"
                    self._children_yang_names.add("events-bdl-bundle-descendant-iccp-group")
                    self._segment_path = lambda: "events-bdl-iccp-group" + "[iccp-group='" + str(self.iccp_group) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-bdl/events-bdl-iccp-groups/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup, ['iccp_group'], name, value)


                class EventsBdlBundleDescendantIccpGroup(Entity):
                    """
                    Data for this item and all its members
                    
                    .. attribute:: events_item
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`EventsItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup, self).__init__()

                        self.yang_name = "events-bdl-bundle-descendant-iccp-group"
                        self.yang_parent_name = "events-bdl-iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("events-item", ("events_item", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem))])
                        self._leafs = OrderedDict()

                        self.events_item = YList(self)
                        self._segment_path = lambda: "events-bdl-bundle-descendant-iccp-group"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup, [], name, value)


                    class EventsItem(Entity):
                        """
                        Event items
                        
                        .. attribute:: item_name
                        
                        	Name for the current item to use
                        	**type**\: str
                        
                        .. attribute:: items
                        
                        	Event items
                        	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem, self).__init__()

                            self.yang_name = "events-item"
                            self.yang_parent_name = "events-bdl-bundle-descendant-iccp-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items))])
                            self._leafs = OrderedDict([
                                ('item_name', YLeaf(YType.str, 'item-name')),
                            ])
                            self.item_name = None

                            self.items = YList(self)
                            self._segment_path = lambda: "events-item"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem, ['item_name'], name, value)


                        class Items(Entity):
                            """
                            Event items
                            
                            .. attribute:: member_evt_info
                            
                            	Event information for a member
                            	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo>`
                            
                            .. attribute:: bundle_evt_info
                            
                            	Event information for a bundle
                            	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo>`
                            
                            .. attribute:: rg_evt_info
                            
                            	Event information for an RG
                            	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo>`
                            
                            .. attribute:: event_type
                            
                            	EventType
                            	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items, self).__init__()

                                self.yang_name = "items"
                                self.yang_parent_name = "events-item"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('event_type', YLeaf(YType.enumeration, 'event-type')),
                                ])
                                self.event_type = None

                                self.member_evt_info = BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo()
                                self.member_evt_info.parent = self
                                self._children_name_map["member_evt_info"] = "member-evt-info"
                                self._children_yang_names.add("member-evt-info")

                                self.bundle_evt_info = BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo()
                                self.bundle_evt_info.parent = self
                                self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                                self._children_yang_names.add("bundle-evt-info")

                                self.rg_evt_info = BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo()
                                self.rg_evt_info.parent = self
                                self._children_name_map["rg_evt_info"] = "rg-evt-info"
                                self._children_yang_names.add("rg-evt-info")
                                self._segment_path = lambda: "items"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items, ['event_type'], name, value)


                            class MemberEvtInfo(Entity):
                                """
                                Event information for a member
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data>`
                                
                                .. attribute:: member_event_type
                                
                                	Type of event for member
                                	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo, self).__init__()

                                    self.yang_name = "member-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.member_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "member-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "member-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class BundleEvtInfo(Entity):
                                """
                                Event information for a bundle
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data>`
                                
                                .. attribute:: bundle_event_type
                                
                                	Type of event for bundle
                                	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo, self).__init__()

                                    self.yang_name = "bundle-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.bundle_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "bundle-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "bundle-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class RgEvtInfo(Entity):
                                """
                                Event information for an RG
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data>`
                                
                                .. attribute:: rg_event_type
                                
                                	Type of event for RG
                                	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo, self).__init__()

                                    self.yang_name = "rg-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.rg_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "rg-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "rg-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsBdl.EventsBdlIccpGroups.EventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


    class BundleBriefs(Entity):
        """
        Bundle interfaces with common bundle information
        
        .. attribute:: bundle_brief
        
        	Bundle interface
        	**type**\: list of  		 :py:class:`BundleBrief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BundleBriefs.BundleBrief>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.BundleBriefs, self).__init__()

            self.yang_name = "bundle-briefs"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("bundle-brief", ("bundle_brief", BundleInformation.BundleBriefs.BundleBrief))])
            self._leafs = OrderedDict()

            self.bundle_brief = YList(self)
            self._segment_path = lambda: "bundle-briefs"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(BundleInformation.BundleBriefs, [], name, value)


        class BundleBrief(Entity):
            """
            Bundle interface
            
            .. attribute:: bundle_interface  (key)
            
            	Bundle interface
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: bundle_brief_item
            
            	Data for this item
            	**type**\:  :py:class:`BundleBriefItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.BundleBriefs.BundleBrief, self).__init__()

                self.yang_name = "bundle-brief"
                self.yang_parent_name = "bundle-briefs"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['bundle_interface']
                self._child_container_classes = OrderedDict([("bundle-brief-item", ("bundle_brief_item", BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                ])
                self.bundle_interface = None

                self.bundle_brief_item = BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem()
                self.bundle_brief_item.parent = self
                self._children_name_map["bundle_brief_item"] = "bundle-brief-item"
                self._children_yang_names.add("bundle-brief-item")
                self._segment_path = lambda: "bundle-brief" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/bundle-briefs/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.BundleBriefs.BundleBrief, ['bundle_interface'], name, value)


            class BundleBriefItem(Entity):
                """
                Data for this item
                
                .. attribute:: mac_address
                
                	MAC address of this member
                	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.MacAddress>`
                
                .. attribute:: bundle_interface_name
                
                	Bundle interface name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: available_bandwidth
                
                	Bandwidth available to the bundle interface (kbps)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: kbit/s
                
                .. attribute:: effective_bandwidth
                
                	Effective bandwidth on the bundle interface (kbps)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: kbit/s
                
                .. attribute:: configured_bandwidth
                
                	Bandwidth configured on the bundle interface (kbps)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: kbit/s
                
                .. attribute:: minimum_active_links
                
                	Minimum number of active links for bundle to go up
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: maximum_active_links
                
                	Maximum number of active links in the bundle
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: maximum_active_links_source
                
                	Source of maximum active links value
                	**type**\:  :py:class:`BmWhichSystem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmWhichSystem>`
                
                .. attribute:: minimum_bandwidth
                
                	Minimum bundle bandwidth for bundle to go up (kbps)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: kbit/s
                
                .. attribute:: primary_member
                
                	Primary bundle member (no longer applicable)
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: bundle_status
                
                	The state of the bundle
                	**type**\:  :py:class:`BmBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlState>`
                
                .. attribute:: active_member_count
                
                	The number of active local members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: standby_member_count
                
                	The number of standby local members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: configured_member_count
                
                	The number of configured local members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: mac_source
                
                	The source of the MAC Address
                	**type**\:  :py:class:`BmBdlMacSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlMacSource>`
                
                .. attribute:: mac_source_member
                
                	The name of the member that supplied the MAC address
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: inter_chassis
                
                	Indicates if this bundle is operating as an inter\-chassis link (1 = I\-C link, 0 = normal)
                	**type**\: bool
                
                .. attribute:: is_active
                
                	Indicates the active/standby redundancy state of the device for the bundle
                	**type**\: bool
                
                .. attribute:: lacp_status
                
                	The status of the LACP feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: mlacp_status
                
                	The status of the mLACP feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: ipv4bfd_status
                
                	The status of the BFD (IPv4) feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: link_order_status
                
                	The status of the link order signaling feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: ipv6bfd_status
                
                	The status of the BFD (IPv6) feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: load_balance_hash_type
                
                	The type of hash to use for load balancing
                	**type**\: str
                
                .. attribute:: load_balance_locality_threshold
                
                	The number of links required per rack for localized load balancing
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: suppression_timer
                
                	Timer for suppressing bundle state flaps
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: wait_while_timer
                
                	The wait while time used for member ports
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: collector_max_delay
                
                	Collector Max Delay
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: cisco_extensions
                
                	The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled)
                	**type**\: bool
                
                .. attribute:: lacp_nonrevertive
                
                	The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled)
                	**type**\: bool
                
                .. attribute:: iccp_group_id
                
                	ICCP Group that the bundle is configured to
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: active_foreign_member_count
                
                	The number of active foreign members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: configured_foreign_member_count
                
                	The number of configured local members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: switchover_type
                
                	How a switchover of the bundle from this device will occur
                	**type**\:  :py:class:`BmdMlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpSwitchover>`
                
                .. attribute:: maximize_threshold_value_links
                
                	Attempt to maximize the bundle if links are below this value
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: maximize_threshold_value_band_width
                
                	Attempt to maximize the bundle if bandwidth is below this value
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: mlacp_mode
                
                	Indicates the mode of the device for the bundle
                	**type**\:  :py:class:`BundleMlacpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMlacpMode>`
                
                .. attribute:: recovery_delay
                
                	Number of seconds to wait before becoming active after recovering from a failure
                	**type**\: int
                
                	**range:** 0..65535
                
                	**units**\: second
                
                .. attribute:: singleton
                
                	Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not singleton)
                	**type**\: bool
                
                .. attribute:: bfd_config
                
                	Configuration values for BFD on bundle members
                	**type**\: list of  		 :py:class:`BfdConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.BfdConfig>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem, self).__init__()

                    self.yang_name = "bundle-brief-item"
                    self.yang_parent_name = "bundle-brief"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("mac-address", ("mac_address", BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.MacAddress))])
                    self._child_list_classes = OrderedDict([("bfd-config", ("bfd_config", BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.BfdConfig))])
                    self._leafs = OrderedDict([
                        ('bundle_interface_name', YLeaf(YType.str, 'bundle-interface-name')),
                        ('available_bandwidth', YLeaf(YType.uint32, 'available-bandwidth')),
                        ('effective_bandwidth', YLeaf(YType.uint32, 'effective-bandwidth')),
                        ('configured_bandwidth', YLeaf(YType.uint32, 'configured-bandwidth')),
                        ('minimum_active_links', YLeaf(YType.uint8, 'minimum-active-links')),
                        ('maximum_active_links', YLeaf(YType.uint8, 'maximum-active-links')),
                        ('maximum_active_links_source', YLeaf(YType.enumeration, 'maximum-active-links-source')),
                        ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                        ('primary_member', YLeaf(YType.str, 'primary-member')),
                        ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                        ('active_member_count', YLeaf(YType.uint16, 'active-member-count')),
                        ('standby_member_count', YLeaf(YType.uint16, 'standby-member-count')),
                        ('configured_member_count', YLeaf(YType.uint16, 'configured-member-count')),
                        ('mac_source', YLeaf(YType.enumeration, 'mac-source')),
                        ('mac_source_member', YLeaf(YType.str, 'mac-source-member')),
                        ('inter_chassis', YLeaf(YType.boolean, 'inter-chassis')),
                        ('is_active', YLeaf(YType.boolean, 'is-active')),
                        ('lacp_status', YLeaf(YType.enumeration, 'lacp-status')),
                        ('mlacp_status', YLeaf(YType.enumeration, 'mlacp-status')),
                        ('ipv4bfd_status', YLeaf(YType.enumeration, 'ipv4bfd-status')),
                        ('link_order_status', YLeaf(YType.enumeration, 'link-order-status')),
                        ('ipv6bfd_status', YLeaf(YType.enumeration, 'ipv6bfd-status')),
                        ('load_balance_hash_type', YLeaf(YType.str, 'load-balance-hash-type')),
                        ('load_balance_locality_threshold', YLeaf(YType.uint16, 'load-balance-locality-threshold')),
                        ('suppression_timer', YLeaf(YType.uint16, 'suppression-timer')),
                        ('wait_while_timer', YLeaf(YType.uint16, 'wait-while-timer')),
                        ('collector_max_delay', YLeaf(YType.uint16, 'collector-max-delay')),
                        ('cisco_extensions', YLeaf(YType.boolean, 'cisco-extensions')),
                        ('lacp_nonrevertive', YLeaf(YType.boolean, 'lacp-nonrevertive')),
                        ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                        ('active_foreign_member_count', YLeaf(YType.uint16, 'active-foreign-member-count')),
                        ('configured_foreign_member_count', YLeaf(YType.uint16, 'configured-foreign-member-count')),
                        ('switchover_type', YLeaf(YType.enumeration, 'switchover-type')),
                        ('maximize_threshold_value_links', YLeaf(YType.uint32, 'maximize-threshold-value-links')),
                        ('maximize_threshold_value_band_width', YLeaf(YType.uint32, 'maximize-threshold-value-band-width')),
                        ('mlacp_mode', YLeaf(YType.enumeration, 'mlacp-mode')),
                        ('recovery_delay', YLeaf(YType.uint16, 'recovery-delay')),
                        ('singleton', YLeaf(YType.boolean, 'singleton')),
                    ])
                    self.bundle_interface_name = None
                    self.available_bandwidth = None
                    self.effective_bandwidth = None
                    self.configured_bandwidth = None
                    self.minimum_active_links = None
                    self.maximum_active_links = None
                    self.maximum_active_links_source = None
                    self.minimum_bandwidth = None
                    self.primary_member = None
                    self.bundle_status = None
                    self.active_member_count = None
                    self.standby_member_count = None
                    self.configured_member_count = None
                    self.mac_source = None
                    self.mac_source_member = None
                    self.inter_chassis = None
                    self.is_active = None
                    self.lacp_status = None
                    self.mlacp_status = None
                    self.ipv4bfd_status = None
                    self.link_order_status = None
                    self.ipv6bfd_status = None
                    self.load_balance_hash_type = None
                    self.load_balance_locality_threshold = None
                    self.suppression_timer = None
                    self.wait_while_timer = None
                    self.collector_max_delay = None
                    self.cisco_extensions = None
                    self.lacp_nonrevertive = None
                    self.iccp_group_id = None
                    self.active_foreign_member_count = None
                    self.configured_foreign_member_count = None
                    self.switchover_type = None
                    self.maximize_threshold_value_links = None
                    self.maximize_threshold_value_band_width = None
                    self.mlacp_mode = None
                    self.recovery_delay = None
                    self.singleton = None

                    self.mac_address = BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.MacAddress()
                    self.mac_address.parent = self
                    self._children_name_map["mac_address"] = "mac-address"
                    self._children_yang_names.add("mac-address")

                    self.bfd_config = YList(self)
                    self._segment_path = lambda: "bundle-brief-item"

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem, ['bundle_interface_name', 'available_bandwidth', 'effective_bandwidth', 'configured_bandwidth', 'minimum_active_links', 'maximum_active_links', 'maximum_active_links_source', 'minimum_bandwidth', 'primary_member', 'bundle_status', 'active_member_count', 'standby_member_count', 'configured_member_count', 'mac_source', 'mac_source_member', 'inter_chassis', 'is_active', 'lacp_status', 'mlacp_status', 'ipv4bfd_status', 'link_order_status', 'ipv6bfd_status', 'load_balance_hash_type', 'load_balance_locality_threshold', 'suppression_timer', 'wait_while_timer', 'collector_max_delay', 'cisco_extensions', 'lacp_nonrevertive', 'iccp_group_id', 'active_foreign_member_count', 'configured_foreign_member_count', 'switchover_type', 'maximize_threshold_value_links', 'maximize_threshold_value_band_width', 'mlacp_mode', 'recovery_delay', 'singleton'], name, value)


                class MacAddress(Entity):
                    """
                    MAC address of this member
                    
                    .. attribute:: address
                    
                    	MAC address
                    	**type**\: str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.MacAddress, self).__init__()

                        self.yang_name = "mac-address"
                        self.yang_parent_name = "bundle-brief-item"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('address', YLeaf(YType.str, 'address')),
                        ])
                        self.address = None
                        self._segment_path = lambda: "mac-address"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.MacAddress, ['address'], name, value)


                class BfdConfig(Entity):
                    """
                    Configuration values for BFD on bundle members
                    
                    .. attribute:: destination_address
                    
                    	Configured destination address for BFD session
                    	**type**\:  :py:class:`DestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.BfdConfig.DestinationAddress>`
                    
                    .. attribute:: bundle_status
                    
                    	Status of BFD on the bundle
                    	**type**\:  :py:class:`BmdBfdBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBfdBdlState>`
                    
                    .. attribute:: start_timer
                    
                    	Time to wait on session start before declaring DOWN
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nbr_unconfig_timer
                    
                    	Time to wait on session NBR\_UNCONFIG before declaring DOWN
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: pref_multiplier
                    
                    	Preferred multiplier for the BFD session
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: pref_min_interval
                    
                    	Preferred minimum interval for the BFD session (ms)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: pref_echo_min_interval
                    
                    	Preferred echo minimum interval for the BFD session (ms)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_detect
                    
                    	Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled)
                    	**type**\: bool
                    
                    .. attribute:: mode_info
                    
                    	Standard used for per\-member BFD
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.BfdConfig, self).__init__()

                        self.yang_name = "bfd-config"
                        self.yang_parent_name = "bundle-brief-item"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("destination-address", ("destination_address", BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.BfdConfig.DestinationAddress))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                            ('start_timer', YLeaf(YType.uint32, 'start-timer')),
                            ('nbr_unconfig_timer', YLeaf(YType.uint32, 'nbr-unconfig-timer')),
                            ('pref_multiplier', YLeaf(YType.uint16, 'pref-multiplier')),
                            ('pref_min_interval', YLeaf(YType.uint32, 'pref-min-interval')),
                            ('pref_echo_min_interval', YLeaf(YType.uint32, 'pref-echo-min-interval')),
                            ('fast_detect', YLeaf(YType.boolean, 'fast-detect')),
                            ('mode_info', YLeaf(YType.uint32, 'mode-info')),
                        ])
                        self.bundle_status = None
                        self.start_timer = None
                        self.nbr_unconfig_timer = None
                        self.pref_multiplier = None
                        self.pref_min_interval = None
                        self.pref_echo_min_interval = None
                        self.fast_detect = None
                        self.mode_info = None

                        self.destination_address = BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.BfdConfig.DestinationAddress()
                        self.destination_address.parent = self
                        self._children_name_map["destination_address"] = "destination-address"
                        self._children_yang_names.add("destination-address")
                        self._segment_path = lambda: "bfd-config"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.BfdConfig, ['bundle_status', 'start_timer', 'nbr_unconfig_timer', 'pref_multiplier', 'pref_min_interval', 'pref_echo_min_interval', 'fast_detect', 'mode_info'], name, value)


                    class DestinationAddress(Entity):
                        """
                        Configured destination address for BFD session
                        
                        .. attribute:: af
                        
                        	AF
                        	**type**\:  :py:class:`BmAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmAfId>`
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.BfdConfig.DestinationAddress, self).__init__()

                            self.yang_name = "destination-address"
                            self.yang_parent_name = "bfd-config"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af', YLeaf(YType.enumeration, 'af')),
                                ('ipv4', YLeaf(YType.str, 'ipv4')),
                                ('ipv6', YLeaf(YType.str, 'ipv6')),
                            ])
                            self.af = None
                            self.ipv4 = None
                            self.ipv6 = None
                            self._segment_path = lambda: "destination-address"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.BundleBriefs.BundleBrief.BundleBriefItem.BfdConfig.DestinationAddress, ['af', 'ipv4', 'ipv6'], name, value)


    class EventsMbr(Entity):
        """
        Bundle member events information for bundles and
        members
        
        .. attribute:: events_mbr_bundles
        
        	Bundle interfaces with member events information
        	**type**\:  :py:class:`EventsMbrBundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles>`
        
        .. attribute:: events_mbr_members
        
        	Member interfaces with bundle member events information
        	**type**\:  :py:class:`EventsMbrMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers>`
        
        .. attribute:: events_mbr_iccp_groups
        
        	Member events for all ICCP Groups
        	**type**\:  :py:class:`EventsMbrIccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.EventsMbr, self).__init__()

            self.yang_name = "events-mbr"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("events-mbr-bundles", ("events_mbr_bundles", BundleInformation.EventsMbr.EventsMbrBundles)), ("events-mbr-members", ("events_mbr_members", BundleInformation.EventsMbr.EventsMbrMembers)), ("events-mbr-iccp-groups", ("events_mbr_iccp_groups", BundleInformation.EventsMbr.EventsMbrIccpGroups))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.events_mbr_bundles = BundleInformation.EventsMbr.EventsMbrBundles()
            self.events_mbr_bundles.parent = self
            self._children_name_map["events_mbr_bundles"] = "events-mbr-bundles"
            self._children_yang_names.add("events-mbr-bundles")

            self.events_mbr_members = BundleInformation.EventsMbr.EventsMbrMembers()
            self.events_mbr_members.parent = self
            self._children_name_map["events_mbr_members"] = "events-mbr-members"
            self._children_yang_names.add("events-mbr-members")

            self.events_mbr_iccp_groups = BundleInformation.EventsMbr.EventsMbrIccpGroups()
            self.events_mbr_iccp_groups.parent = self
            self._children_name_map["events_mbr_iccp_groups"] = "events-mbr-iccp-groups"
            self._children_yang_names.add("events-mbr-iccp-groups")
            self._segment_path = lambda: "events-mbr"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class EventsMbrBundles(Entity):
            """
            Bundle interfaces with member events
            information
            
            .. attribute:: events_mbr_bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`EventsMbrBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.EventsMbr.EventsMbrBundles, self).__init__()

                self.yang_name = "events-mbr-bundles"
                self.yang_parent_name = "events-mbr"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-mbr-bundle", ("events_mbr_bundle", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle))])
                self._leafs = OrderedDict()

                self.events_mbr_bundle = YList(self)
                self._segment_path = lambda: "events-mbr-bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-mbr/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles, [], name, value)


            class EventsMbrBundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: events_mbr_bundle_children_members
                
                	Children of bundle with member events information
                	**type**\:  :py:class:`EventsMbrBundleChildrenMembers <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers>`
                
                .. attribute:: events_mbr_bundle_descendant
                
                	Data for this item and all its members
                	**type**\:  :py:class:`EventsMbrBundleDescendant <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle, self).__init__()

                    self.yang_name = "events-mbr-bundle"
                    self.yang_parent_name = "events-mbr-bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("events-mbr-bundle-children-members", ("events_mbr_bundle_children_members", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers)), ("events-mbr-bundle-descendant", ("events_mbr_bundle_descendant", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.events_mbr_bundle_children_members = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers()
                    self.events_mbr_bundle_children_members.parent = self
                    self._children_name_map["events_mbr_bundle_children_members"] = "events-mbr-bundle-children-members"
                    self._children_yang_names.add("events-mbr-bundle-children-members")

                    self.events_mbr_bundle_descendant = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant()
                    self.events_mbr_bundle_descendant.parent = self
                    self._children_name_map["events_mbr_bundle_descendant"] = "events-mbr-bundle-descendant"
                    self._children_yang_names.add("events-mbr-bundle-descendant")
                    self._segment_path = lambda: "events-mbr-bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-mbr/events-mbr-bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle, ['bundle_interface'], name, value)


                class EventsMbrBundleChildrenMembers(Entity):
                    """
                    Children of bundle with member events
                    information
                    
                    .. attribute:: events_mbr_bundle_children_member
                    
                    	Bundle member item with member events information
                    	**type**\: list of  		 :py:class:`EventsMbrBundleChildrenMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers, self).__init__()

                        self.yang_name = "events-mbr-bundle-children-members"
                        self.yang_parent_name = "events-mbr-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("events-mbr-bundle-children-member", ("events_mbr_bundle_children_member", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember))])
                        self._leafs = OrderedDict()

                        self.events_mbr_bundle_children_member = YList(self)
                        self._segment_path = lambda: "events-mbr-bundle-children-members"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers, [], name, value)


                    class EventsMbrBundleChildrenMember(Entity):
                        """
                        Bundle member item with member events
                        information
                        
                        .. attribute:: member_interface  (key)
                        
                        	Member interface
                        	**type**\: str
                        
                        .. attribute:: item_name
                        
                        	Name for the current item to use
                        	**type**\: str
                        
                        .. attribute:: items
                        
                        	Event items
                        	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember, self).__init__()

                            self.yang_name = "events-mbr-bundle-children-member"
                            self.yang_parent_name = "events-mbr-bundle-children-members"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['member_interface']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items))])
                            self._leafs = OrderedDict([
                                ('member_interface', YLeaf(YType.str, 'member-interface')),
                                ('item_name', YLeaf(YType.str, 'item-name')),
                            ])
                            self.member_interface = None
                            self.item_name = None

                            self.items = YList(self)
                            self._segment_path = lambda: "events-mbr-bundle-children-member" + "[member-interface='" + str(self.member_interface) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember, ['member_interface', 'item_name'], name, value)


                        class Items(Entity):
                            """
                            Event items
                            
                            .. attribute:: member_evt_info
                            
                            	Event information for a member
                            	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo>`
                            
                            .. attribute:: bundle_evt_info
                            
                            	Event information for a bundle
                            	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo>`
                            
                            .. attribute:: rg_evt_info
                            
                            	Event information for an RG
                            	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo>`
                            
                            .. attribute:: event_type
                            
                            	EventType
                            	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items, self).__init__()

                                self.yang_name = "items"
                                self.yang_parent_name = "events-mbr-bundle-children-member"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('event_type', YLeaf(YType.enumeration, 'event-type')),
                                ])
                                self.event_type = None

                                self.member_evt_info = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo()
                                self.member_evt_info.parent = self
                                self._children_name_map["member_evt_info"] = "member-evt-info"
                                self._children_yang_names.add("member-evt-info")

                                self.bundle_evt_info = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo()
                                self.bundle_evt_info.parent = self
                                self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                                self._children_yang_names.add("bundle-evt-info")

                                self.rg_evt_info = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo()
                                self.rg_evt_info.parent = self
                                self._children_name_map["rg_evt_info"] = "rg-evt-info"
                                self._children_yang_names.add("rg-evt-info")
                                self._segment_path = lambda: "items"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items, ['event_type'], name, value)


                            class MemberEvtInfo(Entity):
                                """
                                Event information for a member
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo.Data>`
                                
                                .. attribute:: member_event_type
                                
                                	Type of event for member
                                	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo, self).__init__()

                                    self.yang_name = "member-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.member_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "member-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "member-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class BundleEvtInfo(Entity):
                                """
                                Event information for a bundle
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo.Data>`
                                
                                .. attribute:: bundle_event_type
                                
                                	Type of event for bundle
                                	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo, self).__init__()

                                    self.yang_name = "bundle-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.bundle_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "bundle-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "bundle-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class RgEvtInfo(Entity):
                                """
                                Event information for an RG
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo.Data>`
                                
                                .. attribute:: rg_event_type
                                
                                	Type of event for RG
                                	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo, self).__init__()

                                    self.yang_name = "rg-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.rg_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "rg-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "rg-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                class EventsMbrBundleDescendant(Entity):
                    """
                    Data for this item and all its members
                    
                    .. attribute:: events_item
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`EventsItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant, self).__init__()

                        self.yang_name = "events-mbr-bundle-descendant"
                        self.yang_parent_name = "events-mbr-bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("events-item", ("events_item", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem))])
                        self._leafs = OrderedDict()

                        self.events_item = YList(self)
                        self._segment_path = lambda: "events-mbr-bundle-descendant"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant, [], name, value)


                    class EventsItem(Entity):
                        """
                        Event items
                        
                        .. attribute:: item_name
                        
                        	Name for the current item to use
                        	**type**\: str
                        
                        .. attribute:: items
                        
                        	Event items
                        	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem, self).__init__()

                            self.yang_name = "events-item"
                            self.yang_parent_name = "events-mbr-bundle-descendant"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items))])
                            self._leafs = OrderedDict([
                                ('item_name', YLeaf(YType.str, 'item-name')),
                            ])
                            self.item_name = None

                            self.items = YList(self)
                            self._segment_path = lambda: "events-item"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem, ['item_name'], name, value)


                        class Items(Entity):
                            """
                            Event items
                            
                            .. attribute:: member_evt_info
                            
                            	Event information for a member
                            	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo>`
                            
                            .. attribute:: bundle_evt_info
                            
                            	Event information for a bundle
                            	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo>`
                            
                            .. attribute:: rg_evt_info
                            
                            	Event information for an RG
                            	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo>`
                            
                            .. attribute:: event_type
                            
                            	EventType
                            	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items, self).__init__()

                                self.yang_name = "items"
                                self.yang_parent_name = "events-item"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('event_type', YLeaf(YType.enumeration, 'event-type')),
                                ])
                                self.event_type = None

                                self.member_evt_info = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo()
                                self.member_evt_info.parent = self
                                self._children_name_map["member_evt_info"] = "member-evt-info"
                                self._children_yang_names.add("member-evt-info")

                                self.bundle_evt_info = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo()
                                self.bundle_evt_info.parent = self
                                self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                                self._children_yang_names.add("bundle-evt-info")

                                self.rg_evt_info = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo()
                                self.rg_evt_info.parent = self
                                self._children_name_map["rg_evt_info"] = "rg-evt-info"
                                self._children_yang_names.add("rg-evt-info")
                                self._segment_path = lambda: "items"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items, ['event_type'], name, value)


                            class MemberEvtInfo(Entity):
                                """
                                Event information for a member
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo.Data>`
                                
                                .. attribute:: member_event_type
                                
                                	Type of event for member
                                	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo, self).__init__()

                                    self.yang_name = "member-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.member_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "member-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "member-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class BundleEvtInfo(Entity):
                                """
                                Event information for a bundle
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo.Data>`
                                
                                .. attribute:: bundle_event_type
                                
                                	Type of event for bundle
                                	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo, self).__init__()

                                    self.yang_name = "bundle-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.bundle_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "bundle-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "bundle-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class RgEvtInfo(Entity):
                                """
                                Event information for an RG
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo.Data>`
                                
                                .. attribute:: rg_event_type
                                
                                	Type of event for RG
                                	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo, self).__init__()

                                    self.yang_name = "rg-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.rg_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "rg-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "rg-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrBundles.EventsMbrBundle.EventsMbrBundleDescendant.EventsItem.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


        class EventsMbrMembers(Entity):
            """
            Member interfaces with bundle member events
            information
            
            .. attribute:: events_mbr_member
            
            	Member interface
            	**type**\: list of  		 :py:class:`EventsMbrMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.EventsMbr.EventsMbrMembers, self).__init__()

                self.yang_name = "events-mbr-members"
                self.yang_parent_name = "events-mbr"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-mbr-member", ("events_mbr_member", BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember))])
                self._leafs = OrderedDict()

                self.events_mbr_member = YList(self)
                self._segment_path = lambda: "events-mbr-members"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-mbr/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers, [], name, value)


            class EventsMbrMember(Entity):
                """
                Member interface
                
                .. attribute:: member_interface  (key)
                
                	Member interface
                	**type**\: str
                
                .. attribute:: events_mbr_member_item
                
                	Data for this item
                	**type**\:  :py:class:`EventsMbrMemberItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember, self).__init__()

                    self.yang_name = "events-mbr-member"
                    self.yang_parent_name = "events-mbr-members"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['member_interface']
                    self._child_container_classes = OrderedDict([("events-mbr-member-item", ("events_mbr_member_item", BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('member_interface', YLeaf(YType.str, 'member-interface')),
                    ])
                    self.member_interface = None

                    self.events_mbr_member_item = BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem()
                    self.events_mbr_member_item.parent = self
                    self._children_name_map["events_mbr_member_item"] = "events-mbr-member-item"
                    self._children_yang_names.add("events-mbr-member-item")
                    self._segment_path = lambda: "events-mbr-member" + "[member-interface='" + str(self.member_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-mbr/events-mbr-members/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember, ['member_interface'], name, value)


                class EventsMbrMemberItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: item_name
                    
                    	Name for the current item to use
                    	**type**\: str
                    
                    .. attribute:: items
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem, self).__init__()

                        self.yang_name = "events-mbr-member-item"
                        self.yang_parent_name = "events-mbr-member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items))])
                        self._leafs = OrderedDict([
                            ('item_name', YLeaf(YType.str, 'item-name')),
                        ])
                        self.item_name = None

                        self.items = YList(self)
                        self._segment_path = lambda: "events-mbr-member-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem, ['item_name'], name, value)


                    class Items(Entity):
                        """
                        Event items
                        
                        .. attribute:: member_evt_info
                        
                        	Event information for a member
                        	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo>`
                        
                        .. attribute:: bundle_evt_info
                        
                        	Event information for a bundle
                        	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo>`
                        
                        .. attribute:: rg_evt_info
                        
                        	Event information for an RG
                        	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo>`
                        
                        .. attribute:: event_type
                        
                        	EventType
                        	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "events-mbr-member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('event_type', YLeaf(YType.enumeration, 'event-type')),
                            ])
                            self.event_type = None

                            self.member_evt_info = BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo()
                            self.member_evt_info.parent = self
                            self._children_name_map["member_evt_info"] = "member-evt-info"
                            self._children_yang_names.add("member-evt-info")

                            self.bundle_evt_info = BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo()
                            self.bundle_evt_info.parent = self
                            self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                            self._children_yang_names.add("bundle-evt-info")

                            self.rg_evt_info = BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo()
                            self.rg_evt_info.parent = self
                            self._children_name_map["rg_evt_info"] = "rg-evt-info"
                            self._children_yang_names.add("rg-evt-info")
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items, ['event_type'], name, value)


                        class MemberEvtInfo(Entity):
                            """
                            Event information for a member
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo.Data>`
                            
                            .. attribute:: member_event_type
                            
                            	Type of event for member
                            	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo, self).__init__()

                                self.yang_name = "member-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.member_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "member-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "member-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class BundleEvtInfo(Entity):
                            """
                            Event information for a bundle
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo.Data>`
                            
                            .. attribute:: bundle_event_type
                            
                            	Type of event for bundle
                            	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo, self).__init__()

                                self.yang_name = "bundle-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.bundle_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "bundle-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "bundle-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                        class RgEvtInfo(Entity):
                            """
                            Event information for an RG
                            
                            .. attribute:: data
                            
                            	Additional data for the event
                            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo.Data>`
                            
                            .. attribute:: rg_event_type
                            
                            	Type of event for RG
                            	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                            
                            .. attribute:: time_stamp
                            
                            	Time stamp of the event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo, self).__init__()

                                self.yang_name = "rg-evt-info"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo.Data))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                    ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                ])
                                self.rg_event_type = None
                                self.time_stamp = None

                                self.data = BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo.Data()
                                self.data.parent = self
                                self._children_name_map["data"] = "data"
                                self._children_yang_names.add("data")
                                self._segment_path = lambda: "rg-evt-info"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                            class Data(Entity):
                                """
                                Additional data for the event
                                
                                .. attribute:: data_type
                                
                                	DataType
                                	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                
                                .. attribute:: no_data
                                
                                	NoData
                                	**type**\: int
                                
                                	**range:** 0..255
                                
                                .. attribute:: error
                                
                                	Error
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: string_data
                                
                                	StringData
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo.Data, self).__init__()

                                    self.yang_name = "data"
                                    self.yang_parent_name = "rg-evt-info"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                        ('no_data', YLeaf(YType.uint8, 'no-data')),
                                        ('error', YLeaf(YType.uint32, 'error')),
                                        ('string_data', YLeaf(YType.str, 'string-data')),
                                    ])
                                    self.data_type = None
                                    self.no_data = None
                                    self.error = None
                                    self.string_data = None
                                    self._segment_path = lambda: "data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrMembers.EventsMbrMember.EventsMbrMemberItem.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


        class EventsMbrIccpGroups(Entity):
            """
            Member events for all ICCP Groups
            
            .. attribute:: events_mbr_iccp_group
            
            	ICCP Group ID
            	**type**\: list of  		 :py:class:`EventsMbrIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.EventsMbr.EventsMbrIccpGroups, self).__init__()

                self.yang_name = "events-mbr-iccp-groups"
                self.yang_parent_name = "events-mbr"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("events-mbr-iccp-group", ("events_mbr_iccp_group", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup))])
                self._leafs = OrderedDict()

                self.events_mbr_iccp_group = YList(self)
                self._segment_path = lambda: "events-mbr-iccp-groups"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-mbr/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups, [], name, value)


            class EventsMbrIccpGroup(Entity):
                """
                ICCP Group ID
                
                .. attribute:: iccp_group  (key)
                
                	ICCP Group ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: events_mbr_bundle_children_member_iccp_groups
                
                	Children of bundle with member events information
                	**type**\:  :py:class:`EventsMbrBundleChildrenMemberIccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups>`
                
                .. attribute:: events_mbr_bundle_descendant_iccp_group
                
                	Data for this item and all its members
                	**type**\:  :py:class:`EventsMbrBundleDescendantIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup, self).__init__()

                    self.yang_name = "events-mbr-iccp-group"
                    self.yang_parent_name = "events-mbr-iccp-groups"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['iccp_group']
                    self._child_container_classes = OrderedDict([("events-mbr-bundle-children-member-iccp-groups", ("events_mbr_bundle_children_member_iccp_groups", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups)), ("events-mbr-bundle-descendant-iccp-group", ("events_mbr_bundle_descendant_iccp_group", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', YLeaf(YType.uint32, 'iccp-group')),
                    ])
                    self.iccp_group = None

                    self.events_mbr_bundle_children_member_iccp_groups = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups()
                    self.events_mbr_bundle_children_member_iccp_groups.parent = self
                    self._children_name_map["events_mbr_bundle_children_member_iccp_groups"] = "events-mbr-bundle-children-member-iccp-groups"
                    self._children_yang_names.add("events-mbr-bundle-children-member-iccp-groups")

                    self.events_mbr_bundle_descendant_iccp_group = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup()
                    self.events_mbr_bundle_descendant_iccp_group.parent = self
                    self._children_name_map["events_mbr_bundle_descendant_iccp_group"] = "events-mbr-bundle-descendant-iccp-group"
                    self._children_yang_names.add("events-mbr-bundle-descendant-iccp-group")
                    self._segment_path = lambda: "events-mbr-iccp-group" + "[iccp-group='" + str(self.iccp_group) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/events-mbr/events-mbr-iccp-groups/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup, ['iccp_group'], name, value)


                class EventsMbrBundleChildrenMemberIccpGroups(Entity):
                    """
                    Children of bundle with member events
                    information
                    
                    .. attribute:: events_mbr_bundle_children_member_iccp_group
                    
                    	Bundle member item with ICCP events information
                    	**type**\: list of  		 :py:class:`EventsMbrBundleChildrenMemberIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups, self).__init__()

                        self.yang_name = "events-mbr-bundle-children-member-iccp-groups"
                        self.yang_parent_name = "events-mbr-iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("events-mbr-bundle-children-member-iccp-group", ("events_mbr_bundle_children_member_iccp_group", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup))])
                        self._leafs = OrderedDict()

                        self.events_mbr_bundle_children_member_iccp_group = YList(self)
                        self._segment_path = lambda: "events-mbr-bundle-children-member-iccp-groups"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups, [], name, value)


                    class EventsMbrBundleChildrenMemberIccpGroup(Entity):
                        """
                        Bundle member item with ICCP events
                        information
                        
                        .. attribute:: member_interface  (key)
                        
                        	Member interface
                        	**type**\: str
                        
                        .. attribute:: item_name
                        
                        	Name for the current item to use
                        	**type**\: str
                        
                        .. attribute:: items
                        
                        	Event items
                        	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup, self).__init__()

                            self.yang_name = "events-mbr-bundle-children-member-iccp-group"
                            self.yang_parent_name = "events-mbr-bundle-children-member-iccp-groups"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = ['member_interface']
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items))])
                            self._leafs = OrderedDict([
                                ('member_interface', YLeaf(YType.str, 'member-interface')),
                                ('item_name', YLeaf(YType.str, 'item-name')),
                            ])
                            self.member_interface = None
                            self.item_name = None

                            self.items = YList(self)
                            self._segment_path = lambda: "events-mbr-bundle-children-member-iccp-group" + "[member-interface='" + str(self.member_interface) + "']"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup, ['member_interface', 'item_name'], name, value)


                        class Items(Entity):
                            """
                            Event items
                            
                            .. attribute:: member_evt_info
                            
                            	Event information for a member
                            	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo>`
                            
                            .. attribute:: bundle_evt_info
                            
                            	Event information for a bundle
                            	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo>`
                            
                            .. attribute:: rg_evt_info
                            
                            	Event information for an RG
                            	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo>`
                            
                            .. attribute:: event_type
                            
                            	EventType
                            	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items, self).__init__()

                                self.yang_name = "items"
                                self.yang_parent_name = "events-mbr-bundle-children-member-iccp-group"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('event_type', YLeaf(YType.enumeration, 'event-type')),
                                ])
                                self.event_type = None

                                self.member_evt_info = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo()
                                self.member_evt_info.parent = self
                                self._children_name_map["member_evt_info"] = "member-evt-info"
                                self._children_yang_names.add("member-evt-info")

                                self.bundle_evt_info = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo()
                                self.bundle_evt_info.parent = self
                                self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                                self._children_yang_names.add("bundle-evt-info")

                                self.rg_evt_info = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo()
                                self.rg_evt_info.parent = self
                                self._children_name_map["rg_evt_info"] = "rg-evt-info"
                                self._children_yang_names.add("rg-evt-info")
                                self._segment_path = lambda: "items"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items, ['event_type'], name, value)


                            class MemberEvtInfo(Entity):
                                """
                                Event information for a member
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo.Data>`
                                
                                .. attribute:: member_event_type
                                
                                	Type of event for member
                                	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo, self).__init__()

                                    self.yang_name = "member-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.member_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "member-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "member-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class BundleEvtInfo(Entity):
                                """
                                Event information for a bundle
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo.Data>`
                                
                                .. attribute:: bundle_event_type
                                
                                	Type of event for bundle
                                	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo, self).__init__()

                                    self.yang_name = "bundle-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.bundle_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "bundle-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "bundle-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class RgEvtInfo(Entity):
                                """
                                Event information for an RG
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo.Data>`
                                
                                .. attribute:: rg_event_type
                                
                                	Type of event for RG
                                	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo, self).__init__()

                                    self.yang_name = "rg-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.rg_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "rg-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "rg-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                class EventsMbrBundleDescendantIccpGroup(Entity):
                    """
                    Data for this item and all its members
                    
                    .. attribute:: events_item
                    
                    	Event items
                    	**type**\: list of  		 :py:class:`EventsItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup, self).__init__()

                        self.yang_name = "events-mbr-bundle-descendant-iccp-group"
                        self.yang_parent_name = "events-mbr-iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("events-item", ("events_item", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem))])
                        self._leafs = OrderedDict()

                        self.events_item = YList(self)
                        self._segment_path = lambda: "events-mbr-bundle-descendant-iccp-group"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup, [], name, value)


                    class EventsItem(Entity):
                        """
                        Event items
                        
                        .. attribute:: item_name
                        
                        	Name for the current item to use
                        	**type**\: str
                        
                        .. attribute:: items
                        
                        	Event items
                        	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem, self).__init__()

                            self.yang_name = "events-item"
                            self.yang_parent_name = "events-mbr-bundle-descendant-iccp-group"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items))])
                            self._leafs = OrderedDict([
                                ('item_name', YLeaf(YType.str, 'item-name')),
                            ])
                            self.item_name = None

                            self.items = YList(self)
                            self._segment_path = lambda: "events-item"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem, ['item_name'], name, value)


                        class Items(Entity):
                            """
                            Event items
                            
                            .. attribute:: member_evt_info
                            
                            	Event information for a member
                            	**type**\:  :py:class:`MemberEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo>`
                            
                            .. attribute:: bundle_evt_info
                            
                            	Event information for a bundle
                            	**type**\:  :py:class:`BundleEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo>`
                            
                            .. attribute:: rg_evt_info
                            
                            	Event information for an RG
                            	**type**\:  :py:class:`RgEvtInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo>`
                            
                            .. attribute:: event_type
                            
                            	EventType
                            	**type**\:  :py:class:`BmdBagTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagTarget>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items, self).__init__()

                                self.yang_name = "items"
                                self.yang_parent_name = "events-item"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("member-evt-info", ("member_evt_info", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo)), ("bundle-evt-info", ("bundle_evt_info", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo)), ("rg-evt-info", ("rg_evt_info", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('event_type', YLeaf(YType.enumeration, 'event-type')),
                                ])
                                self.event_type = None

                                self.member_evt_info = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo()
                                self.member_evt_info.parent = self
                                self._children_name_map["member_evt_info"] = "member-evt-info"
                                self._children_yang_names.add("member-evt-info")

                                self.bundle_evt_info = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo()
                                self.bundle_evt_info.parent = self
                                self._children_name_map["bundle_evt_info"] = "bundle-evt-info"
                                self._children_yang_names.add("bundle-evt-info")

                                self.rg_evt_info = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo()
                                self.rg_evt_info.parent = self
                                self._children_name_map["rg_evt_info"] = "rg-evt-info"
                                self._children_yang_names.add("rg-evt-info")
                                self._segment_path = lambda: "items"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items, ['event_type'], name, value)


                            class MemberEvtInfo(Entity):
                                """
                                Event information for a member
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data>`
                                
                                .. attribute:: member_event_type
                                
                                	Type of event for member
                                	**type**\:  :py:class:`BmdBagEventMbrItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventMbrItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo, self).__init__()

                                    self.yang_name = "member-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('member_event_type', YLeaf(YType.enumeration, 'member-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.member_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "member-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo, ['member_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "member-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.MemberEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class BundleEvtInfo(Entity):
                                """
                                Event information for a bundle
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data>`
                                
                                .. attribute:: bundle_event_type
                                
                                	Type of event for bundle
                                	**type**\:  :py:class:`BmdBagEventBdlItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventBdlItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo, self).__init__()

                                    self.yang_name = "bundle-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('bundle_event_type', YLeaf(YType.enumeration, 'bundle-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.bundle_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "bundle-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo, ['bundle_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "bundle-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.BundleEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


                            class RgEvtInfo(Entity):
                                """
                                Event information for an RG
                                
                                .. attribute:: data
                                
                                	Additional data for the event
                                	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data>`
                                
                                .. attribute:: rg_event_type
                                
                                	Type of event for RG
                                	**type**\:  :py:class:`BmdBagEventRgItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventRgItem>`
                                
                                .. attribute:: time_stamp
                                
                                	Time stamp of the event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo, self).__init__()

                                    self.yang_name = "rg-evt-info"
                                    self.yang_parent_name = "items"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("data", ("data", BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('rg_event_type', YLeaf(YType.enumeration, 'rg-event-type')),
                                        ('time_stamp', YLeaf(YType.uint64, 'time-stamp')),
                                    ])
                                    self.rg_event_type = None
                                    self.time_stamp = None

                                    self.data = BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data()
                                    self.data.parent = self
                                    self._children_name_map["data"] = "data"
                                    self._children_yang_names.add("data")
                                    self._segment_path = lambda: "rg-evt-info"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo, ['rg_event_type', 'time_stamp'], name, value)


                                class Data(Entity):
                                    """
                                    Additional data for the event
                                    
                                    .. attribute:: data_type
                                    
                                    	DataType
                                    	**type**\:  :py:class:`BmdBagEventData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBagEventData>`
                                    
                                    .. attribute:: no_data
                                    
                                    	NoData
                                    	**type**\: int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: error
                                    
                                    	Error
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: string_data
                                    
                                    	StringData
                                    	**type**\: str
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data, self).__init__()

                                        self.yang_name = "data"
                                        self.yang_parent_name = "rg-evt-info"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('data_type', YLeaf(YType.enumeration, 'data-type')),
                                            ('no_data', YLeaf(YType.uint8, 'no-data')),
                                            ('error', YLeaf(YType.uint32, 'error')),
                                            ('string_data', YLeaf(YType.str, 'string-data')),
                                        ])
                                        self.data_type = None
                                        self.no_data = None
                                        self.error = None
                                        self.string_data = None
                                        self._segment_path = lambda: "data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.EventsMbr.EventsMbrIccpGroups.EventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup.EventsItem.Items.RgEvtInfo.Data, ['data_type', 'no_data', 'error', 'string_data'], name, value)


    class MlacpIccpGroupCounters(Entity):
        """
        ICCP Group specific counters of mLACP events
        
        .. attribute:: iccp_groups
        
        	ICCP Groups with counters of mLACP events
        	**type**\:  :py:class:`IccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.MlacpIccpGroupCounters, self).__init__()

            self.yang_name = "mlacp-iccp-group-counters"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("iccp-groups", ("iccp_groups", BundleInformation.MlacpIccpGroupCounters.IccpGroups))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.iccp_groups = BundleInformation.MlacpIccpGroupCounters.IccpGroups()
            self.iccp_groups.parent = self
            self._children_name_map["iccp_groups"] = "iccp-groups"
            self._children_yang_names.add("iccp-groups")
            self._segment_path = lambda: "mlacp-iccp-group-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class IccpGroups(Entity):
            """
            ICCP Groups with counters of mLACP events
            
            .. attribute:: iccp_group
            
            	ICCP Group ID
            	**type**\: list of  		 :py:class:`IccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups, self).__init__()

                self.yang_name = "iccp-groups"
                self.yang_parent_name = "mlacp-iccp-group-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("iccp-group", ("iccp_group", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup))])
                self._leafs = OrderedDict()

                self.iccp_group = YList(self)
                self._segment_path = lambda: "iccp-groups"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-iccp-group-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups, [], name, value)


            class IccpGroup(Entity):
                """
                ICCP Group ID
                
                .. attribute:: iccp_group  (key)
                
                	ICCP Group ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: iccp_group_ancestor_bundle
                
                	Data for this item and its parent RG
                	**type**\:  :py:class:`IccpGroupAncestorBundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle>`
                
                .. attribute:: iccp_group_ancestor_member
                
                	Data for this item and its parent RG
                	**type**\:  :py:class:`IccpGroupAncestorMember <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember>`
                
                .. attribute:: iccp_group_ancestor_node
                
                	Data for this item and its parent RG
                	**type**\:  :py:class:`IccpGroupAncestorNode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode>`
                
                .. attribute:: iccp_group_item
                
                	Data for this item
                	**type**\:  :py:class:`IccpGroupItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup, self).__init__()

                    self.yang_name = "iccp-group"
                    self.yang_parent_name = "iccp-groups"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['iccp_group']
                    self._child_container_classes = OrderedDict([("iccp-group-ancestor-bundle", ("iccp_group_ancestor_bundle", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle)), ("iccp-group-ancestor-member", ("iccp_group_ancestor_member", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember)), ("iccp-group-ancestor-node", ("iccp_group_ancestor_node", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode)), ("iccp-group-item", ("iccp_group_item", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', YLeaf(YType.uint32, 'iccp-group')),
                    ])
                    self.iccp_group = None

                    self.iccp_group_ancestor_bundle = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle()
                    self.iccp_group_ancestor_bundle.parent = self
                    self._children_name_map["iccp_group_ancestor_bundle"] = "iccp-group-ancestor-bundle"
                    self._children_yang_names.add("iccp-group-ancestor-bundle")

                    self.iccp_group_ancestor_member = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember()
                    self.iccp_group_ancestor_member.parent = self
                    self._children_name_map["iccp_group_ancestor_member"] = "iccp-group-ancestor-member"
                    self._children_yang_names.add("iccp-group-ancestor-member")

                    self.iccp_group_ancestor_node = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode()
                    self.iccp_group_ancestor_node.parent = self
                    self._children_name_map["iccp_group_ancestor_node"] = "iccp-group-ancestor-node"
                    self._children_yang_names.add("iccp-group-ancestor-node")

                    self.iccp_group_item = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem()
                    self.iccp_group_item.parent = self
                    self._children_name_map["iccp_group_item"] = "iccp-group-item"
                    self._children_yang_names.add("iccp-group-item")
                    self._segment_path = lambda: "iccp-group" + "[iccp-group='" + str(self.iccp_group) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-iccp-group-counters/iccp-groups/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup, ['iccp_group'], name, value)


                class IccpGroupAncestorBundle(Entity):
                    """
                    Data for this item and its parent RG
                    
                    .. attribute:: iccp_group_counters
                    
                    	ICCP Group counters
                    	**type**\:  :py:class:`IccpGroupCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters>`
                    
                    .. attribute:: iccp_group_id
                    
                    	ICCP Group ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle, self).__init__()

                        self.yang_name = "iccp-group-ancestor-bundle"
                        self.yang_parent_name = "iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("iccp-group-counters", ("iccp_group_counters", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                        ])
                        self.iccp_group_id = None

                        self.iccp_group_counters = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters()
                        self.iccp_group_counters.parent = self
                        self._children_name_map["iccp_group_counters"] = "iccp-group-counters"
                        self._children_yang_names.add("iccp-group-counters")
                        self._segment_path = lambda: "iccp-group-ancestor-bundle"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle, ['iccp_group_id'], name, value)


                    class IccpGroupCounters(Entity):
                        """
                        ICCP Group counters
                        
                        .. attribute:: connection
                        
                        	Number of connection events
                        	**type**\:  :py:class:`Connection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.Connection>`
                        
                        .. attribute:: tl_vs
                        
                        	Number TLVs sent and received
                        	**type**\:  :py:class:`TlVs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.TlVs>`
                        
                        .. attribute:: invalid_tl_vs
                        
                        	Number invalid TLVs received
                        	**type**\:  :py:class:`InvalidTlVs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.InvalidTlVs>`
                        
                        .. attribute:: iccp_messages
                        
                        	Number ICCP messages sent and received
                        	**type**\:  :py:class:`IccpMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpMessages>`
                        
                        .. attribute:: iccp_events
                        
                        	Number of ICCP events
                        	**type**\:  :py:class:`IccpEvents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpEvents>`
                        
                        .. attribute:: last_time_cleared
                        
                        	Time in nsecs from boot when counters were last cleared (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: time_since_cleared
                        
                        	Elapsed time in nsecs since counters were last cleared
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: last_unexpected_event
                        
                        	Elapsed time in nsecs since last unexpected event
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters, self).__init__()

                            self.yang_name = "iccp-group-counters"
                            self.yang_parent_name = "iccp-group-ancestor-bundle"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("connection", ("connection", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.Connection)), ("tl-vs", ("tl_vs", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.TlVs)), ("invalid-tl-vs", ("invalid_tl_vs", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.InvalidTlVs)), ("iccp-messages", ("iccp_messages", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpMessages)), ("iccp-events", ("iccp_events", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpEvents))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                            ])
                            self.last_time_cleared = None
                            self.time_since_cleared = None
                            self.last_unexpected_event = None

                            self.connection = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.Connection()
                            self.connection.parent = self
                            self._children_name_map["connection"] = "connection"
                            self._children_yang_names.add("connection")

                            self.tl_vs = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.TlVs()
                            self.tl_vs.parent = self
                            self._children_name_map["tl_vs"] = "tl-vs"
                            self._children_yang_names.add("tl-vs")

                            self.invalid_tl_vs = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.InvalidTlVs()
                            self.invalid_tl_vs.parent = self
                            self._children_name_map["invalid_tl_vs"] = "invalid-tl-vs"
                            self._children_yang_names.add("invalid-tl-vs")

                            self.iccp_messages = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpMessages()
                            self.iccp_messages.parent = self
                            self._children_name_map["iccp_messages"] = "iccp-messages"
                            self._children_yang_names.add("iccp-messages")

                            self.iccp_events = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpEvents()
                            self.iccp_events.parent = self
                            self._children_name_map["iccp_events"] = "iccp-events"
                            self._children_yang_names.add("iccp-events")
                            self._segment_path = lambda: "iccp-group-counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters, ['last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                        class Connection(Entity):
                            """
                            Number of connection events
                            
                            .. attribute:: sent_connects
                            
                            	Number of connect TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_connects
                            
                            	Number of connect TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_invalid_connects
                            
                            	Number of invalid ICCP connects
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_config_connect_errors
                            
                            	Number of ICCP connection errors due to config
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_count_connect_errors
                            
                            	Number of ICCP connection errors due to max ICCP group count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_wrong_versions
                            
                            	Number of wrong version TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_wrong_versions
                            
                            	Number of wrong version TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_disconnects
                            
                            	Number of disconnect TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_disconnects
                            
                            	Number of disconnect TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_invalid_disconnects
                            
                            	Number of invalid ICCP disconnects
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.Connection, self).__init__()

                                self.yang_name = "connection"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_connects', YLeaf(YType.uint32, 'sent-connects')),
                                    ('received_connects', YLeaf(YType.uint32, 'received-connects')),
                                    ('iccp_invalid_connects', YLeaf(YType.uint32, 'iccp-invalid-connects')),
                                    ('iccp_config_connect_errors', YLeaf(YType.uint32, 'iccp-config-connect-errors')),
                                    ('iccp_count_connect_errors', YLeaf(YType.uint32, 'iccp-count-connect-errors')),
                                    ('sent_wrong_versions', YLeaf(YType.uint32, 'sent-wrong-versions')),
                                    ('received_wrong_versions', YLeaf(YType.uint32, 'received-wrong-versions')),
                                    ('sent_disconnects', YLeaf(YType.uint32, 'sent-disconnects')),
                                    ('received_disconnects', YLeaf(YType.uint32, 'received-disconnects')),
                                    ('iccp_invalid_disconnects', YLeaf(YType.uint32, 'iccp-invalid-disconnects')),
                                ])
                                self.sent_connects = None
                                self.received_connects = None
                                self.iccp_invalid_connects = None
                                self.iccp_config_connect_errors = None
                                self.iccp_count_connect_errors = None
                                self.sent_wrong_versions = None
                                self.received_wrong_versions = None
                                self.sent_disconnects = None
                                self.received_disconnects = None
                                self.iccp_invalid_disconnects = None
                                self._segment_path = lambda: "connection"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.Connection, ['sent_connects', 'received_connects', 'iccp_invalid_connects', 'iccp_config_connect_errors', 'iccp_count_connect_errors', 'sent_wrong_versions', 'received_wrong_versions', 'sent_disconnects', 'received_disconnects', 'iccp_invalid_disconnects'], name, value)


                        class TlVs(Entity):
                            """
                            Number TLVs sent and received
                            
                            .. attribute:: sent_config
                            
                            	Number of config TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_config
                            
                            	Number of config TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_state
                            
                            	Number of state TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_state
                            
                            	Number of state TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_na_ks
                            
                            	Number of NAK TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_na_ks
                            
                            	Number of NAK TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_sync_requests
                            
                            	Number of sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of sync request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_state_sync_requests
                            
                            	Number of state sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_state_sync_requests
                            
                            	Number of state sync request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_config_sync_requests
                            
                            	Number of config sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_config_sync_requests
                            
                            	Number of state config request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_solicited_sync_data
                            
                            	Number of solicited sync data TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_solicited_sync_data
                            
                            	Number of solicited sync data TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_unsolicited_sync_data
                            
                            	Number of unsolicited sync data TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_unsolicited_sync_data
                            
                            	Number of unsolicited sync data TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.TlVs, self).__init__()

                                self.yang_name = "tl-vs"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_config', YLeaf(YType.uint32, 'sent-config')),
                                    ('received_config', YLeaf(YType.uint32, 'received-config')),
                                    ('sent_state', YLeaf(YType.uint32, 'sent-state')),
                                    ('received_state', YLeaf(YType.uint32, 'received-state')),
                                    ('sent_na_ks', YLeaf(YType.uint32, 'sent-na-ks')),
                                    ('received_na_ks', YLeaf(YType.uint32, 'received-na-ks')),
                                    ('sent_sync_requests', YLeaf(YType.uint32, 'sent-sync-requests')),
                                    ('received_sync_requests', YLeaf(YType.uint32, 'received-sync-requests')),
                                    ('sent_state_sync_requests', YLeaf(YType.uint32, 'sent-state-sync-requests')),
                                    ('received_state_sync_requests', YLeaf(YType.uint32, 'received-state-sync-requests')),
                                    ('sent_config_sync_requests', YLeaf(YType.uint32, 'sent-config-sync-requests')),
                                    ('received_config_sync_requests', YLeaf(YType.uint32, 'received-config-sync-requests')),
                                    ('sent_solicited_sync_data', YLeaf(YType.uint32, 'sent-solicited-sync-data')),
                                    ('received_solicited_sync_data', YLeaf(YType.uint32, 'received-solicited-sync-data')),
                                    ('sent_unsolicited_sync_data', YLeaf(YType.uint32, 'sent-unsolicited-sync-data')),
                                    ('received_unsolicited_sync_data', YLeaf(YType.uint32, 'received-unsolicited-sync-data')),
                                ])
                                self.sent_config = None
                                self.received_config = None
                                self.sent_state = None
                                self.received_state = None
                                self.sent_na_ks = None
                                self.received_na_ks = None
                                self.sent_sync_requests = None
                                self.received_sync_requests = None
                                self.sent_state_sync_requests = None
                                self.received_state_sync_requests = None
                                self.sent_config_sync_requests = None
                                self.received_config_sync_requests = None
                                self.sent_solicited_sync_data = None
                                self.received_solicited_sync_data = None
                                self.sent_unsolicited_sync_data = None
                                self.received_unsolicited_sync_data = None
                                self._segment_path = lambda: "tl-vs"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.TlVs, ['sent_config', 'received_config', 'sent_state', 'received_state', 'sent_na_ks', 'received_na_ks', 'sent_sync_requests', 'received_sync_requests', 'sent_state_sync_requests', 'received_state_sync_requests', 'sent_config_sync_requests', 'received_config_sync_requests', 'sent_solicited_sync_data', 'received_solicited_sync_data', 'sent_unsolicited_sync_data', 'received_unsolicited_sync_data'], name, value)


                        class InvalidTlVs(Entity):
                            """
                            Number invalid TLVs received
                            
                            .. attribute:: incorrect_length
                            
                            	Number of messages received of an incorrect length
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: invalid_type
                            
                            	Number of messages received with an invalid mLACP TLV type
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: invalid_data
                            
                            	Number of messages received containing invalid data
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unknown_bundle
                            
                            	Number of messages received for an unknown bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unknown_port
                            
                            	Number of messages received for an unknown port
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.InvalidTlVs, self).__init__()

                                self.yang_name = "invalid-tl-vs"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('incorrect_length', YLeaf(YType.uint32, 'incorrect-length')),
                                    ('invalid_type', YLeaf(YType.uint32, 'invalid-type')),
                                    ('invalid_data', YLeaf(YType.uint32, 'invalid-data')),
                                    ('unknown_bundle', YLeaf(YType.uint32, 'unknown-bundle')),
                                    ('unknown_port', YLeaf(YType.uint32, 'unknown-port')),
                                ])
                                self.incorrect_length = None
                                self.invalid_type = None
                                self.invalid_data = None
                                self.unknown_bundle = None
                                self.unknown_port = None
                                self._segment_path = lambda: "invalid-tl-vs"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.InvalidTlVs, ['incorrect_length', 'invalid_type', 'invalid_data', 'unknown_bundle', 'unknown_port'], name, value)


                        class IccpMessages(Entity):
                            """
                            Number ICCP messages sent and received
                            
                            .. attribute:: sent_messages
                            
                            	Number of messages sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_buffer_messages
                            
                            	Number of buffers sent (may be multiple per message)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_messages
                            
                            	Number of messages received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transmission_errors
                            
                            	Number of transmission errors
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpMessages, self).__init__()

                                self.yang_name = "iccp-messages"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_messages', YLeaf(YType.uint32, 'sent-messages')),
                                    ('sent_buffer_messages', YLeaf(YType.uint32, 'sent-buffer-messages')),
                                    ('received_messages', YLeaf(YType.uint32, 'received-messages')),
                                    ('transmission_errors', YLeaf(YType.uint32, 'transmission-errors')),
                                ])
                                self.sent_messages = None
                                self.sent_buffer_messages = None
                                self.received_messages = None
                                self.transmission_errors = None
                                self._segment_path = lambda: "iccp-messages"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpMessages, ['sent_messages', 'sent_buffer_messages', 'received_messages', 'transmission_errors'], name, value)


                        class IccpEvents(Entity):
                            """
                            Number of ICCP events
                            
                            .. attribute:: transport_up
                            
                            	Number of transport up events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transport_down
                            
                            	Number of transport down events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transport_unavailable
                            
                            	Number of transport unavailable events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: configured_set
                            
                            	Number of configure events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: configured_clear
                            
                            	Number of unconfigure events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachability_set
                            
                            	Number of reachability events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachability_cleared
                            
                            	Number of reachability cleared events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_status_up
                            
                            	Number of member status up events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_status_down
                            
                            	Number of member status down events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pe_isolated
                            
                            	Number of PE isolation events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pe_isolated_clear
                            
                            	Number of PE isolation cleared events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpEvents, self).__init__()

                                self.yang_name = "iccp-events"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('transport_up', YLeaf(YType.uint32, 'transport-up')),
                                    ('transport_down', YLeaf(YType.uint32, 'transport-down')),
                                    ('transport_unavailable', YLeaf(YType.uint32, 'transport-unavailable')),
                                    ('configured_set', YLeaf(YType.uint32, 'configured-set')),
                                    ('configured_clear', YLeaf(YType.uint32, 'configured-clear')),
                                    ('reachability_set', YLeaf(YType.uint32, 'reachability-set')),
                                    ('reachability_cleared', YLeaf(YType.uint32, 'reachability-cleared')),
                                    ('member_status_up', YLeaf(YType.uint32, 'member-status-up')),
                                    ('member_status_down', YLeaf(YType.uint32, 'member-status-down')),
                                    ('pe_isolated', YLeaf(YType.uint32, 'pe-isolated')),
                                    ('pe_isolated_clear', YLeaf(YType.uint32, 'pe-isolated-clear')),
                                ])
                                self.transport_up = None
                                self.transport_down = None
                                self.transport_unavailable = None
                                self.configured_set = None
                                self.configured_clear = None
                                self.reachability_set = None
                                self.reachability_cleared = None
                                self.member_status_up = None
                                self.member_status_down = None
                                self.pe_isolated = None
                                self.pe_isolated_clear = None
                                self._segment_path = lambda: "iccp-events"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorBundle.IccpGroupCounters.IccpEvents, ['transport_up', 'transport_down', 'transport_unavailable', 'configured_set', 'configured_clear', 'reachability_set', 'reachability_cleared', 'member_status_up', 'member_status_down', 'pe_isolated', 'pe_isolated_clear'], name, value)


                class IccpGroupAncestorMember(Entity):
                    """
                    Data for this item and its parent RG
                    
                    .. attribute:: iccp_group_counters
                    
                    	ICCP Group counters
                    	**type**\:  :py:class:`IccpGroupCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters>`
                    
                    .. attribute:: iccp_group_id
                    
                    	ICCP Group ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember, self).__init__()

                        self.yang_name = "iccp-group-ancestor-member"
                        self.yang_parent_name = "iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("iccp-group-counters", ("iccp_group_counters", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                        ])
                        self.iccp_group_id = None

                        self.iccp_group_counters = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters()
                        self.iccp_group_counters.parent = self
                        self._children_name_map["iccp_group_counters"] = "iccp-group-counters"
                        self._children_yang_names.add("iccp-group-counters")
                        self._segment_path = lambda: "iccp-group-ancestor-member"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember, ['iccp_group_id'], name, value)


                    class IccpGroupCounters(Entity):
                        """
                        ICCP Group counters
                        
                        .. attribute:: connection
                        
                        	Number of connection events
                        	**type**\:  :py:class:`Connection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.Connection>`
                        
                        .. attribute:: tl_vs
                        
                        	Number TLVs sent and received
                        	**type**\:  :py:class:`TlVs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.TlVs>`
                        
                        .. attribute:: invalid_tl_vs
                        
                        	Number invalid TLVs received
                        	**type**\:  :py:class:`InvalidTlVs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.InvalidTlVs>`
                        
                        .. attribute:: iccp_messages
                        
                        	Number ICCP messages sent and received
                        	**type**\:  :py:class:`IccpMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpMessages>`
                        
                        .. attribute:: iccp_events
                        
                        	Number of ICCP events
                        	**type**\:  :py:class:`IccpEvents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpEvents>`
                        
                        .. attribute:: last_time_cleared
                        
                        	Time in nsecs from boot when counters were last cleared (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: time_since_cleared
                        
                        	Elapsed time in nsecs since counters were last cleared
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: last_unexpected_event
                        
                        	Elapsed time in nsecs since last unexpected event
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters, self).__init__()

                            self.yang_name = "iccp-group-counters"
                            self.yang_parent_name = "iccp-group-ancestor-member"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("connection", ("connection", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.Connection)), ("tl-vs", ("tl_vs", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.TlVs)), ("invalid-tl-vs", ("invalid_tl_vs", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.InvalidTlVs)), ("iccp-messages", ("iccp_messages", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpMessages)), ("iccp-events", ("iccp_events", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpEvents))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                            ])
                            self.last_time_cleared = None
                            self.time_since_cleared = None
                            self.last_unexpected_event = None

                            self.connection = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.Connection()
                            self.connection.parent = self
                            self._children_name_map["connection"] = "connection"
                            self._children_yang_names.add("connection")

                            self.tl_vs = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.TlVs()
                            self.tl_vs.parent = self
                            self._children_name_map["tl_vs"] = "tl-vs"
                            self._children_yang_names.add("tl-vs")

                            self.invalid_tl_vs = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.InvalidTlVs()
                            self.invalid_tl_vs.parent = self
                            self._children_name_map["invalid_tl_vs"] = "invalid-tl-vs"
                            self._children_yang_names.add("invalid-tl-vs")

                            self.iccp_messages = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpMessages()
                            self.iccp_messages.parent = self
                            self._children_name_map["iccp_messages"] = "iccp-messages"
                            self._children_yang_names.add("iccp-messages")

                            self.iccp_events = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpEvents()
                            self.iccp_events.parent = self
                            self._children_name_map["iccp_events"] = "iccp-events"
                            self._children_yang_names.add("iccp-events")
                            self._segment_path = lambda: "iccp-group-counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters, ['last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                        class Connection(Entity):
                            """
                            Number of connection events
                            
                            .. attribute:: sent_connects
                            
                            	Number of connect TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_connects
                            
                            	Number of connect TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_invalid_connects
                            
                            	Number of invalid ICCP connects
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_config_connect_errors
                            
                            	Number of ICCP connection errors due to config
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_count_connect_errors
                            
                            	Number of ICCP connection errors due to max ICCP group count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_wrong_versions
                            
                            	Number of wrong version TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_wrong_versions
                            
                            	Number of wrong version TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_disconnects
                            
                            	Number of disconnect TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_disconnects
                            
                            	Number of disconnect TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_invalid_disconnects
                            
                            	Number of invalid ICCP disconnects
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.Connection, self).__init__()

                                self.yang_name = "connection"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_connects', YLeaf(YType.uint32, 'sent-connects')),
                                    ('received_connects', YLeaf(YType.uint32, 'received-connects')),
                                    ('iccp_invalid_connects', YLeaf(YType.uint32, 'iccp-invalid-connects')),
                                    ('iccp_config_connect_errors', YLeaf(YType.uint32, 'iccp-config-connect-errors')),
                                    ('iccp_count_connect_errors', YLeaf(YType.uint32, 'iccp-count-connect-errors')),
                                    ('sent_wrong_versions', YLeaf(YType.uint32, 'sent-wrong-versions')),
                                    ('received_wrong_versions', YLeaf(YType.uint32, 'received-wrong-versions')),
                                    ('sent_disconnects', YLeaf(YType.uint32, 'sent-disconnects')),
                                    ('received_disconnects', YLeaf(YType.uint32, 'received-disconnects')),
                                    ('iccp_invalid_disconnects', YLeaf(YType.uint32, 'iccp-invalid-disconnects')),
                                ])
                                self.sent_connects = None
                                self.received_connects = None
                                self.iccp_invalid_connects = None
                                self.iccp_config_connect_errors = None
                                self.iccp_count_connect_errors = None
                                self.sent_wrong_versions = None
                                self.received_wrong_versions = None
                                self.sent_disconnects = None
                                self.received_disconnects = None
                                self.iccp_invalid_disconnects = None
                                self._segment_path = lambda: "connection"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.Connection, ['sent_connects', 'received_connects', 'iccp_invalid_connects', 'iccp_config_connect_errors', 'iccp_count_connect_errors', 'sent_wrong_versions', 'received_wrong_versions', 'sent_disconnects', 'received_disconnects', 'iccp_invalid_disconnects'], name, value)


                        class TlVs(Entity):
                            """
                            Number TLVs sent and received
                            
                            .. attribute:: sent_config
                            
                            	Number of config TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_config
                            
                            	Number of config TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_state
                            
                            	Number of state TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_state
                            
                            	Number of state TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_na_ks
                            
                            	Number of NAK TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_na_ks
                            
                            	Number of NAK TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_sync_requests
                            
                            	Number of sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of sync request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_state_sync_requests
                            
                            	Number of state sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_state_sync_requests
                            
                            	Number of state sync request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_config_sync_requests
                            
                            	Number of config sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_config_sync_requests
                            
                            	Number of state config request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_solicited_sync_data
                            
                            	Number of solicited sync data TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_solicited_sync_data
                            
                            	Number of solicited sync data TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_unsolicited_sync_data
                            
                            	Number of unsolicited sync data TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_unsolicited_sync_data
                            
                            	Number of unsolicited sync data TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.TlVs, self).__init__()

                                self.yang_name = "tl-vs"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_config', YLeaf(YType.uint32, 'sent-config')),
                                    ('received_config', YLeaf(YType.uint32, 'received-config')),
                                    ('sent_state', YLeaf(YType.uint32, 'sent-state')),
                                    ('received_state', YLeaf(YType.uint32, 'received-state')),
                                    ('sent_na_ks', YLeaf(YType.uint32, 'sent-na-ks')),
                                    ('received_na_ks', YLeaf(YType.uint32, 'received-na-ks')),
                                    ('sent_sync_requests', YLeaf(YType.uint32, 'sent-sync-requests')),
                                    ('received_sync_requests', YLeaf(YType.uint32, 'received-sync-requests')),
                                    ('sent_state_sync_requests', YLeaf(YType.uint32, 'sent-state-sync-requests')),
                                    ('received_state_sync_requests', YLeaf(YType.uint32, 'received-state-sync-requests')),
                                    ('sent_config_sync_requests', YLeaf(YType.uint32, 'sent-config-sync-requests')),
                                    ('received_config_sync_requests', YLeaf(YType.uint32, 'received-config-sync-requests')),
                                    ('sent_solicited_sync_data', YLeaf(YType.uint32, 'sent-solicited-sync-data')),
                                    ('received_solicited_sync_data', YLeaf(YType.uint32, 'received-solicited-sync-data')),
                                    ('sent_unsolicited_sync_data', YLeaf(YType.uint32, 'sent-unsolicited-sync-data')),
                                    ('received_unsolicited_sync_data', YLeaf(YType.uint32, 'received-unsolicited-sync-data')),
                                ])
                                self.sent_config = None
                                self.received_config = None
                                self.sent_state = None
                                self.received_state = None
                                self.sent_na_ks = None
                                self.received_na_ks = None
                                self.sent_sync_requests = None
                                self.received_sync_requests = None
                                self.sent_state_sync_requests = None
                                self.received_state_sync_requests = None
                                self.sent_config_sync_requests = None
                                self.received_config_sync_requests = None
                                self.sent_solicited_sync_data = None
                                self.received_solicited_sync_data = None
                                self.sent_unsolicited_sync_data = None
                                self.received_unsolicited_sync_data = None
                                self._segment_path = lambda: "tl-vs"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.TlVs, ['sent_config', 'received_config', 'sent_state', 'received_state', 'sent_na_ks', 'received_na_ks', 'sent_sync_requests', 'received_sync_requests', 'sent_state_sync_requests', 'received_state_sync_requests', 'sent_config_sync_requests', 'received_config_sync_requests', 'sent_solicited_sync_data', 'received_solicited_sync_data', 'sent_unsolicited_sync_data', 'received_unsolicited_sync_data'], name, value)


                        class InvalidTlVs(Entity):
                            """
                            Number invalid TLVs received
                            
                            .. attribute:: incorrect_length
                            
                            	Number of messages received of an incorrect length
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: invalid_type
                            
                            	Number of messages received with an invalid mLACP TLV type
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: invalid_data
                            
                            	Number of messages received containing invalid data
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unknown_bundle
                            
                            	Number of messages received for an unknown bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unknown_port
                            
                            	Number of messages received for an unknown port
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.InvalidTlVs, self).__init__()

                                self.yang_name = "invalid-tl-vs"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('incorrect_length', YLeaf(YType.uint32, 'incorrect-length')),
                                    ('invalid_type', YLeaf(YType.uint32, 'invalid-type')),
                                    ('invalid_data', YLeaf(YType.uint32, 'invalid-data')),
                                    ('unknown_bundle', YLeaf(YType.uint32, 'unknown-bundle')),
                                    ('unknown_port', YLeaf(YType.uint32, 'unknown-port')),
                                ])
                                self.incorrect_length = None
                                self.invalid_type = None
                                self.invalid_data = None
                                self.unknown_bundle = None
                                self.unknown_port = None
                                self._segment_path = lambda: "invalid-tl-vs"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.InvalidTlVs, ['incorrect_length', 'invalid_type', 'invalid_data', 'unknown_bundle', 'unknown_port'], name, value)


                        class IccpMessages(Entity):
                            """
                            Number ICCP messages sent and received
                            
                            .. attribute:: sent_messages
                            
                            	Number of messages sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_buffer_messages
                            
                            	Number of buffers sent (may be multiple per message)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_messages
                            
                            	Number of messages received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transmission_errors
                            
                            	Number of transmission errors
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpMessages, self).__init__()

                                self.yang_name = "iccp-messages"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_messages', YLeaf(YType.uint32, 'sent-messages')),
                                    ('sent_buffer_messages', YLeaf(YType.uint32, 'sent-buffer-messages')),
                                    ('received_messages', YLeaf(YType.uint32, 'received-messages')),
                                    ('transmission_errors', YLeaf(YType.uint32, 'transmission-errors')),
                                ])
                                self.sent_messages = None
                                self.sent_buffer_messages = None
                                self.received_messages = None
                                self.transmission_errors = None
                                self._segment_path = lambda: "iccp-messages"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpMessages, ['sent_messages', 'sent_buffer_messages', 'received_messages', 'transmission_errors'], name, value)


                        class IccpEvents(Entity):
                            """
                            Number of ICCP events
                            
                            .. attribute:: transport_up
                            
                            	Number of transport up events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transport_down
                            
                            	Number of transport down events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transport_unavailable
                            
                            	Number of transport unavailable events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: configured_set
                            
                            	Number of configure events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: configured_clear
                            
                            	Number of unconfigure events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachability_set
                            
                            	Number of reachability events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachability_cleared
                            
                            	Number of reachability cleared events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_status_up
                            
                            	Number of member status up events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_status_down
                            
                            	Number of member status down events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pe_isolated
                            
                            	Number of PE isolation events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pe_isolated_clear
                            
                            	Number of PE isolation cleared events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpEvents, self).__init__()

                                self.yang_name = "iccp-events"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('transport_up', YLeaf(YType.uint32, 'transport-up')),
                                    ('transport_down', YLeaf(YType.uint32, 'transport-down')),
                                    ('transport_unavailable', YLeaf(YType.uint32, 'transport-unavailable')),
                                    ('configured_set', YLeaf(YType.uint32, 'configured-set')),
                                    ('configured_clear', YLeaf(YType.uint32, 'configured-clear')),
                                    ('reachability_set', YLeaf(YType.uint32, 'reachability-set')),
                                    ('reachability_cleared', YLeaf(YType.uint32, 'reachability-cleared')),
                                    ('member_status_up', YLeaf(YType.uint32, 'member-status-up')),
                                    ('member_status_down', YLeaf(YType.uint32, 'member-status-down')),
                                    ('pe_isolated', YLeaf(YType.uint32, 'pe-isolated')),
                                    ('pe_isolated_clear', YLeaf(YType.uint32, 'pe-isolated-clear')),
                                ])
                                self.transport_up = None
                                self.transport_down = None
                                self.transport_unavailable = None
                                self.configured_set = None
                                self.configured_clear = None
                                self.reachability_set = None
                                self.reachability_cleared = None
                                self.member_status_up = None
                                self.member_status_down = None
                                self.pe_isolated = None
                                self.pe_isolated_clear = None
                                self._segment_path = lambda: "iccp-events"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorMember.IccpGroupCounters.IccpEvents, ['transport_up', 'transport_down', 'transport_unavailable', 'configured_set', 'configured_clear', 'reachability_set', 'reachability_cleared', 'member_status_up', 'member_status_down', 'pe_isolated', 'pe_isolated_clear'], name, value)


                class IccpGroupAncestorNode(Entity):
                    """
                    Data for this item and its parent RG
                    
                    .. attribute:: iccp_group_counters
                    
                    	ICCP Group counters
                    	**type**\:  :py:class:`IccpGroupCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters>`
                    
                    .. attribute:: iccp_group_id
                    
                    	ICCP Group ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode, self).__init__()

                        self.yang_name = "iccp-group-ancestor-node"
                        self.yang_parent_name = "iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("iccp-group-counters", ("iccp_group_counters", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                        ])
                        self.iccp_group_id = None

                        self.iccp_group_counters = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters()
                        self.iccp_group_counters.parent = self
                        self._children_name_map["iccp_group_counters"] = "iccp-group-counters"
                        self._children_yang_names.add("iccp-group-counters")
                        self._segment_path = lambda: "iccp-group-ancestor-node"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode, ['iccp_group_id'], name, value)


                    class IccpGroupCounters(Entity):
                        """
                        ICCP Group counters
                        
                        .. attribute:: connection
                        
                        	Number of connection events
                        	**type**\:  :py:class:`Connection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.Connection>`
                        
                        .. attribute:: tl_vs
                        
                        	Number TLVs sent and received
                        	**type**\:  :py:class:`TlVs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.TlVs>`
                        
                        .. attribute:: invalid_tl_vs
                        
                        	Number invalid TLVs received
                        	**type**\:  :py:class:`InvalidTlVs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.InvalidTlVs>`
                        
                        .. attribute:: iccp_messages
                        
                        	Number ICCP messages sent and received
                        	**type**\:  :py:class:`IccpMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpMessages>`
                        
                        .. attribute:: iccp_events
                        
                        	Number of ICCP events
                        	**type**\:  :py:class:`IccpEvents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpEvents>`
                        
                        .. attribute:: last_time_cleared
                        
                        	Time in nsecs from boot when counters were last cleared (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: time_since_cleared
                        
                        	Elapsed time in nsecs since counters were last cleared
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: last_unexpected_event
                        
                        	Elapsed time in nsecs since last unexpected event
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters, self).__init__()

                            self.yang_name = "iccp-group-counters"
                            self.yang_parent_name = "iccp-group-ancestor-node"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("connection", ("connection", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.Connection)), ("tl-vs", ("tl_vs", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.TlVs)), ("invalid-tl-vs", ("invalid_tl_vs", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.InvalidTlVs)), ("iccp-messages", ("iccp_messages", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpMessages)), ("iccp-events", ("iccp_events", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpEvents))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                            ])
                            self.last_time_cleared = None
                            self.time_since_cleared = None
                            self.last_unexpected_event = None

                            self.connection = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.Connection()
                            self.connection.parent = self
                            self._children_name_map["connection"] = "connection"
                            self._children_yang_names.add("connection")

                            self.tl_vs = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.TlVs()
                            self.tl_vs.parent = self
                            self._children_name_map["tl_vs"] = "tl-vs"
                            self._children_yang_names.add("tl-vs")

                            self.invalid_tl_vs = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.InvalidTlVs()
                            self.invalid_tl_vs.parent = self
                            self._children_name_map["invalid_tl_vs"] = "invalid-tl-vs"
                            self._children_yang_names.add("invalid-tl-vs")

                            self.iccp_messages = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpMessages()
                            self.iccp_messages.parent = self
                            self._children_name_map["iccp_messages"] = "iccp-messages"
                            self._children_yang_names.add("iccp-messages")

                            self.iccp_events = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpEvents()
                            self.iccp_events.parent = self
                            self._children_name_map["iccp_events"] = "iccp-events"
                            self._children_yang_names.add("iccp-events")
                            self._segment_path = lambda: "iccp-group-counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters, ['last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                        class Connection(Entity):
                            """
                            Number of connection events
                            
                            .. attribute:: sent_connects
                            
                            	Number of connect TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_connects
                            
                            	Number of connect TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_invalid_connects
                            
                            	Number of invalid ICCP connects
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_config_connect_errors
                            
                            	Number of ICCP connection errors due to config
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_count_connect_errors
                            
                            	Number of ICCP connection errors due to max ICCP group count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_wrong_versions
                            
                            	Number of wrong version TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_wrong_versions
                            
                            	Number of wrong version TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_disconnects
                            
                            	Number of disconnect TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_disconnects
                            
                            	Number of disconnect TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_invalid_disconnects
                            
                            	Number of invalid ICCP disconnects
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.Connection, self).__init__()

                                self.yang_name = "connection"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_connects', YLeaf(YType.uint32, 'sent-connects')),
                                    ('received_connects', YLeaf(YType.uint32, 'received-connects')),
                                    ('iccp_invalid_connects', YLeaf(YType.uint32, 'iccp-invalid-connects')),
                                    ('iccp_config_connect_errors', YLeaf(YType.uint32, 'iccp-config-connect-errors')),
                                    ('iccp_count_connect_errors', YLeaf(YType.uint32, 'iccp-count-connect-errors')),
                                    ('sent_wrong_versions', YLeaf(YType.uint32, 'sent-wrong-versions')),
                                    ('received_wrong_versions', YLeaf(YType.uint32, 'received-wrong-versions')),
                                    ('sent_disconnects', YLeaf(YType.uint32, 'sent-disconnects')),
                                    ('received_disconnects', YLeaf(YType.uint32, 'received-disconnects')),
                                    ('iccp_invalid_disconnects', YLeaf(YType.uint32, 'iccp-invalid-disconnects')),
                                ])
                                self.sent_connects = None
                                self.received_connects = None
                                self.iccp_invalid_connects = None
                                self.iccp_config_connect_errors = None
                                self.iccp_count_connect_errors = None
                                self.sent_wrong_versions = None
                                self.received_wrong_versions = None
                                self.sent_disconnects = None
                                self.received_disconnects = None
                                self.iccp_invalid_disconnects = None
                                self._segment_path = lambda: "connection"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.Connection, ['sent_connects', 'received_connects', 'iccp_invalid_connects', 'iccp_config_connect_errors', 'iccp_count_connect_errors', 'sent_wrong_versions', 'received_wrong_versions', 'sent_disconnects', 'received_disconnects', 'iccp_invalid_disconnects'], name, value)


                        class TlVs(Entity):
                            """
                            Number TLVs sent and received
                            
                            .. attribute:: sent_config
                            
                            	Number of config TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_config
                            
                            	Number of config TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_state
                            
                            	Number of state TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_state
                            
                            	Number of state TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_na_ks
                            
                            	Number of NAK TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_na_ks
                            
                            	Number of NAK TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_sync_requests
                            
                            	Number of sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of sync request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_state_sync_requests
                            
                            	Number of state sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_state_sync_requests
                            
                            	Number of state sync request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_config_sync_requests
                            
                            	Number of config sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_config_sync_requests
                            
                            	Number of state config request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_solicited_sync_data
                            
                            	Number of solicited sync data TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_solicited_sync_data
                            
                            	Number of solicited sync data TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_unsolicited_sync_data
                            
                            	Number of unsolicited sync data TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_unsolicited_sync_data
                            
                            	Number of unsolicited sync data TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.TlVs, self).__init__()

                                self.yang_name = "tl-vs"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_config', YLeaf(YType.uint32, 'sent-config')),
                                    ('received_config', YLeaf(YType.uint32, 'received-config')),
                                    ('sent_state', YLeaf(YType.uint32, 'sent-state')),
                                    ('received_state', YLeaf(YType.uint32, 'received-state')),
                                    ('sent_na_ks', YLeaf(YType.uint32, 'sent-na-ks')),
                                    ('received_na_ks', YLeaf(YType.uint32, 'received-na-ks')),
                                    ('sent_sync_requests', YLeaf(YType.uint32, 'sent-sync-requests')),
                                    ('received_sync_requests', YLeaf(YType.uint32, 'received-sync-requests')),
                                    ('sent_state_sync_requests', YLeaf(YType.uint32, 'sent-state-sync-requests')),
                                    ('received_state_sync_requests', YLeaf(YType.uint32, 'received-state-sync-requests')),
                                    ('sent_config_sync_requests', YLeaf(YType.uint32, 'sent-config-sync-requests')),
                                    ('received_config_sync_requests', YLeaf(YType.uint32, 'received-config-sync-requests')),
                                    ('sent_solicited_sync_data', YLeaf(YType.uint32, 'sent-solicited-sync-data')),
                                    ('received_solicited_sync_data', YLeaf(YType.uint32, 'received-solicited-sync-data')),
                                    ('sent_unsolicited_sync_data', YLeaf(YType.uint32, 'sent-unsolicited-sync-data')),
                                    ('received_unsolicited_sync_data', YLeaf(YType.uint32, 'received-unsolicited-sync-data')),
                                ])
                                self.sent_config = None
                                self.received_config = None
                                self.sent_state = None
                                self.received_state = None
                                self.sent_na_ks = None
                                self.received_na_ks = None
                                self.sent_sync_requests = None
                                self.received_sync_requests = None
                                self.sent_state_sync_requests = None
                                self.received_state_sync_requests = None
                                self.sent_config_sync_requests = None
                                self.received_config_sync_requests = None
                                self.sent_solicited_sync_data = None
                                self.received_solicited_sync_data = None
                                self.sent_unsolicited_sync_data = None
                                self.received_unsolicited_sync_data = None
                                self._segment_path = lambda: "tl-vs"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.TlVs, ['sent_config', 'received_config', 'sent_state', 'received_state', 'sent_na_ks', 'received_na_ks', 'sent_sync_requests', 'received_sync_requests', 'sent_state_sync_requests', 'received_state_sync_requests', 'sent_config_sync_requests', 'received_config_sync_requests', 'sent_solicited_sync_data', 'received_solicited_sync_data', 'sent_unsolicited_sync_data', 'received_unsolicited_sync_data'], name, value)


                        class InvalidTlVs(Entity):
                            """
                            Number invalid TLVs received
                            
                            .. attribute:: incorrect_length
                            
                            	Number of messages received of an incorrect length
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: invalid_type
                            
                            	Number of messages received with an invalid mLACP TLV type
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: invalid_data
                            
                            	Number of messages received containing invalid data
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unknown_bundle
                            
                            	Number of messages received for an unknown bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unknown_port
                            
                            	Number of messages received for an unknown port
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.InvalidTlVs, self).__init__()

                                self.yang_name = "invalid-tl-vs"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('incorrect_length', YLeaf(YType.uint32, 'incorrect-length')),
                                    ('invalid_type', YLeaf(YType.uint32, 'invalid-type')),
                                    ('invalid_data', YLeaf(YType.uint32, 'invalid-data')),
                                    ('unknown_bundle', YLeaf(YType.uint32, 'unknown-bundle')),
                                    ('unknown_port', YLeaf(YType.uint32, 'unknown-port')),
                                ])
                                self.incorrect_length = None
                                self.invalid_type = None
                                self.invalid_data = None
                                self.unknown_bundle = None
                                self.unknown_port = None
                                self._segment_path = lambda: "invalid-tl-vs"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.InvalidTlVs, ['incorrect_length', 'invalid_type', 'invalid_data', 'unknown_bundle', 'unknown_port'], name, value)


                        class IccpMessages(Entity):
                            """
                            Number ICCP messages sent and received
                            
                            .. attribute:: sent_messages
                            
                            	Number of messages sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_buffer_messages
                            
                            	Number of buffers sent (may be multiple per message)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_messages
                            
                            	Number of messages received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transmission_errors
                            
                            	Number of transmission errors
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpMessages, self).__init__()

                                self.yang_name = "iccp-messages"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_messages', YLeaf(YType.uint32, 'sent-messages')),
                                    ('sent_buffer_messages', YLeaf(YType.uint32, 'sent-buffer-messages')),
                                    ('received_messages', YLeaf(YType.uint32, 'received-messages')),
                                    ('transmission_errors', YLeaf(YType.uint32, 'transmission-errors')),
                                ])
                                self.sent_messages = None
                                self.sent_buffer_messages = None
                                self.received_messages = None
                                self.transmission_errors = None
                                self._segment_path = lambda: "iccp-messages"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpMessages, ['sent_messages', 'sent_buffer_messages', 'received_messages', 'transmission_errors'], name, value)


                        class IccpEvents(Entity):
                            """
                            Number of ICCP events
                            
                            .. attribute:: transport_up
                            
                            	Number of transport up events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transport_down
                            
                            	Number of transport down events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transport_unavailable
                            
                            	Number of transport unavailable events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: configured_set
                            
                            	Number of configure events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: configured_clear
                            
                            	Number of unconfigure events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachability_set
                            
                            	Number of reachability events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachability_cleared
                            
                            	Number of reachability cleared events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_status_up
                            
                            	Number of member status up events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_status_down
                            
                            	Number of member status down events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pe_isolated
                            
                            	Number of PE isolation events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pe_isolated_clear
                            
                            	Number of PE isolation cleared events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpEvents, self).__init__()

                                self.yang_name = "iccp-events"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('transport_up', YLeaf(YType.uint32, 'transport-up')),
                                    ('transport_down', YLeaf(YType.uint32, 'transport-down')),
                                    ('transport_unavailable', YLeaf(YType.uint32, 'transport-unavailable')),
                                    ('configured_set', YLeaf(YType.uint32, 'configured-set')),
                                    ('configured_clear', YLeaf(YType.uint32, 'configured-clear')),
                                    ('reachability_set', YLeaf(YType.uint32, 'reachability-set')),
                                    ('reachability_cleared', YLeaf(YType.uint32, 'reachability-cleared')),
                                    ('member_status_up', YLeaf(YType.uint32, 'member-status-up')),
                                    ('member_status_down', YLeaf(YType.uint32, 'member-status-down')),
                                    ('pe_isolated', YLeaf(YType.uint32, 'pe-isolated')),
                                    ('pe_isolated_clear', YLeaf(YType.uint32, 'pe-isolated-clear')),
                                ])
                                self.transport_up = None
                                self.transport_down = None
                                self.transport_unavailable = None
                                self.configured_set = None
                                self.configured_clear = None
                                self.reachability_set = None
                                self.reachability_cleared = None
                                self.member_status_up = None
                                self.member_status_down = None
                                self.pe_isolated = None
                                self.pe_isolated_clear = None
                                self._segment_path = lambda: "iccp-events"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupAncestorNode.IccpGroupCounters.IccpEvents, ['transport_up', 'transport_down', 'transport_unavailable', 'configured_set', 'configured_clear', 'reachability_set', 'reachability_cleared', 'member_status_up', 'member_status_down', 'pe_isolated', 'pe_isolated_clear'], name, value)


                class IccpGroupItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: iccp_group_counters
                    
                    	ICCP Group counters
                    	**type**\:  :py:class:`IccpGroupCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters>`
                    
                    .. attribute:: iccp_group_id
                    
                    	ICCP Group ID
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem, self).__init__()

                        self.yang_name = "iccp-group-item"
                        self.yang_parent_name = "iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("iccp-group-counters", ("iccp_group_counters", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                        ])
                        self.iccp_group_id = None

                        self.iccp_group_counters = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters()
                        self.iccp_group_counters.parent = self
                        self._children_name_map["iccp_group_counters"] = "iccp-group-counters"
                        self._children_yang_names.add("iccp-group-counters")
                        self._segment_path = lambda: "iccp-group-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem, ['iccp_group_id'], name, value)


                    class IccpGroupCounters(Entity):
                        """
                        ICCP Group counters
                        
                        .. attribute:: connection
                        
                        	Number of connection events
                        	**type**\:  :py:class:`Connection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.Connection>`
                        
                        .. attribute:: tl_vs
                        
                        	Number TLVs sent and received
                        	**type**\:  :py:class:`TlVs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.TlVs>`
                        
                        .. attribute:: invalid_tl_vs
                        
                        	Number invalid TLVs received
                        	**type**\:  :py:class:`InvalidTlVs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.InvalidTlVs>`
                        
                        .. attribute:: iccp_messages
                        
                        	Number ICCP messages sent and received
                        	**type**\:  :py:class:`IccpMessages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpMessages>`
                        
                        .. attribute:: iccp_events
                        
                        	Number of ICCP events
                        	**type**\:  :py:class:`IccpEvents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpEvents>`
                        
                        .. attribute:: last_time_cleared
                        
                        	Time in nsecs from boot when counters were last cleared (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: time_since_cleared
                        
                        	Elapsed time in nsecs since counters were last cleared
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        .. attribute:: last_unexpected_event
                        
                        	Elapsed time in nsecs since last unexpected event
                        	**type**\: int
                        
                        	**range:** 0..18446744073709551615
                        
                        	**units**\: nanosecond
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters, self).__init__()

                            self.yang_name = "iccp-group-counters"
                            self.yang_parent_name = "iccp-group-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("connection", ("connection", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.Connection)), ("tl-vs", ("tl_vs", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.TlVs)), ("invalid-tl-vs", ("invalid_tl_vs", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.InvalidTlVs)), ("iccp-messages", ("iccp_messages", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpMessages)), ("iccp-events", ("iccp_events", BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpEvents))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                            ])
                            self.last_time_cleared = None
                            self.time_since_cleared = None
                            self.last_unexpected_event = None

                            self.connection = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.Connection()
                            self.connection.parent = self
                            self._children_name_map["connection"] = "connection"
                            self._children_yang_names.add("connection")

                            self.tl_vs = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.TlVs()
                            self.tl_vs.parent = self
                            self._children_name_map["tl_vs"] = "tl-vs"
                            self._children_yang_names.add("tl-vs")

                            self.invalid_tl_vs = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.InvalidTlVs()
                            self.invalid_tl_vs.parent = self
                            self._children_name_map["invalid_tl_vs"] = "invalid-tl-vs"
                            self._children_yang_names.add("invalid-tl-vs")

                            self.iccp_messages = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpMessages()
                            self.iccp_messages.parent = self
                            self._children_name_map["iccp_messages"] = "iccp-messages"
                            self._children_yang_names.add("iccp-messages")

                            self.iccp_events = BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpEvents()
                            self.iccp_events.parent = self
                            self._children_name_map["iccp_events"] = "iccp-events"
                            self._children_yang_names.add("iccp-events")
                            self._segment_path = lambda: "iccp-group-counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters, ['last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                        class Connection(Entity):
                            """
                            Number of connection events
                            
                            .. attribute:: sent_connects
                            
                            	Number of connect TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_connects
                            
                            	Number of connect TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_invalid_connects
                            
                            	Number of invalid ICCP connects
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_config_connect_errors
                            
                            	Number of ICCP connection errors due to config
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_count_connect_errors
                            
                            	Number of ICCP connection errors due to max ICCP group count
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_wrong_versions
                            
                            	Number of wrong version TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_wrong_versions
                            
                            	Number of wrong version TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_disconnects
                            
                            	Number of disconnect TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_disconnects
                            
                            	Number of disconnect TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_invalid_disconnects
                            
                            	Number of invalid ICCP disconnects
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.Connection, self).__init__()

                                self.yang_name = "connection"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_connects', YLeaf(YType.uint32, 'sent-connects')),
                                    ('received_connects', YLeaf(YType.uint32, 'received-connects')),
                                    ('iccp_invalid_connects', YLeaf(YType.uint32, 'iccp-invalid-connects')),
                                    ('iccp_config_connect_errors', YLeaf(YType.uint32, 'iccp-config-connect-errors')),
                                    ('iccp_count_connect_errors', YLeaf(YType.uint32, 'iccp-count-connect-errors')),
                                    ('sent_wrong_versions', YLeaf(YType.uint32, 'sent-wrong-versions')),
                                    ('received_wrong_versions', YLeaf(YType.uint32, 'received-wrong-versions')),
                                    ('sent_disconnects', YLeaf(YType.uint32, 'sent-disconnects')),
                                    ('received_disconnects', YLeaf(YType.uint32, 'received-disconnects')),
                                    ('iccp_invalid_disconnects', YLeaf(YType.uint32, 'iccp-invalid-disconnects')),
                                ])
                                self.sent_connects = None
                                self.received_connects = None
                                self.iccp_invalid_connects = None
                                self.iccp_config_connect_errors = None
                                self.iccp_count_connect_errors = None
                                self.sent_wrong_versions = None
                                self.received_wrong_versions = None
                                self.sent_disconnects = None
                                self.received_disconnects = None
                                self.iccp_invalid_disconnects = None
                                self._segment_path = lambda: "connection"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.Connection, ['sent_connects', 'received_connects', 'iccp_invalid_connects', 'iccp_config_connect_errors', 'iccp_count_connect_errors', 'sent_wrong_versions', 'received_wrong_versions', 'sent_disconnects', 'received_disconnects', 'iccp_invalid_disconnects'], name, value)


                        class TlVs(Entity):
                            """
                            Number TLVs sent and received
                            
                            .. attribute:: sent_config
                            
                            	Number of config TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_config
                            
                            	Number of config TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_state
                            
                            	Number of state TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_state
                            
                            	Number of state TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_na_ks
                            
                            	Number of NAK TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_na_ks
                            
                            	Number of NAK TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_sync_requests
                            
                            	Number of sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of sync request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_state_sync_requests
                            
                            	Number of state sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_state_sync_requests
                            
                            	Number of state sync request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_config_sync_requests
                            
                            	Number of config sync request TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_config_sync_requests
                            
                            	Number of state config request TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_solicited_sync_data
                            
                            	Number of solicited sync data TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_solicited_sync_data
                            
                            	Number of solicited sync data TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_unsolicited_sync_data
                            
                            	Number of unsolicited sync data TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_unsolicited_sync_data
                            
                            	Number of unsolicited sync data TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.TlVs, self).__init__()

                                self.yang_name = "tl-vs"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_config', YLeaf(YType.uint32, 'sent-config')),
                                    ('received_config', YLeaf(YType.uint32, 'received-config')),
                                    ('sent_state', YLeaf(YType.uint32, 'sent-state')),
                                    ('received_state', YLeaf(YType.uint32, 'received-state')),
                                    ('sent_na_ks', YLeaf(YType.uint32, 'sent-na-ks')),
                                    ('received_na_ks', YLeaf(YType.uint32, 'received-na-ks')),
                                    ('sent_sync_requests', YLeaf(YType.uint32, 'sent-sync-requests')),
                                    ('received_sync_requests', YLeaf(YType.uint32, 'received-sync-requests')),
                                    ('sent_state_sync_requests', YLeaf(YType.uint32, 'sent-state-sync-requests')),
                                    ('received_state_sync_requests', YLeaf(YType.uint32, 'received-state-sync-requests')),
                                    ('sent_config_sync_requests', YLeaf(YType.uint32, 'sent-config-sync-requests')),
                                    ('received_config_sync_requests', YLeaf(YType.uint32, 'received-config-sync-requests')),
                                    ('sent_solicited_sync_data', YLeaf(YType.uint32, 'sent-solicited-sync-data')),
                                    ('received_solicited_sync_data', YLeaf(YType.uint32, 'received-solicited-sync-data')),
                                    ('sent_unsolicited_sync_data', YLeaf(YType.uint32, 'sent-unsolicited-sync-data')),
                                    ('received_unsolicited_sync_data', YLeaf(YType.uint32, 'received-unsolicited-sync-data')),
                                ])
                                self.sent_config = None
                                self.received_config = None
                                self.sent_state = None
                                self.received_state = None
                                self.sent_na_ks = None
                                self.received_na_ks = None
                                self.sent_sync_requests = None
                                self.received_sync_requests = None
                                self.sent_state_sync_requests = None
                                self.received_state_sync_requests = None
                                self.sent_config_sync_requests = None
                                self.received_config_sync_requests = None
                                self.sent_solicited_sync_data = None
                                self.received_solicited_sync_data = None
                                self.sent_unsolicited_sync_data = None
                                self.received_unsolicited_sync_data = None
                                self._segment_path = lambda: "tl-vs"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.TlVs, ['sent_config', 'received_config', 'sent_state', 'received_state', 'sent_na_ks', 'received_na_ks', 'sent_sync_requests', 'received_sync_requests', 'sent_state_sync_requests', 'received_state_sync_requests', 'sent_config_sync_requests', 'received_config_sync_requests', 'sent_solicited_sync_data', 'received_solicited_sync_data', 'sent_unsolicited_sync_data', 'received_unsolicited_sync_data'], name, value)


                        class InvalidTlVs(Entity):
                            """
                            Number invalid TLVs received
                            
                            .. attribute:: incorrect_length
                            
                            	Number of messages received of an incorrect length
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: invalid_type
                            
                            	Number of messages received with an invalid mLACP TLV type
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: invalid_data
                            
                            	Number of messages received containing invalid data
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unknown_bundle
                            
                            	Number of messages received for an unknown bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: unknown_port
                            
                            	Number of messages received for an unknown port
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.InvalidTlVs, self).__init__()

                                self.yang_name = "invalid-tl-vs"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('incorrect_length', YLeaf(YType.uint32, 'incorrect-length')),
                                    ('invalid_type', YLeaf(YType.uint32, 'invalid-type')),
                                    ('invalid_data', YLeaf(YType.uint32, 'invalid-data')),
                                    ('unknown_bundle', YLeaf(YType.uint32, 'unknown-bundle')),
                                    ('unknown_port', YLeaf(YType.uint32, 'unknown-port')),
                                ])
                                self.incorrect_length = None
                                self.invalid_type = None
                                self.invalid_data = None
                                self.unknown_bundle = None
                                self.unknown_port = None
                                self._segment_path = lambda: "invalid-tl-vs"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.InvalidTlVs, ['incorrect_length', 'invalid_type', 'invalid_data', 'unknown_bundle', 'unknown_port'], name, value)


                        class IccpMessages(Entity):
                            """
                            Number ICCP messages sent and received
                            
                            .. attribute:: sent_messages
                            
                            	Number of messages sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_buffer_messages
                            
                            	Number of buffers sent (may be multiple per message)
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_messages
                            
                            	Number of messages received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transmission_errors
                            
                            	Number of transmission errors
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpMessages, self).__init__()

                                self.yang_name = "iccp-messages"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_messages', YLeaf(YType.uint32, 'sent-messages')),
                                    ('sent_buffer_messages', YLeaf(YType.uint32, 'sent-buffer-messages')),
                                    ('received_messages', YLeaf(YType.uint32, 'received-messages')),
                                    ('transmission_errors', YLeaf(YType.uint32, 'transmission-errors')),
                                ])
                                self.sent_messages = None
                                self.sent_buffer_messages = None
                                self.received_messages = None
                                self.transmission_errors = None
                                self._segment_path = lambda: "iccp-messages"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpMessages, ['sent_messages', 'sent_buffer_messages', 'received_messages', 'transmission_errors'], name, value)


                        class IccpEvents(Entity):
                            """
                            Number of ICCP events
                            
                            .. attribute:: transport_up
                            
                            	Number of transport up events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transport_down
                            
                            	Number of transport down events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: transport_unavailable
                            
                            	Number of transport unavailable events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: configured_set
                            
                            	Number of configure events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: configured_clear
                            
                            	Number of unconfigure events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachability_set
                            
                            	Number of reachability events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: reachability_cleared
                            
                            	Number of reachability cleared events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_status_up
                            
                            	Number of member status up events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_status_down
                            
                            	Number of member status down events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pe_isolated
                            
                            	Number of PE isolation events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: pe_isolated_clear
                            
                            	Number of PE isolation cleared events
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpEvents, self).__init__()

                                self.yang_name = "iccp-events"
                                self.yang_parent_name = "iccp-group-counters"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('transport_up', YLeaf(YType.uint32, 'transport-up')),
                                    ('transport_down', YLeaf(YType.uint32, 'transport-down')),
                                    ('transport_unavailable', YLeaf(YType.uint32, 'transport-unavailable')),
                                    ('configured_set', YLeaf(YType.uint32, 'configured-set')),
                                    ('configured_clear', YLeaf(YType.uint32, 'configured-clear')),
                                    ('reachability_set', YLeaf(YType.uint32, 'reachability-set')),
                                    ('reachability_cleared', YLeaf(YType.uint32, 'reachability-cleared')),
                                    ('member_status_up', YLeaf(YType.uint32, 'member-status-up')),
                                    ('member_status_down', YLeaf(YType.uint32, 'member-status-down')),
                                    ('pe_isolated', YLeaf(YType.uint32, 'pe-isolated')),
                                    ('pe_isolated_clear', YLeaf(YType.uint32, 'pe-isolated-clear')),
                                ])
                                self.transport_up = None
                                self.transport_down = None
                                self.transport_unavailable = None
                                self.configured_set = None
                                self.configured_clear = None
                                self.reachability_set = None
                                self.reachability_cleared = None
                                self.member_status_up = None
                                self.member_status_down = None
                                self.pe_isolated = None
                                self.pe_isolated_clear = None
                                self._segment_path = lambda: "iccp-events"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpIccpGroupCounters.IccpGroups.IccpGroup.IccpGroupItem.IccpGroupCounters.IccpEvents, ['transport_up', 'transport_down', 'transport_unavailable', 'configured_set', 'configured_clear', 'reachability_set', 'reachability_cleared', 'member_status_up', 'member_status_down', 'pe_isolated', 'pe_isolated_clear'], name, value)


    class SystemId(Entity):
        """
        System Identifiers for the local system and all
        ICCP Groups
        
        .. attribute:: system_id_global
        
        	System Identifier for the local system
        	**type**\:  :py:class:`SystemIdGlobal <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId.SystemIdGlobal>`
        
        .. attribute:: system_id_iccp_groups
        
        	System Identifiers for all ICCP Groups
        	**type**\:  :py:class:`SystemIdIccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId.SystemIdIccpGroups>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.SystemId, self).__init__()

            self.yang_name = "system-id"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("system-id-global", ("system_id_global", BundleInformation.SystemId.SystemIdGlobal)), ("system-id-iccp-groups", ("system_id_iccp_groups", BundleInformation.SystemId.SystemIdIccpGroups))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.system_id_global = BundleInformation.SystemId.SystemIdGlobal()
            self.system_id_global.parent = self
            self._children_name_map["system_id_global"] = "system-id-global"
            self._children_yang_names.add("system-id-global")

            self.system_id_iccp_groups = BundleInformation.SystemId.SystemIdIccpGroups()
            self.system_id_iccp_groups.parent = self
            self._children_name_map["system_id_iccp_groups"] = "system-id-iccp-groups"
            self._children_yang_names.add("system-id-iccp-groups")
            self._segment_path = lambda: "system-id"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class SystemIdGlobal(Entity):
            """
            System Identifier for the local system
            
            .. attribute:: system_id_global_item
            
            	Data for this item
            	**type**\:  :py:class:`SystemIdGlobalItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.SystemId.SystemIdGlobal, self).__init__()

                self.yang_name = "system-id-global"
                self.yang_parent_name = "system-id"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("system-id-global-item", ("system_id_global_item", BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict()

                self.system_id_global_item = BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem()
                self.system_id_global_item.parent = self
                self._children_name_map["system_id_global_item"] = "system-id-global-item"
                self._children_yang_names.add("system-id-global-item")
                self._segment_path = lambda: "system-id-global"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/system-id/%s" % self._segment_path()


            class SystemIdGlobalItem(Entity):
                """
                Data for this item
                
                .. attribute:: system_id
                
                	System ID
                	**type**\:  :py:class:`SystemId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_>`
                
                .. attribute:: iccp_group_id
                
                	ICCP Group that the system ID is for
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: system_priority
                
                	Priority of the system (deprecated)
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: system_mac_address
                
                	MAC Address used to identify the system (deprecated)
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem, self).__init__()

                    self.yang_name = "system-id-global-item"
                    self.yang_parent_name = "system-id-global"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("system-id", ("system_id", BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                        ('system_priority', YLeaf(YType.uint16, 'system-priority')),
                        ('system_mac_address', YLeaf(YType.str, 'system-mac-address')),
                    ])
                    self.iccp_group_id = None
                    self.system_priority = None
                    self.system_mac_address = None

                    self.system_id = BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_()
                    self.system_id.parent = self
                    self._children_name_map["system_id"] = "system-id"
                    self._children_yang_names.add("system-id")
                    self._segment_path = lambda: "system-id-global-item"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/system-id/system-id-global/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem, ['iccp_group_id', 'system_priority', 'system_mac_address'], name, value)


                class SystemId_(Entity):
                    """
                    System ID
                    
                    .. attribute:: system_mac_addr
                    
                    	MAC Address used to identify the system
                    	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_.SystemMacAddr>`
                    
                    .. attribute:: system_prio
                    
                    	Priority of the system
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_, self).__init__()

                        self.yang_name = "system-id"
                        self.yang_parent_name = "system-id-global-item"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_.SystemMacAddr))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                        ])
                        self.system_prio = None

                        self.system_mac_addr = BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_.SystemMacAddr()
                        self.system_mac_addr.parent = self
                        self._children_name_map["system_mac_addr"] = "system-mac-addr"
                        self._children_yang_names.add("system-mac-addr")
                        self._segment_path = lambda: "system-id"
                        self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/system-id/system-id-global/system-id-global-item/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_, ['system_prio'], name, value)


                    class SystemMacAddr(Entity):
                        """
                        MAC Address used to identify the system
                        
                        .. attribute:: macaddr
                        
                        	macaddr
                        	**type**\: str
                        
                        	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_.SystemMacAddr, self).__init__()

                            self.yang_name = "system-mac-addr"
                            self.yang_parent_name = "system-id"
                            self.is_top_level_class = False
                            self.has_list_ancestor = False
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('macaddr', YLeaf(YType.str, 'macaddr')),
                            ])
                            self.macaddr = None
                            self._segment_path = lambda: "system-mac-addr"
                            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/system-id/system-id-global/system-id-global-item/system-id/%s" % self._segment_path()

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.SystemId.SystemIdGlobal.SystemIdGlobalItem.SystemId_.SystemMacAddr, ['macaddr'], name, value)


        class SystemIdIccpGroups(Entity):
            """
            System Identifiers for all ICCP Groups
            
            .. attribute:: system_id_iccp_group
            
            	ICCP Group ID
            	**type**\: list of  		 :py:class:`SystemIdIccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.SystemId.SystemIdIccpGroups, self).__init__()

                self.yang_name = "system-id-iccp-groups"
                self.yang_parent_name = "system-id"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("system-id-iccp-group", ("system_id_iccp_group", BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup))])
                self._leafs = OrderedDict()

                self.system_id_iccp_group = YList(self)
                self._segment_path = lambda: "system-id-iccp-groups"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/system-id/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.SystemId.SystemIdIccpGroups, [], name, value)


            class SystemIdIccpGroup(Entity):
                """
                ICCP Group ID
                
                .. attribute:: iccp_group  (key)
                
                	ICCP Group ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: system_id_iccp_group_item
                
                	Data for this item
                	**type**\:  :py:class:`SystemIdIccpGroupItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup, self).__init__()

                    self.yang_name = "system-id-iccp-group"
                    self.yang_parent_name = "system-id-iccp-groups"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['iccp_group']
                    self._child_container_classes = OrderedDict([("system-id-iccp-group-item", ("system_id_iccp_group_item", BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', YLeaf(YType.uint32, 'iccp-group')),
                    ])
                    self.iccp_group = None

                    self.system_id_iccp_group_item = BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem()
                    self.system_id_iccp_group_item.parent = self
                    self._children_name_map["system_id_iccp_group_item"] = "system-id-iccp-group-item"
                    self._children_yang_names.add("system-id-iccp-group-item")
                    self._segment_path = lambda: "system-id-iccp-group" + "[iccp-group='" + str(self.iccp_group) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/system-id/system-id-iccp-groups/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup, ['iccp_group'], name, value)


                class SystemIdIccpGroupItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: system_id
                    
                    	System ID
                    	**type**\:  :py:class:`SystemId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_>`
                    
                    .. attribute:: iccp_group_id
                    
                    	ICCP Group that the system ID is for
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: system_priority
                    
                    	Priority of the system (deprecated)
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: system_mac_address
                    
                    	MAC Address used to identify the system (deprecated)
                    	**type**\: str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem, self).__init__()

                        self.yang_name = "system-id-iccp-group-item"
                        self.yang_parent_name = "system-id-iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("system-id", ("system_id", BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                            ('system_priority', YLeaf(YType.uint16, 'system-priority')),
                            ('system_mac_address', YLeaf(YType.str, 'system-mac-address')),
                        ])
                        self.iccp_group_id = None
                        self.system_priority = None
                        self.system_mac_address = None

                        self.system_id = BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_()
                        self.system_id.parent = self
                        self._children_name_map["system_id"] = "system-id"
                        self._children_yang_names.add("system-id")
                        self._segment_path = lambda: "system-id-iccp-group-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem, ['iccp_group_id', 'system_priority', 'system_mac_address'], name, value)


                    class SystemId_(Entity):
                        """
                        System ID
                        
                        .. attribute:: system_mac_addr
                        
                        	MAC Address used to identify the system
                        	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_.SystemMacAddr>`
                        
                        .. attribute:: system_prio
                        
                        	Priority of the system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_, self).__init__()

                            self.yang_name = "system-id"
                            self.yang_parent_name = "system-id-iccp-group-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_.SystemMacAddr))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                            ])
                            self.system_prio = None

                            self.system_mac_addr = BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_.SystemMacAddr()
                            self.system_mac_addr.parent = self
                            self._children_name_map["system_mac_addr"] = "system-mac-addr"
                            self._children_yang_names.add("system-mac-addr")
                            self._segment_path = lambda: "system-id"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_, ['system_prio'], name, value)


                        class SystemMacAddr(Entity):
                            """
                            MAC Address used to identify the system
                            
                            .. attribute:: macaddr
                            
                            	macaddr
                            	**type**\: str
                            
                            	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_.SystemMacAddr, self).__init__()

                                self.yang_name = "system-mac-addr"
                                self.yang_parent_name = "system-id"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('macaddr', YLeaf(YType.str, 'macaddr')),
                                ])
                                self.macaddr = None
                                self._segment_path = lambda: "system-mac-addr"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.SystemId.SystemIdIccpGroups.SystemIdIccpGroup.SystemIdIccpGroupItem.SystemId_.SystemMacAddr, ['macaddr'], name, value)


    class MlacpMemberCounters(Entity):
        """
        Member specific counters of mLACP events
        
        .. attribute:: iccp_groups
        
        	ICCP Groups with counters of their member's mLACP events
        	**type**\:  :py:class:`IccpGroups <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups>`
        
        .. attribute:: members
        
        	Member interfaces with counters of mLACP events
        	**type**\:  :py:class:`Members <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members>`
        
        .. attribute:: bundles
        
        	Bundle interfaces with counters of their member's mLACP events
        	**type**\:  :py:class:`Bundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles>`
        
        .. attribute:: nodes
        
        	Devices with counters of their member's mLACP events
        	**type**\:  :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundleInformation.MlacpMemberCounters, self).__init__()

            self.yang_name = "mlacp-member-counters"
            self.yang_parent_name = "bundle-information"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("iccp-groups", ("iccp_groups", BundleInformation.MlacpMemberCounters.IccpGroups)), ("members", ("members", BundleInformation.MlacpMemberCounters.Members)), ("bundles", ("bundles", BundleInformation.MlacpMemberCounters.Bundles)), ("nodes", ("nodes", BundleInformation.MlacpMemberCounters.Nodes))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.iccp_groups = BundleInformation.MlacpMemberCounters.IccpGroups()
            self.iccp_groups.parent = self
            self._children_name_map["iccp_groups"] = "iccp-groups"
            self._children_yang_names.add("iccp-groups")

            self.members = BundleInformation.MlacpMemberCounters.Members()
            self.members.parent = self
            self._children_name_map["members"] = "members"
            self._children_yang_names.add("members")

            self.bundles = BundleInformation.MlacpMemberCounters.Bundles()
            self.bundles.parent = self
            self._children_name_map["bundles"] = "bundles"
            self._children_yang_names.add("bundles")

            self.nodes = BundleInformation.MlacpMemberCounters.Nodes()
            self.nodes.parent = self
            self._children_name_map["nodes"] = "nodes"
            self._children_yang_names.add("nodes")
            self._segment_path = lambda: "mlacp-member-counters"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/%s" % self._segment_path()


        class IccpGroups(Entity):
            """
            ICCP Groups with counters of their member's
            mLACP events
            
            .. attribute:: iccp_group
            
            	ICCP Group ID
            	**type**\: list of  		 :py:class:`IccpGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpMemberCounters.IccpGroups, self).__init__()

                self.yang_name = "iccp-groups"
                self.yang_parent_name = "mlacp-member-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("iccp-group", ("iccp_group", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup))])
                self._leafs = OrderedDict()

                self.iccp_group = YList(self)
                self._segment_path = lambda: "iccp-groups"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-member-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups, [], name, value)


            class IccpGroup(Entity):
                """
                ICCP Group ID
                
                .. attribute:: iccp_group  (key)
                
                	ICCP Group ID
                	**type**\: int
                
                	**range:** 1..4294967295
                
                .. attribute:: iccp_group_item
                
                	Data for this item and all its members
                	**type**\:  :py:class:`IccpGroupItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup, self).__init__()

                    self.yang_name = "iccp-group"
                    self.yang_parent_name = "iccp-groups"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['iccp_group']
                    self._child_container_classes = OrderedDict([("iccp-group-item", ("iccp_group_item", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('iccp_group', YLeaf(YType.uint32, 'iccp-group')),
                    ])
                    self.iccp_group = None

                    self.iccp_group_item = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem()
                    self.iccp_group_item.parent = self
                    self._children_name_map["iccp_group_item"] = "iccp-group-item"
                    self._children_yang_names.add("iccp-group-item")
                    self._segment_path = lambda: "iccp-group" + "[iccp-group='" + str(self.iccp_group) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-member-counters/iccp-groups/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup, ['iccp_group'], name, value)


                class IccpGroupItem(Entity):
                    """
                    Data for this item and all its members
                    
                    .. attribute:: items
                    
                    	mLACP counter information items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem, self).__init__()

                        self.yang_name = "iccp-group-item"
                        self.yang_parent_name = "iccp-group"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items))])
                        self._leafs = OrderedDict()

                        self.items = YList(self)
                        self._segment_path = lambda: "iccp-group-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem, [], name, value)


                    class Items(Entity):
                        """
                        mLACP counter information items
                        
                        .. attribute:: bundle_data
                        
                        	Bundle mLACP TLV counter information
                        	**type**\:  :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData>`
                        
                        .. attribute:: node_data
                        
                        	Peer device mLACP TLV counter information
                        	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData>`
                        
                        .. attribute:: member_data
                        
                        	Local member mLACP TLV counter information
                        	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "iccp-group-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData))])
                            self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData)), ("member-data", ("member_data", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData))])
                            self._leafs = OrderedDict()

                            self.bundle_data = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData()
                            self.bundle_data.parent = self
                            self._children_name_map["bundle_data"] = "bundle-data"
                            self._children_yang_names.add("bundle-data")

                            self.node_data = YList(self)
                            self.member_data = YList(self)
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items, [], name, value)


                        class BundleData(Entity):
                            """
                            Bundle mLACP TLV counter information
                            
                            .. attribute:: mlacp_sync_requests_on_all_local_ports
                            
                            	Counts of mLACP sync request TLVs on all ports
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts>`
                            
                            .. attribute:: bundle_name
                            
                            	Name of the bundle
                            	**type**\: str
                            
                            .. attribute:: iccp_group_id
                            
                            	ICCP Group ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData, self).__init__()

                                self.yang_name = "bundle-data"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-local-ports", ("mlacp_sync_requests_on_all_local_ports", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ])
                                self.bundle_name = None
                                self.iccp_group_id = None

                                self.mlacp_sync_requests_on_all_local_ports = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts()
                                self.mlacp_sync_requests_on_all_local_ports.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_local_ports"] = "mlacp-sync-requests-on-all-local-ports"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-local-ports")
                                self._segment_path = lambda: "bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData, ['bundle_name', 'iccp_group_id'], name, value)


                            class MlacpSyncRequestsOnAllLocalPorts(Entity):
                                """
                                Counts of mLACP sync request TLVs on all ports
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-local-ports"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-local-ports"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-local-ports"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class NodeData(Entity):
                            """
                            Peer device mLACP TLV counter information
                            
                            .. attribute:: node_data
                            
                            	Peer device mLACP TLV counter information
                            	**type**\:  :py:class:`NodeData_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.NodeData_>`
                            
                            .. attribute:: mlacp_sync_requests_on_all_foreign_ports
                            
                            	Counts of mLACP sync request TLVs on all ports
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts>`
                            
                            .. attribute:: member_data
                            
                            	Member mLACP TLV counter information
                            	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData, self).__init__()

                                self.yang_name = "node-data"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.NodeData_)), ("mlacp-sync-requests-on-all-foreign-ports", ("mlacp_sync_requests_on_all_foreign_ports", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts))])
                                self._child_list_classes = OrderedDict([("member-data", ("member_data", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData))])
                                self._leafs = OrderedDict()

                                self.node_data = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.NodeData_()
                                self.node_data.parent = self
                                self._children_name_map["node_data"] = "node-data"
                                self._children_yang_names.add("node-data")

                                self.mlacp_sync_requests_on_all_foreign_ports = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts()
                                self.mlacp_sync_requests_on_all_foreign_ports.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_foreign_ports"] = "mlacp-sync-requests-on-all-foreign-ports"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-ports")

                                self.member_data = YList(self)
                                self._segment_path = lambda: "node-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData, [], name, value)


                            class NodeData_(Entity):
                                """
                                Peer device mLACP TLV counter information
                                
                                .. attribute:: node_id
                                
                                	Device ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: iccp_group_id
                                
                                	ICCP Group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.NodeData_, self).__init__()

                                    self.yang_name = "node-data"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('node_id', YLeaf(YType.uint32, 'node-id')),
                                        ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                    ])
                                    self.node_id = None
                                    self.iccp_group_id = None
                                    self._segment_path = lambda: "node-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.NodeData_, ['node_id', 'iccp_group_id'], name, value)


                            class MlacpSyncRequestsOnAllForeignPorts(Entity):
                                """
                                Counts of mLACP sync request TLVs on all ports
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-foreign-ports"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-ports"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-ports"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                            class MemberData(Entity):
                                """
                                Member mLACP TLV counter information
                                
                                .. attribute:: mlacp_tlv_counters
                                
                                	Counts of mLACP TLVs sent and received
                                	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters>`
                                
                                .. attribute:: port_name
                                
                                	Port name of member
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData, self).__init__()

                                    self.yang_name = "member-data"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('port_name', YLeaf(YType.str, 'port-name')),
                                    ])
                                    self.port_name = None

                                    self.mlacp_tlv_counters = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters()
                                    self.mlacp_tlv_counters.parent = self
                                    self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                    self._children_yang_names.add("mlacp-tlv-counters")
                                    self._segment_path = lambda: "member-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData, ['port_name'], name, value)


                                class MlacpTlvCounters(Entity):
                                    """
                                    Counts of mLACP TLVs sent and received
                                    
                                    .. attribute:: received_sync_requests
                                    
                                    	Number of mLACP sync request TLVs received
                                    	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests>`
                                    
                                    .. attribute:: sent_config_tl_vs
                                    
                                    	Number of mLACP config TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_state_tl_vs
                                    
                                    	Number of mLACP state TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_nak_tl_vs
                                    
                                    	Number of mLACP NAK TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_time_cleared
                                    
                                    	Time in nsecs from boot when counters were last cleared (deprecated)
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: time_since_cleared
                                    
                                    	Elapsed time in nsecs since counters were last cleared
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: last_unexpected_event
                                    
                                    	Elapsed time in nsecs since last unexpected event
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters, self).__init__()

                                        self.yang_name = "mlacp-tlv-counters"
                                        self.yang_parent_name = "member-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                            ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                            ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                            ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                            ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                            ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                            ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                            ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                        ])
                                        self.sent_config_tl_vs = None
                                        self.sent_state_tl_vs = None
                                        self.sent_priority_tl_vs = None
                                        self.received_priority_tl_vs = None
                                        self.received_nak_tl_vs = None
                                        self.last_time_cleared = None
                                        self.time_since_cleared = None
                                        self.last_unexpected_event = None

                                        self.received_sync_requests = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests()
                                        self.received_sync_requests.parent = self
                                        self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                        self._children_yang_names.add("received-sync-requests")
                                        self._segment_path = lambda: "mlacp-tlv-counters"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                    class ReceivedSyncRequests(Entity):
                                        """
                                        Number of mLACP sync request TLVs received
                                        
                                        .. attribute:: all_syncs
                                        
                                        	Total number of sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: config_syncs
                                        
                                        	Number of config sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: state_syncs
                                        
                                        	Number of state sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                            self.yang_name = "received-sync-requests"
                                            self.yang_parent_name = "mlacp-tlv-counters"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                                ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                                ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                            ])
                                            self.all_syncs = None
                                            self.config_syncs = None
                                            self.state_syncs = None
                                            self._segment_path = lambda: "received-sync-requests"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class MemberData(Entity):
                            """
                            Local member mLACP TLV counter information
                            
                            .. attribute:: mlacp_tlv_counters
                            
                            	Counts of mLACP TLVs sent and received
                            	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters>`
                            
                            .. attribute:: port_name
                            
                            	Port name of member
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData, self).__init__()

                                self.yang_name = "member-data"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port_name', YLeaf(YType.str, 'port-name')),
                                ])
                                self.port_name = None

                                self.mlacp_tlv_counters = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters()
                                self.mlacp_tlv_counters.parent = self
                                self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                self._children_yang_names.add("mlacp-tlv-counters")
                                self._segment_path = lambda: "member-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData, ['port_name'], name, value)


                            class MlacpTlvCounters(Entity):
                                """
                                Counts of mLACP TLVs sent and received
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests>`
                                
                                .. attribute:: sent_config_tl_vs
                                
                                	Number of mLACP config TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_state_tl_vs
                                
                                	Number of mLACP state TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_priority_tl_vs
                                
                                	Number of mLACP priority TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_priority_tl_vs
                                
                                	Number of mLACP priority TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_nak_tl_vs
                                
                                	Number of mLACP NAK TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: last_unexpected_event
                                
                                	Elapsed time in nsecs since last unexpected event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters, self).__init__()

                                    self.yang_name = "mlacp-tlv-counters"
                                    self.yang_parent_name = "member-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                        ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                        ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                        ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                        ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                    ])
                                    self.sent_config_tl_vs = None
                                    self.sent_state_tl_vs = None
                                    self.sent_priority_tl_vs = None
                                    self.received_priority_tl_vs = None
                                    self.received_nak_tl_vs = None
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None
                                    self.last_unexpected_event = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-tlv-counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-tlv-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.IccpGroups.IccpGroup.IccpGroupItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


        class Members(Entity):
            """
            Member interfaces with counters of mLACP events
            
            .. attribute:: member
            
            	Member interface
            	**type**\: list of  		 :py:class:`Member <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpMemberCounters.Members, self).__init__()

                self.yang_name = "members"
                self.yang_parent_name = "mlacp-member-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("member", ("member", BundleInformation.MlacpMemberCounters.Members.Member))])
                self._leafs = OrderedDict()

                self.member = YList(self)
                self._segment_path = lambda: "members"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-member-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpMemberCounters.Members, [], name, value)


            class Member(Entity):
                """
                Member interface
                
                .. attribute:: member_interface  (key)
                
                	Member interface
                	**type**\: str
                
                .. attribute:: member_item
                
                	Data for this item
                	**type**\:  :py:class:`MemberItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpMemberCounters.Members.Member, self).__init__()

                    self.yang_name = "member"
                    self.yang_parent_name = "members"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['member_interface']
                    self._child_container_classes = OrderedDict([("member-item", ("member_item", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('member_interface', YLeaf(YType.str, 'member-interface')),
                    ])
                    self.member_interface = None

                    self.member_item = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem()
                    self.member_item.parent = self
                    self._children_name_map["member_item"] = "member-item"
                    self._children_yang_names.add("member-item")
                    self._segment_path = lambda: "member" + "[member-interface='" + str(self.member_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-member-counters/members/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member, ['member_interface'], name, value)


                class MemberItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: items
                    
                    	mLACP counter information items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem, self).__init__()

                        self.yang_name = "member-item"
                        self.yang_parent_name = "member"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items))])
                        self._leafs = OrderedDict()

                        self.items = YList(self)
                        self._segment_path = lambda: "member-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem, [], name, value)


                    class Items(Entity):
                        """
                        mLACP counter information items
                        
                        .. attribute:: bundle_data
                        
                        	Bundle mLACP TLV counter information
                        	**type**\:  :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData>`
                        
                        .. attribute:: node_data
                        
                        	Peer device mLACP TLV counter information
                        	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData>`
                        
                        .. attribute:: member_data
                        
                        	Local member mLACP TLV counter information
                        	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "member-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData))])
                            self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData)), ("member-data", ("member_data", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData))])
                            self._leafs = OrderedDict()

                            self.bundle_data = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData()
                            self.bundle_data.parent = self
                            self._children_name_map["bundle_data"] = "bundle-data"
                            self._children_yang_names.add("bundle-data")

                            self.node_data = YList(self)
                            self.member_data = YList(self)
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items, [], name, value)


                        class BundleData(Entity):
                            """
                            Bundle mLACP TLV counter information
                            
                            .. attribute:: mlacp_sync_requests_on_all_local_ports
                            
                            	Counts of mLACP sync request TLVs on all ports
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts>`
                            
                            .. attribute:: bundle_name
                            
                            	Name of the bundle
                            	**type**\: str
                            
                            .. attribute:: iccp_group_id
                            
                            	ICCP Group ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData, self).__init__()

                                self.yang_name = "bundle-data"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-local-ports", ("mlacp_sync_requests_on_all_local_ports", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ])
                                self.bundle_name = None
                                self.iccp_group_id = None

                                self.mlacp_sync_requests_on_all_local_ports = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts()
                                self.mlacp_sync_requests_on_all_local_ports.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_local_ports"] = "mlacp-sync-requests-on-all-local-ports"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-local-ports")
                                self._segment_path = lambda: "bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData, ['bundle_name', 'iccp_group_id'], name, value)


                            class MlacpSyncRequestsOnAllLocalPorts(Entity):
                                """
                                Counts of mLACP sync request TLVs on all ports
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-local-ports"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-local-ports"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-local-ports"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class NodeData(Entity):
                            """
                            Peer device mLACP TLV counter information
                            
                            .. attribute:: node_data
                            
                            	Peer device mLACP TLV counter information
                            	**type**\:  :py:class:`NodeData_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.NodeData_>`
                            
                            .. attribute:: mlacp_sync_requests_on_all_foreign_ports
                            
                            	Counts of mLACP sync request TLVs on all ports
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts>`
                            
                            .. attribute:: member_data
                            
                            	Member mLACP TLV counter information
                            	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData, self).__init__()

                                self.yang_name = "node-data"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.NodeData_)), ("mlacp-sync-requests-on-all-foreign-ports", ("mlacp_sync_requests_on_all_foreign_ports", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts))])
                                self._child_list_classes = OrderedDict([("member-data", ("member_data", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData))])
                                self._leafs = OrderedDict()

                                self.node_data = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.NodeData_()
                                self.node_data.parent = self
                                self._children_name_map["node_data"] = "node-data"
                                self._children_yang_names.add("node-data")

                                self.mlacp_sync_requests_on_all_foreign_ports = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts()
                                self.mlacp_sync_requests_on_all_foreign_ports.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_foreign_ports"] = "mlacp-sync-requests-on-all-foreign-ports"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-ports")

                                self.member_data = YList(self)
                                self._segment_path = lambda: "node-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData, [], name, value)


                            class NodeData_(Entity):
                                """
                                Peer device mLACP TLV counter information
                                
                                .. attribute:: node_id
                                
                                	Device ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: iccp_group_id
                                
                                	ICCP Group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.NodeData_, self).__init__()

                                    self.yang_name = "node-data"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('node_id', YLeaf(YType.uint32, 'node-id')),
                                        ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                    ])
                                    self.node_id = None
                                    self.iccp_group_id = None
                                    self._segment_path = lambda: "node-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.NodeData_, ['node_id', 'iccp_group_id'], name, value)


                            class MlacpSyncRequestsOnAllForeignPorts(Entity):
                                """
                                Counts of mLACP sync request TLVs on all ports
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-foreign-ports"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-ports"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-ports"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                            class MemberData(Entity):
                                """
                                Member mLACP TLV counter information
                                
                                .. attribute:: mlacp_tlv_counters
                                
                                	Counts of mLACP TLVs sent and received
                                	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters>`
                                
                                .. attribute:: port_name
                                
                                	Port name of member
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData, self).__init__()

                                    self.yang_name = "member-data"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('port_name', YLeaf(YType.str, 'port-name')),
                                    ])
                                    self.port_name = None

                                    self.mlacp_tlv_counters = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters()
                                    self.mlacp_tlv_counters.parent = self
                                    self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                    self._children_yang_names.add("mlacp-tlv-counters")
                                    self._segment_path = lambda: "member-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData, ['port_name'], name, value)


                                class MlacpTlvCounters(Entity):
                                    """
                                    Counts of mLACP TLVs sent and received
                                    
                                    .. attribute:: received_sync_requests
                                    
                                    	Number of mLACP sync request TLVs received
                                    	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests>`
                                    
                                    .. attribute:: sent_config_tl_vs
                                    
                                    	Number of mLACP config TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_state_tl_vs
                                    
                                    	Number of mLACP state TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_nak_tl_vs
                                    
                                    	Number of mLACP NAK TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_time_cleared
                                    
                                    	Time in nsecs from boot when counters were last cleared (deprecated)
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: time_since_cleared
                                    
                                    	Elapsed time in nsecs since counters were last cleared
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: last_unexpected_event
                                    
                                    	Elapsed time in nsecs since last unexpected event
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters, self).__init__()

                                        self.yang_name = "mlacp-tlv-counters"
                                        self.yang_parent_name = "member-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                            ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                            ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                            ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                            ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                            ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                            ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                            ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                        ])
                                        self.sent_config_tl_vs = None
                                        self.sent_state_tl_vs = None
                                        self.sent_priority_tl_vs = None
                                        self.received_priority_tl_vs = None
                                        self.received_nak_tl_vs = None
                                        self.last_time_cleared = None
                                        self.time_since_cleared = None
                                        self.last_unexpected_event = None

                                        self.received_sync_requests = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests()
                                        self.received_sync_requests.parent = self
                                        self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                        self._children_yang_names.add("received-sync-requests")
                                        self._segment_path = lambda: "mlacp-tlv-counters"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                    class ReceivedSyncRequests(Entity):
                                        """
                                        Number of mLACP sync request TLVs received
                                        
                                        .. attribute:: all_syncs
                                        
                                        	Total number of sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: config_syncs
                                        
                                        	Number of config sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: state_syncs
                                        
                                        	Number of state sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                            self.yang_name = "received-sync-requests"
                                            self.yang_parent_name = "mlacp-tlv-counters"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                                ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                                ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                            ])
                                            self.all_syncs = None
                                            self.config_syncs = None
                                            self.state_syncs = None
                                            self._segment_path = lambda: "received-sync-requests"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class MemberData(Entity):
                            """
                            Local member mLACP TLV counter information
                            
                            .. attribute:: mlacp_tlv_counters
                            
                            	Counts of mLACP TLVs sent and received
                            	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters>`
                            
                            .. attribute:: port_name
                            
                            	Port name of member
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData, self).__init__()

                                self.yang_name = "member-data"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port_name', YLeaf(YType.str, 'port-name')),
                                ])
                                self.port_name = None

                                self.mlacp_tlv_counters = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters()
                                self.mlacp_tlv_counters.parent = self
                                self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                self._children_yang_names.add("mlacp-tlv-counters")
                                self._segment_path = lambda: "member-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData, ['port_name'], name, value)


                            class MlacpTlvCounters(Entity):
                                """
                                Counts of mLACP TLVs sent and received
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests>`
                                
                                .. attribute:: sent_config_tl_vs
                                
                                	Number of mLACP config TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_state_tl_vs
                                
                                	Number of mLACP state TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_priority_tl_vs
                                
                                	Number of mLACP priority TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_priority_tl_vs
                                
                                	Number of mLACP priority TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_nak_tl_vs
                                
                                	Number of mLACP NAK TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: last_unexpected_event
                                
                                	Elapsed time in nsecs since last unexpected event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters, self).__init__()

                                    self.yang_name = "mlacp-tlv-counters"
                                    self.yang_parent_name = "member-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                        ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                        ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                        ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                        ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                    ])
                                    self.sent_config_tl_vs = None
                                    self.sent_state_tl_vs = None
                                    self.sent_priority_tl_vs = None
                                    self.received_priority_tl_vs = None
                                    self.received_nak_tl_vs = None
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None
                                    self.last_unexpected_event = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-tlv-counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-tlv-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Members.Member.MemberItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


        class Bundles(Entity):
            """
            Bundle interfaces with counters of their
            member's mLACP events
            
            .. attribute:: bundle
            
            	Bundle interface
            	**type**\: list of  		 :py:class:`Bundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpMemberCounters.Bundles, self).__init__()

                self.yang_name = "bundles"
                self.yang_parent_name = "mlacp-member-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("bundle", ("bundle", BundleInformation.MlacpMemberCounters.Bundles.Bundle))])
                self._leafs = OrderedDict()

                self.bundle = YList(self)
                self._segment_path = lambda: "bundles"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-member-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles, [], name, value)


            class Bundle(Entity):
                """
                Bundle interface
                
                .. attribute:: bundle_interface  (key)
                
                	Bundle interface
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: bundle_item
                
                	Data for this item
                	**type**\:  :py:class:`BundleItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpMemberCounters.Bundles.Bundle, self).__init__()

                    self.yang_name = "bundle"
                    self.yang_parent_name = "bundles"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['bundle_interface']
                    self._child_container_classes = OrderedDict([("bundle-item", ("bundle_item", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                    ])
                    self.bundle_interface = None

                    self.bundle_item = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem()
                    self.bundle_item.parent = self
                    self._children_name_map["bundle_item"] = "bundle-item"
                    self._children_yang_names.add("bundle-item")
                    self._segment_path = lambda: "bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-member-counters/bundles/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle, ['bundle_interface'], name, value)


                class BundleItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: bundle_data
                    
                    	Bundle mLACP TLV counter information
                    	**type**\:  :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData>`
                    
                    .. attribute:: node_data
                    
                    	Peer device mLACP TLV counter information
                    	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData>`
                    
                    .. attribute:: member_data
                    
                    	Local member mLACP TLV counter information
                    	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem, self).__init__()

                        self.yang_name = "bundle-item"
                        self.yang_parent_name = "bundle"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData))])
                        self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData)), ("member-data", ("member_data", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData))])
                        self._leafs = OrderedDict()

                        self.bundle_data = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData()
                        self.bundle_data.parent = self
                        self._children_name_map["bundle_data"] = "bundle-data"
                        self._children_yang_names.add("bundle-data")

                        self.node_data = YList(self)
                        self.member_data = YList(self)
                        self._segment_path = lambda: "bundle-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem, [], name, value)


                    class BundleData(Entity):
                        """
                        Bundle mLACP TLV counter information
                        
                        .. attribute:: mlacp_sync_requests_on_all_local_ports
                        
                        	Counts of mLACP sync request TLVs on all ports
                        	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts>`
                        
                        .. attribute:: bundle_name
                        
                        	Name of the bundle
                        	**type**\: str
                        
                        .. attribute:: iccp_group_id
                        
                        	ICCP Group ID
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData, self).__init__()

                            self.yang_name = "bundle-data"
                            self.yang_parent_name = "bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-local-ports", ("mlacp_sync_requests_on_all_local_ports", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                            ])
                            self.bundle_name = None
                            self.iccp_group_id = None

                            self.mlacp_sync_requests_on_all_local_ports = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts()
                            self.mlacp_sync_requests_on_all_local_ports.parent = self
                            self._children_name_map["mlacp_sync_requests_on_all_local_ports"] = "mlacp-sync-requests-on-all-local-ports"
                            self._children_yang_names.add("mlacp-sync-requests-on-all-local-ports")
                            self._segment_path = lambda: "bundle-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData, ['bundle_name', 'iccp_group_id'], name, value)


                        class MlacpSyncRequestsOnAllLocalPorts(Entity):
                            """
                            Counts of mLACP sync request TLVs on all ports
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of mLACP sync request TLVs received
                            	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests>`
                            
                            .. attribute:: last_time_cleared
                            
                            	Time in nsecs from boot when counters were last cleared (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: time_since_cleared
                            
                            	Elapsed time in nsecs since counters were last cleared
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts, self).__init__()

                                self.yang_name = "mlacp-sync-requests-on-all-local-ports"
                                self.yang_parent_name = "bundle-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                    ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ])
                                self.last_time_cleared = None
                                self.time_since_cleared = None

                                self.received_sync_requests = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests()
                                self.received_sync_requests.parent = self
                                self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                self._children_yang_names.add("received-sync-requests")
                                self._segment_path = lambda: "mlacp-sync-requests-on-all-local-ports"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                            class ReceivedSyncRequests(Entity):
                                """
                                Number of mLACP sync request TLVs received
                                
                                .. attribute:: all_syncs
                                
                                	Total number of sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: config_syncs
                                
                                	Number of config sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: state_syncs
                                
                                	Number of state sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, self).__init__()

                                    self.yang_name = "received-sync-requests"
                                    self.yang_parent_name = "mlacp-sync-requests-on-all-local-ports"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                        ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                        ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                    ])
                                    self.all_syncs = None
                                    self.config_syncs = None
                                    self.state_syncs = None
                                    self._segment_path = lambda: "received-sync-requests"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                    class NodeData(Entity):
                        """
                        Peer device mLACP TLV counter information
                        
                        .. attribute:: node_data
                        
                        	Peer device mLACP TLV counter information
                        	**type**\:  :py:class:`NodeData_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.NodeData_>`
                        
                        .. attribute:: mlacp_sync_requests_on_all_foreign_ports
                        
                        	Counts of mLACP sync request TLVs on all ports
                        	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts>`
                        
                        .. attribute:: member_data
                        
                        	Member mLACP TLV counter information
                        	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData, self).__init__()

                            self.yang_name = "node-data"
                            self.yang_parent_name = "bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.NodeData_)), ("mlacp-sync-requests-on-all-foreign-ports", ("mlacp_sync_requests_on_all_foreign_ports", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts))])
                            self._child_list_classes = OrderedDict([("member-data", ("member_data", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData))])
                            self._leafs = OrderedDict()

                            self.node_data = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.NodeData_()
                            self.node_data.parent = self
                            self._children_name_map["node_data"] = "node-data"
                            self._children_yang_names.add("node-data")

                            self.mlacp_sync_requests_on_all_foreign_ports = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts()
                            self.mlacp_sync_requests_on_all_foreign_ports.parent = self
                            self._children_name_map["mlacp_sync_requests_on_all_foreign_ports"] = "mlacp-sync-requests-on-all-foreign-ports"
                            self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-ports")

                            self.member_data = YList(self)
                            self._segment_path = lambda: "node-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData, [], name, value)


                        class NodeData_(Entity):
                            """
                            Peer device mLACP TLV counter information
                            
                            .. attribute:: node_id
                            
                            	Device ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: iccp_group_id
                            
                            	ICCP Group ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.NodeData_, self).__init__()

                                self.yang_name = "node-data"
                                self.yang_parent_name = "node-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('node_id', YLeaf(YType.uint32, 'node-id')),
                                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ])
                                self.node_id = None
                                self.iccp_group_id = None
                                self._segment_path = lambda: "node-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.NodeData_, ['node_id', 'iccp_group_id'], name, value)


                        class MlacpSyncRequestsOnAllForeignPorts(Entity):
                            """
                            Counts of mLACP sync request TLVs on all ports
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of mLACP sync request TLVs received
                            	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests>`
                            
                            .. attribute:: last_time_cleared
                            
                            	Time in nsecs from boot when counters were last cleared (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: time_since_cleared
                            
                            	Elapsed time in nsecs since counters were last cleared
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts, self).__init__()

                                self.yang_name = "mlacp-sync-requests-on-all-foreign-ports"
                                self.yang_parent_name = "node-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                    ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                ])
                                self.last_time_cleared = None
                                self.time_since_cleared = None

                                self.received_sync_requests = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests()
                                self.received_sync_requests.parent = self
                                self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                self._children_yang_names.add("received-sync-requests")
                                self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-ports"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                            class ReceivedSyncRequests(Entity):
                                """
                                Number of mLACP sync request TLVs received
                                
                                .. attribute:: all_syncs
                                
                                	Total number of sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: config_syncs
                                
                                	Number of config sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: state_syncs
                                
                                	Number of state sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, self).__init__()

                                    self.yang_name = "received-sync-requests"
                                    self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-ports"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                        ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                        ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                    ])
                                    self.all_syncs = None
                                    self.config_syncs = None
                                    self.state_syncs = None
                                    self._segment_path = lambda: "received-sync-requests"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class MemberData(Entity):
                            """
                            Member mLACP TLV counter information
                            
                            .. attribute:: mlacp_tlv_counters
                            
                            	Counts of mLACP TLVs sent and received
                            	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters>`
                            
                            .. attribute:: port_name
                            
                            	Port name of member
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData, self).__init__()

                                self.yang_name = "member-data"
                                self.yang_parent_name = "node-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port_name', YLeaf(YType.str, 'port-name')),
                                ])
                                self.port_name = None

                                self.mlacp_tlv_counters = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters()
                                self.mlacp_tlv_counters.parent = self
                                self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                self._children_yang_names.add("mlacp-tlv-counters")
                                self._segment_path = lambda: "member-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData, ['port_name'], name, value)


                            class MlacpTlvCounters(Entity):
                                """
                                Counts of mLACP TLVs sent and received
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests>`
                                
                                .. attribute:: sent_config_tl_vs
                                
                                	Number of mLACP config TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_state_tl_vs
                                
                                	Number of mLACP state TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_priority_tl_vs
                                
                                	Number of mLACP priority TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_priority_tl_vs
                                
                                	Number of mLACP priority TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_nak_tl_vs
                                
                                	Number of mLACP NAK TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: last_unexpected_event
                                
                                	Elapsed time in nsecs since last unexpected event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters, self).__init__()

                                    self.yang_name = "mlacp-tlv-counters"
                                    self.yang_parent_name = "member-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                        ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                        ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                        ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                        ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                    ])
                                    self.sent_config_tl_vs = None
                                    self.sent_state_tl_vs = None
                                    self.sent_priority_tl_vs = None
                                    self.received_priority_tl_vs = None
                                    self.received_nak_tl_vs = None
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None
                                    self.last_unexpected_event = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-tlv-counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-tlv-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                    class MemberData(Entity):
                        """
                        Local member mLACP TLV counter information
                        
                        .. attribute:: mlacp_tlv_counters
                        
                        	Counts of mLACP TLVs sent and received
                        	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters>`
                        
                        .. attribute:: port_name
                        
                        	Port name of member
                        	**type**\: str
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData, self).__init__()

                            self.yang_name = "member-data"
                            self.yang_parent_name = "bundle-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('port_name', YLeaf(YType.str, 'port-name')),
                            ])
                            self.port_name = None

                            self.mlacp_tlv_counters = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters()
                            self.mlacp_tlv_counters.parent = self
                            self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                            self._children_yang_names.add("mlacp-tlv-counters")
                            self._segment_path = lambda: "member-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData, ['port_name'], name, value)


                        class MlacpTlvCounters(Entity):
                            """
                            Counts of mLACP TLVs sent and received
                            
                            .. attribute:: received_sync_requests
                            
                            	Number of mLACP sync request TLVs received
                            	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters.ReceivedSyncRequests>`
                            
                            .. attribute:: sent_config_tl_vs
                            
                            	Number of mLACP config TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_state_tl_vs
                            
                            	Number of mLACP state TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sent_priority_tl_vs
                            
                            	Number of mLACP priority TLVs sent
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_priority_tl_vs
                            
                            	Number of mLACP priority TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: received_nak_tl_vs
                            
                            	Number of mLACP NAK TLVs received
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: last_time_cleared
                            
                            	Time in nsecs from boot when counters were last cleared (deprecated)
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: time_since_cleared
                            
                            	Elapsed time in nsecs since counters were last cleared
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            .. attribute:: last_unexpected_event
                            
                            	Elapsed time in nsecs since last unexpected event
                            	**type**\: int
                            
                            	**range:** 0..18446744073709551615
                            
                            	**units**\: nanosecond
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters, self).__init__()

                                self.yang_name = "mlacp-tlv-counters"
                                self.yang_parent_name = "member-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters.ReceivedSyncRequests))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                    ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                    ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                    ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                    ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                    ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                    ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                ])
                                self.sent_config_tl_vs = None
                                self.sent_state_tl_vs = None
                                self.sent_priority_tl_vs = None
                                self.received_priority_tl_vs = None
                                self.received_nak_tl_vs = None
                                self.last_time_cleared = None
                                self.time_since_cleared = None
                                self.last_unexpected_event = None

                                self.received_sync_requests = BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters.ReceivedSyncRequests()
                                self.received_sync_requests.parent = self
                                self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                self._children_yang_names.add("received-sync-requests")
                                self._segment_path = lambda: "mlacp-tlv-counters"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                            class ReceivedSyncRequests(Entity):
                                """
                                Number of mLACP sync request TLVs received
                                
                                .. attribute:: all_syncs
                                
                                	Total number of sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: config_syncs
                                
                                	Number of config sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: state_syncs
                                
                                	Number of state sync requests received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                    self.yang_name = "received-sync-requests"
                                    self.yang_parent_name = "mlacp-tlv-counters"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                        ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                        ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                    ])
                                    self.all_syncs = None
                                    self.config_syncs = None
                                    self.state_syncs = None
                                    self._segment_path = lambda: "received-sync-requests"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Bundles.Bundle.BundleItem.MemberData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


        class Nodes(Entity):
            """
            Devices with counters of their member's mLACP
            events
            
            .. attribute:: node
            
            	Node ID
            	**type**\: list of  		 :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundleInformation.MlacpMemberCounters.Nodes, self).__init__()

                self.yang_name = "nodes"
                self.yang_parent_name = "mlacp-member-counters"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([])
                self._child_list_classes = OrderedDict([("node", ("node", BundleInformation.MlacpMemberCounters.Nodes.Node))])
                self._leafs = OrderedDict()

                self.node = YList(self)
                self._segment_path = lambda: "nodes"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-member-counters/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes, [], name, value)


            class Node(Entity):
                """
                Node ID
                
                .. attribute:: node  (key)
                
                	For a local device the Node ID e.g. '0\_0\_CPU0', for a peer device the LDP ID followed by the ICCP Group ID e.g. '5.4.3.2 ,4'
                	**type**\: str
                
                .. attribute:: node_item
                
                	Data for this item
                	**type**\:  :py:class:`NodeItem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundleInformation.MlacpMemberCounters.Nodes.Node, self).__init__()

                    self.yang_name = "node"
                    self.yang_parent_name = "nodes"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = ['node']
                    self._child_container_classes = OrderedDict([("node-item", ("node_item", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('node', YLeaf(YType.str, 'node')),
                    ])
                    self.node = None

                    self.node_item = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem()
                    self.node_item.parent = self
                    self._children_name_map["node_item"] = "node-item"
                    self._children_yang_names.add("node-item")
                    self._segment_path = lambda: "node" + "[node='" + str(self.node) + "']"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundle-information/mlacp-member-counters/nodes/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node, ['node'], name, value)


                class NodeItem(Entity):
                    """
                    Data for this item
                    
                    .. attribute:: items
                    
                    	mLACP counter information items
                    	**type**\: list of  		 :py:class:`Items <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem, self).__init__()

                        self.yang_name = "node-item"
                        self.yang_parent_name = "node"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("items", ("items", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items))])
                        self._leafs = OrderedDict()

                        self.items = YList(self)
                        self._segment_path = lambda: "node-item"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem, [], name, value)


                    class Items(Entity):
                        """
                        mLACP counter information items
                        
                        .. attribute:: bundle_data
                        
                        	Bundle mLACP TLV counter information
                        	**type**\:  :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData>`
                        
                        .. attribute:: node_data
                        
                        	Peer device mLACP TLV counter information
                        	**type**\: list of  		 :py:class:`NodeData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData>`
                        
                        .. attribute:: member_data
                        
                        	Local member mLACP TLV counter information
                        	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items, self).__init__()

                            self.yang_name = "items"
                            self.yang_parent_name = "node-item"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("bundle-data", ("bundle_data", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData))])
                            self._child_list_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData)), ("member-data", ("member_data", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData))])
                            self._leafs = OrderedDict()

                            self.bundle_data = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData()
                            self.bundle_data.parent = self
                            self._children_name_map["bundle_data"] = "bundle-data"
                            self._children_yang_names.add("bundle-data")

                            self.node_data = YList(self)
                            self.member_data = YList(self)
                            self._segment_path = lambda: "items"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items, [], name, value)


                        class BundleData(Entity):
                            """
                            Bundle mLACP TLV counter information
                            
                            .. attribute:: mlacp_sync_requests_on_all_local_ports
                            
                            	Counts of mLACP sync request TLVs on all ports
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllLocalPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts>`
                            
                            .. attribute:: bundle_name
                            
                            	Name of the bundle
                            	**type**\: str
                            
                            .. attribute:: iccp_group_id
                            
                            	ICCP Group ID
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData, self).__init__()

                                self.yang_name = "bundle-data"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-sync-requests-on-all-local-ports", ("mlacp_sync_requests_on_all_local_ports", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                ])
                                self.bundle_name = None
                                self.iccp_group_id = None

                                self.mlacp_sync_requests_on_all_local_ports = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts()
                                self.mlacp_sync_requests_on_all_local_ports.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_local_ports"] = "mlacp-sync-requests-on-all-local-ports"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-local-ports")
                                self._segment_path = lambda: "bundle-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData, ['bundle_name', 'iccp_group_id'], name, value)


                            class MlacpSyncRequestsOnAllLocalPorts(Entity):
                                """
                                Counts of mLACP sync request TLVs on all ports
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-local-ports"
                                    self.yang_parent_name = "bundle-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-local-ports"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-local-ports"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.BundleData.MlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class NodeData(Entity):
                            """
                            Peer device mLACP TLV counter information
                            
                            .. attribute:: node_data
                            
                            	Peer device mLACP TLV counter information
                            	**type**\:  :py:class:`NodeData_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.NodeData_>`
                            
                            .. attribute:: mlacp_sync_requests_on_all_foreign_ports
                            
                            	Counts of mLACP sync request TLVs on all ports
                            	**type**\:  :py:class:`MlacpSyncRequestsOnAllForeignPorts <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts>`
                            
                            .. attribute:: member_data
                            
                            	Member mLACP TLV counter information
                            	**type**\: list of  		 :py:class:`MemberData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData, self).__init__()

                                self.yang_name = "node-data"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("node-data", ("node_data", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.NodeData_)), ("mlacp-sync-requests-on-all-foreign-ports", ("mlacp_sync_requests_on_all_foreign_ports", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts))])
                                self._child_list_classes = OrderedDict([("member-data", ("member_data", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData))])
                                self._leafs = OrderedDict()

                                self.node_data = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.NodeData_()
                                self.node_data.parent = self
                                self._children_name_map["node_data"] = "node-data"
                                self._children_yang_names.add("node-data")

                                self.mlacp_sync_requests_on_all_foreign_ports = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts()
                                self.mlacp_sync_requests_on_all_foreign_ports.parent = self
                                self._children_name_map["mlacp_sync_requests_on_all_foreign_ports"] = "mlacp-sync-requests-on-all-foreign-ports"
                                self._children_yang_names.add("mlacp-sync-requests-on-all-foreign-ports")

                                self.member_data = YList(self)
                                self._segment_path = lambda: "node-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData, [], name, value)


                            class NodeData_(Entity):
                                """
                                Peer device mLACP TLV counter information
                                
                                .. attribute:: node_id
                                
                                	Device ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: iccp_group_id
                                
                                	ICCP Group ID
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.NodeData_, self).__init__()

                                    self.yang_name = "node-data"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('node_id', YLeaf(YType.uint32, 'node-id')),
                                        ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                                    ])
                                    self.node_id = None
                                    self.iccp_group_id = None
                                    self._segment_path = lambda: "node-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.NodeData_, ['node_id', 'iccp_group_id'], name, value)


                            class MlacpSyncRequestsOnAllForeignPorts(Entity):
                                """
                                Counts of mLACP sync request TLVs on all ports
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests>`
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts, self).__init__()

                                    self.yang_name = "mlacp-sync-requests-on-all-foreign-ports"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                    ])
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-sync-requests-on-all-foreign-ports"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts, ['last_time_cleared', 'time_since_cleared'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-sync-requests-on-all-foreign-ports"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                            class MemberData(Entity):
                                """
                                Member mLACP TLV counter information
                                
                                .. attribute:: mlacp_tlv_counters
                                
                                	Counts of mLACP TLVs sent and received
                                	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters>`
                                
                                .. attribute:: port_name
                                
                                	Port name of member
                                	**type**\: str
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData, self).__init__()

                                    self.yang_name = "member-data"
                                    self.yang_parent_name = "node-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('port_name', YLeaf(YType.str, 'port-name')),
                                    ])
                                    self.port_name = None

                                    self.mlacp_tlv_counters = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters()
                                    self.mlacp_tlv_counters.parent = self
                                    self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                    self._children_yang_names.add("mlacp-tlv-counters")
                                    self._segment_path = lambda: "member-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData, ['port_name'], name, value)


                                class MlacpTlvCounters(Entity):
                                    """
                                    Counts of mLACP TLVs sent and received
                                    
                                    .. attribute:: received_sync_requests
                                    
                                    	Number of mLACP sync request TLVs received
                                    	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests>`
                                    
                                    .. attribute:: sent_config_tl_vs
                                    
                                    	Number of mLACP config TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_state_tl_vs
                                    
                                    	Number of mLACP state TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: sent_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs sent
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_priority_tl_vs
                                    
                                    	Number of mLACP priority TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: received_nak_tl_vs
                                    
                                    	Number of mLACP NAK TLVs received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: last_time_cleared
                                    
                                    	Time in nsecs from boot when counters were last cleared (deprecated)
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: time_since_cleared
                                    
                                    	Elapsed time in nsecs since counters were last cleared
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    .. attribute:: last_unexpected_event
                                    
                                    	Elapsed time in nsecs since last unexpected event
                                    	**type**\: int
                                    
                                    	**range:** 0..18446744073709551615
                                    
                                    	**units**\: nanosecond
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters, self).__init__()

                                        self.yang_name = "mlacp-tlv-counters"
                                        self.yang_parent_name = "member-data"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests))])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                            ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                            ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                            ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                            ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                            ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                            ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                            ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                        ])
                                        self.sent_config_tl_vs = None
                                        self.sent_state_tl_vs = None
                                        self.sent_priority_tl_vs = None
                                        self.received_priority_tl_vs = None
                                        self.received_nak_tl_vs = None
                                        self.last_time_cleared = None
                                        self.time_since_cleared = None
                                        self.last_unexpected_event = None

                                        self.received_sync_requests = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests()
                                        self.received_sync_requests.parent = self
                                        self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                        self._children_yang_names.add("received-sync-requests")
                                        self._segment_path = lambda: "mlacp-tlv-counters"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                    class ReceivedSyncRequests(Entity):
                                        """
                                        Number of mLACP sync request TLVs received
                                        
                                        .. attribute:: all_syncs
                                        
                                        	Total number of sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: config_syncs
                                        
                                        	Number of config sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        .. attribute:: state_syncs
                                        
                                        	Number of state sync requests received
                                        	**type**\: int
                                        
                                        	**range:** 0..4294967295
                                        
                                        

                                        """

                                        _prefix = 'bundlemgr-oper'
                                        _revision = '2017-05-01'

                                        def __init__(self):
                                            super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                            self.yang_name = "received-sync-requests"
                                            self.yang_parent_name = "mlacp-tlv-counters"
                                            self.is_top_level_class = False
                                            self.has_list_ancestor = True
                                            self.ylist_key_names = []
                                            self._child_container_classes = OrderedDict([])
                                            self._child_list_classes = OrderedDict([])
                                            self._leafs = OrderedDict([
                                                ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                                ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                                ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                            ])
                                            self.all_syncs = None
                                            self.config_syncs = None
                                            self.state_syncs = None
                                            self._segment_path = lambda: "received-sync-requests"

                                        def __setattr__(self, name, value):
                                            self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.NodeData.MemberData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)


                        class MemberData(Entity):
                            """
                            Local member mLACP TLV counter information
                            
                            .. attribute:: mlacp_tlv_counters
                            
                            	Counts of mLACP TLVs sent and received
                            	**type**\:  :py:class:`MlacpTlvCounters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters>`
                            
                            .. attribute:: port_name
                            
                            	Port name of member
                            	**type**\: str
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData, self).__init__()

                                self.yang_name = "member-data"
                                self.yang_parent_name = "items"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("mlacp-tlv-counters", ("mlacp_tlv_counters", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('port_name', YLeaf(YType.str, 'port-name')),
                                ])
                                self.port_name = None

                                self.mlacp_tlv_counters = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters()
                                self.mlacp_tlv_counters.parent = self
                                self._children_name_map["mlacp_tlv_counters"] = "mlacp-tlv-counters"
                                self._children_yang_names.add("mlacp-tlv-counters")
                                self._segment_path = lambda: "member-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData, ['port_name'], name, value)


                            class MlacpTlvCounters(Entity):
                                """
                                Counts of mLACP TLVs sent and received
                                
                                .. attribute:: received_sync_requests
                                
                                	Number of mLACP sync request TLVs received
                                	**type**\:  :py:class:`ReceivedSyncRequests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests>`
                                
                                .. attribute:: sent_config_tl_vs
                                
                                	Number of mLACP config TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_state_tl_vs
                                
                                	Number of mLACP state TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: sent_priority_tl_vs
                                
                                	Number of mLACP priority TLVs sent
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_priority_tl_vs
                                
                                	Number of mLACP priority TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: received_nak_tl_vs
                                
                                	Number of mLACP NAK TLVs received
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: last_time_cleared
                                
                                	Time in nsecs from boot when counters were last cleared (deprecated)
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: time_since_cleared
                                
                                	Elapsed time in nsecs since counters were last cleared
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                .. attribute:: last_unexpected_event
                                
                                	Elapsed time in nsecs since last unexpected event
                                	**type**\: int
                                
                                	**range:** 0..18446744073709551615
                                
                                	**units**\: nanosecond
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters, self).__init__()

                                    self.yang_name = "mlacp-tlv-counters"
                                    self.yang_parent_name = "member-data"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("received-sync-requests", ("received_sync_requests", BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('sent_config_tl_vs', YLeaf(YType.uint32, 'sent-config-tl-vs')),
                                        ('sent_state_tl_vs', YLeaf(YType.uint32, 'sent-state-tl-vs')),
                                        ('sent_priority_tl_vs', YLeaf(YType.uint32, 'sent-priority-tl-vs')),
                                        ('received_priority_tl_vs', YLeaf(YType.uint32, 'received-priority-tl-vs')),
                                        ('received_nak_tl_vs', YLeaf(YType.uint32, 'received-nak-tl-vs')),
                                        ('last_time_cleared', YLeaf(YType.uint64, 'last-time-cleared')),
                                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                                        ('last_unexpected_event', YLeaf(YType.uint64, 'last-unexpected-event')),
                                    ])
                                    self.sent_config_tl_vs = None
                                    self.sent_state_tl_vs = None
                                    self.sent_priority_tl_vs = None
                                    self.received_priority_tl_vs = None
                                    self.received_nak_tl_vs = None
                                    self.last_time_cleared = None
                                    self.time_since_cleared = None
                                    self.last_unexpected_event = None

                                    self.received_sync_requests = BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests()
                                    self.received_sync_requests.parent = self
                                    self._children_name_map["received_sync_requests"] = "received-sync-requests"
                                    self._children_yang_names.add("received-sync-requests")
                                    self._segment_path = lambda: "mlacp-tlv-counters"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters, ['sent_config_tl_vs', 'sent_state_tl_vs', 'sent_priority_tl_vs', 'received_priority_tl_vs', 'received_nak_tl_vs', 'last_time_cleared', 'time_since_cleared', 'last_unexpected_event'], name, value)


                                class ReceivedSyncRequests(Entity):
                                    """
                                    Number of mLACP sync request TLVs received
                                    
                                    .. attribute:: all_syncs
                                    
                                    	Total number of sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: config_syncs
                                    
                                    	Number of config sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: state_syncs
                                    
                                    	Number of state sync requests received
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests, self).__init__()

                                        self.yang_name = "received-sync-requests"
                                        self.yang_parent_name = "mlacp-tlv-counters"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('all_syncs', YLeaf(YType.uint32, 'all-syncs')),
                                            ('config_syncs', YLeaf(YType.uint32, 'config-syncs')),
                                            ('state_syncs', YLeaf(YType.uint32, 'state-syncs')),
                                        ])
                                        self.all_syncs = None
                                        self.config_syncs = None
                                        self.state_syncs = None
                                        self._segment_path = lambda: "received-sync-requests"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundleInformation.MlacpMemberCounters.Nodes.Node.NodeItem.Items.MemberData.MlacpTlvCounters.ReceivedSyncRequests, ['all_syncs', 'config_syncs', 'state_syncs'], name, value)

    def clone_ptr(self):
        self._top_entity = BundleInformation()
        return self._top_entity

class LacpData(Entity):
    """
    lacp data
    
    .. attribute:: global_
    
    	Global LACP data
    	**type**\:  :py:class:`Global <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpData.Global>`
    
    

    """

    _prefix = 'bundlemgr-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(LacpData, self).__init__()
        self._top_entity = None

        self.yang_name = "lacp-data"
        self.yang_parent_name = "Cisco-IOS-XR-bundlemgr-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("global", ("global_", LacpData.Global))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.global_ = LacpData.Global()
        self.global_.parent = self
        self._children_name_map["global_"] = "global"
        self._children_yang_names.add("global")
        self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-data"


    class Global(Entity):
        """
        Global LACP data
        
        .. attribute:: system_id
        
        	LACP System ID
        	**type**\:  :py:class:`SystemId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpData.Global.SystemId>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(LacpData.Global, self).__init__()

            self.yang_name = "global"
            self.yang_parent_name = "lacp-data"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([("system-id", ("system_id", LacpData.Global.SystemId))])
            self._child_list_classes = OrderedDict([])
            self._leafs = OrderedDict()

            self.system_id = LacpData.Global.SystemId()
            self.system_id.parent = self
            self._children_name_map["system_id"] = "system-id"
            self._children_yang_names.add("system-id")
            self._segment_path = lambda: "global"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-data/%s" % self._segment_path()


        class SystemId(Entity):
            """
            LACP System ID
            
            .. attribute:: system_id
            
            	System ID
            	**type**\:  :py:class:`SystemId_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpData.Global.SystemId.SystemId_>`
            
            .. attribute:: iccp_group_id
            
            	ICCP Group that the system ID is for
            	**type**\: int
            
            	**range:** 0..4294967295
            
            .. attribute:: system_priority
            
            	Priority of the system (deprecated)
            	**type**\: int
            
            	**range:** 0..65535
            
            .. attribute:: system_mac_address
            
            	MAC Address used to identify the system (deprecated)
            	**type**\: str
            
            	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(LacpData.Global.SystemId, self).__init__()

                self.yang_name = "system-id"
                self.yang_parent_name = "global"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = []
                self._child_container_classes = OrderedDict([("system-id", ("system_id", LacpData.Global.SystemId.SystemId_))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                    ('system_priority', YLeaf(YType.uint16, 'system-priority')),
                    ('system_mac_address', YLeaf(YType.str, 'system-mac-address')),
                ])
                self.iccp_group_id = None
                self.system_priority = None
                self.system_mac_address = None

                self.system_id = LacpData.Global.SystemId.SystemId_()
                self.system_id.parent = self
                self._children_name_map["system_id"] = "system-id"
                self._children_yang_names.add("system-id")
                self._segment_path = lambda: "system-id"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-data/global/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(LacpData.Global.SystemId, ['iccp_group_id', 'system_priority', 'system_mac_address'], name, value)


            class SystemId_(Entity):
                """
                System ID
                
                .. attribute:: system_mac_addr
                
                	MAC Address used to identify the system
                	**type**\:  :py:class:`SystemMacAddr <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpData.Global.SystemId.SystemId_.SystemMacAddr>`
                
                .. attribute:: system_prio
                
                	Priority of the system
                	**type**\: int
                
                	**range:** 0..65535
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(LacpData.Global.SystemId.SystemId_, self).__init__()

                    self.yang_name = "system-id"
                    self.yang_parent_name = "system-id"
                    self.is_top_level_class = False
                    self.has_list_ancestor = False
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("system-mac-addr", ("system_mac_addr", LacpData.Global.SystemId.SystemId_.SystemMacAddr))])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('system_prio', YLeaf(YType.uint16, 'system-prio')),
                    ])
                    self.system_prio = None

                    self.system_mac_addr = LacpData.Global.SystemId.SystemId_.SystemMacAddr()
                    self.system_mac_addr.parent = self
                    self._children_name_map["system_mac_addr"] = "system-mac-addr"
                    self._children_yang_names.add("system-mac-addr")
                    self._segment_path = lambda: "system-id"
                    self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-data/global/system-id/%s" % self._segment_path()

                def __setattr__(self, name, value):
                    self._perform_setattr(LacpData.Global.SystemId.SystemId_, ['system_prio'], name, value)


                class SystemMacAddr(Entity):
                    """
                    MAC Address used to identify the system
                    
                    .. attribute:: macaddr
                    
                    	macaddr
                    	**type**\: str
                    
                    	**pattern:** ([0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2})\*)?
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(LacpData.Global.SystemId.SystemId_.SystemMacAddr, self).__init__()

                        self.yang_name = "system-mac-addr"
                        self.yang_parent_name = "system-id"
                        self.is_top_level_class = False
                        self.has_list_ancestor = False
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('macaddr', YLeaf(YType.str, 'macaddr')),
                        ])
                        self.macaddr = None
                        self._segment_path = lambda: "system-mac-addr"
                        self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-data/global/system-id/system-id/%s" % self._segment_path()

                    def __setattr__(self, name, value):
                        self._perform_setattr(LacpData.Global.SystemId.SystemId_.SystemMacAddr, ['macaddr'], name, value)

    def clone_ptr(self):
        self._top_entity = LacpData()
        return self._top_entity

class Bundles(Entity):
    """
    bundles
    
    .. attribute:: bundles
    
    	Per bundle operational data
    	**type**\:  :py:class:`Bundles_ <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_>`
    
    

    """

    _prefix = 'bundlemgr-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(Bundles, self).__init__()
        self._top_entity = None

        self.yang_name = "bundles"
        self.yang_parent_name = "Cisco-IOS-XR-bundlemgr-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("bundles", ("bundles", Bundles.Bundles_))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.bundles = Bundles.Bundles_()
        self.bundles.parent = self
        self._children_name_map["bundles"] = "bundles"
        self._children_yang_names.add("bundles")
        self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundles"


    class Bundles_(Entity):
        """
        Per bundle operational data
        
        .. attribute:: bundle
        
        	Bundle interface
        	**type**\: list of  		 :py:class:`Bundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(Bundles.Bundles_, self).__init__()

            self.yang_name = "bundles"
            self.yang_parent_name = "bundles"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("bundle", ("bundle", Bundles.Bundles_.Bundle))])
            self._leafs = OrderedDict()

            self.bundle = YList(self)
            self._segment_path = lambda: "bundles"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundles/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(Bundles.Bundles_, [], name, value)


        class Bundle(Entity):
            """
            Bundle interface
            
            .. attribute:: bundle_interface  (key)
            
            	Bundle interface
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: data
            
            	Data for each Bundle
            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Data>`
            
            .. attribute:: members
            
            	Member interface
            	**type**\:  :py:class:`Members <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Members>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(Bundles.Bundles_.Bundle, self).__init__()

                self.yang_name = "bundle"
                self.yang_parent_name = "bundles"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['bundle_interface']
                self._child_container_classes = OrderedDict([("data", ("data", Bundles.Bundles_.Bundle.Data)), ("members", ("members", Bundles.Bundles_.Bundle.Members))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('bundle_interface', YLeaf(YType.str, 'bundle-interface')),
                ])
                self.bundle_interface = None

                self.data = Bundles.Bundles_.Bundle.Data()
                self.data.parent = self
                self._children_name_map["data"] = "data"
                self._children_yang_names.add("data")

                self.members = Bundles.Bundles_.Bundle.Members()
                self.members.parent = self
                self._children_name_map["members"] = "members"
                self._children_yang_names.add("members")
                self._segment_path = lambda: "bundle" + "[bundle-interface='" + str(self.bundle_interface) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundles/bundles/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(Bundles.Bundles_.Bundle, ['bundle_interface'], name, value)


            class Data(Entity):
                """
                Data for each Bundle
                
                .. attribute:: mac_address
                
                	MAC address of this member
                	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Data.MacAddress>`
                
                .. attribute:: bundle_interface_name
                
                	Bundle interface name
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: available_bandwidth
                
                	Bandwidth available to the bundle interface (kbps)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: kbit/s
                
                .. attribute:: effective_bandwidth
                
                	Effective bandwidth on the bundle interface (kbps)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: kbit/s
                
                .. attribute:: configured_bandwidth
                
                	Bandwidth configured on the bundle interface (kbps)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: kbit/s
                
                .. attribute:: minimum_active_links
                
                	Minimum number of active links for bundle to go up
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: maximum_active_links
                
                	Maximum number of active links in the bundle
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: maximum_active_links_source
                
                	Source of maximum active links value
                	**type**\:  :py:class:`BmWhichSystem <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmWhichSystem>`
                
                .. attribute:: minimum_bandwidth
                
                	Minimum bundle bandwidth for bundle to go up (kbps)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                	**units**\: kbit/s
                
                .. attribute:: primary_member
                
                	Primary bundle member (no longer applicable)
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: bundle_status
                
                	The state of the bundle
                	**type**\:  :py:class:`BmBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlState>`
                
                .. attribute:: active_member_count
                
                	The number of active local members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: standby_member_count
                
                	The number of standby local members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: configured_member_count
                
                	The number of configured local members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: mac_source
                
                	The source of the MAC Address
                	**type**\:  :py:class:`BmBdlMacSource <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmBdlMacSource>`
                
                .. attribute:: mac_source_member
                
                	The name of the member that supplied the MAC address
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: inter_chassis
                
                	Indicates if this bundle is operating as an inter\-chassis link (1 = I\-C link, 0 = normal)
                	**type**\: bool
                
                .. attribute:: is_active
                
                	Indicates the active/standby redundancy state of the device for the bundle
                	**type**\: bool
                
                .. attribute:: lacp_status
                
                	The status of the LACP feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: mlacp_status
                
                	The status of the mLACP feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: ipv4bfd_status
                
                	The status of the BFD (IPv4) feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: link_order_status
                
                	The status of the link order signaling feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: ipv6bfd_status
                
                	The status of the BFD (IPv6) feature on the bundle
                	**type**\:  :py:class:`BmFeatureStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmFeatureStatus>`
                
                .. attribute:: load_balance_hash_type
                
                	The type of hash to use for load balancing
                	**type**\: str
                
                .. attribute:: load_balance_locality_threshold
                
                	The number of links required per rack for localized load balancing
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: suppression_timer
                
                	Timer for suppressing bundle state flaps
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: wait_while_timer
                
                	The wait while time used for member ports
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: collector_max_delay
                
                	Collector Max Delay
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: cisco_extensions
                
                	The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled)
                	**type**\: bool
                
                .. attribute:: lacp_nonrevertive
                
                	The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled)
                	**type**\: bool
                
                .. attribute:: iccp_group_id
                
                	ICCP Group that the bundle is configured to
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: active_foreign_member_count
                
                	The number of active foreign members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: configured_foreign_member_count
                
                	The number of configured local members on the bundle
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: switchover_type
                
                	How a switchover of the bundle from this device will occur
                	**type**\:  :py:class:`BmdMlacpSwitchover <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMlacpSwitchover>`
                
                .. attribute:: maximize_threshold_value_links
                
                	Attempt to maximize the bundle if links are below this value
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: maximize_threshold_value_band_width
                
                	Attempt to maximize the bundle if bandwidth is below this value
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: mlacp_mode
                
                	Indicates the mode of the device for the bundle
                	**type**\:  :py:class:`BundleMlacpMode <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMlacpMode>`
                
                .. attribute:: recovery_delay
                
                	Number of seconds to wait before becoming active after recovering from a failure
                	**type**\: int
                
                	**range:** 0..65535
                
                	**units**\: second
                
                .. attribute:: singleton
                
                	Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not singleton)
                	**type**\: bool
                
                .. attribute:: bfd_config
                
                	Configuration values for BFD on bundle members
                	**type**\: list of  		 :py:class:`BfdConfig <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Data.BfdConfig>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Bundles.Bundles_.Bundle.Data, self).__init__()

                    self.yang_name = "data"
                    self.yang_parent_name = "bundle"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([("mac-address", ("mac_address", Bundles.Bundles_.Bundle.Data.MacAddress))])
                    self._child_list_classes = OrderedDict([("bfd-config", ("bfd_config", Bundles.Bundles_.Bundle.Data.BfdConfig))])
                    self._leafs = OrderedDict([
                        ('bundle_interface_name', YLeaf(YType.str, 'bundle-interface-name')),
                        ('available_bandwidth', YLeaf(YType.uint32, 'available-bandwidth')),
                        ('effective_bandwidth', YLeaf(YType.uint32, 'effective-bandwidth')),
                        ('configured_bandwidth', YLeaf(YType.uint32, 'configured-bandwidth')),
                        ('minimum_active_links', YLeaf(YType.uint8, 'minimum-active-links')),
                        ('maximum_active_links', YLeaf(YType.uint8, 'maximum-active-links')),
                        ('maximum_active_links_source', YLeaf(YType.enumeration, 'maximum-active-links-source')),
                        ('minimum_bandwidth', YLeaf(YType.uint32, 'minimum-bandwidth')),
                        ('primary_member', YLeaf(YType.str, 'primary-member')),
                        ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                        ('active_member_count', YLeaf(YType.uint16, 'active-member-count')),
                        ('standby_member_count', YLeaf(YType.uint16, 'standby-member-count')),
                        ('configured_member_count', YLeaf(YType.uint16, 'configured-member-count')),
                        ('mac_source', YLeaf(YType.enumeration, 'mac-source')),
                        ('mac_source_member', YLeaf(YType.str, 'mac-source-member')),
                        ('inter_chassis', YLeaf(YType.boolean, 'inter-chassis')),
                        ('is_active', YLeaf(YType.boolean, 'is-active')),
                        ('lacp_status', YLeaf(YType.enumeration, 'lacp-status')),
                        ('mlacp_status', YLeaf(YType.enumeration, 'mlacp-status')),
                        ('ipv4bfd_status', YLeaf(YType.enumeration, 'ipv4bfd-status')),
                        ('link_order_status', YLeaf(YType.enumeration, 'link-order-status')),
                        ('ipv6bfd_status', YLeaf(YType.enumeration, 'ipv6bfd-status')),
                        ('load_balance_hash_type', YLeaf(YType.str, 'load-balance-hash-type')),
                        ('load_balance_locality_threshold', YLeaf(YType.uint16, 'load-balance-locality-threshold')),
                        ('suppression_timer', YLeaf(YType.uint16, 'suppression-timer')),
                        ('wait_while_timer', YLeaf(YType.uint16, 'wait-while-timer')),
                        ('collector_max_delay', YLeaf(YType.uint16, 'collector-max-delay')),
                        ('cisco_extensions', YLeaf(YType.boolean, 'cisco-extensions')),
                        ('lacp_nonrevertive', YLeaf(YType.boolean, 'lacp-nonrevertive')),
                        ('iccp_group_id', YLeaf(YType.uint32, 'iccp-group-id')),
                        ('active_foreign_member_count', YLeaf(YType.uint16, 'active-foreign-member-count')),
                        ('configured_foreign_member_count', YLeaf(YType.uint16, 'configured-foreign-member-count')),
                        ('switchover_type', YLeaf(YType.enumeration, 'switchover-type')),
                        ('maximize_threshold_value_links', YLeaf(YType.uint32, 'maximize-threshold-value-links')),
                        ('maximize_threshold_value_band_width', YLeaf(YType.uint32, 'maximize-threshold-value-band-width')),
                        ('mlacp_mode', YLeaf(YType.enumeration, 'mlacp-mode')),
                        ('recovery_delay', YLeaf(YType.uint16, 'recovery-delay')),
                        ('singleton', YLeaf(YType.boolean, 'singleton')),
                    ])
                    self.bundle_interface_name = None
                    self.available_bandwidth = None
                    self.effective_bandwidth = None
                    self.configured_bandwidth = None
                    self.minimum_active_links = None
                    self.maximum_active_links = None
                    self.maximum_active_links_source = None
                    self.minimum_bandwidth = None
                    self.primary_member = None
                    self.bundle_status = None
                    self.active_member_count = None
                    self.standby_member_count = None
                    self.configured_member_count = None
                    self.mac_source = None
                    self.mac_source_member = None
                    self.inter_chassis = None
                    self.is_active = None
                    self.lacp_status = None
                    self.mlacp_status = None
                    self.ipv4bfd_status = None
                    self.link_order_status = None
                    self.ipv6bfd_status = None
                    self.load_balance_hash_type = None
                    self.load_balance_locality_threshold = None
                    self.suppression_timer = None
                    self.wait_while_timer = None
                    self.collector_max_delay = None
                    self.cisco_extensions = None
                    self.lacp_nonrevertive = None
                    self.iccp_group_id = None
                    self.active_foreign_member_count = None
                    self.configured_foreign_member_count = None
                    self.switchover_type = None
                    self.maximize_threshold_value_links = None
                    self.maximize_threshold_value_band_width = None
                    self.mlacp_mode = None
                    self.recovery_delay = None
                    self.singleton = None

                    self.mac_address = Bundles.Bundles_.Bundle.Data.MacAddress()
                    self.mac_address.parent = self
                    self._children_name_map["mac_address"] = "mac-address"
                    self._children_yang_names.add("mac-address")

                    self.bfd_config = YList(self)
                    self._segment_path = lambda: "data"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bundles.Bundles_.Bundle.Data, ['bundle_interface_name', 'available_bandwidth', 'effective_bandwidth', 'configured_bandwidth', 'minimum_active_links', 'maximum_active_links', 'maximum_active_links_source', 'minimum_bandwidth', 'primary_member', 'bundle_status', 'active_member_count', 'standby_member_count', 'configured_member_count', 'mac_source', 'mac_source_member', 'inter_chassis', 'is_active', 'lacp_status', 'mlacp_status', 'ipv4bfd_status', 'link_order_status', 'ipv6bfd_status', 'load_balance_hash_type', 'load_balance_locality_threshold', 'suppression_timer', 'wait_while_timer', 'collector_max_delay', 'cisco_extensions', 'lacp_nonrevertive', 'iccp_group_id', 'active_foreign_member_count', 'configured_foreign_member_count', 'switchover_type', 'maximize_threshold_value_links', 'maximize_threshold_value_band_width', 'mlacp_mode', 'recovery_delay', 'singleton'], name, value)


                class MacAddress(Entity):
                    """
                    MAC address of this member
                    
                    .. attribute:: address
                    
                    	MAC address
                    	**type**\: str
                    
                    	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Bundles.Bundles_.Bundle.Data.MacAddress, self).__init__()

                        self.yang_name = "mac-address"
                        self.yang_parent_name = "data"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('address', YLeaf(YType.str, 'address')),
                        ])
                        self.address = None
                        self._segment_path = lambda: "mac-address"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bundles.Bundles_.Bundle.Data.MacAddress, ['address'], name, value)


                class BfdConfig(Entity):
                    """
                    Configuration values for BFD on bundle members
                    
                    .. attribute:: destination_address
                    
                    	Configured destination address for BFD session
                    	**type**\:  :py:class:`DestinationAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Data.BfdConfig.DestinationAddress>`
                    
                    .. attribute:: bundle_status
                    
                    	Status of BFD on the bundle
                    	**type**\:  :py:class:`BmdBfdBdlState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdBfdBdlState>`
                    
                    .. attribute:: start_timer
                    
                    	Time to wait on session start before declaring DOWN
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nbr_unconfig_timer
                    
                    	Time to wait on session NBR\_UNCONFIG before declaring DOWN
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: pref_multiplier
                    
                    	Preferred multiplier for the BFD session
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: pref_min_interval
                    
                    	Preferred minimum interval for the BFD session (ms)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: pref_echo_min_interval
                    
                    	Preferred echo minimum interval for the BFD session (ms)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: fast_detect
                    
                    	Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled)
                    	**type**\: bool
                    
                    .. attribute:: mode_info
                    
                    	Standard used for per\-member BFD
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Bundles.Bundles_.Bundle.Data.BfdConfig, self).__init__()

                        self.yang_name = "bfd-config"
                        self.yang_parent_name = "data"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([("destination-address", ("destination_address", Bundles.Bundles_.Bundle.Data.BfdConfig.DestinationAddress))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('bundle_status', YLeaf(YType.enumeration, 'bundle-status')),
                            ('start_timer', YLeaf(YType.uint32, 'start-timer')),
                            ('nbr_unconfig_timer', YLeaf(YType.uint32, 'nbr-unconfig-timer')),
                            ('pref_multiplier', YLeaf(YType.uint16, 'pref-multiplier')),
                            ('pref_min_interval', YLeaf(YType.uint32, 'pref-min-interval')),
                            ('pref_echo_min_interval', YLeaf(YType.uint32, 'pref-echo-min-interval')),
                            ('fast_detect', YLeaf(YType.boolean, 'fast-detect')),
                            ('mode_info', YLeaf(YType.uint32, 'mode-info')),
                        ])
                        self.bundle_status = None
                        self.start_timer = None
                        self.nbr_unconfig_timer = None
                        self.pref_multiplier = None
                        self.pref_min_interval = None
                        self.pref_echo_min_interval = None
                        self.fast_detect = None
                        self.mode_info = None

                        self.destination_address = Bundles.Bundles_.Bundle.Data.BfdConfig.DestinationAddress()
                        self.destination_address.parent = self
                        self._children_name_map["destination_address"] = "destination-address"
                        self._children_yang_names.add("destination-address")
                        self._segment_path = lambda: "bfd-config"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bundles.Bundles_.Bundle.Data.BfdConfig, ['bundle_status', 'start_timer', 'nbr_unconfig_timer', 'pref_multiplier', 'pref_min_interval', 'pref_echo_min_interval', 'fast_detect', 'mode_info'], name, value)


                    class DestinationAddress(Entity):
                        """
                        Configured destination address for BFD session
                        
                        .. attribute:: af
                        
                        	AF
                        	**type**\:  :py:class:`BmAfId <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmAfId>`
                        
                        .. attribute:: ipv4
                        
                        	IPv4 address type
                        	**type**\: str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        .. attribute:: ipv6
                        
                        	IPv6 address type
                        	**type**\: str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Bundles.Bundles_.Bundle.Data.BfdConfig.DestinationAddress, self).__init__()

                            self.yang_name = "destination-address"
                            self.yang_parent_name = "bfd-config"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('af', YLeaf(YType.enumeration, 'af')),
                                ('ipv4', YLeaf(YType.str, 'ipv4')),
                                ('ipv6', YLeaf(YType.str, 'ipv6')),
                            ])
                            self.af = None
                            self.ipv4 = None
                            self.ipv6 = None
                            self._segment_path = lambda: "destination-address"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bundles.Bundles_.Bundle.Data.BfdConfig.DestinationAddress, ['af', 'ipv4', 'ipv6'], name, value)


            class Members(Entity):
                """
                Member interface
                
                .. attribute:: member
                
                	Member information
                	**type**\: list of  		 :py:class:`Member <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Members.Member>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(Bundles.Bundles_.Bundle.Members, self).__init__()

                    self.yang_name = "members"
                    self.yang_parent_name = "bundle"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("member", ("member", Bundles.Bundles_.Bundle.Members.Member))])
                    self._leafs = OrderedDict()

                    self.member = YList(self)
                    self._segment_path = lambda: "members"

                def __setattr__(self, name, value):
                    self._perform_setattr(Bundles.Bundles_.Bundle.Members, [], name, value)


                class Member(Entity):
                    """
                    Member information
                    
                    .. attribute:: member_interface  (key)
                    
                    	Member interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: counters
                    
                    	Counters data about member link
                    	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Members.Member.Counters>`
                    
                    .. attribute:: link_data
                    
                    	Lacp data about member link
                    	**type**\:  :py:class:`LinkData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Members.Member.LinkData>`
                    
                    .. attribute:: member_mux_data
                    
                    	Mux state machine data
                    	**type**\:  :py:class:`MemberMuxData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Members.Member.MemberMuxData>`
                    
                    .. attribute:: mac_address
                    
                    	MAC address of this member (deprecated)
                    	**type**\:  :py:class:`MacAddress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Members.Member.MacAddress>`
                    
                    .. attribute:: interface_name
                    
                    	Member's interface name
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: port_priority
                    
                    	The priority of this member
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: port_number
                    
                    	Member's link number
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: underlying_link_id
                    
                    	Member's underlying link ID
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: link_order_number
                    
                    	Member's link order number
                    	**type**\: int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: iccp_node
                    
                    	Location of member
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: bandwidth
                    
                    	Bandwidth of this member (kbps)
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    	**units**\: kbit/s
                    
                    .. attribute:: lacp_enabled
                    
                    	Boolean indicating LACP enabled or not
                    	**type**\: str
                    
                    .. attribute:: member_type
                    
                    	Member's type (local/foreign)
                    	**type**\:  :py:class:`BmdMemberTypeEnum <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberTypeEnum>`
                    
                    .. attribute:: member_name
                    
                    	Member's (short form) name
                    	**type**\: str
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(Bundles.Bundles_.Bundle.Members.Member, self).__init__()

                        self.yang_name = "member"
                        self.yang_parent_name = "members"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['member_interface']
                        self._child_container_classes = OrderedDict([("counters", ("counters", Bundles.Bundles_.Bundle.Members.Member.Counters)), ("link-data", ("link_data", Bundles.Bundles_.Bundle.Members.Member.LinkData)), ("member-mux-data", ("member_mux_data", Bundles.Bundles_.Bundle.Members.Member.MemberMuxData)), ("mac-address", ("mac_address", Bundles.Bundles_.Bundle.Members.Member.MacAddress))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('member_interface', YLeaf(YType.str, 'member-interface')),
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('port_priority', YLeaf(YType.uint16, 'port-priority')),
                            ('port_number', YLeaf(YType.uint16, 'port-number')),
                            ('underlying_link_id', YLeaf(YType.uint16, 'underlying-link-id')),
                            ('link_order_number', YLeaf(YType.uint16, 'link-order-number')),
                            ('iccp_node', YLeaf(YType.uint32, 'iccp-node')),
                            ('bandwidth', YLeaf(YType.uint32, 'bandwidth')),
                            ('lacp_enabled', YLeaf(YType.str, 'lacp-enabled')),
                            ('member_type', YLeaf(YType.enumeration, 'member-type')),
                            ('member_name', YLeaf(YType.str, 'member-name')),
                        ])
                        self.member_interface = None
                        self.interface_name = None
                        self.port_priority = None
                        self.port_number = None
                        self.underlying_link_id = None
                        self.link_order_number = None
                        self.iccp_node = None
                        self.bandwidth = None
                        self.lacp_enabled = None
                        self.member_type = None
                        self.member_name = None

                        self.counters = Bundles.Bundles_.Bundle.Members.Member.Counters()
                        self.counters.parent = self
                        self._children_name_map["counters"] = "counters"
                        self._children_yang_names.add("counters")

                        self.link_data = Bundles.Bundles_.Bundle.Members.Member.LinkData()
                        self.link_data.parent = self
                        self._children_name_map["link_data"] = "link-data"
                        self._children_yang_names.add("link-data")

                        self.member_mux_data = Bundles.Bundles_.Bundle.Members.Member.MemberMuxData()
                        self.member_mux_data.parent = self
                        self._children_name_map["member_mux_data"] = "member-mux-data"
                        self._children_yang_names.add("member-mux-data")

                        self.mac_address = Bundles.Bundles_.Bundle.Members.Member.MacAddress()
                        self.mac_address.parent = self
                        self._children_name_map["mac_address"] = "mac-address"
                        self._children_yang_names.add("mac-address")
                        self._segment_path = lambda: "member" + "[member-interface='" + str(self.member_interface) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(Bundles.Bundles_.Bundle.Members.Member, ['member_interface', 'interface_name', 'port_priority', 'port_number', 'underlying_link_id', 'link_order_number', 'iccp_node', 'bandwidth', 'lacp_enabled', 'member_type', 'member_name'], name, value)


                    class Counters(Entity):
                        """
                        Counters data about member link
                        
                        .. attribute:: lacpd_us_received
                        
                        	LACPDUs received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: lacpd_us_transmitted
                        
                        	LACPDUs transmitted
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: marker_packets_received
                        
                        	Marker packets received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: marker_responses_transmitted
                        
                        	Marker response packets transmitted
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: illegal_packets_received
                        
                        	Illegal and unknown packets received
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: excess_lacpd_us_received
                        
                        	LACPDUs received that exceed the rate limit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: excess_marker_packets_received
                        
                        	Marker packets received that exceed the rate limit
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: defaulted
                        
                        	State flag set to Defaulted
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: expired
                        
                        	State flag set to Expired
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_cleared_sec
                        
                        	Last time counters cleared (s) (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: last_cleared_nsec
                        
                        	Last time counters cleared (nsec) (deprecated)
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Bundles.Bundles_.Bundle.Members.Member.Counters, self).__init__()

                            self.yang_name = "counters"
                            self.yang_parent_name = "member"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('lacpd_us_received', YLeaf(YType.uint32, 'lacpd-us-received')),
                                ('lacpd_us_transmitted', YLeaf(YType.uint32, 'lacpd-us-transmitted')),
                                ('marker_packets_received', YLeaf(YType.uint32, 'marker-packets-received')),
                                ('marker_responses_transmitted', YLeaf(YType.uint32, 'marker-responses-transmitted')),
                                ('illegal_packets_received', YLeaf(YType.uint32, 'illegal-packets-received')),
                                ('excess_lacpd_us_received', YLeaf(YType.uint32, 'excess-lacpd-us-received')),
                                ('excess_marker_packets_received', YLeaf(YType.uint32, 'excess-marker-packets-received')),
                                ('defaulted', YLeaf(YType.uint32, 'defaulted')),
                                ('expired', YLeaf(YType.uint32, 'expired')),
                                ('last_cleared_sec', YLeaf(YType.uint32, 'last-cleared-sec')),
                                ('last_cleared_nsec', YLeaf(YType.uint32, 'last-cleared-nsec')),
                            ])
                            self.lacpd_us_received = None
                            self.lacpd_us_transmitted = None
                            self.marker_packets_received = None
                            self.marker_responses_transmitted = None
                            self.illegal_packets_received = None
                            self.excess_lacpd_us_received = None
                            self.excess_marker_packets_received = None
                            self.defaulted = None
                            self.expired = None
                            self.last_cleared_sec = None
                            self.last_cleared_nsec = None
                            self._segment_path = lambda: "counters"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bundles.Bundles_.Bundle.Members.Member.Counters, ['lacpd_us_received', 'lacpd_us_transmitted', 'marker_packets_received', 'marker_responses_transmitted', 'illegal_packets_received', 'excess_lacpd_us_received', 'excess_marker_packets_received', 'defaulted', 'expired', 'last_cleared_sec', 'last_cleared_nsec'], name, value)


                    class LinkData(Entity):
                        """
                        Lacp data about member link
                        
                        .. attribute:: interface_handle
                        
                        	Member's interface handle
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        .. attribute:: actor_system_priority
                        
                        	System priority of actor system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: actor_system_mac_address
                        
                        	MAC Address of the actor system
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: actor_operational_key
                        
                        	Operational key for this port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_priority
                        
                        	System priority of partner system
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_system_mac_address
                        
                        	MAC Address used to identify the partner system
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        .. attribute:: partner_operational_key
                        
                        	Operational key for partner port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: selected_aggregator_id
                        
                        	MIB ifindex of selected bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: attached_aggregator_id
                        
                        	MIB ifindex of attached bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: actor_port_id
                        
                        	Port number of this port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: actor_port_priority
                        
                        	Priority of this port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_port_id
                        
                        	Port number of the partner's port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: partner_port_priority
                        
                        	Priority of the partner's port
                        	**type**\: int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: actor_port_state
                        
                        	LACP state of this port
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        .. attribute:: partner_port_state
                        
                        	LACP state of the partner's port
                        	**type**\: int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Bundles.Bundles_.Bundle.Members.Member.LinkData, self).__init__()

                            self.yang_name = "link-data"
                            self.yang_parent_name = "member"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                                ('actor_system_priority', YLeaf(YType.uint16, 'actor-system-priority')),
                                ('actor_system_mac_address', YLeaf(YType.str, 'actor-system-mac-address')),
                                ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                                ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                                ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                                ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                                ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                                ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                                ('actor_port_id', YLeaf(YType.uint16, 'actor-port-id')),
                                ('actor_port_priority', YLeaf(YType.uint16, 'actor-port-priority')),
                                ('partner_port_id', YLeaf(YType.uint16, 'partner-port-id')),
                                ('partner_port_priority', YLeaf(YType.uint16, 'partner-port-priority')),
                                ('actor_port_state', YLeaf(YType.uint8, 'actor-port-state')),
                                ('partner_port_state', YLeaf(YType.uint8, 'partner-port-state')),
                            ])
                            self.interface_handle = None
                            self.actor_system_priority = None
                            self.actor_system_mac_address = None
                            self.actor_operational_key = None
                            self.partner_system_priority = None
                            self.partner_system_mac_address = None
                            self.partner_operational_key = None
                            self.selected_aggregator_id = None
                            self.attached_aggregator_id = None
                            self.actor_port_id = None
                            self.actor_port_priority = None
                            self.partner_port_id = None
                            self.partner_port_priority = None
                            self.actor_port_state = None
                            self.partner_port_state = None
                            self._segment_path = lambda: "link-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bundles.Bundles_.Bundle.Members.Member.LinkData, ['interface_handle', 'actor_system_priority', 'actor_system_mac_address', 'actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key', 'selected_aggregator_id', 'attached_aggregator_id', 'actor_port_id', 'actor_port_priority', 'partner_port_id', 'partner_port_priority', 'actor_port_state', 'partner_port_state'], name, value)


                    class MemberMuxData(Entity):
                        """
                        Mux state machine data
                        
                        .. attribute:: member_mux_state_reason_data
                        
                        	Data regarding the reason for last Mux state change
                        	**type**\:  :py:class:`MemberMuxStateReasonData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.Bundles.Bundles_.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData>`
                        
                        .. attribute:: mux_state
                        
                        	Current state of this bundle member
                        	**type**\:  :py:class:`BmMuxstate <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxstate>`
                        
                        .. attribute:: error
                        
                        	Internal value indicating if an error occurred trying to put a link into the desired state
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: member_mux_state_reason
                        
                        	Reason for last Mux state change
                        	**type**\:  :py:class:`BmMbrStateReason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMbrStateReason>`
                        
                        .. attribute:: member_state
                        
                        	Current internal state of this bundle member
                        	**type**\:  :py:class:`BmdMemberState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmdMemberState>`
                        
                        .. attribute:: mux_state_reason
                        
                        	Reason for last Mux state change (Deprecated)
                        	**type**\:  :py:class:`BmMuxreason <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmMuxreason>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Bundles.Bundles_.Bundle.Members.Member.MemberMuxData, self).__init__()

                            self.yang_name = "member-mux-data"
                            self.yang_parent_name = "member"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("member-mux-state-reason-data", ("member_mux_state_reason_data", Bundles.Bundles_.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('mux_state', YLeaf(YType.enumeration, 'mux-state')),
                                ('error', YLeaf(YType.uint32, 'error')),
                                ('member_mux_state_reason', YLeaf(YType.enumeration, 'member-mux-state-reason')),
                                ('member_state', YLeaf(YType.enumeration, 'member-state')),
                                ('mux_state_reason', YLeaf(YType.enumeration, 'mux-state-reason')),
                            ])
                            self.mux_state = None
                            self.error = None
                            self.member_mux_state_reason = None
                            self.member_state = None
                            self.mux_state_reason = None

                            self.member_mux_state_reason_data = Bundles.Bundles_.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData()
                            self.member_mux_state_reason_data.parent = self
                            self._children_name_map["member_mux_state_reason_data"] = "member-mux-state-reason-data"
                            self._children_yang_names.add("member-mux-state-reason-data")
                            self._segment_path = lambda: "member-mux-data"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bundles.Bundles_.Bundle.Members.Member.MemberMuxData, ['mux_state', 'error', 'member_mux_state_reason', 'member_state', 'mux_state_reason'], name, value)


                        class MemberMuxStateReasonData(Entity):
                            """
                            Data regarding the reason for last Mux state
                            change
                            
                            .. attribute:: reason_type
                            
                            	The item the reason applies to
                            	**type**\:  :py:class:`BmStateReasonTarget <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmStateReasonTarget>`
                            
                            .. attribute:: severity
                            
                            	The severity of the reason
                            	**type**\:  :py:class:`BmSeverity <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BmSeverity>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(Bundles.Bundles_.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData, self).__init__()

                                self.yang_name = "member-mux-state-reason-data"
                                self.yang_parent_name = "member-mux-data"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('reason_type', YLeaf(YType.enumeration, 'reason-type')),
                                    ('severity', YLeaf(YType.enumeration, 'severity')),
                                ])
                                self.reason_type = None
                                self.severity = None
                                self._segment_path = lambda: "member-mux-state-reason-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(Bundles.Bundles_.Bundle.Members.Member.MemberMuxData.MemberMuxStateReasonData, ['reason_type', 'severity'], name, value)


                    class MacAddress(Entity):
                        """
                        MAC address of this member (deprecated)
                        
                        .. attribute:: address
                        
                        	MAC address
                        	**type**\: str
                        
                        	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(Bundles.Bundles_.Bundle.Members.Member.MacAddress, self).__init__()

                            self.yang_name = "mac-address"
                            self.yang_parent_name = "member"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('address', YLeaf(YType.str, 'address')),
                            ])
                            self.address = None
                            self._segment_path = lambda: "mac-address"

                        def __setattr__(self, name, value):
                            self._perform_setattr(Bundles.Bundles_.Bundle.Members.Member.MacAddress, ['address'], name, value)

    def clone_ptr(self):
        self._top_entity = Bundles()
        return self._top_entity

class LacpBundleMembers(Entity):
    """
    lacp bundle members
    
    .. attribute:: nodes
    
    	Table of devices with their LACP bundle member interfaces
    	**type**\:  :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundleMembers.Nodes>`
    
    .. attribute:: members
    
    	Table of LACP bundle member interfaces
    	**type**\:  :py:class:`Members <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundleMembers.Members>`
    
    

    """

    _prefix = 'bundlemgr-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(LacpBundleMembers, self).__init__()
        self._top_entity = None

        self.yang_name = "lacp-bundle-members"
        self.yang_parent_name = "Cisco-IOS-XR-bundlemgr-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("nodes", ("nodes", LacpBundleMembers.Nodes)), ("members", ("members", LacpBundleMembers.Members))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.nodes = LacpBundleMembers.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")

        self.members = LacpBundleMembers.Members()
        self.members.parent = self
        self._children_name_map["members"] = "members"
        self._children_yang_names.add("members")
        self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-bundle-members"


    class Nodes(Entity):
        """
        Table of devices with their LACP bundle member
        interfaces
        
        .. attribute:: node
        
        	Node ID
        	**type**\: list of  		 :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundleMembers.Nodes.Node>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(LacpBundleMembers.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "lacp-bundle-members"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("node", ("node", LacpBundleMembers.Nodes.Node))])
            self._leafs = OrderedDict()

            self.node = YList(self)
            self._segment_path = lambda: "nodes"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-bundle-members/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(LacpBundleMembers.Nodes, [], name, value)


        class Node(Entity):
            """
            Node ID
            
            .. attribute:: node  (key)
            
            	For a local device the Node ID e.g. '0\_0\_CPU0' , for a peer device the LDP ID followed by the ICCP Group ID e.g. '5.4.3.2,4'
            	**type**\: str
            
            .. attribute:: counters
            
            	Link counters for LACP bundle members per node
            	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundleMembers.Nodes.Node.Counters>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(LacpBundleMembers.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['node']
                self._child_container_classes = OrderedDict([("counters", ("counters", LacpBundleMembers.Nodes.Node.Counters))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('node', YLeaf(YType.str, 'node')),
                ])
                self.node = None

                self.counters = LacpBundleMembers.Nodes.Node.Counters()
                self.counters.parent = self
                self._children_name_map["counters"] = "counters"
                self._children_yang_names.add("counters")
                self._segment_path = lambda: "node" + "[node='" + str(self.node) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-bundle-members/nodes/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(LacpBundleMembers.Nodes.Node, ['node'], name, value)


            class Counters(Entity):
                """
                Link counters for LACP bundle members per node
                
                .. attribute:: wrong_port_count
                
                	LACP protocol packets received on ports with LACP inactive/off
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_wrong_port
                
                	Last unrecognized port on which a packet was received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: unknown_port_count
                
                	Packets received for which rx port could not be determined
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: undecodable_packets
                
                	Packets received which could not be decoded
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: time_since_cleared
                
                	Time elapsed since counters were last cleared (in nanoseconds)
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: nanosecond
                
                .. attribute:: time_since_unexpected_event
                
                	Time elapsed since last unexpected event (in nanoseconds)
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: nanosecond
                
                .. attribute:: time_since_last_updated
                
                	Time elapsed since statistics were last updated (in nanoseconds)
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                	**units**\: nanosecond
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(LacpBundleMembers.Nodes.Node.Counters, self).__init__()

                    self.yang_name = "counters"
                    self.yang_parent_name = "node"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('wrong_port_count', YLeaf(YType.uint32, 'wrong-port-count')),
                        ('last_wrong_port', YLeaf(YType.uint32, 'last-wrong-port')),
                        ('unknown_port_count', YLeaf(YType.uint32, 'unknown-port-count')),
                        ('undecodable_packets', YLeaf(YType.uint32, 'undecodable-packets')),
                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                        ('time_since_unexpected_event', YLeaf(YType.uint64, 'time-since-unexpected-event')),
                        ('time_since_last_updated', YLeaf(YType.uint64, 'time-since-last-updated')),
                    ])
                    self.wrong_port_count = None
                    self.last_wrong_port = None
                    self.unknown_port_count = None
                    self.undecodable_packets = None
                    self.time_since_cleared = None
                    self.time_since_unexpected_event = None
                    self.time_since_last_updated = None
                    self._segment_path = lambda: "counters"

                def __setattr__(self, name, value):
                    self._perform_setattr(LacpBundleMembers.Nodes.Node.Counters, ['wrong_port_count', 'last_wrong_port', 'unknown_port_count', 'undecodable_packets', 'time_since_cleared', 'time_since_unexpected_event', 'time_since_last_updated'], name, value)


    class Members(Entity):
        """
        Table of LACP bundle member interfaces
        
        .. attribute:: member
        
        	LACP bundle member interface data
        	**type**\: list of  		 :py:class:`Member <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundleMembers.Members.Member>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(LacpBundleMembers.Members, self).__init__()

            self.yang_name = "members"
            self.yang_parent_name = "lacp-bundle-members"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("member", ("member", LacpBundleMembers.Members.Member))])
            self._leafs = OrderedDict()

            self.member = YList(self)
            self._segment_path = lambda: "members"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-bundle-members/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(LacpBundleMembers.Members, [], name, value)


        class Member(Entity):
            """
            LACP bundle member interface data
            
            .. attribute:: member_interface  (key)
            
            	Member interface
            	**type**\: str
            
            	**pattern:** [a\-zA\-Z0\-9./\-]+
            
            .. attribute:: data
            
            	Link data for LACP bundle members
            	**type**\:  :py:class:`Data <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundleMembers.Members.Member.Data>`
            
            .. attribute:: counters
            
            	Link counters for LACP bundle members
            	**type**\:  :py:class:`Counters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LacpBundleMembers.Members.Member.Counters>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(LacpBundleMembers.Members.Member, self).__init__()

                self.yang_name = "member"
                self.yang_parent_name = "members"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['member_interface']
                self._child_container_classes = OrderedDict([("data", ("data", LacpBundleMembers.Members.Member.Data)), ("counters", ("counters", LacpBundleMembers.Members.Member.Counters))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('member_interface', YLeaf(YType.str, 'member-interface')),
                ])
                self.member_interface = None

                self.data = LacpBundleMembers.Members.Member.Data()
                self.data.parent = self
                self._children_name_map["data"] = "data"
                self._children_yang_names.add("data")

                self.counters = LacpBundleMembers.Members.Member.Counters()
                self.counters.parent = self
                self._children_name_map["counters"] = "counters"
                self._children_yang_names.add("counters")
                self._segment_path = lambda: "member" + "[member-interface='" + str(self.member_interface) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:lacp-bundle-members/members/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(LacpBundleMembers.Members.Member, ['member_interface'], name, value)


            class Data(Entity):
                """
                Link data for LACP bundle members
                
                .. attribute:: interface_handle
                
                	Member's interface handle
                	**type**\: str
                
                	**pattern:** [a\-zA\-Z0\-9./\-]+
                
                .. attribute:: actor_system_priority
                
                	System priority of the actor system
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: actor_system_mac_address
                
                	MAC Address of the actor system
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: actor_operational_key
                
                	Operational key for this port
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: partner_system_priority
                
                	System priority of partner system
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: partner_system_mac_address
                
                	MAC Address used to identify the partner system
                	**type**\: str
                
                	**pattern:** [0\-9a\-fA\-F]{2}(\:[0\-9a\-fA\-F]{2}){5}
                
                .. attribute:: partner_operational_key
                
                	Operational key for partner port
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: selected_aggregator_id
                
                	MIB ifindex of selected bundle
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: attached_aggregator_id
                
                	MIB ifindex of attached bundle
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: actor_port_id
                
                	Port number of this port
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: actor_port_priority
                
                	Priority of this port
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: partner_port_id
                
                	Port number of the partner's port
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: partner_port_priority
                
                	Priority of the partner's port
                	**type**\: int
                
                	**range:** 0..65535
                
                .. attribute:: actor_port_state
                
                	LACP state of this port
                	**type**\: int
                
                	**range:** 0..255
                
                .. attribute:: partner_port_state
                
                	LACP state of the partner's port
                	**type**\: int
                
                	**range:** 0..255
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(LacpBundleMembers.Members.Member.Data, self).__init__()

                    self.yang_name = "data"
                    self.yang_parent_name = "member"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('interface_handle', YLeaf(YType.str, 'interface-handle')),
                        ('actor_system_priority', YLeaf(YType.uint16, 'actor-system-priority')),
                        ('actor_system_mac_address', YLeaf(YType.str, 'actor-system-mac-address')),
                        ('actor_operational_key', YLeaf(YType.uint16, 'actor-operational-key')),
                        ('partner_system_priority', YLeaf(YType.uint16, 'partner-system-priority')),
                        ('partner_system_mac_address', YLeaf(YType.str, 'partner-system-mac-address')),
                        ('partner_operational_key', YLeaf(YType.uint16, 'partner-operational-key')),
                        ('selected_aggregator_id', YLeaf(YType.uint32, 'selected-aggregator-id')),
                        ('attached_aggregator_id', YLeaf(YType.uint32, 'attached-aggregator-id')),
                        ('actor_port_id', YLeaf(YType.uint16, 'actor-port-id')),
                        ('actor_port_priority', YLeaf(YType.uint16, 'actor-port-priority')),
                        ('partner_port_id', YLeaf(YType.uint16, 'partner-port-id')),
                        ('partner_port_priority', YLeaf(YType.uint16, 'partner-port-priority')),
                        ('actor_port_state', YLeaf(YType.uint8, 'actor-port-state')),
                        ('partner_port_state', YLeaf(YType.uint8, 'partner-port-state')),
                    ])
                    self.interface_handle = None
                    self.actor_system_priority = None
                    self.actor_system_mac_address = None
                    self.actor_operational_key = None
                    self.partner_system_priority = None
                    self.partner_system_mac_address = None
                    self.partner_operational_key = None
                    self.selected_aggregator_id = None
                    self.attached_aggregator_id = None
                    self.actor_port_id = None
                    self.actor_port_priority = None
                    self.partner_port_id = None
                    self.partner_port_priority = None
                    self.actor_port_state = None
                    self.partner_port_state = None
                    self._segment_path = lambda: "data"

                def __setattr__(self, name, value):
                    self._perform_setattr(LacpBundleMembers.Members.Member.Data, ['interface_handle', 'actor_system_priority', 'actor_system_mac_address', 'actor_operational_key', 'partner_system_priority', 'partner_system_mac_address', 'partner_operational_key', 'selected_aggregator_id', 'attached_aggregator_id', 'actor_port_id', 'actor_port_priority', 'partner_port_id', 'partner_port_priority', 'actor_port_state', 'partner_port_state'], name, value)


            class Counters(Entity):
                """
                Link counters for LACP bundle members
                
                .. attribute:: lacpd_us_received
                
                	LACPDUs received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: lacpd_us_transmitted
                
                	LACPDUs transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: marker_packets_received
                
                	Marker packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: marker_responses_transmitted
                
                	Marker response packets transmitted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: illegal_packets_received
                
                	Illegal and unknown packets received
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: excess_lacpd_us_received
                
                	LACPDUs received that exceed the rate limit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: excess_marker_packets_received
                
                	Marker packets received that exceed the rate limit
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: defaulted
                
                	State flag set to Defaulted
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: expired
                
                	State flag set to Expired
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: time_since_last_lacpdu_received
                
                	Time elapsed since last LACPDU received (nsec)
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: time_since_cleared
                
                	Time elapsed since counters last cleared (nsec)
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: time_since_unexpected_event
                
                	Time elapsed since last unexpected event (nsec)
                	**type**\: int
                
                	**range:** 0..18446744073709551615
                
                .. attribute:: last_cleared_sec
                
                	Last time counters cleared (s) (deprecated)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                .. attribute:: last_cleared_nsec
                
                	Last time counters cleared (nsec) (deprecated)
                	**type**\: int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(LacpBundleMembers.Members.Member.Counters, self).__init__()

                    self.yang_name = "counters"
                    self.yang_parent_name = "member"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([])
                    self._leafs = OrderedDict([
                        ('lacpd_us_received', YLeaf(YType.uint32, 'lacpd-us-received')),
                        ('lacpd_us_transmitted', YLeaf(YType.uint32, 'lacpd-us-transmitted')),
                        ('marker_packets_received', YLeaf(YType.uint32, 'marker-packets-received')),
                        ('marker_responses_transmitted', YLeaf(YType.uint32, 'marker-responses-transmitted')),
                        ('illegal_packets_received', YLeaf(YType.uint32, 'illegal-packets-received')),
                        ('excess_lacpd_us_received', YLeaf(YType.uint32, 'excess-lacpd-us-received')),
                        ('excess_marker_packets_received', YLeaf(YType.uint32, 'excess-marker-packets-received')),
                        ('defaulted', YLeaf(YType.uint32, 'defaulted')),
                        ('expired', YLeaf(YType.uint32, 'expired')),
                        ('time_since_last_lacpdu_received', YLeaf(YType.uint64, 'time-since-last-lacpdu-received')),
                        ('time_since_cleared', YLeaf(YType.uint64, 'time-since-cleared')),
                        ('time_since_unexpected_event', YLeaf(YType.uint64, 'time-since-unexpected-event')),
                        ('last_cleared_sec', YLeaf(YType.uint32, 'last-cleared-sec')),
                        ('last_cleared_nsec', YLeaf(YType.uint32, 'last-cleared-nsec')),
                    ])
                    self.lacpd_us_received = None
                    self.lacpd_us_transmitted = None
                    self.marker_packets_received = None
                    self.marker_responses_transmitted = None
                    self.illegal_packets_received = None
                    self.excess_lacpd_us_received = None
                    self.excess_marker_packets_received = None
                    self.defaulted = None
                    self.expired = None
                    self.time_since_last_lacpdu_received = None
                    self.time_since_cleared = None
                    self.time_since_unexpected_event = None
                    self.last_cleared_sec = None
                    self.last_cleared_nsec = None
                    self._segment_path = lambda: "counters"

                def __setattr__(self, name, value):
                    self._perform_setattr(LacpBundleMembers.Members.Member.Counters, ['lacpd_us_received', 'lacpd_us_transmitted', 'marker_packets_received', 'marker_responses_transmitted', 'illegal_packets_received', 'excess_lacpd_us_received', 'excess_marker_packets_received', 'defaulted', 'expired', 'time_since_last_lacpdu_received', 'time_since_cleared', 'time_since_unexpected_event', 'last_cleared_sec', 'last_cleared_nsec'], name, value)

    def clone_ptr(self):
        self._top_entity = LacpBundleMembers()
        return self._top_entity

class BundlesAdjacency(Entity):
    """
    bundles adjacency
    
    .. attribute:: nodes
    
    	Per bundle operational data
    	**type**\:  :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes>`
    
    

    """

    _prefix = 'bundlemgr-oper'
    _revision = '2017-05-01'

    def __init__(self):
        super(BundlesAdjacency, self).__init__()
        self._top_entity = None

        self.yang_name = "bundles-adjacency"
        self.yang_parent_name = "Cisco-IOS-XR-bundlemgr-oper"
        self.is_top_level_class = True
        self.has_list_ancestor = False
        self.ylist_key_names = []
        self._child_container_classes = OrderedDict([("nodes", ("nodes", BundlesAdjacency.Nodes))])
        self._child_list_classes = OrderedDict([])
        self._leafs = OrderedDict()

        self.nodes = BundlesAdjacency.Nodes()
        self.nodes.parent = self
        self._children_name_map["nodes"] = "nodes"
        self._children_yang_names.add("nodes")
        self._segment_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundles-adjacency"


    class Nodes(Entity):
        """
        Per bundle operational data
        
        .. attribute:: node
        
        	Location
        	**type**\: list of  		 :py:class:`Node <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node>`
        
        

        """

        _prefix = 'bundlemgr-oper'
        _revision = '2017-05-01'

        def __init__(self):
            super(BundlesAdjacency.Nodes, self).__init__()

            self.yang_name = "nodes"
            self.yang_parent_name = "bundles-adjacency"
            self.is_top_level_class = False
            self.has_list_ancestor = False
            self.ylist_key_names = []
            self._child_container_classes = OrderedDict([])
            self._child_list_classes = OrderedDict([("node", ("node", BundlesAdjacency.Nodes.Node))])
            self._leafs = OrderedDict()

            self.node = YList(self)
            self._segment_path = lambda: "nodes"
            self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundles-adjacency/%s" % self._segment_path()

        def __setattr__(self, name, value):
            self._perform_setattr(BundlesAdjacency.Nodes, [], name, value)


        class Node(Entity):
            """
            Location
            
            .. attribute:: node_name  (key)
            
            	Node ID
            	**type**\: str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: brief
            
            	Brief load\-balance information for the node
            	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Brief>`
            
            .. attribute:: bundles
            
            	Per bundle operational data
            	**type**\:  :py:class:`Bundles <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles>`
            
            

            """

            _prefix = 'bundlemgr-oper'
            _revision = '2017-05-01'

            def __init__(self):
                super(BundlesAdjacency.Nodes.Node, self).__init__()

                self.yang_name = "node"
                self.yang_parent_name = "nodes"
                self.is_top_level_class = False
                self.has_list_ancestor = False
                self.ylist_key_names = ['node_name']
                self._child_container_classes = OrderedDict([("brief", ("brief", BundlesAdjacency.Nodes.Node.Brief)), ("bundles", ("bundles", BundlesAdjacency.Nodes.Node.Bundles))])
                self._child_list_classes = OrderedDict([])
                self._leafs = OrderedDict([
                    ('node_name', YLeaf(YType.str, 'node-name')),
                ])
                self.node_name = None

                self.brief = BundlesAdjacency.Nodes.Node.Brief()
                self.brief.parent = self
                self._children_name_map["brief"] = "brief"
                self._children_yang_names.add("brief")

                self.bundles = BundlesAdjacency.Nodes.Node.Bundles()
                self.bundles.parent = self
                self._children_name_map["bundles"] = "bundles"
                self._children_yang_names.add("bundles")
                self._segment_path = lambda: "node" + "[node-name='" + str(self.node_name) + "']"
                self._absolute_path = lambda: "Cisco-IOS-XR-bundlemgr-oper:bundles-adjacency/nodes/%s" % self._segment_path()

            def __setattr__(self, name, value):
                self._perform_setattr(BundlesAdjacency.Nodes.Node, ['node_name'], name, value)


            class Brief(Entity):
                """
                Brief load\-balance information for the node
                
                .. attribute:: bundle_data
                
                	Data for all bundles on node
                	**type**\: list of  		 :py:class:`BundleData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Brief.BundleData>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundlesAdjacency.Nodes.Node.Brief, self).__init__()

                    self.yang_name = "brief"
                    self.yang_parent_name = "node"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("bundle-data", ("bundle_data", BundlesAdjacency.Nodes.Node.Brief.BundleData))])
                    self._leafs = OrderedDict()

                    self.bundle_data = YList(self)
                    self._segment_path = lambda: "brief"

                def __setattr__(self, name, value):
                    self._perform_setattr(BundlesAdjacency.Nodes.Node.Brief, [], name, value)


                class BundleData(Entity):
                    """
                    Data for all bundles on node
                    
                    .. attribute:: interface_name
                    
                    	Bundle interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: sub_interface_count
                    
                    	Number of sub\-interfaces on the bundle
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: member_count
                    
                    	Number of members configured to the bundle
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: total_weight
                    
                    	Total weighting (relative bandwidth) of bundle
                    	**type**\: int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: sub_interface
                    
                    	Sub\-interfaces of the bundle
                    	**type**\: list of  		 :py:class:`SubInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Brief.BundleData.SubInterface>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundlesAdjacency.Nodes.Node.Brief.BundleData, self).__init__()

                        self.yang_name = "bundle-data"
                        self.yang_parent_name = "brief"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = []
                        self._child_container_classes = OrderedDict([])
                        self._child_list_classes = OrderedDict([("sub-interface", ("sub_interface", BundlesAdjacency.Nodes.Node.Brief.BundleData.SubInterface))])
                        self._leafs = OrderedDict([
                            ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ('sub_interface_count', YLeaf(YType.uint32, 'sub-interface-count')),
                            ('member_count', YLeaf(YType.uint32, 'member-count')),
                            ('total_weight', YLeaf(YType.uint32, 'total-weight')),
                        ])
                        self.interface_name = None
                        self.sub_interface_count = None
                        self.member_count = None
                        self.total_weight = None

                        self.sub_interface = YList(self)
                        self._segment_path = lambda: "bundle-data"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundlesAdjacency.Nodes.Node.Brief.BundleData, ['interface_name', 'sub_interface_count', 'member_count', 'total_weight'], name, value)


                    class SubInterface(Entity):
                        """
                        Sub\-interfaces of the bundle
                        
                        .. attribute:: load_balance_data
                        
                        	Load balance data
                        	**type**\:  :py:class:`LoadBalanceData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Brief.BundleData.SubInterface.LoadBalanceData>`
                        
                        .. attribute:: interface_name
                        
                        	Sub interface
                        	**type**\: str
                        
                        	**pattern:** [a\-zA\-Z0\-9./\-]+
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundlesAdjacency.Nodes.Node.Brief.BundleData.SubInterface, self).__init__()

                            self.yang_name = "sub-interface"
                            self.yang_parent_name = "bundle-data"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("load-balance-data", ("load_balance_data", BundlesAdjacency.Nodes.Node.Brief.BundleData.SubInterface.LoadBalanceData))])
                            self._child_list_classes = OrderedDict([])
                            self._leafs = OrderedDict([
                                ('interface_name', YLeaf(YType.str, 'interface-name')),
                            ])
                            self.interface_name = None

                            self.load_balance_data = BundlesAdjacency.Nodes.Node.Brief.BundleData.SubInterface.LoadBalanceData()
                            self.load_balance_data.parent = self
                            self._children_name_map["load_balance_data"] = "load-balance-data"
                            self._children_yang_names.add("load-balance-data")
                            self._segment_path = lambda: "sub-interface"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundlesAdjacency.Nodes.Node.Brief.BundleData.SubInterface, ['interface_name'], name, value)


                        class LoadBalanceData(Entity):
                            """
                            Load balance data
                            
                            .. attribute:: type
                            
                            	Type of load balancing to use
                            	**type**\:  :py:class:`LoadBalance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LoadBalance>`
                            
                            .. attribute:: value
                            
                            	Load balance hash value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_link_threshold
                            
                            	Threshold below which rack\-local balancing is disabled
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundlesAdjacency.Nodes.Node.Brief.BundleData.SubInterface.LoadBalanceData, self).__init__()

                                self.yang_name = "load-balance-data"
                                self.yang_parent_name = "sub-interface"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.enumeration, 'type')),
                                    ('value', YLeaf(YType.uint32, 'value')),
                                    ('local_link_threshold', YLeaf(YType.uint32, 'local-link-threshold')),
                                ])
                                self.type = None
                                self.value = None
                                self.local_link_threshold = None
                                self._segment_path = lambda: "load-balance-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundlesAdjacency.Nodes.Node.Brief.BundleData.SubInterface.LoadBalanceData, ['type', 'value', 'local_link_threshold'], name, value)


            class Bundles(Entity):
                """
                Per bundle operational data
                
                .. attribute:: bundle
                
                	Bundle information
                	**type**\: list of  		 :py:class:`Bundle <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles.Bundle>`
                
                

                """

                _prefix = 'bundlemgr-oper'
                _revision = '2017-05-01'

                def __init__(self):
                    super(BundlesAdjacency.Nodes.Node.Bundles, self).__init__()

                    self.yang_name = "bundles"
                    self.yang_parent_name = "node"
                    self.is_top_level_class = False
                    self.has_list_ancestor = True
                    self.ylist_key_names = []
                    self._child_container_classes = OrderedDict([])
                    self._child_list_classes = OrderedDict([("bundle", ("bundle", BundlesAdjacency.Nodes.Node.Bundles.Bundle))])
                    self._leafs = OrderedDict()

                    self.bundle = YList(self)
                    self._segment_path = lambda: "bundles"

                def __setattr__(self, name, value):
                    self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles, [], name, value)


                class Bundle(Entity):
                    """
                    Bundle information
                    
                    .. attribute:: bundle_name  (key)
                    
                    	Bundle interface
                    	**type**\: str
                    
                    	**pattern:** [a\-zA\-Z0\-9./\-]+
                    
                    .. attribute:: bundle_info
                    
                    	Data for each Bundle
                    	**type**\:  :py:class:`BundleInfo <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo>`
                    
                    

                    """

                    _prefix = 'bundlemgr-oper'
                    _revision = '2017-05-01'

                    def __init__(self):
                        super(BundlesAdjacency.Nodes.Node.Bundles.Bundle, self).__init__()

                        self.yang_name = "bundle"
                        self.yang_parent_name = "bundles"
                        self.is_top_level_class = False
                        self.has_list_ancestor = True
                        self.ylist_key_names = ['bundle_name']
                        self._child_container_classes = OrderedDict([("bundle-info", ("bundle_info", BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo))])
                        self._child_list_classes = OrderedDict([])
                        self._leafs = OrderedDict([
                            ('bundle_name', YLeaf(YType.str, 'bundle-name')),
                        ])
                        self.bundle_name = None

                        self.bundle_info = BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo()
                        self.bundle_info.parent = self
                        self._children_name_map["bundle_info"] = "bundle-info"
                        self._children_yang_names.add("bundle-info")
                        self._segment_path = lambda: "bundle" + "[bundle-name='" + str(self.bundle_name) + "']"

                    def __setattr__(self, name, value):
                        self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles.Bundle, ['bundle_name'], name, value)


                    class BundleInfo(Entity):
                        """
                        Data for each Bundle
                        
                        .. attribute:: brief
                        
                        	Brief bundle data
                        	**type**\:  :py:class:`Brief <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief>`
                        
                        .. attribute:: load_balance_data
                        
                        	Load Balance data
                        	**type**\:  :py:class:`LoadBalanceData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.LoadBalanceData>`
                        
                        .. attribute:: media
                        
                        	Media type of bundle
                        	**type**\:  :py:class:`BundleMedia1 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundleMedia1>`
                        
                        .. attribute:: max_member_count
                        
                        	Maximum number of members for the bundle
                        	**type**\: int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: avoid_rebalance
                        
                        	Avoid rebalancing traffic flows
                        	**type**\: bool
                        
                        .. attribute:: member
                        
                        	Members of the bundle
                        	**type**\: list of  		 :py:class:`Member <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Member>`
                        
                        .. attribute:: sub_interface
                        
                        	Sub\-interfaces of the bundle
                        	**type**\: list of  		 :py:class:`SubInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.SubInterface>`
                        
                        

                        """

                        _prefix = 'bundlemgr-oper'
                        _revision = '2017-05-01'

                        def __init__(self):
                            super(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo, self).__init__()

                            self.yang_name = "bundle-info"
                            self.yang_parent_name = "bundle"
                            self.is_top_level_class = False
                            self.has_list_ancestor = True
                            self.ylist_key_names = []
                            self._child_container_classes = OrderedDict([("brief", ("brief", BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief)), ("load-balance-data", ("load_balance_data", BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.LoadBalanceData))])
                            self._child_list_classes = OrderedDict([("member", ("member", BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Member)), ("sub-interface", ("sub_interface", BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.SubInterface))])
                            self._leafs = OrderedDict([
                                ('media', YLeaf(YType.enumeration, 'media')),
                                ('max_member_count', YLeaf(YType.uint32, 'max-member-count')),
                                ('avoid_rebalance', YLeaf(YType.boolean, 'avoid-rebalance')),
                            ])
                            self.media = None
                            self.max_member_count = None
                            self.avoid_rebalance = None

                            self.brief = BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief()
                            self.brief.parent = self
                            self._children_name_map["brief"] = "brief"
                            self._children_yang_names.add("brief")

                            self.load_balance_data = BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.LoadBalanceData()
                            self.load_balance_data.parent = self
                            self._children_name_map["load_balance_data"] = "load-balance-data"
                            self._children_yang_names.add("load-balance-data")

                            self.member = YList(self)
                            self.sub_interface = YList(self)
                            self._segment_path = lambda: "bundle-info"

                        def __setattr__(self, name, value):
                            self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo, ['media', 'max_member_count', 'avoid_rebalance'], name, value)


                        class Brief(Entity):
                            """
                            Brief bundle data
                            
                            .. attribute:: interface_name
                            
                            	Bundle interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: sub_interface_count
                            
                            	Number of sub\-interfaces on the bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: member_count
                            
                            	Number of members configured to the bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: total_weight
                            
                            	Total weighting (relative bandwidth) of bundle
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: sub_interface
                            
                            	Sub\-interfaces of the bundle
                            	**type**\: list of  		 :py:class:`SubInterface <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief.SubInterface>`
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief, self).__init__()

                                self.yang_name = "brief"
                                self.yang_parent_name = "bundle-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([("sub-interface", ("sub_interface", BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief.SubInterface))])
                                self._leafs = OrderedDict([
                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                    ('sub_interface_count', YLeaf(YType.uint32, 'sub-interface-count')),
                                    ('member_count', YLeaf(YType.uint32, 'member-count')),
                                    ('total_weight', YLeaf(YType.uint32, 'total-weight')),
                                ])
                                self.interface_name = None
                                self.sub_interface_count = None
                                self.member_count = None
                                self.total_weight = None

                                self.sub_interface = YList(self)
                                self._segment_path = lambda: "brief"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief, ['interface_name', 'sub_interface_count', 'member_count', 'total_weight'], name, value)


                            class SubInterface(Entity):
                                """
                                Sub\-interfaces of the bundle
                                
                                .. attribute:: load_balance_data
                                
                                	Load balance data
                                	**type**\:  :py:class:`LoadBalanceData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief.SubInterface.LoadBalanceData>`
                                
                                .. attribute:: interface_name
                                
                                	Sub interface
                                	**type**\: str
                                
                                	**pattern:** [a\-zA\-Z0\-9./\-]+
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief.SubInterface, self).__init__()

                                    self.yang_name = "sub-interface"
                                    self.yang_parent_name = "brief"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([("load-balance-data", ("load_balance_data", BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief.SubInterface.LoadBalanceData))])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('interface_name', YLeaf(YType.str, 'interface-name')),
                                    ])
                                    self.interface_name = None

                                    self.load_balance_data = BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief.SubInterface.LoadBalanceData()
                                    self.load_balance_data.parent = self
                                    self._children_name_map["load_balance_data"] = "load-balance-data"
                                    self._children_yang_names.add("load-balance-data")
                                    self._segment_path = lambda: "sub-interface"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief.SubInterface, ['interface_name'], name, value)


                                class LoadBalanceData(Entity):
                                    """
                                    Load balance data
                                    
                                    .. attribute:: type
                                    
                                    	Type of load balancing to use
                                    	**type**\:  :py:class:`LoadBalance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LoadBalance>`
                                    
                                    .. attribute:: value
                                    
                                    	Load balance hash value
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: local_link_threshold
                                    
                                    	Threshold below which rack\-local balancing is disabled
                                    	**type**\: int
                                    
                                    	**range:** 0..4294967295
                                    
                                    

                                    """

                                    _prefix = 'bundlemgr-oper'
                                    _revision = '2017-05-01'

                                    def __init__(self):
                                        super(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief.SubInterface.LoadBalanceData, self).__init__()

                                        self.yang_name = "load-balance-data"
                                        self.yang_parent_name = "sub-interface"
                                        self.is_top_level_class = False
                                        self.has_list_ancestor = True
                                        self.ylist_key_names = []
                                        self._child_container_classes = OrderedDict([])
                                        self._child_list_classes = OrderedDict([])
                                        self._leafs = OrderedDict([
                                            ('type', YLeaf(YType.enumeration, 'type')),
                                            ('value', YLeaf(YType.uint32, 'value')),
                                            ('local_link_threshold', YLeaf(YType.uint32, 'local-link-threshold')),
                                        ])
                                        self.type = None
                                        self.value = None
                                        self.local_link_threshold = None
                                        self._segment_path = lambda: "load-balance-data"

                                    def __setattr__(self, name, value):
                                        self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Brief.SubInterface.LoadBalanceData, ['type', 'value', 'local_link_threshold'], name, value)


                        class LoadBalanceData(Entity):
                            """
                            Load Balance data
                            
                            .. attribute:: type
                            
                            	Type of load balancing to use
                            	**type**\:  :py:class:`LoadBalance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LoadBalance>`
                            
                            .. attribute:: value
                            
                            	Load balance hash value
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: local_link_threshold
                            
                            	Threshold below which rack\-local balancing is disabled
                            	**type**\: int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.LoadBalanceData, self).__init__()

                                self.yang_name = "load-balance-data"
                                self.yang_parent_name = "bundle-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('type', YLeaf(YType.enumeration, 'type')),
                                    ('value', YLeaf(YType.uint32, 'value')),
                                    ('local_link_threshold', YLeaf(YType.uint32, 'local-link-threshold')),
                                ])
                                self.type = None
                                self.value = None
                                self.local_link_threshold = None
                                self._segment_path = lambda: "load-balance-data"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.LoadBalanceData, ['type', 'value', 'local_link_threshold'], name, value)


                        class Member(Entity):
                            """
                            Members of the bundle
                            
                            .. attribute:: interface_name
                            
                            	Member interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            .. attribute:: link_id
                            
                            	Member's link ID in database
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: link_order_number
                            
                            	Member's link order number in database
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            .. attribute:: bandwidth
                            
                            	Member's relative bandwidth
                            	**type**\: int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Member, self).__init__()

                                self.yang_name = "member"
                                self.yang_parent_name = "bundle-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                    ('link_id', YLeaf(YType.uint8, 'link-id')),
                                    ('link_order_number', YLeaf(YType.uint8, 'link-order-number')),
                                    ('bandwidth', YLeaf(YType.uint8, 'bandwidth')),
                                ])
                                self.interface_name = None
                                self.link_id = None
                                self.link_order_number = None
                                self.bandwidth = None
                                self._segment_path = lambda: "member"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.Member, ['interface_name', 'link_id', 'link_order_number', 'bandwidth'], name, value)


                        class SubInterface(Entity):
                            """
                            Sub\-interfaces of the bundle
                            
                            .. attribute:: load_balance_data
                            
                            	Load balance data
                            	**type**\:  :py:class:`LoadBalanceData <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.SubInterface.LoadBalanceData>`
                            
                            .. attribute:: interface_name
                            
                            	Sub interface
                            	**type**\: str
                            
                            	**pattern:** [a\-zA\-Z0\-9./\-]+
                            
                            

                            """

                            _prefix = 'bundlemgr-oper'
                            _revision = '2017-05-01'

                            def __init__(self):
                                super(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.SubInterface, self).__init__()

                                self.yang_name = "sub-interface"
                                self.yang_parent_name = "bundle-info"
                                self.is_top_level_class = False
                                self.has_list_ancestor = True
                                self.ylist_key_names = []
                                self._child_container_classes = OrderedDict([("load-balance-data", ("load_balance_data", BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.SubInterface.LoadBalanceData))])
                                self._child_list_classes = OrderedDict([])
                                self._leafs = OrderedDict([
                                    ('interface_name', YLeaf(YType.str, 'interface-name')),
                                ])
                                self.interface_name = None

                                self.load_balance_data = BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.SubInterface.LoadBalanceData()
                                self.load_balance_data.parent = self
                                self._children_name_map["load_balance_data"] = "load-balance-data"
                                self._children_yang_names.add("load-balance-data")
                                self._segment_path = lambda: "sub-interface"

                            def __setattr__(self, name, value):
                                self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.SubInterface, ['interface_name'], name, value)


                            class LoadBalanceData(Entity):
                                """
                                Load balance data
                                
                                .. attribute:: type
                                
                                	Type of load balancing to use
                                	**type**\:  :py:class:`LoadBalance <ydk.models.cisco_ios_xr.Cisco_IOS_XR_bundlemgr_oper.LoadBalance>`
                                
                                .. attribute:: value
                                
                                	Load balance hash value
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: local_link_threshold
                                
                                	Threshold below which rack\-local balancing is disabled
                                	**type**\: int
                                
                                	**range:** 0..4294967295
                                
                                

                                """

                                _prefix = 'bundlemgr-oper'
                                _revision = '2017-05-01'

                                def __init__(self):
                                    super(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.SubInterface.LoadBalanceData, self).__init__()

                                    self.yang_name = "load-balance-data"
                                    self.yang_parent_name = "sub-interface"
                                    self.is_top_level_class = False
                                    self.has_list_ancestor = True
                                    self.ylist_key_names = []
                                    self._child_container_classes = OrderedDict([])
                                    self._child_list_classes = OrderedDict([])
                                    self._leafs = OrderedDict([
                                        ('type', YLeaf(YType.enumeration, 'type')),
                                        ('value', YLeaf(YType.uint32, 'value')),
                                        ('local_link_threshold', YLeaf(YType.uint32, 'local-link-threshold')),
                                    ])
                                    self.type = None
                                    self.value = None
                                    self.local_link_threshold = None
                                    self._segment_path = lambda: "load-balance-data"

                                def __setattr__(self, name, value):
                                    self._perform_setattr(BundlesAdjacency.Nodes.Node.Bundles.Bundle.BundleInfo.SubInterface.LoadBalanceData, ['type', 'value', 'local_link_threshold'], name, value)

    def clone_ptr(self):
        self._top_entity = BundlesAdjacency()
        return self._top_entity

