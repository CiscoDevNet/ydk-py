""" ietf_i2rs_rib 

This module defines a YANG data model for
Routing Information Base (RIB) that aligns
with the I2RS RIB information model.

"""


import re
import collections

from enum import Enum

from ydk.types import Empty, YList, YLeafList, DELETE, Decimal64, FixedBitsDict

from ydk.errors import YPYError, YPYModelError




class TtlActionIdentity(object):
    """
    Base identity from which all TTL
    actions are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['TtlActionIdentity']['meta_info']


class IpRouteMatchTypeIdentity(object):
    """
    Base identity from which all route
    match types are derived.
    Route match type could be\:
    match source, or
    match destination, or
    match source and destination.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['IpRouteMatchTypeIdentity']['meta_info']


class HopLimitActionIdentity(object):
    """
    Base identity from which all hop limit
    actions are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['HopLimitActionIdentity']['meta_info']


class RouteChangeReasonIdentity(object):
    """
    Base identity from which all route change
    reasons are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RouteChangeReasonIdentity']['meta_info']


class RouteInstalledStateIdentity(object):
    """
    Base identity from which all route
    installed states are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RouteInstalledStateIdentity']['meta_info']


class TunnelTypeIdentity(object):
    """
    Base identity from which all tunnel
    types are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['TunnelTypeIdentity']['meta_info']


class RouteTypeIdentity(object):
    """
    Base identity from which all route types
    are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RouteTypeIdentity']['meta_info']


class NexthopStateIdentity(object):
    """
    Base identity from which all nexthop
    states are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['NexthopStateIdentity']['meta_info']


class RibFamilyIdentity(object):
    """
    Base identity from which all RIB
    address families are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RibFamilyIdentity']['meta_info']


class RouteStateIdentity(object):
    """
    Base identity from which all route
    states are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RouteStateIdentity']['meta_info']


class SpecialNexthopIdentity(object):
    """
    Base identity from which all special
    nexthops are derived.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['SpecialNexthopIdentity']['meta_info']


class TunnelDecapActionIdentity(object):
    """
    Base identity from which all tunnel decap
    actions are derived.
    Tunnel decap actions include\:
    ipv4\-decap \- to decap an IPv4 tunnel,
    ipv6\-decap \- to decap an IPv6 tunnel.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['TunnelDecapActionIdentity']['meta_info']


class MplsLabelActionIdentity(object):
    """
    Base identity from which all MPLS label
    operations are derived.
    The MPLS label stack operations include\:
    push \- to add a new label to a label stack,
    pop \- to pop the top label from a label stack,
    swap \- to exchange the top label of a label
           stack with new label.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        pass

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['MplsLabelActionIdentity']['meta_info']


class RoutingInstance(object):
    """
    A routing instance, in the context of
    the RIB information model, is a collection
    of RIBs, interfaces, and routing parameters
    
    .. attribute:: interface_list
    
    	This represents the list of interfaces associated with this routing instance. The interface list helps constrain the boundaries of packet forwarding. Packets coming on these interfaces are directly associated with the given routing instance. The interface list contains a list of identifiers, with each identifier uniquely identifying an interface
    	**type**\: list of    :py:class:`InterfaceList <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.InterfaceList>`
    
    .. attribute:: lookup_limit
    
    	A limit on how many levels of a lookup can be performed
    	**type**\:  int
    
    	**range:** 0..255
    
    .. attribute:: name
    
    	The name of the routing instance. This MUST be unique across all routing instances in a given network device
    	**type**\:  str
    
    .. attribute:: rib_list
    
    	A list of RIBs that are associated with the routing instance
    	**type**\: list of    :py:class:`RibList <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList>`
    
    .. attribute:: router_id
    
    	Router ID \- 32\-bit number in the form of a dotted quad
    	**type**\:  str
    
    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        self.interface_list = YList()
        self.interface_list.parent = self
        self.interface_list.name = 'interface_list'
        self.lookup_limit = None
        self.name = None
        self.rib_list = YList()
        self.rib_list.parent = self
        self.rib_list.name = 'rib_list'
        self.router_id = None


    class InterfaceList(object):
        """
        This represents the list of interfaces associated
        with this routing instance. The interface list helps
        constrain the boundaries of packet forwarding.
        Packets coming on these interfaces are directly
        associated with the given routing instance. The
        interface list contains a list of identifiers, with
        each identifier uniquely identifying an interface.
        
        .. attribute:: name  <key>
        
        	A reference to the name of a network layer interface
        	**type**\:  str
        
        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.name = None

        @property
        def _common_path(self):
            if self.name is None:
                raise YPYModelError('Key property name is None')

            return '/ietf-i2rs-rib:routing-instance/ietf-i2rs-rib:interface-list[ietf-i2rs-rib:name = ' + str(self.name) + ']'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RoutingInstance.InterfaceList']['meta_info']


    class RibList(object):
        """
        A list of RIBs that are associated with the routing
        instance.
        
        .. attribute:: name  <key>
        
        	A reference to the name of each rib
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: address_family
        
        	The address family of a rib
        	**type**\:   :py:class:`RibFamilyIdentity <ydk.models.ietf.ietf_i2rs_rib.RibFamilyIdentity>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_rpf_check
        
        	Each RIB can be optionally associated with a ENABLE\_IP\_RPF\_CHECK attribute that enables Reverse path forwarding (RPF) checks on all IP routes in that RIB.  Reverse path forwarding (RPF) check is used to prevent spoofing and limit malicious traffic
        	**type**\:  bool
        
        .. attribute:: nexthop_list
        
        	A list of nexthops
        	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.NexthopList>`
        
        .. attribute:: route_list
        
        	A list of routes of a rib
        	**type**\: list of    :py:class:`RouteList <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList>`
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.name = None
            self.address_family = None
            self.ip_rpf_check = None
            self.nexthop_list = YList()
            self.nexthop_list.parent = self
            self.nexthop_list.name = 'nexthop_list'
            self.route_list = YList()
            self.route_list.parent = self
            self.route_list.name = 'route_list'


        class RouteList(object):
            """
            A list of routes of a rib.
            
            .. attribute:: route_index  <key>
            
            	Route index
            	**type**\:  int
            
            	**range:** 0..18446744073709551615
            
            	**mandatory**\: True
            
            .. attribute:: match
            
            	The match condition specifies the kind of route (IPv4, MPLS, etc.) and the set of fields to match on
            	**type**\:   :py:class:`Match <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Match>`
            
            .. attribute:: nexthop
            
            	The nexthop of the route
            	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
            
            .. attribute:: route_attributes
            
            	Route attributes
            	**type**\:   :py:class:`RouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.RouteAttributes>`
            
            .. attribute:: route_status
            
            	The status information of the route
            	**type**\:   :py:class:`RouteStatus <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.RouteStatus>`
            
            .. attribute:: route_vendor_attributes
            
            	Route vendor attributes
            	**type**\:   :py:class:`RouteVendorAttributes <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.RouteVendorAttributes>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.route_index = None
                self.match = RoutingInstance.RibList.RouteList.Match()
                self.match.parent = self
                self.nexthop = RoutingInstance.RibList.RouteList.Nexthop()
                self.nexthop.parent = self
                self.route_attributes = RoutingInstance.RibList.RouteList.RouteAttributes()
                self.route_attributes.parent = self
                self.route_status = RoutingInstance.RibList.RouteList.RouteStatus()
                self.route_status.parent = self
                self.route_vendor_attributes = RoutingInstance.RibList.RouteList.RouteVendorAttributes()
                self.route_vendor_attributes.parent = self


            class Match(object):
                """
                The match condition specifies the
                kind of route (IPv4, MPLS, etc.)
                and the set of fields to match on.
                
                .. attribute:: interface_identifier
                
                	The interface used for matching
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                
                	**mandatory**\: True
                
                .. attribute:: ipv4
                
                	IPv4 route match
                	**type**\:   :py:class:`Ipv4 <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Match.Ipv4>`
                
                .. attribute:: ipv6
                
                	IPv6 route match
                	**type**\:   :py:class:`Ipv6 <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Match.Ipv6>`
                
                .. attribute:: mac_address
                
                	The MAC address used for matching
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: mpls_label
                
                	The label used for matching
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.interface_identifier = None
                    self.ipv4 = RoutingInstance.RibList.RouteList.Match.Ipv4()
                    self.ipv4.parent = self
                    self.ipv6 = RoutingInstance.RibList.RouteList.Match.Ipv6()
                    self.ipv6.parent = self
                    self.mac_address = None
                    self.mpls_label = None


                class Ipv4(object):
                    """
                    IPv4 route match.
                    
                    .. attribute:: dest_ipv4_prefix
                    
                    	An IPv4 destination address as the match
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dest_src_ipv4_address
                    
                    	A combination of an IPv4 source and an IPv4 destination address as the match
                    	**type**\:   :py:class:`DestSrcIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Match.Ipv4.DestSrcIpv4Address>`
                    
                    .. attribute:: src_ipv4_prefix
                    
                    	An IPv4 source address as the match
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv4_prefix = None
                        self.dest_src_ipv4_address = RoutingInstance.RibList.RouteList.Match.Ipv4.DestSrcIpv4Address()
                        self.dest_src_ipv4_address.parent = self
                        self.src_ipv4_prefix = None


                    class DestSrcIpv4Address(object):
                        """
                        A combination of an IPv4 source and
                        an IPv4 destination address as the match.
                        
                        .. attribute:: dest_ipv4_prefix
                        
                        	The IPv4 destination address of the match
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        	**mandatory**\: True
                        
                        .. attribute:: src_ipv4_prefix
                        
                        	The IPv4 source address of the match
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv4_prefix = None
                            self.src_ipv4_prefix = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:dest-src-ipv4-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv4_prefix is not None:
                                return True

                            if self.src_ipv4_prefix is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Match.Ipv4.DestSrcIpv4Address']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:ipv4'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv4_prefix is not None:
                            return True

                        if self.dest_src_ipv4_address is not None and self.dest_src_ipv4_address._has_data():
                            return True

                        if self.src_ipv4_prefix is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RoutingInstance.RibList.RouteList.Match.Ipv4']['meta_info']


                class Ipv6(object):
                    """
                    IPv6 route match.
                    
                    .. attribute:: dest_ipv6_prefix
                    
                    	An IPv6 destination address as the match
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dest_src_ipv6_address
                    
                    	A combination of an IPv6 source and an IPv6 destination address as the match
                    	**type**\:   :py:class:`DestSrcIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Match.Ipv6.DestSrcIpv6Address>`
                    
                    .. attribute:: src_ipv6_prefix
                    
                    	An IPv6 source address as the match
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv6_prefix = None
                        self.dest_src_ipv6_address = RoutingInstance.RibList.RouteList.Match.Ipv6.DestSrcIpv6Address()
                        self.dest_src_ipv6_address.parent = self
                        self.src_ipv6_prefix = None


                    class DestSrcIpv6Address(object):
                        """
                        A combination of an IPv6 source and
                        an IPv6 destination address as the match.
                        
                        .. attribute:: dest_ipv6_prefix
                        
                        	The IPv6 destination address of the match
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        	**mandatory**\: True
                        
                        .. attribute:: src_ipv6_prefix
                        
                        	The IPv6 source address of the match
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv6_prefix = None
                            self.src_ipv6_prefix = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:dest-src-ipv6-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv6_prefix is not None:
                                return True

                            if self.src_ipv6_prefix is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Match.Ipv6.DestSrcIpv6Address']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:ipv6'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv6_prefix is not None:
                            return True

                        if self.dest_src_ipv6_address is not None and self.dest_src_ipv6_address._has_data():
                            return True

                        if self.src_ipv6_prefix is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RoutingInstance.RibList.RouteList.Match.Ipv6']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-i2rs-rib:match'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.interface_identifier is not None:
                        return True

                    if self.ipv4 is not None and self.ipv4._has_data():
                        return True

                    if self.ipv6 is not None and self.ipv6._has_data():
                        return True

                    if self.mac_address is not None:
                        return True

                    if self.mpls_label is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RoutingInstance.RibList.RouteList.Match']['meta_info']


            class Nexthop(object):
                """
                The nexthop of the route.
                
                .. attribute:: nexthop_base
                
                	The base nexthop
                	**type**\:   :py:class:`NexthopBase <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase>`
                
                .. attribute:: nexthop_chain
                
                	A chain nexthop
                	**type**\:   :py:class:`NexthopChain <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopChain>`
                
                .. attribute:: nexthop_id
                
                	An identifier that refers to a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop_lb
                
                	A load balance nexthop
                	**type**\:   :py:class:`NexthopLb <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopLb>`
                
                .. attribute:: nexthop_protection
                
                	A protection nexthop
                	**type**\:   :py:class:`NexthopProtection <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopProtection>`
                
                .. attribute:: nexthop_replicates
                
                	A replicates nexthop
                	**type**\:   :py:class:`NexthopReplicates <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopReplicates>`
                
                .. attribute:: sharing_flag
                
                	To indicate whether a nexthop is sharable or non\-sharable. true \- sharable, means the nexthop can be shared        with other routes false \- non\-sharable, means the nexthop can not        be shared with other routes
                	**type**\:  bool
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_base = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase()
                    self.nexthop_base.parent = self
                    self.nexthop_chain = RoutingInstance.RibList.RouteList.Nexthop.NexthopChain()
                    self.nexthop_chain.parent = self
                    self.nexthop_id = None
                    self.nexthop_lb = RoutingInstance.RibList.RouteList.Nexthop.NexthopLb()
                    self.nexthop_lb.parent = self
                    self.nexthop_protection = RoutingInstance.RibList.RouteList.Nexthop.NexthopProtection()
                    self.nexthop_protection.parent = self
                    self.nexthop_replicates = RoutingInstance.RibList.RouteList.Nexthop.NexthopReplicates()
                    self.nexthop_replicates.parent = self
                    self.sharing_flag = None


                class NexthopBase(object):
                    """
                    The base nexthop.
                    
                    .. attribute:: egress_interface_ipv4_address
                    
                    	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                    	**type**\:   :py:class:`EgressInterfaceIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv4Address>`
                    
                    .. attribute:: egress_interface_ipv6_address
                    
                    	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                    	**type**\:   :py:class:`EgressInterfaceIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv6Address>`
                    
                    .. attribute:: egress_interface_mac_address
                    
                    	The egress interface must be an Ethernet interface. Address resolution is not required for this nexthop
                    	**type**\:   :py:class:`EgressInterfaceMacAddress <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.EgressInterfaceMacAddress>`
                    
                    .. attribute:: ipv4_address
                    
                    	The nexthop is an IPv4 address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ipv6_address
                    
                    	The nexthop is an IPv6 address
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: logical_tunnel
                    
                    	This can be a MPLS LSP or a GRE tunnel (or others as defined in this document), that is represented by a unique identifier (e.g. name)
                    	**type**\:   :py:class:`LogicalTunnel <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.LogicalTunnel>`
                    
                    .. attribute:: nexthop_ref
                    
                    	A nexthop reference that points to a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**refers to**\:  :py:class:`nexthop_id <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: outgoing_interface
                    
                    	The nexthop is an outgoing interface
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: rib_name
                    
                    	A nexthop pointing to a RIB indicates that the route lookup needs to continue in the specified rib. This is a way to perform chained lookups
                    	**type**\:  str
                    
                    .. attribute:: special
                    
                    	A special nexthop
                    	**type**\:   :py:class:`SpecialNexthopIdentity <ydk.models.ietf.ietf_i2rs_rib.SpecialNexthopIdentity>`
                    
                    .. attribute:: tunnel_decap
                    
                    	This is to specify decapsulating a tunnel header
                    	**type**\:   :py:class:`TunnelDecap <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap>`
                    
                    .. attribute:: tunnel_encap
                    
                    	This can be an encap representing an IP tunnel or MPLS tunnel or others as defined in info model. An optional egress interface can be chained to the tunnel encap to indicate which interface to send the packet out on.  The egress interface is useful when the network device contains Ethernet interfaces and one needs to perform address resolution for the IP packet
                    	**type**\:   :py:class:`TunnelEncap <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.egress_interface_ipv4_address = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv4Address()
                        self.egress_interface_ipv4_address.parent = self
                        self.egress_interface_ipv6_address = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv6Address()
                        self.egress_interface_ipv6_address.parent = self
                        self.egress_interface_mac_address = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.EgressInterfaceMacAddress()
                        self.egress_interface_mac_address.parent = self
                        self.ipv4_address = None
                        self.ipv6_address = None
                        self.logical_tunnel = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.LogicalTunnel()
                        self.logical_tunnel.parent = self
                        self.nexthop_ref = None
                        self.outgoing_interface = None
                        self.rib_name = None
                        self.special = None
                        self.tunnel_decap = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap()
                        self.tunnel_decap.parent = self
                        self.tunnel_encap = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap()
                        self.tunnel_encap.parent = self


                    class EgressInterfaceIpv4Address(object):
                        """
                        The nexthop is an egress\-interface and an IP
                        address. This can be used in cases e.g. where
                        the IP address is a link\-local address.
                        
                        .. attribute:: ipv4_address
                        
                        	The nexthop points to an interface with an IPv4 address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:egress-interface-ipv4-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv4Address']['meta_info']


                    class EgressInterfaceIpv6Address(object):
                        """
                        The nexthop is an egress\-interface and an IP
                        address. This can be used in cases e.g. where
                        the IP address is a link\-local address.
                        
                        .. attribute:: ipv6_address
                        
                        	The nexthop points to an interface with an IPv6 address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv6_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:egress-interface-ipv6-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv6_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv6Address']['meta_info']


                    class EgressInterfaceMacAddress(object):
                        """
                        The egress interface must be an Ethernet
                        interface. Address resolution is not required
                        for this nexthop.
                        
                        .. attribute:: ieee_mac_address
                        
                        	The nexthop points to an interface with a specific mac\-address
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ieee_mac_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:egress-interface-mac-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ieee_mac_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.EgressInterfaceMacAddress']['meta_info']


                    class TunnelEncap(object):
                        """
                        This can be an encap representing an IP tunnel or
                        MPLS tunnel or others as defined in info model.
                        An optional egress interface can be chained to the
                        tunnel encap to indicate which interface to send
                        the packet out on.  The egress interface is useful
                        when the network device contains Ethernet interfaces
                        and one needs to perform address resolution for the
                        IP packet.
                        
                        .. attribute:: gre_header
                        
                        	GRE header
                        	**type**\:   :py:class:`GreHeader <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.GreHeader>`
                        
                        .. attribute:: ipv4_header
                        
                        	IPv4 header
                        	**type**\:   :py:class:`Ipv4Header <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv4Header>`
                        
                        .. attribute:: ipv6_header
                        
                        	IPv6 header
                        	**type**\:   :py:class:`Ipv6Header <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv6Header>`
                        
                        .. attribute:: mpls_header
                        
                        	MPLS header
                        	**type**\:   :py:class:`MplsHeader <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader>`
                        
                        .. attribute:: nvgre_header
                        
                        	NvGRE header
                        	**type**\:   :py:class:`NvgreHeader <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.NvgreHeader>`
                        
                        .. attribute:: vxlan_header
                        
                        	VxLAN header
                        	**type**\:   :py:class:`VxlanHeader <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.VxlanHeader>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.gre_header = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.GreHeader()
                            self.gre_header.parent = self
                            self.ipv4_header = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv4Header()
                            self.ipv4_header.parent = self
                            self.ipv6_header = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv6Header()
                            self.ipv6_header.parent = self
                            self.mpls_header = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader()
                            self.mpls_header.parent = self
                            self.nvgre_header = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.NvgreHeader()
                            self.nvgre_header.parent = self
                            self.vxlan_header = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.VxlanHeader()
                            self.vxlan_header.parent = self


                        class Ipv4Header(object):
                            """
                            IPv4 header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dscp = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.ttl = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:ipv4-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv4Header']['meta_info']


                        class Ipv6Header(object):
                            """
                            IPv6 header.
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv6_address = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.src_ipv6_address = None
                                self.traffic_class = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:ipv6-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv6Header']['meta_info']


                        class MplsHeader(object):
                            """
                            MPLS header.
                            
                            .. attribute:: label_operations
                            
                            	Label operations
                            	**type**\: list of    :py:class:`LabelOperations <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label_operations = YList()
                                self.label_operations.parent = self
                                self.label_operations.name = 'label_operations'


                            class LabelOperations(object):
                                """
                                Label operations.
                                
                                .. attribute:: label_oper_id  <key>
                                
                                	An optional identifier that points to a label operation
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: label_push
                                
                                	Label push operation
                                	**type**\:   :py:class:`LabelPush <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush>`
                                
                                .. attribute:: label_swap
                                
                                	Label swap operation
                                	**type**\:   :py:class:`LabelSwap <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.label_oper_id = None
                                    self.label_push = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush()
                                    self.label_push.parent = self
                                    self.label_swap = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap()
                                    self.label_swap.parent = self


                                class LabelPush(object):
                                    """
                                    Label push operation.
                                    
                                    .. attribute:: label
                                    
                                    	The label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: s_bit
                                    
                                    	The s\-bit of the label to be pushed. 
                                    	**type**\:  bool
                                    
                                    .. attribute:: tc_value
                                    
                                    	The traffic class value of the label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: ttl_value
                                    
                                    	The TTL value of the label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.label = None
                                        self.s_bit = None
                                        self.tc_value = None
                                        self.ttl_value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-push'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.label is not None:
                                            return True

                                        if self.s_bit is not None:
                                            return True

                                        if self.tc_value is not None:
                                            return True

                                        if self.ttl_value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush']['meta_info']


                                class LabelSwap(object):
                                    """
                                    Label swap operation.
                                    
                                    .. attribute:: in_label
                                    
                                    	The label to be swapped
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: out_label
                                    
                                    	The out MPLS label
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: ttl_action
                                    
                                    	The label ttl actions\: \- No\-action, or \- Copy to inner label,or \- Decrease (the in label) by 1 and   copy to the out label
                                    	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.in_label = None
                                        self.out_label = None
                                        self.ttl_action = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-swap'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        return True

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.in_label is not None:
                                            return True

                                        if self.out_label is not None:
                                            return True

                                        if self.ttl_action is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')
                                    if self.label_oper_id is None:
                                        raise YPYModelError('Key property label_oper_id is None')

                                    return self.parent._common_path +'/ietf-i2rs-rib:label-operations[ietf-i2rs-rib:label-oper-id = ' + str(self.label_oper_id) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    return True

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.label_oper_id is not None:
                                        return True

                                    if self.label_push is not None and self.label_push._has_data():
                                        return True

                                    if self.label_swap is not None and self.label_swap._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:mpls-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label_operations is not None:
                                    for child_ref in self.label_operations:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader']['meta_info']


                        class GreHeader(object):
                            """
                            GRE header.
                            
                            .. attribute:: ipv4_dest
                            
                            	The destination IP address of the GRE header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ipv6_dest
                            
                            	The destination IP address of the GRE header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: key
                            
                            	The GRE key of the GRE header
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: protocol_type
                            
                            	The protocol type of the GRE header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_dest = None
                                self.ipv6_dest = None
                                self.key = None
                                self.protocol_type = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:gre-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_dest is not None:
                                    return True

                                if self.ipv6_dest is not None:
                                    return True

                                if self.key is not None:
                                    return True

                                if self.protocol_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.GreHeader']['meta_info']


                        class NvgreHeader(object):
                            """
                            NvGRE header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_id
                            
                            	The flow identifier of the NvGRE header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: virtual_subnet_id
                            
                            	The subnet identifier of the NvGRE header
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dest_ipv6_address = None
                                self.dscp = None
                                self.flow_id = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.src_ipv6_address = None
                                self.traffic_class = None
                                self.ttl = None
                                self.virtual_subnet_id = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:nvgre-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.flow_id is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                if self.virtual_subnet_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.NvgreHeader']['meta_info']


                        class VxlanHeader(object):
                            """
                            VxLAN header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: vxlan_identifier
                            
                            	The VxLAN identifier of the VxLAN header
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dest_ipv6_address = None
                                self.dscp = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.src_ipv6_address = None
                                self.traffic_class = None
                                self.ttl = None
                                self.vxlan_identifier = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:vxlan-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                if self.vxlan_identifier is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap.VxlanHeader']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:tunnel-encap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.gre_header is not None and self.gre_header._has_data():
                                return True

                            if self.ipv4_header is not None and self.ipv4_header._has_data():
                                return True

                            if self.ipv6_header is not None and self.ipv6_header._has_data():
                                return True

                            if self.mpls_header is not None and self.mpls_header._has_data():
                                return True

                            if self.nvgre_header is not None and self.nvgre_header._has_data():
                                return True

                            if self.vxlan_header is not None and self.vxlan_header._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelEncap']['meta_info']


                    class TunnelDecap(object):
                        """
                        This is to specify decapsulating a tunnel header.
                        
                        .. attribute:: ipv4_decap
                        
                        	IPv4 decap
                        	**type**\:   :py:class:`Ipv4Decap <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv4Decap>`
                        
                        .. attribute:: ipv6_decap
                        
                        	IPv6 decap
                        	**type**\:   :py:class:`Ipv6Decap <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv6Decap>`
                        
                        .. attribute:: label_pop
                        
                        	MPLS decap
                        	**type**\:   :py:class:`LabelPop <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap.LabelPop>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_decap = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv4Decap()
                            self.ipv4_decap.parent = self
                            self.ipv6_decap = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv6Decap()
                            self.ipv6_decap.parent = self
                            self.label_pop = RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap.LabelPop()
                            self.label_pop.parent = self


                        class Ipv4Decap(object):
                            """
                            IPv4 decap.
                            
                            .. attribute:: ipv4_decap
                            
                            	IPv4 decap operations
                            	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The ttl actions\: no\-action or copy to inner header
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_decap = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:ipv4-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_decap is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv4Decap']['meta_info']


                        class Ipv6Decap(object):
                            """
                            IPv6 decap.
                            
                            .. attribute:: hop_limit_action
                            
                            	The hop limit actions\: no\-action or copy to inner header
                            	**type**\:   :py:class:`HopLimitActionIdentity <ydk.models.ietf.ietf_i2rs_rib.HopLimitActionIdentity>`
                            
                            .. attribute:: ipv6_decap
                            
                            	IPv6 decap operations
                            	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.hop_limit_action = None
                                self.ipv6_decap = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:ipv6-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.hop_limit_action is not None:
                                    return True

                                if self.ipv6_decap is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv6Decap']['meta_info']


                        class LabelPop(object):
                            """
                            MPLS decap.
                            
                            .. attribute:: label_pop
                            
                            	Pop a label from the label stack
                            	**type**\:   :py:class:`MplsLabelActionIdentity <ydk.models.ietf.ietf_i2rs_rib.MplsLabelActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The label ttl action
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label_pop = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:label-pop'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                return True

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label_pop is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap.LabelPop']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:tunnel-decap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_decap is not None and self.ipv4_decap._has_data():
                                return True

                            if self.ipv6_decap is not None and self.ipv6_decap._has_data():
                                return True

                            if self.label_pop is not None and self.label_pop._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.TunnelDecap']['meta_info']


                    class LogicalTunnel(object):
                        """
                        This can be a MPLS LSP or a GRE tunnel (or others
                        as defined in this document), that is represented
                        by a unique identifier (e.g. name).
                        
                        .. attribute:: tunnel_name
                        
                        	A tunnel name that points to a logical tunnel
                        	**type**\:  str
                        
                        	**mandatory**\: True
                        
                        .. attribute:: tunnel_type
                        
                        	A tunnel type
                        	**type**\:   :py:class:`TunnelTypeIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelTypeIdentity>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.tunnel_name = None
                            self.tunnel_type = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:logical-tunnel'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.tunnel_name is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase.LogicalTunnel']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:nexthop-base'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.egress_interface_ipv4_address is not None and self.egress_interface_ipv4_address._has_data():
                            return True

                        if self.egress_interface_ipv6_address is not None and self.egress_interface_ipv6_address._has_data():
                            return True

                        if self.egress_interface_mac_address is not None and self.egress_interface_mac_address._has_data():
                            return True

                        if self.ipv4_address is not None:
                            return True

                        if self.ipv6_address is not None:
                            return True

                        if self.logical_tunnel is not None and self.logical_tunnel._has_data():
                            return True

                        if self.nexthop_ref is not None:
                            return True

                        if self.outgoing_interface is not None:
                            return True

                        if self.rib_name is not None:
                            return True

                        if self.special is not None:
                            return True

                        if self.tunnel_decap is not None and self.tunnel_decap._has_data():
                            return True

                        if self.tunnel_encap is not None and self.tunnel_encap._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopBase']['meta_info']


                class NexthopChain(object):
                    """
                    A chain nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthops
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopChain.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthops.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopChain.NexthopList']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:nexthop-chain'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopChain']['meta_info']


                class NexthopReplicates(object):
                    """
                    A replicates nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthops
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopReplicates.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthops.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopReplicates.NexthopList']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:nexthop-replicates'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopReplicates']['meta_info']


                class NexthopProtection(object):
                    """
                    A protection nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthop
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopProtection.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthop.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: nexthop_preference
                        
                        	Nexthop\-preference is used for protection schemes. It is an integer value between 1 and 99.  Lower values are more preferred. To download a primary/standby/tertiary group to the FIB, the nexthops that are resolved and are most preferred are selected
                        	**type**\:  int
                        
                        	**range:** 1..99
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None
                            self.nexthop_preference = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            if self.nexthop_preference is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopProtection.NexthopList']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:nexthop-protection'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopProtection']['meta_info']


                class NexthopLb(object):
                    """
                    A load balance nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthop
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop.NexthopLb.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthop.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: nexthop_lb_weight
                        
                        	The weight of a nexthop of the load balance nexthops
                        	**type**\:  int
                        
                        	**range:** 1..99
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None
                            self.nexthop_lb_weight = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            return True

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            if self.nexthop_lb_weight is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopLb.NexthopList']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:nexthop-lb'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop.NexthopLb']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-i2rs-rib:nexthop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_base is not None and self.nexthop_base._has_data():
                        return True

                    if self.nexthop_chain is not None and self.nexthop_chain._has_data():
                        return True

                    if self.nexthop_id is not None:
                        return True

                    if self.nexthop_lb is not None and self.nexthop_lb._has_data():
                        return True

                    if self.nexthop_protection is not None and self.nexthop_protection._has_data():
                        return True

                    if self.nexthop_replicates is not None and self.nexthop_replicates._has_data():
                        return True

                    if self.sharing_flag is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RoutingInstance.RibList.RouteList.Nexthop']['meta_info']


            class RouteStatus(object):
                """
                The status information of the route.
                
                .. attribute:: route_installed_state
                
                	Indicate that a route's installed states\: Installed or uninstalled
                	**type**\:   :py:class:`RouteInstalledStateIdentity <ydk.models.ietf.ietf_i2rs_rib.RouteInstalledStateIdentity>`
                
                .. attribute:: route_reason
                
                	Indicate the reason that causes the route change
                	**type**\:   :py:class:`RouteChangeReasonIdentity <ydk.models.ietf.ietf_i2rs_rib.RouteChangeReasonIdentity>`
                
                .. attribute:: route_state
                
                	Indicate a route's state\: Active or Inactive
                	**type**\:   :py:class:`RouteStateIdentity <ydk.models.ietf.ietf_i2rs_rib.RouteStateIdentity>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.route_installed_state = None
                    self.route_reason = None
                    self.route_state = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-i2rs-rib:route-status'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.route_installed_state is not None:
                        return True

                    if self.route_reason is not None:
                        return True

                    if self.route_state is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RoutingInstance.RibList.RouteList.RouteStatus']['meta_info']


            class RouteAttributes(object):
                """
                Route attributes.
                
                .. attribute:: address_family_route_attributes
                
                	Address family related route attributes
                	**type**\:   :py:class:`AddressFamilyRouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.RouteAttributes.AddressFamilyRouteAttributes>`
                
                .. attribute:: local_only
                
                	Indicate whether the attributes is local only
                	**type**\:  bool
                
                	**mandatory**\: True
                
                .. attribute:: route_preference
                
                	ROUTE\_PREFERENCE\: This is a numerical value that allows for comparing routes from different protocols.  Static configuration is also considered a protocol for the purpose of this field.  It is also known as administrative\-distance. The lower the value, the higher the preference
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.address_family_route_attributes = RoutingInstance.RibList.RouteList.RouteAttributes.AddressFamilyRouteAttributes()
                    self.address_family_route_attributes.parent = self
                    self.local_only = None
                    self.route_preference = None


                class AddressFamilyRouteAttributes(object):
                    """
                    Address family related route attributes.
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:address-family-route-attributes'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        return True

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RoutingInstance.RibList.RouteList.RouteAttributes.AddressFamilyRouteAttributes']['meta_info']

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-i2rs-rib:route-attributes'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.address_family_route_attributes is not None and self.address_family_route_attributes._has_data():
                        return True

                    if self.local_only is not None:
                        return True

                    if self.route_preference is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RoutingInstance.RibList.RouteList.RouteAttributes']['meta_info']


            class RouteVendorAttributes(object):
                """
                Route vendor attributes.
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None

                @property
                def _common_path(self):
                    if self.parent is None:
                        raise YPYModelError('parent is not set . Cannot derive path.')

                    return self.parent._common_path +'/ietf-i2rs-rib:route-vendor-attributes'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    return True

                def _has_data(self):
                    if not self.is_config():
                        return False
                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RoutingInstance.RibList.RouteList.RouteVendorAttributes']['meta_info']

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')
                if self.route_index is None:
                    raise YPYModelError('Key property route_index is None')

                return self.parent._common_path +'/ietf-i2rs-rib:route-list[ietf-i2rs-rib:route-index = ' + str(self.route_index) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.route_index is not None:
                    return True

                if self.match is not None and self.match._has_data():
                    return True

                if self.nexthop is not None and self.nexthop._has_data():
                    return True

                if self.route_attributes is not None and self.route_attributes._has_data():
                    return True

                if self.route_status is not None and self.route_status._has_data():
                    return True

                if self.route_vendor_attributes is not None and self.route_vendor_attributes._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RoutingInstance.RibList.RouteList']['meta_info']


        class NexthopList(object):
            """
            A list of nexthops.
            
            .. attribute:: nexthop_member_id  <key>
            
            	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**mandatory**\: True
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_member_id = None

            @property
            def _common_path(self):
                if self.parent is None:
                    raise YPYModelError('parent is not set . Cannot derive path.')
                if self.nexthop_member_id is None:
                    raise YPYModelError('Key property nexthop_member_id is None')

                return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                return True

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_member_id is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RoutingInstance.RibList.NexthopList']['meta_info']

        @property
        def _common_path(self):
            if self.name is None:
                raise YPYModelError('Key property name is None')

            return '/ietf-i2rs-rib:routing-instance/ietf-i2rs-rib:rib-list[ietf-i2rs-rib:name = ' + str(self.name) + ']'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            return True

        def _has_data(self):
            if not self.is_config():
                return False
            if self.name is not None:
                return True

            if self.address_family is not None:
                return True

            if self.ip_rpf_check is not None:
                return True

            if self.nexthop_list is not None:
                for child_ref in self.nexthop_list:
                    if child_ref._has_data():
                        return True

            if self.route_list is not None:
                for child_ref in self.route_list:
                    if child_ref._has_data():
                        return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RoutingInstance.RibList']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-i2rs-rib:routing-instance'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.interface_list is not None:
            for child_ref in self.interface_list:
                if child_ref._has_data():
                    return True

        if self.lookup_limit is not None:
            return True

        if self.name is not None:
            return True

        if self.rib_list is not None:
            for child_ref in self.rib_list:
                if child_ref._has_data():
                    return True

        if self.router_id is not None:
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RoutingInstance']['meta_info']


class RibAddRpc(object):
    """
    To add a RIB to a instance
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_i2rs_rib.RibAddRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_i2rs_rib.RibAddRpc.Output>`
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        self.input = RibAddRpc.Input()
        self.input.parent = self
        self.output = RibAddRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: address_family
        
        	The address family of the rib
        	**type**\:   :py:class:`RibFamilyIdentity <ydk.models.ietf.ietf_i2rs_rib.RibFamilyIdentity>`
        
        	**mandatory**\: True
        
        .. attribute:: ip_rpf_check
        
        	Each RIB can be optionally associated with a ENABLE\_IP\_RPF\_CHECK attribute that enables Reverse path forwarding (RPF) checks on all IP routes in that RIB.  Reverse path forwarding (RPF) check is used to prevent spoofing and limit malicious traffic
        	**type**\:  bool
        
        .. attribute:: name
        
        	A reference to the name of the RIB that is to be added
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.address_family = None
            self.ip_rpf_check = None
            self.name = None

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:rib-add/ietf-i2rs-rib:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.address_family is not None:
                return True

            if self.ip_rpf_check is not None:
                return True

            if self.name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RibAddRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: reason
        
        	The specific reason that causes the failure
        	**type**\:  str
        
        .. attribute:: result
        
        	Return the result of the rib\-add operation. true  \- success; false \- failed
        	**type**\:  bool
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.reason = None
            self.result = None

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:rib-add/ietf-i2rs-rib:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.reason is not None:
                return True

            if self.result is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RibAddRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-i2rs-rib:rib-add'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RibAddRpc']['meta_info']


class RibDeleteRpc(object):
    """
    To delete a RIB from a routing instance.
    After deleting the rib, all routes installed
    in the RIB will be deleted as well.
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_i2rs_rib.RibDeleteRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_i2rs_rib.RibDeleteRpc.Output>`
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        self.input = RibDeleteRpc.Input()
        self.input.parent = self
        self.output = RibDeleteRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: name
        
        	A reference to the name of the RIB that is to be deleted
        	**type**\:  str
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.name = None

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:rib-delete/ietf-i2rs-rib:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.name is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RibDeleteRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: reason
        
        	The specific reason that causes failure
        	**type**\:  str
        
        .. attribute:: result
        
        	Return the result of the rib\-delete operation. true  \- success; false \- failed
        	**type**\:  bool
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.reason = None
            self.result = None

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:rib-delete/ietf-i2rs-rib:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.reason is not None:
                return True

            if self.result is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RibDeleteRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-i2rs-rib:rib-delete'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RibDeleteRpc']['meta_info']


class RouteAddRpc(object):
    """
    To add a route or a list of route to a rib
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Output>`
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        self.input = RouteAddRpc.Input()
        self.input.parent = self
        self.output = RouteAddRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: return_failure_detail
        
        	Whether return the failure detail. true  \- return the failure detail; false \- do not return the failure detail; the default is false
        	**type**\:  bool
        
        	**default value**\: false
        
        .. attribute:: rib_name
        
        	A reference to the name of a rib
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: routes
        
        	The routes to be added to the rib
        	**type**\:   :py:class:`Routes <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes>`
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.return_failure_detail = None
            self.rib_name = None
            self.routes = RouteAddRpc.Input.Routes()
            self.routes.parent = self


        class Routes(object):
            """
            The routes to be added to the rib.
            
            .. attribute:: route_list
            
            	The list of routes to be added
            	**type**\: list of    :py:class:`RouteList <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.route_list = YList()
                self.route_list.parent = self
                self.route_list.name = 'route_list'


            class RouteList(object):
                """
                The list of routes to be added.
                
                .. attribute:: route_index  <key>
                
                	Route index
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**mandatory**\: True
                
                .. attribute:: match
                
                	The match condition specifies the kind of route (IPv4, MPLS, etc.) and the set of fields to match on
                	**type**\:   :py:class:`Match <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Match>`
                
                .. attribute:: nexthop
                
                	The nexthop of the added route
                	**type**\:   :py:class:`Nexthop <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop>`
                
                .. attribute:: route_attributes
                
                	The route attributes
                	**type**\:   :py:class:`RouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.RouteAttributes>`
                
                .. attribute:: route_vendor_attributes
                
                	The route vendor attributes
                	**type**\:   :py:class:`RouteVendorAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.RouteVendorAttributes>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.route_index = None
                    self.match = RouteAddRpc.Input.Routes.RouteList.Match()
                    self.match.parent = self
                    self.nexthop = RouteAddRpc.Input.Routes.RouteList.Nexthop()
                    self.nexthop.parent = self
                    self.route_attributes = RouteAddRpc.Input.Routes.RouteList.RouteAttributes()
                    self.route_attributes.parent = self
                    self.route_vendor_attributes = RouteAddRpc.Input.Routes.RouteList.RouteVendorAttributes()
                    self.route_vendor_attributes.parent = self


                class Match(object):
                    """
                    The match condition specifies the
                    kind of route (IPv4, MPLS, etc.)
                    and the set of fields to match on.
                    
                    .. attribute:: interface_identifier
                    
                    	The interface used for matching
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ipv4
                    
                    	IPv4 route match
                    	**type**\:   :py:class:`Ipv4 <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Match.Ipv4>`
                    
                    .. attribute:: ipv6
                    
                    	IPv6 route match
                    	**type**\:   :py:class:`Ipv6 <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Match.Ipv6>`
                    
                    .. attribute:: mac_address
                    
                    	The MAC address used for matching
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    .. attribute:: mpls_label
                    
                    	The label used for matching
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.interface_identifier = None
                        self.ipv4 = RouteAddRpc.Input.Routes.RouteList.Match.Ipv4()
                        self.ipv4.parent = self
                        self.ipv6 = RouteAddRpc.Input.Routes.RouteList.Match.Ipv6()
                        self.ipv6.parent = self
                        self.mac_address = None
                        self.mpls_label = None


                    class Ipv4(object):
                        """
                        IPv4 route match.
                        
                        .. attribute:: dest_ipv4_prefix
                        
                        	An IPv4 destination address as the match
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dest_src_ipv4_address
                        
                        	A combination of an IPv4 source and an IPv4 destination address as the match
                        	**type**\:   :py:class:`DestSrcIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Match.Ipv4.DestSrcIpv4Address>`
                        
                        .. attribute:: src_ipv4_prefix
                        
                        	An IPv4 source address as the match
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv4_prefix = None
                            self.dest_src_ipv4_address = RouteAddRpc.Input.Routes.RouteList.Match.Ipv4.DestSrcIpv4Address()
                            self.dest_src_ipv4_address.parent = self
                            self.src_ipv4_prefix = None


                        class DestSrcIpv4Address(object):
                            """
                            A combination of an IPv4 source and
                            an IPv4 destination address as the match.
                            
                            .. attribute:: dest_ipv4_prefix
                            
                            	The IPv4 destination address of the match
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_prefix
                            
                            	The IPv4 source address of the match
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_prefix = None
                                self.src_ipv4_prefix = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:dest-src-ipv4-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_prefix is not None:
                                    return True

                                if self.src_ipv4_prefix is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Match.Ipv4.DestSrcIpv4Address']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv4_prefix is not None:
                                return True

                            if self.dest_src_ipv4_address is not None and self.dest_src_ipv4_address._has_data():
                                return True

                            if self.src_ipv4_prefix is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Match.Ipv4']['meta_info']


                    class Ipv6(object):
                        """
                        IPv6 route match.
                        
                        .. attribute:: dest_ipv6_prefix
                        
                        	An IPv6 destination address as the match
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dest_src_ipv6_address
                        
                        	A combination of an IPv6 source and an IPv6 destination address as the match
                        	**type**\:   :py:class:`DestSrcIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Match.Ipv6.DestSrcIpv6Address>`
                        
                        .. attribute:: src_ipv6_prefix
                        
                        	An IPv6 source address as the match
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv6_prefix = None
                            self.dest_src_ipv6_address = RouteAddRpc.Input.Routes.RouteList.Match.Ipv6.DestSrcIpv6Address()
                            self.dest_src_ipv6_address.parent = self
                            self.src_ipv6_prefix = None


                        class DestSrcIpv6Address(object):
                            """
                            A combination of an IPv6 source and
                            an IPv6 destination address as the match.
                            
                            .. attribute:: dest_ipv6_prefix
                            
                            	The IPv6 destination address of the match
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_prefix
                            
                            	The IPv6 source address of the match
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv6_prefix = None
                                self.src_ipv6_prefix = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:dest-src-ipv6-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv6_prefix is not None:
                                    return True

                                if self.src_ipv6_prefix is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Match.Ipv6.DestSrcIpv6Address']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:ipv6'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv6_prefix is not None:
                                return True

                            if self.dest_src_ipv6_address is not None and self.dest_src_ipv6_address._has_data():
                                return True

                            if self.src_ipv6_prefix is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Match.Ipv6']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:match'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface_identifier is not None:
                            return True

                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv6 is not None and self.ipv6._has_data():
                            return True

                        if self.mac_address is not None:
                            return True

                        if self.mpls_label is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Match']['meta_info']


                class RouteAttributes(object):
                    """
                    The route attributes.
                    
                    .. attribute:: address_family_route_attributes
                    
                    	Address family related route attributes
                    	**type**\:   :py:class:`AddressFamilyRouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.RouteAttributes.AddressFamilyRouteAttributes>`
                    
                    .. attribute:: local_only
                    
                    	Indicate whether the attributes is local only
                    	**type**\:  bool
                    
                    	**mandatory**\: True
                    
                    .. attribute:: route_preference
                    
                    	ROUTE\_PREFERENCE\: This is a numerical value that allows for comparing routes from different protocols.  Static configuration is also considered a protocol for the purpose of this field.  It is also known as administrative\-distance. The lower the value, the higher the preference
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.address_family_route_attributes = RouteAddRpc.Input.Routes.RouteList.RouteAttributes.AddressFamilyRouteAttributes()
                        self.address_family_route_attributes.parent = self
                        self.local_only = None
                        self.route_preference = None


                    class AddressFamilyRouteAttributes(object):
                        """
                        Address family related route attributes.
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:address-family-route-attributes'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.RouteAttributes.AddressFamilyRouteAttributes']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:route-attributes'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.address_family_route_attributes is not None and self.address_family_route_attributes._has_data():
                            return True

                        if self.local_only is not None:
                            return True

                        if self.route_preference is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.RouteAttributes']['meta_info']


                class RouteVendorAttributes(object):
                    """
                    The route vendor attributes.
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:route-vendor-attributes'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.RouteVendorAttributes']['meta_info']


                class Nexthop(object):
                    """
                    The nexthop of the added route.
                    
                    .. attribute:: nexthop_base
                    
                    	The base nexthop
                    	**type**\:   :py:class:`NexthopBase <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase>`
                    
                    .. attribute:: nexthop_chain
                    
                    	A chain nexthop
                    	**type**\:   :py:class:`NexthopChain <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopChain>`
                    
                    .. attribute:: nexthop_id
                    
                    	An identifier that refers to a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop_lb
                    
                    	A load balance nexthop
                    	**type**\:   :py:class:`NexthopLb <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopLb>`
                    
                    .. attribute:: nexthop_protection
                    
                    	A protection nexthop
                    	**type**\:   :py:class:`NexthopProtection <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopProtection>`
                    
                    .. attribute:: nexthop_replicates
                    
                    	A replicates nexthop
                    	**type**\:   :py:class:`NexthopReplicates <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopReplicates>`
                    
                    .. attribute:: sharing_flag
                    
                    	To indicate whether a nexthop is sharable or non\-sharable. true \- sharable, means the nexthop can be shared        with other routes false \- non\-sharable, means the nexthop can not        be shared with other routes
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_base = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase()
                        self.nexthop_base.parent = self
                        self.nexthop_chain = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopChain()
                        self.nexthop_chain.parent = self
                        self.nexthop_id = None
                        self.nexthop_lb = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopLb()
                        self.nexthop_lb.parent = self
                        self.nexthop_protection = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopProtection()
                        self.nexthop_protection.parent = self
                        self.nexthop_replicates = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopReplicates()
                        self.nexthop_replicates.parent = self
                        self.sharing_flag = None


                    class NexthopBase(object):
                        """
                        The base nexthop.
                        
                        .. attribute:: egress_interface_ipv4_address
                        
                        	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                        	**type**\:   :py:class:`EgressInterfaceIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv4Address>`
                        
                        .. attribute:: egress_interface_ipv6_address
                        
                        	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                        	**type**\:   :py:class:`EgressInterfaceIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv6Address>`
                        
                        .. attribute:: egress_interface_mac_address
                        
                        	The egress interface must be an Ethernet interface. Address resolution is not required for this nexthop
                        	**type**\:   :py:class:`EgressInterfaceMacAddress <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.EgressInterfaceMacAddress>`
                        
                        .. attribute:: ipv4_address
                        
                        	The nexthop is an IPv4 address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: ipv6_address
                        
                        	The nexthop is an IPv6 address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: logical_tunnel
                        
                        	This can be a MPLS LSP or a GRE tunnel (or others as defined in this document), that is represented by a unique identifier (e.g. name)
                        	**type**\:   :py:class:`LogicalTunnel <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.LogicalTunnel>`
                        
                        .. attribute:: nexthop_ref
                        
                        	A nexthop reference that points to a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**refers to**\:  :py:class:`nexthop_id <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	The nexthop is an outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: rib_name
                        
                        	A nexthop pointing to a RIB indicates that the route lookup needs to continue in the specified rib. This is a way to perform chained lookups
                        	**type**\:  str
                        
                        .. attribute:: special
                        
                        	A special nexthop
                        	**type**\:   :py:class:`SpecialNexthopIdentity <ydk.models.ietf.ietf_i2rs_rib.SpecialNexthopIdentity>`
                        
                        .. attribute:: tunnel_decap
                        
                        	This is to specify decapsulating a tunnel header
                        	**type**\:   :py:class:`TunnelDecap <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap>`
                        
                        .. attribute:: tunnel_encap
                        
                        	This can be an encap representing an IP tunnel or MPLS tunnel or others as defined in info model. An optional egress interface can be chained to the tunnel encap to indicate which interface to send the packet out on.  The egress interface is useful when the network device contains Ethernet interfaces and one needs to perform address resolution for the IP packet
                        	**type**\:   :py:class:`TunnelEncap <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.egress_interface_ipv4_address = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv4Address()
                            self.egress_interface_ipv4_address.parent = self
                            self.egress_interface_ipv6_address = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv6Address()
                            self.egress_interface_ipv6_address.parent = self
                            self.egress_interface_mac_address = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.EgressInterfaceMacAddress()
                            self.egress_interface_mac_address.parent = self
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self.logical_tunnel = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.LogicalTunnel()
                            self.logical_tunnel.parent = self
                            self.nexthop_ref = None
                            self.outgoing_interface = None
                            self.rib_name = None
                            self.special = None
                            self.tunnel_decap = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap()
                            self.tunnel_decap.parent = self
                            self.tunnel_encap = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap()
                            self.tunnel_encap.parent = self


                        class EgressInterfaceIpv4Address(object):
                            """
                            The nexthop is an egress\-interface and an IP
                            address. This can be used in cases e.g. where
                            the IP address is a link\-local address.
                            
                            .. attribute:: ipv4_address
                            
                            	The nexthop points to an interface with an IPv4 address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: outgoing_interface
                            
                            	Name of the outgoing interface
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_address = None
                                self.outgoing_interface = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:egress-interface-ipv4-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_address is not None:
                                    return True

                                if self.outgoing_interface is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv4Address']['meta_info']


                        class EgressInterfaceIpv6Address(object):
                            """
                            The nexthop is an egress\-interface and an IP
                            address. This can be used in cases e.g. where
                            the IP address is a link\-local address.
                            
                            .. attribute:: ipv6_address
                            
                            	The nexthop points to an interface with an IPv6 address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: outgoing_interface
                            
                            	Name of the outgoing interface
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv6_address = None
                                self.outgoing_interface = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:egress-interface-ipv6-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv6_address is not None:
                                    return True

                                if self.outgoing_interface is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.EgressInterfaceIpv6Address']['meta_info']


                        class EgressInterfaceMacAddress(object):
                            """
                            The egress interface must be an Ethernet
                            interface. Address resolution is not required
                            for this nexthop.
                            
                            .. attribute:: ieee_mac_address
                            
                            	The nexthop points to an interface with a specific mac\-address
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: outgoing_interface
                            
                            	Name of the outgoing interface
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ieee_mac_address = None
                                self.outgoing_interface = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:egress-interface-mac-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ieee_mac_address is not None:
                                    return True

                                if self.outgoing_interface is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.EgressInterfaceMacAddress']['meta_info']


                        class TunnelEncap(object):
                            """
                            This can be an encap representing an IP tunnel or
                            MPLS tunnel or others as defined in info model.
                            An optional egress interface can be chained to the
                            tunnel encap to indicate which interface to send
                            the packet out on.  The egress interface is useful
                            when the network device contains Ethernet interfaces
                            and one needs to perform address resolution for the
                            IP packet.
                            
                            .. attribute:: gre_header
                            
                            	GRE header
                            	**type**\:   :py:class:`GreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.GreHeader>`
                            
                            .. attribute:: ipv4_header
                            
                            	IPv4 header
                            	**type**\:   :py:class:`Ipv4Header <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv4Header>`
                            
                            .. attribute:: ipv6_header
                            
                            	IPv6 header
                            	**type**\:   :py:class:`Ipv6Header <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv6Header>`
                            
                            .. attribute:: mpls_header
                            
                            	MPLS header
                            	**type**\:   :py:class:`MplsHeader <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader>`
                            
                            .. attribute:: nvgre_header
                            
                            	NvGRE header
                            	**type**\:   :py:class:`NvgreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.NvgreHeader>`
                            
                            .. attribute:: vxlan_header
                            
                            	VxLAN header
                            	**type**\:   :py:class:`VxlanHeader <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.VxlanHeader>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.gre_header = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.GreHeader()
                                self.gre_header.parent = self
                                self.ipv4_header = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv4Header()
                                self.ipv4_header.parent = self
                                self.ipv6_header = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv6Header()
                                self.ipv6_header.parent = self
                                self.mpls_header = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader()
                                self.mpls_header.parent = self
                                self.nvgre_header = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.NvgreHeader()
                                self.nvgre_header.parent = self
                                self.vxlan_header = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.VxlanHeader()
                                self.vxlan_header.parent = self


                            class Ipv4Header(object):
                                """
                                IPv4 header.
                                
                                .. attribute:: dest_ipv4_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dscp
                                
                                	The DSCP field of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: protocol
                                
                                	The protocol id of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv4_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: ttl
                                
                                	The TTL of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.dest_ipv4_address = None
                                    self.dscp = None
                                    self.protocol = None
                                    self.src_ipv4_address = None
                                    self.ttl = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:ipv4-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.dest_ipv4_address is not None:
                                        return True

                                    if self.dscp is not None:
                                        return True

                                    if self.protocol is not None:
                                        return True

                                    if self.src_ipv4_address is not None:
                                        return True

                                    if self.ttl is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv4Header']['meta_info']


                            class Ipv6Header(object):
                                """
                                IPv6 header.
                                
                                .. attribute:: dest_ipv6_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: flow_label
                                
                                	The flow label of the header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: hop_limit
                                
                                	The hop limit the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_header
                                
                                	The next header of the IPv6 header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv6_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: traffic_class
                                
                                	The traffic class value of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.dest_ipv6_address = None
                                    self.flow_label = None
                                    self.hop_limit = None
                                    self.next_header = None
                                    self.src_ipv6_address = None
                                    self.traffic_class = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:ipv6-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.dest_ipv6_address is not None:
                                        return True

                                    if self.flow_label is not None:
                                        return True

                                    if self.hop_limit is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.src_ipv6_address is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.Ipv6Header']['meta_info']


                            class MplsHeader(object):
                                """
                                MPLS header.
                                
                                .. attribute:: label_operations
                                
                                	Label operations
                                	**type**\: list of    :py:class:`LabelOperations <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.label_operations = YList()
                                    self.label_operations.parent = self
                                    self.label_operations.name = 'label_operations'


                                class LabelOperations(object):
                                    """
                                    Label operations.
                                    
                                    .. attribute:: label_oper_id  <key>
                                    
                                    	An optional identifier that points to a label operation
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: label_push
                                    
                                    	Label push operation
                                    	**type**\:   :py:class:`LabelPush <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush>`
                                    
                                    .. attribute:: label_swap
                                    
                                    	Label swap operation
                                    	**type**\:   :py:class:`LabelSwap <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap>`
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.label_oper_id = None
                                        self.label_push = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush()
                                        self.label_push.parent = self
                                        self.label_swap = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap()
                                        self.label_swap.parent = self


                                    class LabelPush(object):
                                        """
                                        Label push operation.
                                        
                                        .. attribute:: label
                                        
                                        	The label to be pushed
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: s_bit
                                        
                                        	The s\-bit of the label to be pushed. 
                                        	**type**\:  bool
                                        
                                        .. attribute:: tc_value
                                        
                                        	The traffic class value of the label to be pushed
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: ttl_value
                                        
                                        	The TTL value of the label to be pushed
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'iir'
                                        _revision = '2016-07-04'

                                        def __init__(self):
                                            self.parent = None
                                            self.label = None
                                            self.s_bit = None
                                            self.tc_value = None
                                            self.ttl_value = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-i2rs-rib:label-push'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            if self.parent is None:
                                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                            return self.parent.is_config()

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.label is not None:
                                                return True

                                            if self.s_bit is not None:
                                                return True

                                            if self.tc_value is not None:
                                                return True

                                            if self.ttl_value is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush']['meta_info']


                                    class LabelSwap(object):
                                        """
                                        Label swap operation.
                                        
                                        .. attribute:: in_label
                                        
                                        	The label to be swapped
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: out_label
                                        
                                        	The out MPLS label
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: ttl_action
                                        
                                        	The label ttl actions\: \- No\-action, or \- Copy to inner label,or \- Decrease (the in label) by 1 and   copy to the out label
                                        	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                        
                                        

                                        """

                                        _prefix = 'iir'
                                        _revision = '2016-07-04'

                                        def __init__(self):
                                            self.parent = None
                                            self.in_label = None
                                            self.out_label = None
                                            self.ttl_action = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-i2rs-rib:label-swap'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            if self.parent is None:
                                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                            return self.parent.is_config()

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.in_label is not None:
                                                return True

                                            if self.out_label is not None:
                                                return True

                                            if self.ttl_action is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.label_oper_id is None:
                                            raise YPYModelError('Key property label_oper_id is None')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-operations[ietf-i2rs-rib:label-oper-id = ' + str(self.label_oper_id) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        if self.parent is None:
                                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                        return self.parent.is_config()

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.label_oper_id is not None:
                                            return True

                                        if self.label_push is not None and self.label_push._has_data():
                                            return True

                                        if self.label_swap is not None and self.label_swap._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:mpls-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.label_operations is not None:
                                        for child_ref in self.label_operations:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.MplsHeader']['meta_info']


                            class GreHeader(object):
                                """
                                GRE header.
                                
                                .. attribute:: ipv4_dest
                                
                                	The destination IP address of the GRE header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: ipv6_dest
                                
                                	The destination IP address of the GRE header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: key
                                
                                	The GRE key of the GRE header
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: protocol_type
                                
                                	The protocol type of the GRE header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.ipv4_dest = None
                                    self.ipv6_dest = None
                                    self.key = None
                                    self.protocol_type = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:gre-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ipv4_dest is not None:
                                        return True

                                    if self.ipv6_dest is not None:
                                        return True

                                    if self.key is not None:
                                        return True

                                    if self.protocol_type is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.GreHeader']['meta_info']


                            class NvgreHeader(object):
                                """
                                NvGRE header.
                                
                                .. attribute:: dest_ipv4_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dest_ipv6_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dscp
                                
                                	The DSCP field of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: flow_id
                                
                                	The flow identifier of the NvGRE header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: flow_label
                                
                                	The flow label of the header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: hop_limit
                                
                                	The hop limit the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_header
                                
                                	The next header of the IPv6 header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: protocol
                                
                                	The protocol id of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv4_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv6_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: traffic_class
                                
                                	The traffic class value of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ttl
                                
                                	The TTL of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: virtual_subnet_id
                                
                                	The subnet identifier of the NvGRE header
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.dest_ipv4_address = None
                                    self.dest_ipv6_address = None
                                    self.dscp = None
                                    self.flow_id = None
                                    self.flow_label = None
                                    self.hop_limit = None
                                    self.next_header = None
                                    self.protocol = None
                                    self.src_ipv4_address = None
                                    self.src_ipv6_address = None
                                    self.traffic_class = None
                                    self.ttl = None
                                    self.virtual_subnet_id = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:nvgre-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.dest_ipv4_address is not None:
                                        return True

                                    if self.dest_ipv6_address is not None:
                                        return True

                                    if self.dscp is not None:
                                        return True

                                    if self.flow_id is not None:
                                        return True

                                    if self.flow_label is not None:
                                        return True

                                    if self.hop_limit is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.protocol is not None:
                                        return True

                                    if self.src_ipv4_address is not None:
                                        return True

                                    if self.src_ipv6_address is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.ttl is not None:
                                        return True

                                    if self.virtual_subnet_id is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.NvgreHeader']['meta_info']


                            class VxlanHeader(object):
                                """
                                VxLAN header.
                                
                                .. attribute:: dest_ipv4_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dest_ipv6_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dscp
                                
                                	The DSCP field of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: flow_label
                                
                                	The flow label of the header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: hop_limit
                                
                                	The hop limit the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_header
                                
                                	The next header of the IPv6 header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: protocol
                                
                                	The protocol id of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv4_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv6_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: traffic_class
                                
                                	The traffic class value of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ttl
                                
                                	The TTL of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: vxlan_identifier
                                
                                	The VxLAN identifier of the VxLAN header
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.dest_ipv4_address = None
                                    self.dest_ipv6_address = None
                                    self.dscp = None
                                    self.flow_label = None
                                    self.hop_limit = None
                                    self.next_header = None
                                    self.protocol = None
                                    self.src_ipv4_address = None
                                    self.src_ipv6_address = None
                                    self.traffic_class = None
                                    self.ttl = None
                                    self.vxlan_identifier = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:vxlan-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.dest_ipv4_address is not None:
                                        return True

                                    if self.dest_ipv6_address is not None:
                                        return True

                                    if self.dscp is not None:
                                        return True

                                    if self.flow_label is not None:
                                        return True

                                    if self.hop_limit is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.protocol is not None:
                                        return True

                                    if self.src_ipv4_address is not None:
                                        return True

                                    if self.src_ipv6_address is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.ttl is not None:
                                        return True

                                    if self.vxlan_identifier is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap.VxlanHeader']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:tunnel-encap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.gre_header is not None and self.gre_header._has_data():
                                    return True

                                if self.ipv4_header is not None and self.ipv4_header._has_data():
                                    return True

                                if self.ipv6_header is not None and self.ipv6_header._has_data():
                                    return True

                                if self.mpls_header is not None and self.mpls_header._has_data():
                                    return True

                                if self.nvgre_header is not None and self.nvgre_header._has_data():
                                    return True

                                if self.vxlan_header is not None and self.vxlan_header._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelEncap']['meta_info']


                        class TunnelDecap(object):
                            """
                            This is to specify decapsulating a tunnel header.
                            
                            .. attribute:: ipv4_decap
                            
                            	IPv4 decap
                            	**type**\:   :py:class:`Ipv4Decap <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv4Decap>`
                            
                            .. attribute:: ipv6_decap
                            
                            	IPv6 decap
                            	**type**\:   :py:class:`Ipv6Decap <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv6Decap>`
                            
                            .. attribute:: label_pop
                            
                            	MPLS decap
                            	**type**\:   :py:class:`LabelPop <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap.LabelPop>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_decap = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv4Decap()
                                self.ipv4_decap.parent = self
                                self.ipv6_decap = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv6Decap()
                                self.ipv6_decap.parent = self
                                self.label_pop = RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap.LabelPop()
                                self.label_pop.parent = self


                            class Ipv4Decap(object):
                                """
                                IPv4 decap.
                                
                                .. attribute:: ipv4_decap
                                
                                	IPv4 decap operations
                                	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                                
                                	**mandatory**\: True
                                
                                .. attribute:: ttl_action
                                
                                	The ttl actions\: no\-action or copy to inner header
                                	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.ipv4_decap = None
                                    self.ttl_action = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:ipv4-decap'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ipv4_decap is not None:
                                        return True

                                    if self.ttl_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv4Decap']['meta_info']


                            class Ipv6Decap(object):
                                """
                                IPv6 decap.
                                
                                .. attribute:: hop_limit_action
                                
                                	The hop limit actions\: no\-action or copy to inner header
                                	**type**\:   :py:class:`HopLimitActionIdentity <ydk.models.ietf.ietf_i2rs_rib.HopLimitActionIdentity>`
                                
                                .. attribute:: ipv6_decap
                                
                                	IPv6 decap operations
                                	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.hop_limit_action = None
                                    self.ipv6_decap = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:ipv6-decap'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.hop_limit_action is not None:
                                        return True

                                    if self.ipv6_decap is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap.Ipv6Decap']['meta_info']


                            class LabelPop(object):
                                """
                                MPLS decap.
                                
                                .. attribute:: label_pop
                                
                                	Pop a label from the label stack
                                	**type**\:   :py:class:`MplsLabelActionIdentity <ydk.models.ietf.ietf_i2rs_rib.MplsLabelActionIdentity>`
                                
                                	**mandatory**\: True
                                
                                .. attribute:: ttl_action
                                
                                	The label ttl action
                                	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.label_pop = None
                                    self.ttl_action = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:label-pop'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.label_pop is not None:
                                        return True

                                    if self.ttl_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap.LabelPop']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:tunnel-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_decap is not None and self.ipv4_decap._has_data():
                                    return True

                                if self.ipv6_decap is not None and self.ipv6_decap._has_data():
                                    return True

                                if self.label_pop is not None and self.label_pop._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.TunnelDecap']['meta_info']


                        class LogicalTunnel(object):
                            """
                            This can be a MPLS LSP or a GRE tunnel (or others
                            as defined in this document), that is represented
                            by a unique identifier (e.g. name).
                            
                            .. attribute:: tunnel_name
                            
                            	A tunnel name that points to a logical tunnel
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: tunnel_type
                            
                            	A tunnel type
                            	**type**\:   :py:class:`TunnelTypeIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelTypeIdentity>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.tunnel_name = None
                                self.tunnel_type = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:logical-tunnel'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.tunnel_name is not None:
                                    return True

                                if self.tunnel_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase.LogicalTunnel']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-base'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.egress_interface_ipv4_address is not None and self.egress_interface_ipv4_address._has_data():
                                return True

                            if self.egress_interface_ipv6_address is not None and self.egress_interface_ipv6_address._has_data():
                                return True

                            if self.egress_interface_mac_address is not None and self.egress_interface_mac_address._has_data():
                                return True

                            if self.ipv4_address is not None:
                                return True

                            if self.ipv6_address is not None:
                                return True

                            if self.logical_tunnel is not None and self.logical_tunnel._has_data():
                                return True

                            if self.nexthop_ref is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            if self.rib_name is not None:
                                return True

                            if self.special is not None:
                                return True

                            if self.tunnel_decap is not None and self.tunnel_decap._has_data():
                                return True

                            if self.tunnel_encap is not None and self.tunnel_encap._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopBase']['meta_info']


                    class NexthopChain(object):
                        """
                        A chain nexthop.
                        
                        .. attribute:: nexthop_list
                        
                        	A list of nexthops
                        	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopChain.NexthopList>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_list = YList()
                            self.nexthop_list.parent = self
                            self.nexthop_list.name = 'nexthop_list'


                        class NexthopList(object):
                            """
                            A list of nexthops.
                            
                            .. attribute:: nexthop_member_id  <key>
                            
                            	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.nexthop_member_id = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.nexthop_member_id is None:
                                    raise YPYModelError('Key property nexthop_member_id is None')

                                return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nexthop_member_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopChain.NexthopList']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-chain'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_list is not None:
                                for child_ref in self.nexthop_list:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopChain']['meta_info']


                    class NexthopReplicates(object):
                        """
                        A replicates nexthop.
                        
                        .. attribute:: nexthop_list
                        
                        	A list of nexthops
                        	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopReplicates.NexthopList>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_list = YList()
                            self.nexthop_list.parent = self
                            self.nexthop_list.name = 'nexthop_list'


                        class NexthopList(object):
                            """
                            A list of nexthops.
                            
                            .. attribute:: nexthop_member_id  <key>
                            
                            	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.nexthop_member_id = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.nexthop_member_id is None:
                                    raise YPYModelError('Key property nexthop_member_id is None')

                                return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nexthop_member_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopReplicates.NexthopList']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-replicates'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_list is not None:
                                for child_ref in self.nexthop_list:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopReplicates']['meta_info']


                    class NexthopProtection(object):
                        """
                        A protection nexthop.
                        
                        .. attribute:: nexthop_list
                        
                        	A list of nexthop
                        	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopProtection.NexthopList>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_list = YList()
                            self.nexthop_list.parent = self
                            self.nexthop_list.name = 'nexthop_list'


                        class NexthopList(object):
                            """
                            A list of nexthop.
                            
                            .. attribute:: nexthop_member_id  <key>
                            
                            	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: nexthop_preference
                            
                            	Nexthop\-preference is used for protection schemes. It is an integer value between 1 and 99.  Lower values are more preferred. To download a primary/standby/tertiary group to the FIB, the nexthops that are resolved and are most preferred are selected
                            	**type**\:  int
                            
                            	**range:** 1..99
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.nexthop_member_id = None
                                self.nexthop_preference = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.nexthop_member_id is None:
                                    raise YPYModelError('Key property nexthop_member_id is None')

                                return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nexthop_member_id is not None:
                                    return True

                                if self.nexthop_preference is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopProtection.NexthopList']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-protection'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_list is not None:
                                for child_ref in self.nexthop_list:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopProtection']['meta_info']


                    class NexthopLb(object):
                        """
                        A load balance nexthop.
                        
                        .. attribute:: nexthop_list
                        
                        	A list of nexthop
                        	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopLb.NexthopList>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_list = YList()
                            self.nexthop_list.parent = self
                            self.nexthop_list.name = 'nexthop_list'


                        class NexthopList(object):
                            """
                            A list of nexthop.
                            
                            .. attribute:: nexthop_member_id  <key>
                            
                            	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: nexthop_lb_weight
                            
                            	The weight of a nexthop of the load balance nexthops
                            	**type**\:  int
                            
                            	**range:** 1..99
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.nexthop_member_id = None
                                self.nexthop_lb_weight = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.nexthop_member_id is None:
                                    raise YPYModelError('Key property nexthop_member_id is None')

                                return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nexthop_member_id is not None:
                                    return True

                                if self.nexthop_lb_weight is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopLb.NexthopList']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-lb'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_list is not None:
                                for child_ref in self.nexthop_list:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop.NexthopLb']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:nexthop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_base is not None and self.nexthop_base._has_data():
                            return True

                        if self.nexthop_chain is not None and self.nexthop_chain._has_data():
                            return True

                        if self.nexthop_id is not None:
                            return True

                        if self.nexthop_lb is not None and self.nexthop_lb._has_data():
                            return True

                        if self.nexthop_protection is not None and self.nexthop_protection._has_data():
                            return True

                        if self.nexthop_replicates is not None and self.nexthop_replicates._has_data():
                            return True

                        if self.sharing_flag is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteAddRpc.Input.Routes.RouteList.Nexthop']['meta_info']

                @property
                def _common_path(self):
                    if self.route_index is None:
                        raise YPYModelError('Key property route_index is None')

                    return '/ietf-i2rs-rib:route-add/ietf-i2rs-rib:input/ietf-i2rs-rib:routes/ietf-i2rs-rib:route-list[ietf-i2rs-rib:route-index = ' + str(self.route_index) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.route_index is not None:
                        return True

                    if self.match is not None and self.match._has_data():
                        return True

                    if self.nexthop is not None and self.nexthop._has_data():
                        return True

                    if self.route_attributes is not None and self.route_attributes._has_data():
                        return True

                    if self.route_vendor_attributes is not None and self.route_vendor_attributes._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteAddRpc.Input.Routes.RouteList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-add/ietf-i2rs-rib:input/ietf-i2rs-rib:routes'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.route_list is not None:
                    for child_ref in self.route_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteAddRpc.Input.Routes']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:route-add/ietf-i2rs-rib:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.return_failure_detail is not None:
                return True

            if self.rib_name is not None:
                return True

            if self.routes is not None and self.routes._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RouteAddRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: failed_count
        
        	The numbers of the routes that are failed to be added/deleted/updated
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**mandatory**\: True
        
        .. attribute:: failure_detail
        
        	The failure detail reflects the reason why a route operation fails. It is a array that includes the route index and error code of the failed route
        	**type**\:   :py:class:`FailureDetail <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Output.FailureDetail>`
        
        .. attribute:: success_count
        
        	The numbers of routes that are successfully added/deleted/updated
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.failed_count = None
            self.failure_detail = RouteAddRpc.Output.FailureDetail()
            self.failure_detail.parent = self
            self.success_count = None


        class FailureDetail(object):
            """
            The failure detail reflects the reason why a route
            operation fails. It is a array that includes the route
            index and error code of the failed route.
            
            .. attribute:: failed_routes
            
            	The list of failed routes
            	**type**\: list of    :py:class:`FailedRoutes <ydk.models.ietf.ietf_i2rs_rib.RouteAddRpc.Output.FailureDetail.FailedRoutes>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.failed_routes = YList()
                self.failed_routes.parent = self
                self.failed_routes.name = 'failed_routes'


            class FailedRoutes(object):
                """
                The list of failed routes.
                
                .. attribute:: route_index  <key>
                
                	The route index of the failed route
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: error_code
                
                	The error code that reflects the failure reason
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.route_index = None
                    self.error_code = None

                @property
                def _common_path(self):
                    if self.route_index is None:
                        raise YPYModelError('Key property route_index is None')

                    return '/ietf-i2rs-rib:route-add/ietf-i2rs-rib:output/ietf-i2rs-rib:failure-detail/ietf-i2rs-rib:failed-routes[ietf-i2rs-rib:route-index = ' + str(self.route_index) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.route_index is not None:
                        return True

                    if self.error_code is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteAddRpc.Output.FailureDetail.FailedRoutes']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-add/ietf-i2rs-rib:output/ietf-i2rs-rib:failure-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.failed_routes is not None:
                    for child_ref in self.failed_routes:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteAddRpc.Output.FailureDetail']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:route-add/ietf-i2rs-rib:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.failed_count is not None:
                return True

            if self.failure_detail is not None and self.failure_detail._has_data():
                return True

            if self.success_count is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RouteAddRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-i2rs-rib:route-add'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RouteAddRpc']['meta_info']


class RouteDeleteRpc(object):
    """
    To delete a route or a list of route from a rib
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Output>`
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        self.input = RouteDeleteRpc.Input()
        self.input.parent = self
        self.output = RouteDeleteRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: return_failure_detail
        
        	Whether return the failure detail. true  \- return the failure detail; false \- do not return the failure detail; the default is false
        	**type**\:  bool
        
        	**default value**\: false
        
        .. attribute:: rib_name
        
        	A reference to the name of a rib
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: routes
        
        	The routes to be added to the rib
        	**type**\:   :py:class:`Routes <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Input.Routes>`
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.return_failure_detail = None
            self.rib_name = None
            self.routes = RouteDeleteRpc.Input.Routes()
            self.routes.parent = self


        class Routes(object):
            """
            The routes to be added to the rib.
            
            .. attribute:: route_list
            
            	The list of routes to be deleted
            	**type**\: list of    :py:class:`RouteList <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Input.Routes.RouteList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.route_list = YList()
                self.route_list.parent = self
                self.route_list.name = 'route_list'


            class RouteList(object):
                """
                The list of routes to be deleted.
                
                .. attribute:: route_index  <key>
                
                	Route index
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**mandatory**\: True
                
                .. attribute:: match
                
                	The match condition specifies the kind of route (IPv4, MPLS, etc.) and the set of fields to match on
                	**type**\:   :py:class:`Match <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Input.Routes.RouteList.Match>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.route_index = None
                    self.match = RouteDeleteRpc.Input.Routes.RouteList.Match()
                    self.match.parent = self


                class Match(object):
                    """
                    The match condition specifies the
                    kind of route (IPv4, MPLS, etc.)
                    and the set of fields to match on.
                    
                    .. attribute:: interface_identifier
                    
                    	The interface used for matching
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ipv4
                    
                    	IPv4 route match
                    	**type**\:   :py:class:`Ipv4 <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv4>`
                    
                    .. attribute:: ipv6
                    
                    	IPv6 route match
                    	**type**\:   :py:class:`Ipv6 <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv6>`
                    
                    .. attribute:: mac_address
                    
                    	The MAC address used for matching
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    .. attribute:: mpls_label
                    
                    	The label used for matching
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.interface_identifier = None
                        self.ipv4 = RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv4()
                        self.ipv4.parent = self
                        self.ipv6 = RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv6()
                        self.ipv6.parent = self
                        self.mac_address = None
                        self.mpls_label = None


                    class Ipv4(object):
                        """
                        IPv4 route match.
                        
                        .. attribute:: dest_ipv4_prefix
                        
                        	An IPv4 destination address as the match
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dest_src_ipv4_address
                        
                        	A combination of an IPv4 source and an IPv4 destination address as the match
                        	**type**\:   :py:class:`DestSrcIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv4.DestSrcIpv4Address>`
                        
                        .. attribute:: src_ipv4_prefix
                        
                        	An IPv4 source address as the match
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv4_prefix = None
                            self.dest_src_ipv4_address = RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv4.DestSrcIpv4Address()
                            self.dest_src_ipv4_address.parent = self
                            self.src_ipv4_prefix = None


                        class DestSrcIpv4Address(object):
                            """
                            A combination of an IPv4 source and
                            an IPv4 destination address as the match.
                            
                            .. attribute:: dest_ipv4_prefix
                            
                            	The IPv4 destination address of the match
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_prefix
                            
                            	The IPv4 source address of the match
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_prefix = None
                                self.src_ipv4_prefix = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:dest-src-ipv4-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_prefix is not None:
                                    return True

                                if self.src_ipv4_prefix is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv4.DestSrcIpv4Address']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv4_prefix is not None:
                                return True

                            if self.dest_src_ipv4_address is not None and self.dest_src_ipv4_address._has_data():
                                return True

                            if self.src_ipv4_prefix is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv4']['meta_info']


                    class Ipv6(object):
                        """
                        IPv6 route match.
                        
                        .. attribute:: dest_ipv6_prefix
                        
                        	An IPv6 destination address as the match
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dest_src_ipv6_address
                        
                        	A combination of an IPv6 source and an IPv6 destination address as the match
                        	**type**\:   :py:class:`DestSrcIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv6.DestSrcIpv6Address>`
                        
                        .. attribute:: src_ipv6_prefix
                        
                        	An IPv6 source address as the match
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv6_prefix = None
                            self.dest_src_ipv6_address = RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv6.DestSrcIpv6Address()
                            self.dest_src_ipv6_address.parent = self
                            self.src_ipv6_prefix = None


                        class DestSrcIpv6Address(object):
                            """
                            A combination of an IPv6 source and
                            an IPv6 destination address as the match.
                            
                            .. attribute:: dest_ipv6_prefix
                            
                            	The IPv6 destination address of the match
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_prefix
                            
                            	The IPv6 source address of the match
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv6_prefix = None
                                self.src_ipv6_prefix = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:dest-src-ipv6-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv6_prefix is not None:
                                    return True

                                if self.src_ipv6_prefix is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv6.DestSrcIpv6Address']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:ipv6'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv6_prefix is not None:
                                return True

                            if self.dest_src_ipv6_address is not None and self.dest_src_ipv6_address._has_data():
                                return True

                            if self.src_ipv6_prefix is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteDeleteRpc.Input.Routes.RouteList.Match.Ipv6']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:match'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface_identifier is not None:
                            return True

                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv6 is not None and self.ipv6._has_data():
                            return True

                        if self.mac_address is not None:
                            return True

                        if self.mpls_label is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteDeleteRpc.Input.Routes.RouteList.Match']['meta_info']

                @property
                def _common_path(self):
                    if self.route_index is None:
                        raise YPYModelError('Key property route_index is None')

                    return '/ietf-i2rs-rib:route-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:routes/ietf-i2rs-rib:route-list[ietf-i2rs-rib:route-index = ' + str(self.route_index) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.route_index is not None:
                        return True

                    if self.match is not None and self.match._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteDeleteRpc.Input.Routes.RouteList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:routes'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.route_list is not None:
                    for child_ref in self.route_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteDeleteRpc.Input.Routes']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:route-delete/ietf-i2rs-rib:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.return_failure_detail is not None:
                return True

            if self.rib_name is not None:
                return True

            if self.routes is not None and self.routes._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RouteDeleteRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: failed_count
        
        	The numbers of the routes that are failed to be added/deleted/updated
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**mandatory**\: True
        
        .. attribute:: failure_detail
        
        	The failure detail reflects the reason why a route operation fails. It is a array that includes the route index and error code of the failed route
        	**type**\:   :py:class:`FailureDetail <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Output.FailureDetail>`
        
        .. attribute:: success_count
        
        	The numbers of routes that are successfully added/deleted/updated
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.failed_count = None
            self.failure_detail = RouteDeleteRpc.Output.FailureDetail()
            self.failure_detail.parent = self
            self.success_count = None


        class FailureDetail(object):
            """
            The failure detail reflects the reason why a route
            operation fails. It is a array that includes the route
            index and error code of the failed route.
            
            .. attribute:: failed_routes
            
            	The list of failed routes
            	**type**\: list of    :py:class:`FailedRoutes <ydk.models.ietf.ietf_i2rs_rib.RouteDeleteRpc.Output.FailureDetail.FailedRoutes>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.failed_routes = YList()
                self.failed_routes.parent = self
                self.failed_routes.name = 'failed_routes'


            class FailedRoutes(object):
                """
                The list of failed routes.
                
                .. attribute:: route_index  <key>
                
                	The route index of the failed route
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: error_code
                
                	The error code that reflects the failure reason
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.route_index = None
                    self.error_code = None

                @property
                def _common_path(self):
                    if self.route_index is None:
                        raise YPYModelError('Key property route_index is None')

                    return '/ietf-i2rs-rib:route-delete/ietf-i2rs-rib:output/ietf-i2rs-rib:failure-detail/ietf-i2rs-rib:failed-routes[ietf-i2rs-rib:route-index = ' + str(self.route_index) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.route_index is not None:
                        return True

                    if self.error_code is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteDeleteRpc.Output.FailureDetail.FailedRoutes']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-delete/ietf-i2rs-rib:output/ietf-i2rs-rib:failure-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.failed_routes is not None:
                    for child_ref in self.failed_routes:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteDeleteRpc.Output.FailureDetail']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:route-delete/ietf-i2rs-rib:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.failed_count is not None:
                return True

            if self.failure_detail is not None and self.failure_detail._has_data():
                return True

            if self.success_count is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RouteDeleteRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-i2rs-rib:route-delete'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RouteDeleteRpc']['meta_info']


class RouteUpdateRpc(object):
    """
    To update a route or a list of route of a rib.
    The inputs\:
      1. The match conditions, could be\:
        a. route prefix, or
        b. route attributes, or
        c. nexthop;
      2. The update parameters to be used\:
        a. new nexthop;
        b. new route attributes;nexthop
    Actions\:
      1. update the nexthop
      2. update the route attributes
    The outputs\:
      success\-count \- the number of routes updated;
      failed\-count \- the number of routes fail to update
      failure\-detail \- the detail failure info.
    
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Output>`
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        self.input = RouteUpdateRpc.Input()
        self.input.parent = self
        self.output = RouteUpdateRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: input_nexthop
        
        	The nexthop used for matching
        	**type**\:   :py:class:`InputNexthop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop>`
        
        .. attribute:: input_route_attributes
        
        	The route attributes are used for matching
        	**type**\:   :py:class:`InputRouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRouteAttributes>`
        
        .. attribute:: input_route_vendor_attributes
        
        	The vendor route attributes are used for matching
        	**type**\:   :py:class:`InputRouteVendorAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRouteVendorAttributes>`
        
        .. attribute:: input_routes
        
        	The matched routes to be updated
        	**type**\:   :py:class:`InputRoutes <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes>`
        
        .. attribute:: return_failure_detail
        
        	Whether return the failure detail. true  \- return the failure detail; false \- do not return the failure detail; the default is false
        	**type**\:  bool
        
        	**default value**\: false
        
        .. attribute:: rib_name
        
        	A reference to the name of a rib
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: update_parameters_nexthop
        
        	Update options\: 1. update the nexthop 2. update the route attributes 3. update the route\-vendor\-attributes
        	**type**\:   :py:class:`UpdateParametersNexthop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop>`
        
        .. attribute:: update_parameters_vendor
        
        	Update options\: 1. update the nexthop 2. update the route attributes 3. update the route\-vendor\-attributes
        	**type**\:   :py:class:`UpdateParametersVendor <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor>`
        
        .. attribute:: update_parametors
        
        	Update options\: 1. update the nexthop 2. update the route attributes 3. update the route\-vendor\-attributes
        	**type**\:   :py:class:`UpdateParametors <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors>`
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.input_nexthop = RouteUpdateRpc.Input.InputNexthop()
            self.input_nexthop.parent = self
            self.input_route_attributes = RouteUpdateRpc.Input.InputRouteAttributes()
            self.input_route_attributes.parent = self
            self.input_route_vendor_attributes = RouteUpdateRpc.Input.InputRouteVendorAttributes()
            self.input_route_vendor_attributes.parent = self
            self.input_routes = RouteUpdateRpc.Input.InputRoutes()
            self.input_routes.parent = self
            self.return_failure_detail = None
            self.rib_name = None
            self.update_parameters_nexthop = RouteUpdateRpc.Input.UpdateParametersNexthop()
            self.update_parameters_nexthop.parent = self
            self.update_parameters_vendor = RouteUpdateRpc.Input.UpdateParametersVendor()
            self.update_parameters_vendor.parent = self
            self.update_parametors = RouteUpdateRpc.Input.UpdateParametors()
            self.update_parametors.parent = self


        class InputRoutes(object):
            """
            The matched routes to be updated.
            
            .. attribute:: route_list
            
            	The list of routes to be updated
            	**type**\: list of    :py:class:`RouteList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.route_list = YList()
                self.route_list.parent = self
                self.route_list.name = 'route_list'


            class RouteList(object):
                """
                The list of routes to be updated.
                
                .. attribute:: route_index  <key>
                
                	Route index
                	**type**\:  int
                
                	**range:** 0..18446744073709551615
                
                	**mandatory**\: True
                
                .. attribute:: match
                
                	The match condition specifies the kind of route (IPv4, MPLS, etc.) and the set of fields to match on
                	**type**\:   :py:class:`Match <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.Match>`
                
                .. attribute:: updated_nexthop
                
                	The nexthop used for updating
                	**type**\:   :py:class:`UpdatedNexthop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop>`
                
                .. attribute:: updated_route_attr
                
                	The route attributes used for updating
                	**type**\:   :py:class:`UpdatedRouteAttr <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedRouteAttr>`
                
                .. attribute:: updated_route_vendor_attr
                
                	The vendor route attributes used for updating
                	**type**\:   :py:class:`UpdatedRouteVendorAttr <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedRouteVendorAttr>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.route_index = None
                    self.match = RouteUpdateRpc.Input.InputRoutes.RouteList.Match()
                    self.match.parent = self
                    self.updated_nexthop = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop()
                    self.updated_nexthop.parent = self
                    self.updated_route_attr = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedRouteAttr()
                    self.updated_route_attr.parent = self
                    self.updated_route_vendor_attr = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedRouteVendorAttr()
                    self.updated_route_vendor_attr.parent = self


                class Match(object):
                    """
                    The match condition specifies the
                    kind of route (IPv4, MPLS, etc.)
                    and the set of fields to match on.
                    
                    .. attribute:: interface_identifier
                    
                    	The interface used for matching
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ipv4
                    
                    	IPv4 route match
                    	**type**\:   :py:class:`Ipv4 <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv4>`
                    
                    .. attribute:: ipv6
                    
                    	IPv6 route match
                    	**type**\:   :py:class:`Ipv6 <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv6>`
                    
                    .. attribute:: mac_address
                    
                    	The MAC address used for matching
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    .. attribute:: mpls_label
                    
                    	The label used for matching
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.interface_identifier = None
                        self.ipv4 = RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv4()
                        self.ipv4.parent = self
                        self.ipv6 = RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv6()
                        self.ipv6.parent = self
                        self.mac_address = None
                        self.mpls_label = None


                    class Ipv4(object):
                        """
                        IPv4 route match.
                        
                        .. attribute:: dest_ipv4_prefix
                        
                        	An IPv4 destination address as the match
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dest_src_ipv4_address
                        
                        	A combination of an IPv4 source and an IPv4 destination address as the match
                        	**type**\:   :py:class:`DestSrcIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv4.DestSrcIpv4Address>`
                        
                        .. attribute:: src_ipv4_prefix
                        
                        	An IPv4 source address as the match
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv4_prefix = None
                            self.dest_src_ipv4_address = RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv4.DestSrcIpv4Address()
                            self.dest_src_ipv4_address.parent = self
                            self.src_ipv4_prefix = None


                        class DestSrcIpv4Address(object):
                            """
                            A combination of an IPv4 source and
                            an IPv4 destination address as the match.
                            
                            .. attribute:: dest_ipv4_prefix
                            
                            	The IPv4 destination address of the match
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_prefix
                            
                            	The IPv4 source address of the match
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])/(([0\-9])\|([1\-2][0\-9])\|(3[0\-2]))
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_prefix = None
                                self.src_ipv4_prefix = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:dest-src-ipv4-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_prefix is not None:
                                    return True

                                if self.src_ipv4_prefix is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv4.DestSrcIpv4Address']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:ipv4'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv4_prefix is not None:
                                return True

                            if self.dest_src_ipv4_address is not None and self.dest_src_ipv4_address._has_data():
                                return True

                            if self.src_ipv4_prefix is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv4']['meta_info']


                    class Ipv6(object):
                        """
                        IPv6 route match.
                        
                        .. attribute:: dest_ipv6_prefix
                        
                        	An IPv6 destination address as the match
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dest_src_ipv6_address
                        
                        	A combination of an IPv6 source and an IPv6 destination address as the match
                        	**type**\:   :py:class:`DestSrcIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv6.DestSrcIpv6Address>`
                        
                        .. attribute:: src_ipv6_prefix
                        
                        	An IPv6 source address as the match
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv6_prefix = None
                            self.dest_src_ipv6_address = RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv6.DestSrcIpv6Address()
                            self.dest_src_ipv6_address.parent = self
                            self.src_ipv6_prefix = None


                        class DestSrcIpv6Address(object):
                            """
                            A combination of an IPv6 source and
                            an IPv6 destination address as the match.
                            
                            .. attribute:: dest_ipv6_prefix
                            
                            	The IPv6 destination address of the match
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_prefix
                            
                            	The IPv6 source address of the match
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(/(([0\-9])\|([0\-9]{2})\|(1[0\-1][0\-9])\|(12[0\-8])))
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv6_prefix = None
                                self.src_ipv6_prefix = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:dest-src-ipv6-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv6_prefix is not None:
                                    return True

                                if self.src_ipv6_prefix is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv6.DestSrcIpv6Address']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:ipv6'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv6_prefix is not None:
                                return True

                            if self.dest_src_ipv6_address is not None and self.dest_src_ipv6_address._has_data():
                                return True

                            if self.src_ipv6_prefix is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.Match.Ipv6']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:match'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.interface_identifier is not None:
                            return True

                        if self.ipv4 is not None and self.ipv4._has_data():
                            return True

                        if self.ipv6 is not None and self.ipv6._has_data():
                            return True

                        if self.mac_address is not None:
                            return True

                        if self.mpls_label is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.Match']['meta_info']


                class UpdatedNexthop(object):
                    """
                    The nexthop used for updating.
                    
                    .. attribute:: nexthop_base
                    
                    	The base nexthop
                    	**type**\:   :py:class:`NexthopBase <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase>`
                    
                    .. attribute:: nexthop_chain
                    
                    	A chain nexthop
                    	**type**\:   :py:class:`NexthopChain <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopChain>`
                    
                    .. attribute:: nexthop_id
                    
                    	An identifier that refers to a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: nexthop_lb
                    
                    	A load balance nexthop
                    	**type**\:   :py:class:`NexthopLb <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopLb>`
                    
                    .. attribute:: nexthop_protection
                    
                    	A protection nexthop
                    	**type**\:   :py:class:`NexthopProtection <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopProtection>`
                    
                    .. attribute:: nexthop_replicates
                    
                    	A replicates nexthop
                    	**type**\:   :py:class:`NexthopReplicates <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopReplicates>`
                    
                    .. attribute:: sharing_flag
                    
                    	To indicate whether a nexthop is sharable or non\-sharable. true \- sharable, means the nexthop can be shared        with other routes false \- non\-sharable, means the nexthop can not        be shared with other routes
                    	**type**\:  bool
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_base = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase()
                        self.nexthop_base.parent = self
                        self.nexthop_chain = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopChain()
                        self.nexthop_chain.parent = self
                        self.nexthop_id = None
                        self.nexthop_lb = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopLb()
                        self.nexthop_lb.parent = self
                        self.nexthop_protection = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopProtection()
                        self.nexthop_protection.parent = self
                        self.nexthop_replicates = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopReplicates()
                        self.nexthop_replicates.parent = self
                        self.sharing_flag = None


                    class NexthopBase(object):
                        """
                        The base nexthop.
                        
                        .. attribute:: egress_interface_ipv4_address
                        
                        	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                        	**type**\:   :py:class:`EgressInterfaceIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address>`
                        
                        .. attribute:: egress_interface_ipv6_address
                        
                        	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                        	**type**\:   :py:class:`EgressInterfaceIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address>`
                        
                        .. attribute:: egress_interface_mac_address
                        
                        	The egress interface must be an Ethernet interface. Address resolution is not required for this nexthop
                        	**type**\:   :py:class:`EgressInterfaceMacAddress <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress>`
                        
                        .. attribute:: ipv4_address
                        
                        	The nexthop is an IPv4 address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: ipv6_address
                        
                        	The nexthop is an IPv6 address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: logical_tunnel
                        
                        	This can be a MPLS LSP or a GRE tunnel (or others as defined in this document), that is represented by a unique identifier (e.g. name)
                        	**type**\:   :py:class:`LogicalTunnel <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.LogicalTunnel>`
                        
                        .. attribute:: nexthop_ref
                        
                        	A nexthop reference that points to a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**refers to**\:  :py:class:`nexthop_id <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	The nexthop is an outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: rib_name
                        
                        	A nexthop pointing to a RIB indicates that the route lookup needs to continue in the specified rib. This is a way to perform chained lookups
                        	**type**\:  str
                        
                        .. attribute:: special
                        
                        	A special nexthop
                        	**type**\:   :py:class:`SpecialNexthopIdentity <ydk.models.ietf.ietf_i2rs_rib.SpecialNexthopIdentity>`
                        
                        .. attribute:: tunnel_decap
                        
                        	This is to specify decapsulating a tunnel header
                        	**type**\:   :py:class:`TunnelDecap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap>`
                        
                        .. attribute:: tunnel_encap
                        
                        	This can be an encap representing an IP tunnel or MPLS tunnel or others as defined in info model. An optional egress interface can be chained to the tunnel encap to indicate which interface to send the packet out on.  The egress interface is useful when the network device contains Ethernet interfaces and one needs to perform address resolution for the IP packet
                        	**type**\:   :py:class:`TunnelEncap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.egress_interface_ipv4_address = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address()
                            self.egress_interface_ipv4_address.parent = self
                            self.egress_interface_ipv6_address = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address()
                            self.egress_interface_ipv6_address.parent = self
                            self.egress_interface_mac_address = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress()
                            self.egress_interface_mac_address.parent = self
                            self.ipv4_address = None
                            self.ipv6_address = None
                            self.logical_tunnel = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.LogicalTunnel()
                            self.logical_tunnel.parent = self
                            self.nexthop_ref = None
                            self.outgoing_interface = None
                            self.rib_name = None
                            self.special = None
                            self.tunnel_decap = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap()
                            self.tunnel_decap.parent = self
                            self.tunnel_encap = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap()
                            self.tunnel_encap.parent = self


                        class EgressInterfaceIpv4Address(object):
                            """
                            The nexthop is an egress\-interface and an IP
                            address. This can be used in cases e.g. where
                            the IP address is a link\-local address.
                            
                            .. attribute:: ipv4_address
                            
                            	The nexthop points to an interface with an IPv4 address
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: outgoing_interface
                            
                            	Name of the outgoing interface
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_address = None
                                self.outgoing_interface = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:egress-interface-ipv4-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_address is not None:
                                    return True

                                if self.outgoing_interface is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address']['meta_info']


                        class EgressInterfaceIpv6Address(object):
                            """
                            The nexthop is an egress\-interface and an IP
                            address. This can be used in cases e.g. where
                            the IP address is a link\-local address.
                            
                            .. attribute:: ipv6_address
                            
                            	The nexthop points to an interface with an IPv6 address
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: outgoing_interface
                            
                            	Name of the outgoing interface
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv6_address = None
                                self.outgoing_interface = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:egress-interface-ipv6-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv6_address is not None:
                                    return True

                                if self.outgoing_interface is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address']['meta_info']


                        class EgressInterfaceMacAddress(object):
                            """
                            The egress interface must be an Ethernet
                            interface. Address resolution is not required
                            for this nexthop.
                            
                            .. attribute:: ieee_mac_address
                            
                            	The nexthop points to an interface with a specific mac\-address
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: outgoing_interface
                            
                            	Name of the outgoing interface
                            	**type**\:  str
                            
                            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ieee_mac_address = None
                                self.outgoing_interface = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:egress-interface-mac-address'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ieee_mac_address is not None:
                                    return True

                                if self.outgoing_interface is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress']['meta_info']


                        class TunnelEncap(object):
                            """
                            This can be an encap representing an IP tunnel or
                            MPLS tunnel or others as defined in info model.
                            An optional egress interface can be chained to the
                            tunnel encap to indicate which interface to send
                            the packet out on.  The egress interface is useful
                            when the network device contains Ethernet interfaces
                            and one needs to perform address resolution for the
                            IP packet.
                            
                            .. attribute:: gre_header
                            
                            	GRE header
                            	**type**\:   :py:class:`GreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader>`
                            
                            .. attribute:: ipv4_header
                            
                            	IPv4 header
                            	**type**\:   :py:class:`Ipv4Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header>`
                            
                            .. attribute:: ipv6_header
                            
                            	IPv6 header
                            	**type**\:   :py:class:`Ipv6Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header>`
                            
                            .. attribute:: mpls_header
                            
                            	MPLS header
                            	**type**\:   :py:class:`MplsHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader>`
                            
                            .. attribute:: nvgre_header
                            
                            	NvGRE header
                            	**type**\:   :py:class:`NvgreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader>`
                            
                            .. attribute:: vxlan_header
                            
                            	VxLAN header
                            	**type**\:   :py:class:`VxlanHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.gre_header = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader()
                                self.gre_header.parent = self
                                self.ipv4_header = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header()
                                self.ipv4_header.parent = self
                                self.ipv6_header = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header()
                                self.ipv6_header.parent = self
                                self.mpls_header = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader()
                                self.mpls_header.parent = self
                                self.nvgre_header = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader()
                                self.nvgre_header.parent = self
                                self.vxlan_header = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader()
                                self.vxlan_header.parent = self


                            class Ipv4Header(object):
                                """
                                IPv4 header.
                                
                                .. attribute:: dest_ipv4_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dscp
                                
                                	The DSCP field of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: protocol
                                
                                	The protocol id of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv4_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: ttl
                                
                                	The TTL of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.dest_ipv4_address = None
                                    self.dscp = None
                                    self.protocol = None
                                    self.src_ipv4_address = None
                                    self.ttl = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:ipv4-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.dest_ipv4_address is not None:
                                        return True

                                    if self.dscp is not None:
                                        return True

                                    if self.protocol is not None:
                                        return True

                                    if self.src_ipv4_address is not None:
                                        return True

                                    if self.ttl is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header']['meta_info']


                            class Ipv6Header(object):
                                """
                                IPv6 header.
                                
                                .. attribute:: dest_ipv6_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: flow_label
                                
                                	The flow label of the header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: hop_limit
                                
                                	The hop limit the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_header
                                
                                	The next header of the IPv6 header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv6_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: traffic_class
                                
                                	The traffic class value of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.dest_ipv6_address = None
                                    self.flow_label = None
                                    self.hop_limit = None
                                    self.next_header = None
                                    self.src_ipv6_address = None
                                    self.traffic_class = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:ipv6-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.dest_ipv6_address is not None:
                                        return True

                                    if self.flow_label is not None:
                                        return True

                                    if self.hop_limit is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.src_ipv6_address is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header']['meta_info']


                            class MplsHeader(object):
                                """
                                MPLS header.
                                
                                .. attribute:: label_operations
                                
                                	Label operations
                                	**type**\: list of    :py:class:`LabelOperations <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.label_operations = YList()
                                    self.label_operations.parent = self
                                    self.label_operations.name = 'label_operations'


                                class LabelOperations(object):
                                    """
                                    Label operations.
                                    
                                    .. attribute:: label_oper_id  <key>
                                    
                                    	An optional identifier that points to a label operation
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    .. attribute:: label_push
                                    
                                    	Label push operation
                                    	**type**\:   :py:class:`LabelPush <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush>`
                                    
                                    .. attribute:: label_swap
                                    
                                    	Label swap operation
                                    	**type**\:   :py:class:`LabelSwap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap>`
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.label_oper_id = None
                                        self.label_push = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush()
                                        self.label_push.parent = self
                                        self.label_swap = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap()
                                        self.label_swap.parent = self


                                    class LabelPush(object):
                                        """
                                        Label push operation.
                                        
                                        .. attribute:: label
                                        
                                        	The label to be pushed
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: s_bit
                                        
                                        	The s\-bit of the label to be pushed. 
                                        	**type**\:  bool
                                        
                                        .. attribute:: tc_value
                                        
                                        	The traffic class value of the label to be pushed
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        .. attribute:: ttl_value
                                        
                                        	The TTL value of the label to be pushed
                                        	**type**\:  int
                                        
                                        	**range:** 0..255
                                        
                                        

                                        """

                                        _prefix = 'iir'
                                        _revision = '2016-07-04'

                                        def __init__(self):
                                            self.parent = None
                                            self.label = None
                                            self.s_bit = None
                                            self.tc_value = None
                                            self.ttl_value = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-i2rs-rib:label-push'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            if self.parent is None:
                                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                            return self.parent.is_config()

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.label is not None:
                                                return True

                                            if self.s_bit is not None:
                                                return True

                                            if self.tc_value is not None:
                                                return True

                                            if self.ttl_value is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush']['meta_info']


                                    class LabelSwap(object):
                                        """
                                        Label swap operation.
                                        
                                        .. attribute:: in_label
                                        
                                        	The label to be swapped
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: out_label
                                        
                                        	The out MPLS label
                                        	**type**\:  int
                                        
                                        	**range:** 0..4294967295
                                        
                                        	**mandatory**\: True
                                        
                                        .. attribute:: ttl_action
                                        
                                        	The label ttl actions\: \- No\-action, or \- Copy to inner label,or \- Decrease (the in label) by 1 and   copy to the out label
                                        	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                        
                                        

                                        """

                                        _prefix = 'iir'
                                        _revision = '2016-07-04'

                                        def __init__(self):
                                            self.parent = None
                                            self.in_label = None
                                            self.out_label = None
                                            self.ttl_action = None

                                        @property
                                        def _common_path(self):
                                            if self.parent is None:
                                                raise YPYModelError('parent is not set . Cannot derive path.')

                                            return self.parent._common_path +'/ietf-i2rs-rib:label-swap'

                                        def is_config(self):
                                            ''' Returns True if this instance represents config data else returns False '''
                                            if self.parent is None:
                                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                            return self.parent.is_config()

                                        def _has_data(self):
                                            if not self.is_config():
                                                return False
                                            if self.in_label is not None:
                                                return True

                                            if self.out_label is not None:
                                                return True

                                            if self.ttl_action is not None:
                                                return True

                                            return False

                                        @staticmethod
                                        def _meta_info():
                                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap']['meta_info']

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')
                                        if self.label_oper_id is None:
                                            raise YPYModelError('Key property label_oper_id is None')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-operations[ietf-i2rs-rib:label-oper-id = ' + str(self.label_oper_id) + ']'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        if self.parent is None:
                                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                        return self.parent.is_config()

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.label_oper_id is not None:
                                            return True

                                        if self.label_push is not None and self.label_push._has_data():
                                            return True

                                        if self.label_swap is not None and self.label_swap._has_data():
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:mpls-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.label_operations is not None:
                                        for child_ref in self.label_operations:
                                            if child_ref._has_data():
                                                return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader']['meta_info']


                            class GreHeader(object):
                                """
                                GRE header.
                                
                                .. attribute:: ipv4_dest
                                
                                	The destination IP address of the GRE header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: ipv6_dest
                                
                                	The destination IP address of the GRE header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: key
                                
                                	The GRE key of the GRE header
                                	**type**\:  int
                                
                                	**range:** 0..18446744073709551615
                                
                                .. attribute:: protocol_type
                                
                                	The protocol type of the GRE header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.ipv4_dest = None
                                    self.ipv6_dest = None
                                    self.key = None
                                    self.protocol_type = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:gre-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ipv4_dest is not None:
                                        return True

                                    if self.ipv6_dest is not None:
                                        return True

                                    if self.key is not None:
                                        return True

                                    if self.protocol_type is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader']['meta_info']


                            class NvgreHeader(object):
                                """
                                NvGRE header.
                                
                                .. attribute:: dest_ipv4_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dest_ipv6_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dscp
                                
                                	The DSCP field of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: flow_id
                                
                                	The flow identifier of the NvGRE header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: flow_label
                                
                                	The flow label of the header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: hop_limit
                                
                                	The hop limit the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_header
                                
                                	The next header of the IPv6 header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: protocol
                                
                                	The protocol id of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv4_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv6_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: traffic_class
                                
                                	The traffic class value of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ttl
                                
                                	The TTL of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: virtual_subnet_id
                                
                                	The subnet identifier of the NvGRE header
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.dest_ipv4_address = None
                                    self.dest_ipv6_address = None
                                    self.dscp = None
                                    self.flow_id = None
                                    self.flow_label = None
                                    self.hop_limit = None
                                    self.next_header = None
                                    self.protocol = None
                                    self.src_ipv4_address = None
                                    self.src_ipv6_address = None
                                    self.traffic_class = None
                                    self.ttl = None
                                    self.virtual_subnet_id = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:nvgre-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.dest_ipv4_address is not None:
                                        return True

                                    if self.dest_ipv6_address is not None:
                                        return True

                                    if self.dscp is not None:
                                        return True

                                    if self.flow_id is not None:
                                        return True

                                    if self.flow_label is not None:
                                        return True

                                    if self.hop_limit is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.protocol is not None:
                                        return True

                                    if self.src_ipv4_address is not None:
                                        return True

                                    if self.src_ipv6_address is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.ttl is not None:
                                        return True

                                    if self.virtual_subnet_id is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader']['meta_info']


                            class VxlanHeader(object):
                                """
                                VxLAN header.
                                
                                .. attribute:: dest_ipv4_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dest_ipv6_address
                                
                                	The destination IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: dscp
                                
                                	The DSCP field of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: flow_label
                                
                                	The flow label of the header
                                	**type**\:  int
                                
                                	**range:** 0..65535
                                
                                .. attribute:: hop_limit
                                
                                	The hop limit the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: next_header
                                
                                	The next header of the IPv6 header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: protocol
                                
                                	The protocol id of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv4_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: src_ipv6_address
                                
                                	The source IP address of the header
                                	**type**\:  str
                                
                                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                                
                                	**mandatory**\: True
                                
                                .. attribute:: traffic_class
                                
                                	The traffic class value of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ttl
                                
                                	The TTL of the header
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: vxlan_identifier
                                
                                	The VxLAN identifier of the VxLAN header
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.dest_ipv4_address = None
                                    self.dest_ipv6_address = None
                                    self.dscp = None
                                    self.flow_label = None
                                    self.hop_limit = None
                                    self.next_header = None
                                    self.protocol = None
                                    self.src_ipv4_address = None
                                    self.src_ipv6_address = None
                                    self.traffic_class = None
                                    self.ttl = None
                                    self.vxlan_identifier = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:vxlan-header'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.dest_ipv4_address is not None:
                                        return True

                                    if self.dest_ipv6_address is not None:
                                        return True

                                    if self.dscp is not None:
                                        return True

                                    if self.flow_label is not None:
                                        return True

                                    if self.hop_limit is not None:
                                        return True

                                    if self.next_header is not None:
                                        return True

                                    if self.protocol is not None:
                                        return True

                                    if self.src_ipv4_address is not None:
                                        return True

                                    if self.src_ipv6_address is not None:
                                        return True

                                    if self.traffic_class is not None:
                                        return True

                                    if self.ttl is not None:
                                        return True

                                    if self.vxlan_identifier is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:tunnel-encap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.gre_header is not None and self.gre_header._has_data():
                                    return True

                                if self.ipv4_header is not None and self.ipv4_header._has_data():
                                    return True

                                if self.ipv6_header is not None and self.ipv6_header._has_data():
                                    return True

                                if self.mpls_header is not None and self.mpls_header._has_data():
                                    return True

                                if self.nvgre_header is not None and self.nvgre_header._has_data():
                                    return True

                                if self.vxlan_header is not None and self.vxlan_header._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelEncap']['meta_info']


                        class TunnelDecap(object):
                            """
                            This is to specify decapsulating a tunnel header.
                            
                            .. attribute:: ipv4_decap
                            
                            	IPv4 decap
                            	**type**\:   :py:class:`Ipv4Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap>`
                            
                            .. attribute:: ipv6_decap
                            
                            	IPv6 decap
                            	**type**\:   :py:class:`Ipv6Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap>`
                            
                            .. attribute:: label_pop
                            
                            	MPLS decap
                            	**type**\:   :py:class:`LabelPop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_decap = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap()
                                self.ipv4_decap.parent = self
                                self.ipv6_decap = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap()
                                self.ipv6_decap.parent = self
                                self.label_pop = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop()
                                self.label_pop.parent = self


                            class Ipv4Decap(object):
                                """
                                IPv4 decap.
                                
                                .. attribute:: ipv4_decap
                                
                                	IPv4 decap operations
                                	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                                
                                	**mandatory**\: True
                                
                                .. attribute:: ttl_action
                                
                                	The ttl actions\: no\-action or copy to inner header
                                	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.ipv4_decap = None
                                    self.ttl_action = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:ipv4-decap'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.ipv4_decap is not None:
                                        return True

                                    if self.ttl_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap']['meta_info']


                            class Ipv6Decap(object):
                                """
                                IPv6 decap.
                                
                                .. attribute:: hop_limit_action
                                
                                	The hop limit actions\: no\-action or copy to inner header
                                	**type**\:   :py:class:`HopLimitActionIdentity <ydk.models.ietf.ietf_i2rs_rib.HopLimitActionIdentity>`
                                
                                .. attribute:: ipv6_decap
                                
                                	IPv6 decap operations
                                	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                                
                                	**mandatory**\: True
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.hop_limit_action = None
                                    self.ipv6_decap = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:ipv6-decap'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.hop_limit_action is not None:
                                        return True

                                    if self.ipv6_decap is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap']['meta_info']


                            class LabelPop(object):
                                """
                                MPLS decap.
                                
                                .. attribute:: label_pop
                                
                                	Pop a label from the label stack
                                	**type**\:   :py:class:`MplsLabelActionIdentity <ydk.models.ietf.ietf_i2rs_rib.MplsLabelActionIdentity>`
                                
                                	**mandatory**\: True
                                
                                .. attribute:: ttl_action
                                
                                	The label ttl action
                                	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.label_pop = None
                                    self.ttl_action = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:label-pop'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.label_pop is not None:
                                        return True

                                    if self.ttl_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop']['meta_info']

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:tunnel-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_decap is not None and self.ipv4_decap._has_data():
                                    return True

                                if self.ipv6_decap is not None and self.ipv6_decap._has_data():
                                    return True

                                if self.label_pop is not None and self.label_pop._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.TunnelDecap']['meta_info']


                        class LogicalTunnel(object):
                            """
                            This can be a MPLS LSP or a GRE tunnel (or others
                            as defined in this document), that is represented
                            by a unique identifier (e.g. name).
                            
                            .. attribute:: tunnel_name
                            
                            	A tunnel name that points to a logical tunnel
                            	**type**\:  str
                            
                            	**mandatory**\: True
                            
                            .. attribute:: tunnel_type
                            
                            	A tunnel type
                            	**type**\:   :py:class:`TunnelTypeIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelTypeIdentity>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.tunnel_name = None
                                self.tunnel_type = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:logical-tunnel'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.tunnel_name is not None:
                                    return True

                                if self.tunnel_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase.LogicalTunnel']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-base'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.egress_interface_ipv4_address is not None and self.egress_interface_ipv4_address._has_data():
                                return True

                            if self.egress_interface_ipv6_address is not None and self.egress_interface_ipv6_address._has_data():
                                return True

                            if self.egress_interface_mac_address is not None and self.egress_interface_mac_address._has_data():
                                return True

                            if self.ipv4_address is not None:
                                return True

                            if self.ipv6_address is not None:
                                return True

                            if self.logical_tunnel is not None and self.logical_tunnel._has_data():
                                return True

                            if self.nexthop_ref is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            if self.rib_name is not None:
                                return True

                            if self.special is not None:
                                return True

                            if self.tunnel_decap is not None and self.tunnel_decap._has_data():
                                return True

                            if self.tunnel_encap is not None and self.tunnel_encap._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopBase']['meta_info']


                    class NexthopChain(object):
                        """
                        A chain nexthop.
                        
                        .. attribute:: nexthop_list
                        
                        	A list of nexthops
                        	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopChain.NexthopList>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_list = YList()
                            self.nexthop_list.parent = self
                            self.nexthop_list.name = 'nexthop_list'


                        class NexthopList(object):
                            """
                            A list of nexthops.
                            
                            .. attribute:: nexthop_member_id  <key>
                            
                            	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.nexthop_member_id = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.nexthop_member_id is None:
                                    raise YPYModelError('Key property nexthop_member_id is None')

                                return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nexthop_member_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopChain.NexthopList']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-chain'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_list is not None:
                                for child_ref in self.nexthop_list:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopChain']['meta_info']


                    class NexthopReplicates(object):
                        """
                        A replicates nexthop.
                        
                        .. attribute:: nexthop_list
                        
                        	A list of nexthops
                        	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopReplicates.NexthopList>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_list = YList()
                            self.nexthop_list.parent = self
                            self.nexthop_list.name = 'nexthop_list'


                        class NexthopList(object):
                            """
                            A list of nexthops.
                            
                            .. attribute:: nexthop_member_id  <key>
                            
                            	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.nexthop_member_id = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.nexthop_member_id is None:
                                    raise YPYModelError('Key property nexthop_member_id is None')

                                return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nexthop_member_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopReplicates.NexthopList']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-replicates'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_list is not None:
                                for child_ref in self.nexthop_list:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopReplicates']['meta_info']


                    class NexthopProtection(object):
                        """
                        A protection nexthop.
                        
                        .. attribute:: nexthop_list
                        
                        	A list of nexthop
                        	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopProtection.NexthopList>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_list = YList()
                            self.nexthop_list.parent = self
                            self.nexthop_list.name = 'nexthop_list'


                        class NexthopList(object):
                            """
                            A list of nexthop.
                            
                            .. attribute:: nexthop_member_id  <key>
                            
                            	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: nexthop_preference
                            
                            	Nexthop\-preference is used for protection schemes. It is an integer value between 1 and 99.  Lower values are more preferred. To download a primary/standby/tertiary group to the FIB, the nexthops that are resolved and are most preferred are selected
                            	**type**\:  int
                            
                            	**range:** 1..99
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.nexthop_member_id = None
                                self.nexthop_preference = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.nexthop_member_id is None:
                                    raise YPYModelError('Key property nexthop_member_id is None')

                                return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nexthop_member_id is not None:
                                    return True

                                if self.nexthop_preference is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopProtection.NexthopList']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-protection'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_list is not None:
                                for child_ref in self.nexthop_list:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopProtection']['meta_info']


                    class NexthopLb(object):
                        """
                        A load balance nexthop.
                        
                        .. attribute:: nexthop_list
                        
                        	A list of nexthop
                        	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopLb.NexthopList>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_list = YList()
                            self.nexthop_list.parent = self
                            self.nexthop_list.name = 'nexthop_list'


                        class NexthopList(object):
                            """
                            A list of nexthop.
                            
                            .. attribute:: nexthop_member_id  <key>
                            
                            	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: nexthop_lb_weight
                            
                            	The weight of a nexthop of the load balance nexthops
                            	**type**\:  int
                            
                            	**range:** 1..99
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.nexthop_member_id = None
                                self.nexthop_lb_weight = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')
                                if self.nexthop_member_id is None:
                                    raise YPYModelError('Key property nexthop_member_id is None')

                                return self.parent._common_path +'/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.nexthop_member_id is not None:
                                    return True

                                if self.nexthop_lb_weight is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopLb.NexthopList']['meta_info']

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:nexthop-lb'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_list is not None:
                                for child_ref in self.nexthop_list:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop.NexthopLb']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:updated-nexthop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_base is not None and self.nexthop_base._has_data():
                            return True

                        if self.nexthop_chain is not None and self.nexthop_chain._has_data():
                            return True

                        if self.nexthop_id is not None:
                            return True

                        if self.nexthop_lb is not None and self.nexthop_lb._has_data():
                            return True

                        if self.nexthop_protection is not None and self.nexthop_protection._has_data():
                            return True

                        if self.nexthop_replicates is not None and self.nexthop_replicates._has_data():
                            return True

                        if self.sharing_flag is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedNexthop']['meta_info']


                class UpdatedRouteAttr(object):
                    """
                    The route attributes used for updating.
                    
                    .. attribute:: address_family_route_attributes
                    
                    	Address family related route attributes
                    	**type**\:   :py:class:`AddressFamilyRouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedRouteAttr.AddressFamilyRouteAttributes>`
                    
                    .. attribute:: local_only
                    
                    	Indicate whether the attributes is local only
                    	**type**\:  bool
                    
                    	**mandatory**\: True
                    
                    .. attribute:: route_preference
                    
                    	ROUTE\_PREFERENCE\: This is a numerical value that allows for comparing routes from different protocols.  Static configuration is also considered a protocol for the purpose of this field.  It is also known as administrative\-distance. The lower the value, the higher the preference
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.address_family_route_attributes = RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedRouteAttr.AddressFamilyRouteAttributes()
                        self.address_family_route_attributes.parent = self
                        self.local_only = None
                        self.route_preference = None


                    class AddressFamilyRouteAttributes(object):
                        """
                        Address family related route attributes.
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None

                        @property
                        def _common_path(self):
                            if self.parent is None:
                                raise YPYModelError('parent is not set . Cannot derive path.')

                            return self.parent._common_path +'/ietf-i2rs-rib:address-family-route-attributes'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedRouteAttr.AddressFamilyRouteAttributes']['meta_info']

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:updated-route-attr'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.address_family_route_attributes is not None and self.address_family_route_attributes._has_data():
                            return True

                        if self.local_only is not None:
                            return True

                        if self.route_preference is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedRouteAttr']['meta_info']


                class UpdatedRouteVendorAttr(object):
                    """
                    The vendor route attributes used for updating.
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):
                        if self.parent is None:
                            raise YPYModelError('parent is not set . Cannot derive path.')

                        return self.parent._common_path +'/ietf-i2rs-rib:updated-route-vendor-attr'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList.UpdatedRouteVendorAttr']['meta_info']

                @property
                def _common_path(self):
                    if self.route_index is None:
                        raise YPYModelError('Key property route_index is None')

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-routes/ietf-i2rs-rib:route-list[ietf-i2rs-rib:route-index = ' + str(self.route_index) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.route_index is not None:
                        return True

                    if self.match is not None and self.match._has_data():
                        return True

                    if self.updated_nexthop is not None and self.updated_nexthop._has_data():
                        return True

                    if self.updated_route_attr is not None and self.updated_route_attr._has_data():
                        return True

                    if self.updated_route_vendor_attr is not None and self.updated_route_vendor_attr._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.InputRoutes.RouteList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-routes'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.route_list is not None:
                    for child_ref in self.route_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteUpdateRpc.Input.InputRoutes']['meta_info']


        class InputRouteAttributes(object):
            """
            The route attributes are used for matching.
            
            .. attribute:: address_family_route_attributes
            
            	Address family related route attributes
            	**type**\:   :py:class:`AddressFamilyRouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputRouteAttributes.AddressFamilyRouteAttributes>`
            
            .. attribute:: local_only
            
            	Indicate whether the attributes is local only
            	**type**\:  bool
            
            	**mandatory**\: True
            
            .. attribute:: route_preference
            
            	ROUTE\_PREFERENCE\: This is a numerical value that allows for comparing routes from different protocols.  Static configuration is also considered a protocol for the purpose of this field.  It is also known as administrative\-distance. The lower the value, the higher the preference
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**mandatory**\: True
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.address_family_route_attributes = RouteUpdateRpc.Input.InputRouteAttributes.AddressFamilyRouteAttributes()
                self.address_family_route_attributes.parent = self
                self.local_only = None
                self.route_preference = None


            class AddressFamilyRouteAttributes(object):
                """
                Address family related route attributes.
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-route-attributes/ietf-i2rs-rib:address-family-route-attributes'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.InputRouteAttributes.AddressFamilyRouteAttributes']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-route-attributes'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.address_family_route_attributes is not None and self.address_family_route_attributes._has_data():
                    return True

                if self.local_only is not None:
                    return True

                if self.route_preference is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteUpdateRpc.Input.InputRouteAttributes']['meta_info']


        class UpdateParametors(object):
            """
            Update options\:
            1. update the nexthop
            2. update the route attributes
            3. update the route\-vendor\-attributes.
            
            .. attribute:: updated_nexthop
            
            	The nexthop used for updating
            	**type**\:   :py:class:`UpdatedNexthop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop>`
            
            .. attribute:: updated_route_attr
            
            	The route attributes used for updating
            	**type**\:   :py:class:`UpdatedRouteAttr <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedRouteAttr>`
            
            .. attribute:: updated_route_vendor_attr
            
            	The vendor route attributes used for updating
            	**type**\:   :py:class:`UpdatedRouteVendorAttr <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedRouteVendorAttr>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.updated_nexthop = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop()
                self.updated_nexthop.parent = self
                self.updated_route_attr = RouteUpdateRpc.Input.UpdateParametors.UpdatedRouteAttr()
                self.updated_route_attr.parent = self
                self.updated_route_vendor_attr = RouteUpdateRpc.Input.UpdateParametors.UpdatedRouteVendorAttr()
                self.updated_route_vendor_attr.parent = self


            class UpdatedNexthop(object):
                """
                The nexthop used for updating.
                
                .. attribute:: nexthop_base
                
                	The base nexthop
                	**type**\:   :py:class:`NexthopBase <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase>`
                
                .. attribute:: nexthop_chain
                
                	A chain nexthop
                	**type**\:   :py:class:`NexthopChain <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopChain>`
                
                .. attribute:: nexthop_id
                
                	An identifier that refers to a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop_lb
                
                	A load balance nexthop
                	**type**\:   :py:class:`NexthopLb <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopLb>`
                
                .. attribute:: nexthop_protection
                
                	A protection nexthop
                	**type**\:   :py:class:`NexthopProtection <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopProtection>`
                
                .. attribute:: nexthop_replicates
                
                	A replicates nexthop
                	**type**\:   :py:class:`NexthopReplicates <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopReplicates>`
                
                .. attribute:: sharing_flag
                
                	To indicate whether a nexthop is sharable or non\-sharable. true \- sharable, means the nexthop can be shared        with other routes false \- non\-sharable, means the nexthop can not        be shared with other routes
                	**type**\:  bool
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_base = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase()
                    self.nexthop_base.parent = self
                    self.nexthop_chain = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopChain()
                    self.nexthop_chain.parent = self
                    self.nexthop_id = None
                    self.nexthop_lb = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopLb()
                    self.nexthop_lb.parent = self
                    self.nexthop_protection = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopProtection()
                    self.nexthop_protection.parent = self
                    self.nexthop_replicates = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopReplicates()
                    self.nexthop_replicates.parent = self
                    self.sharing_flag = None


                class NexthopBase(object):
                    """
                    The base nexthop.
                    
                    .. attribute:: egress_interface_ipv4_address
                    
                    	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                    	**type**\:   :py:class:`EgressInterfaceIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address>`
                    
                    .. attribute:: egress_interface_ipv6_address
                    
                    	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                    	**type**\:   :py:class:`EgressInterfaceIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address>`
                    
                    .. attribute:: egress_interface_mac_address
                    
                    	The egress interface must be an Ethernet interface. Address resolution is not required for this nexthop
                    	**type**\:   :py:class:`EgressInterfaceMacAddress <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress>`
                    
                    .. attribute:: ipv4_address
                    
                    	The nexthop is an IPv4 address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ipv6_address
                    
                    	The nexthop is an IPv6 address
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: logical_tunnel
                    
                    	This can be a MPLS LSP or a GRE tunnel (or others as defined in this document), that is represented by a unique identifier (e.g. name)
                    	**type**\:   :py:class:`LogicalTunnel <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.LogicalTunnel>`
                    
                    .. attribute:: nexthop_ref
                    
                    	A nexthop reference that points to a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**refers to**\:  :py:class:`nexthop_id <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: outgoing_interface
                    
                    	The nexthop is an outgoing interface
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: rib_name
                    
                    	A nexthop pointing to a RIB indicates that the route lookup needs to continue in the specified rib. This is a way to perform chained lookups
                    	**type**\:  str
                    
                    .. attribute:: special
                    
                    	A special nexthop
                    	**type**\:   :py:class:`SpecialNexthopIdentity <ydk.models.ietf.ietf_i2rs_rib.SpecialNexthopIdentity>`
                    
                    .. attribute:: tunnel_decap
                    
                    	This is to specify decapsulating a tunnel header
                    	**type**\:   :py:class:`TunnelDecap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap>`
                    
                    .. attribute:: tunnel_encap
                    
                    	This can be an encap representing an IP tunnel or MPLS tunnel or others as defined in info model. An optional egress interface can be chained to the tunnel encap to indicate which interface to send the packet out on.  The egress interface is useful when the network device contains Ethernet interfaces and one needs to perform address resolution for the IP packet
                    	**type**\:   :py:class:`TunnelEncap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.egress_interface_ipv4_address = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address()
                        self.egress_interface_ipv4_address.parent = self
                        self.egress_interface_ipv6_address = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address()
                        self.egress_interface_ipv6_address.parent = self
                        self.egress_interface_mac_address = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress()
                        self.egress_interface_mac_address.parent = self
                        self.ipv4_address = None
                        self.ipv6_address = None
                        self.logical_tunnel = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.LogicalTunnel()
                        self.logical_tunnel.parent = self
                        self.nexthop_ref = None
                        self.outgoing_interface = None
                        self.rib_name = None
                        self.special = None
                        self.tunnel_decap = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap()
                        self.tunnel_decap.parent = self
                        self.tunnel_encap = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap()
                        self.tunnel_encap.parent = self


                    class EgressInterfaceIpv4Address(object):
                        """
                        The nexthop is an egress\-interface and an IP
                        address. This can be used in cases e.g. where
                        the IP address is a link\-local address.
                        
                        .. attribute:: ipv4_address
                        
                        	The nexthop points to an interface with an IPv4 address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv4-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address']['meta_info']


                    class EgressInterfaceIpv6Address(object):
                        """
                        The nexthop is an egress\-interface and an IP
                        address. This can be used in cases e.g. where
                        the IP address is a link\-local address.
                        
                        .. attribute:: ipv6_address
                        
                        	The nexthop points to an interface with an IPv6 address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv6_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv6-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv6_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address']['meta_info']


                    class EgressInterfaceMacAddress(object):
                        """
                        The egress interface must be an Ethernet
                        interface. Address resolution is not required
                        for this nexthop.
                        
                        .. attribute:: ieee_mac_address
                        
                        	The nexthop points to an interface with a specific mac\-address
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ieee_mac_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-mac-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ieee_mac_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress']['meta_info']


                    class TunnelEncap(object):
                        """
                        This can be an encap representing an IP tunnel or
                        MPLS tunnel or others as defined in info model.
                        An optional egress interface can be chained to the
                        tunnel encap to indicate which interface to send
                        the packet out on.  The egress interface is useful
                        when the network device contains Ethernet interfaces
                        and one needs to perform address resolution for the
                        IP packet.
                        
                        .. attribute:: gre_header
                        
                        	GRE header
                        	**type**\:   :py:class:`GreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader>`
                        
                        .. attribute:: ipv4_header
                        
                        	IPv4 header
                        	**type**\:   :py:class:`Ipv4Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header>`
                        
                        .. attribute:: ipv6_header
                        
                        	IPv6 header
                        	**type**\:   :py:class:`Ipv6Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header>`
                        
                        .. attribute:: mpls_header
                        
                        	MPLS header
                        	**type**\:   :py:class:`MplsHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader>`
                        
                        .. attribute:: nvgre_header
                        
                        	NvGRE header
                        	**type**\:   :py:class:`NvgreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader>`
                        
                        .. attribute:: vxlan_header
                        
                        	VxLAN header
                        	**type**\:   :py:class:`VxlanHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.gre_header = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader()
                            self.gre_header.parent = self
                            self.ipv4_header = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header()
                            self.ipv4_header.parent = self
                            self.ipv6_header = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header()
                            self.ipv6_header.parent = self
                            self.mpls_header = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader()
                            self.mpls_header.parent = self
                            self.nvgre_header = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader()
                            self.nvgre_header.parent = self
                            self.vxlan_header = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader()
                            self.vxlan_header.parent = self


                        class Ipv4Header(object):
                            """
                            IPv4 header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dscp = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.ttl = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv4-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header']['meta_info']


                        class Ipv6Header(object):
                            """
                            IPv6 header.
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv6_address = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.src_ipv6_address = None
                                self.traffic_class = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv6-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header']['meta_info']


                        class MplsHeader(object):
                            """
                            MPLS header.
                            
                            .. attribute:: label_operations
                            
                            	Label operations
                            	**type**\: list of    :py:class:`LabelOperations <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label_operations = YList()
                                self.label_operations.parent = self
                                self.label_operations.name = 'label_operations'


                            class LabelOperations(object):
                                """
                                Label operations.
                                
                                .. attribute:: label_oper_id  <key>
                                
                                	An optional identifier that points to a label operation
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: label_push
                                
                                	Label push operation
                                	**type**\:   :py:class:`LabelPush <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush>`
                                
                                .. attribute:: label_swap
                                
                                	Label swap operation
                                	**type**\:   :py:class:`LabelSwap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.label_oper_id = None
                                    self.label_push = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush()
                                    self.label_push.parent = self
                                    self.label_swap = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap()
                                    self.label_swap.parent = self


                                class LabelPush(object):
                                    """
                                    Label push operation.
                                    
                                    .. attribute:: label
                                    
                                    	The label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: s_bit
                                    
                                    	The s\-bit of the label to be pushed. 
                                    	**type**\:  bool
                                    
                                    .. attribute:: tc_value
                                    
                                    	The traffic class value of the label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: ttl_value
                                    
                                    	The TTL value of the label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.label = None
                                        self.s_bit = None
                                        self.tc_value = None
                                        self.ttl_value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-push'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        if self.parent is None:
                                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                        return self.parent.is_config()

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.label is not None:
                                            return True

                                        if self.s_bit is not None:
                                            return True

                                        if self.tc_value is not None:
                                            return True

                                        if self.ttl_value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush']['meta_info']


                                class LabelSwap(object):
                                    """
                                    Label swap operation.
                                    
                                    .. attribute:: in_label
                                    
                                    	The label to be swapped
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: out_label
                                    
                                    	The out MPLS label
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: ttl_action
                                    
                                    	The label ttl actions\: \- No\-action, or \- Copy to inner label,or \- Decrease (the in label) by 1 and   copy to the out label
                                    	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.in_label = None
                                        self.out_label = None
                                        self.ttl_action = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-swap'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        if self.parent is None:
                                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                        return self.parent.is_config()

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.in_label is not None:
                                            return True

                                        if self.out_label is not None:
                                            return True

                                        if self.ttl_action is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.label_oper_id is None:
                                        raise YPYModelError('Key property label_oper_id is None')

                                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header/ietf-i2rs-rib:label-operations[ietf-i2rs-rib:label-oper-id = ' + str(self.label_oper_id) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.label_oper_id is not None:
                                        return True

                                    if self.label_push is not None and self.label_push._has_data():
                                        return True

                                    if self.label_swap is not None and self.label_swap._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations']['meta_info']

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label_operations is not None:
                                    for child_ref in self.label_operations:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader']['meta_info']


                        class GreHeader(object):
                            """
                            GRE header.
                            
                            .. attribute:: ipv4_dest
                            
                            	The destination IP address of the GRE header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ipv6_dest
                            
                            	The destination IP address of the GRE header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: key
                            
                            	The GRE key of the GRE header
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: protocol_type
                            
                            	The protocol type of the GRE header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_dest = None
                                self.ipv6_dest = None
                                self.key = None
                                self.protocol_type = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:gre-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_dest is not None:
                                    return True

                                if self.ipv6_dest is not None:
                                    return True

                                if self.key is not None:
                                    return True

                                if self.protocol_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader']['meta_info']


                        class NvgreHeader(object):
                            """
                            NvGRE header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_id
                            
                            	The flow identifier of the NvGRE header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: virtual_subnet_id
                            
                            	The subnet identifier of the NvGRE header
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dest_ipv6_address = None
                                self.dscp = None
                                self.flow_id = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.src_ipv6_address = None
                                self.traffic_class = None
                                self.ttl = None
                                self.virtual_subnet_id = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:nvgre-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.flow_id is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                if self.virtual_subnet_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader']['meta_info']


                        class VxlanHeader(object):
                            """
                            VxLAN header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: vxlan_identifier
                            
                            	The VxLAN identifier of the VxLAN header
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dest_ipv6_address = None
                                self.dscp = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.src_ipv6_address = None
                                self.traffic_class = None
                                self.ttl = None
                                self.vxlan_identifier = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:vxlan-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                if self.vxlan_identifier is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader']['meta_info']

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.gre_header is not None and self.gre_header._has_data():
                                return True

                            if self.ipv4_header is not None and self.ipv4_header._has_data():
                                return True

                            if self.ipv6_header is not None and self.ipv6_header._has_data():
                                return True

                            if self.mpls_header is not None and self.mpls_header._has_data():
                                return True

                            if self.nvgre_header is not None and self.nvgre_header._has_data():
                                return True

                            if self.vxlan_header is not None and self.vxlan_header._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelEncap']['meta_info']


                    class TunnelDecap(object):
                        """
                        This is to specify decapsulating a tunnel header.
                        
                        .. attribute:: ipv4_decap
                        
                        	IPv4 decap
                        	**type**\:   :py:class:`Ipv4Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap>`
                        
                        .. attribute:: ipv6_decap
                        
                        	IPv6 decap
                        	**type**\:   :py:class:`Ipv6Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap>`
                        
                        .. attribute:: label_pop
                        
                        	MPLS decap
                        	**type**\:   :py:class:`LabelPop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_decap = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap()
                            self.ipv4_decap.parent = self
                            self.ipv6_decap = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap()
                            self.ipv6_decap.parent = self
                            self.label_pop = RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop()
                            self.label_pop.parent = self


                        class Ipv4Decap(object):
                            """
                            IPv4 decap.
                            
                            .. attribute:: ipv4_decap
                            
                            	IPv4 decap operations
                            	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The ttl actions\: no\-action or copy to inner header
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_decap = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv4-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_decap is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap']['meta_info']


                        class Ipv6Decap(object):
                            """
                            IPv6 decap.
                            
                            .. attribute:: hop_limit_action
                            
                            	The hop limit actions\: no\-action or copy to inner header
                            	**type**\:   :py:class:`HopLimitActionIdentity <ydk.models.ietf.ietf_i2rs_rib.HopLimitActionIdentity>`
                            
                            .. attribute:: ipv6_decap
                            
                            	IPv6 decap operations
                            	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.hop_limit_action = None
                                self.ipv6_decap = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv6-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.hop_limit_action is not None:
                                    return True

                                if self.ipv6_decap is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap']['meta_info']


                        class LabelPop(object):
                            """
                            MPLS decap.
                            
                            .. attribute:: label_pop
                            
                            	Pop a label from the label stack
                            	**type**\:   :py:class:`MplsLabelActionIdentity <ydk.models.ietf.ietf_i2rs_rib.MplsLabelActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The label ttl action
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label_pop = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:label-pop'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label_pop is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop']['meta_info']

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_decap is not None and self.ipv4_decap._has_data():
                                return True

                            if self.ipv6_decap is not None and self.ipv6_decap._has_data():
                                return True

                            if self.label_pop is not None and self.label_pop._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.TunnelDecap']['meta_info']


                    class LogicalTunnel(object):
                        """
                        This can be a MPLS LSP or a GRE tunnel (or others
                        as defined in this document), that is represented
                        by a unique identifier (e.g. name).
                        
                        .. attribute:: tunnel_name
                        
                        	A tunnel name that points to a logical tunnel
                        	**type**\:  str
                        
                        	**mandatory**\: True
                        
                        .. attribute:: tunnel_type
                        
                        	A tunnel type
                        	**type**\:   :py:class:`TunnelTypeIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelTypeIdentity>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.tunnel_name = None
                            self.tunnel_type = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:logical-tunnel'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.tunnel_name is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase.LogicalTunnel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.egress_interface_ipv4_address is not None and self.egress_interface_ipv4_address._has_data():
                            return True

                        if self.egress_interface_ipv6_address is not None and self.egress_interface_ipv6_address._has_data():
                            return True

                        if self.egress_interface_mac_address is not None and self.egress_interface_mac_address._has_data():
                            return True

                        if self.ipv4_address is not None:
                            return True

                        if self.ipv6_address is not None:
                            return True

                        if self.logical_tunnel is not None and self.logical_tunnel._has_data():
                            return True

                        if self.nexthop_ref is not None:
                            return True

                        if self.outgoing_interface is not None:
                            return True

                        if self.rib_name is not None:
                            return True

                        if self.special is not None:
                            return True

                        if self.tunnel_decap is not None and self.tunnel_decap._has_data():
                            return True

                        if self.tunnel_encap is not None and self.tunnel_encap._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopBase']['meta_info']


                class NexthopChain(object):
                    """
                    A chain nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthops
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopChain.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthops.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-chain/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopChain.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-chain'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopChain']['meta_info']


                class NexthopReplicates(object):
                    """
                    A replicates nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthops
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopReplicates.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthops.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-replicates/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopReplicates.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-replicates'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopReplicates']['meta_info']


                class NexthopProtection(object):
                    """
                    A protection nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthop
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopProtection.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthop.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: nexthop_preference
                        
                        	Nexthop\-preference is used for protection schemes. It is an integer value between 1 and 99.  Lower values are more preferred. To download a primary/standby/tertiary group to the FIB, the nexthops that are resolved and are most preferred are selected
                        	**type**\:  int
                        
                        	**range:** 1..99
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None
                            self.nexthop_preference = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-protection/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            if self.nexthop_preference is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopProtection.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-protection'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopProtection']['meta_info']


                class NexthopLb(object):
                    """
                    A load balance nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthop
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopLb.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthop.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: nexthop_lb_weight
                        
                        	The weight of a nexthop of the load balance nexthops
                        	**type**\:  int
                        
                        	**range:** 1..99
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None
                            self.nexthop_lb_weight = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-lb/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            if self.nexthop_lb_weight is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopLb.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-lb'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop.NexthopLb']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-nexthop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_base is not None and self.nexthop_base._has_data():
                        return True

                    if self.nexthop_chain is not None and self.nexthop_chain._has_data():
                        return True

                    if self.nexthop_id is not None:
                        return True

                    if self.nexthop_lb is not None and self.nexthop_lb._has_data():
                        return True

                    if self.nexthop_protection is not None and self.nexthop_protection._has_data():
                        return True

                    if self.nexthop_replicates is not None and self.nexthop_replicates._has_data():
                        return True

                    if self.sharing_flag is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedNexthop']['meta_info']


            class UpdatedRouteAttr(object):
                """
                The route attributes used for updating.
                
                .. attribute:: address_family_route_attributes
                
                	Address family related route attributes
                	**type**\:   :py:class:`AddressFamilyRouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametors.UpdatedRouteAttr.AddressFamilyRouteAttributes>`
                
                .. attribute:: local_only
                
                	Indicate whether the attributes is local only
                	**type**\:  bool
                
                	**mandatory**\: True
                
                .. attribute:: route_preference
                
                	ROUTE\_PREFERENCE\: This is a numerical value that allows for comparing routes from different protocols.  Static configuration is also considered a protocol for the purpose of this field.  It is also known as administrative\-distance. The lower the value, the higher the preference
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.address_family_route_attributes = RouteUpdateRpc.Input.UpdateParametors.UpdatedRouteAttr.AddressFamilyRouteAttributes()
                    self.address_family_route_attributes.parent = self
                    self.local_only = None
                    self.route_preference = None


                class AddressFamilyRouteAttributes(object):
                    """
                    Address family related route attributes.
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-route-attr/ietf-i2rs-rib:address-family-route-attributes'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedRouteAttr.AddressFamilyRouteAttributes']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-route-attr'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.address_family_route_attributes is not None and self.address_family_route_attributes._has_data():
                        return True

                    if self.local_only is not None:
                        return True

                    if self.route_preference is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedRouteAttr']['meta_info']


            class UpdatedRouteVendorAttr(object):
                """
                The vendor route attributes used for updating.
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors/ietf-i2rs-rib:updated-route-vendor-attr'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors.UpdatedRouteVendorAttr']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parametors'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.updated_nexthop is not None and self.updated_nexthop._has_data():
                    return True

                if self.updated_route_attr is not None and self.updated_route_attr._has_data():
                    return True

                if self.updated_route_vendor_attr is not None and self.updated_route_vendor_attr._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametors']['meta_info']


        class InputRouteVendorAttributes(object):
            """
            The vendor route attributes are used for matching.
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-route-vendor-attributes'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteUpdateRpc.Input.InputRouteVendorAttributes']['meta_info']


        class UpdateParametersVendor(object):
            """
            Update options\:
            1. update the nexthop
            2. update the route attributes
            3. update the route\-vendor\-attributes.
            
            .. attribute:: updated_nexthop
            
            	The nexthop used for updating
            	**type**\:   :py:class:`UpdatedNexthop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop>`
            
            .. attribute:: updated_route_attr
            
            	The route attributes used for updating
            	**type**\:   :py:class:`UpdatedRouteAttr <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedRouteAttr>`
            
            .. attribute:: updated_route_vendor_attr
            
            	The vendor route attributes used for updating
            	**type**\:   :py:class:`UpdatedRouteVendorAttr <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedRouteVendorAttr>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.updated_nexthop = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop()
                self.updated_nexthop.parent = self
                self.updated_route_attr = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedRouteAttr()
                self.updated_route_attr.parent = self
                self.updated_route_vendor_attr = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedRouteVendorAttr()
                self.updated_route_vendor_attr.parent = self


            class UpdatedNexthop(object):
                """
                The nexthop used for updating.
                
                .. attribute:: nexthop_base
                
                	The base nexthop
                	**type**\:   :py:class:`NexthopBase <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase>`
                
                .. attribute:: nexthop_chain
                
                	A chain nexthop
                	**type**\:   :py:class:`NexthopChain <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopChain>`
                
                .. attribute:: nexthop_id
                
                	An identifier that refers to a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop_lb
                
                	A load balance nexthop
                	**type**\:   :py:class:`NexthopLb <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopLb>`
                
                .. attribute:: nexthop_protection
                
                	A protection nexthop
                	**type**\:   :py:class:`NexthopProtection <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopProtection>`
                
                .. attribute:: nexthop_replicates
                
                	A replicates nexthop
                	**type**\:   :py:class:`NexthopReplicates <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopReplicates>`
                
                .. attribute:: sharing_flag
                
                	To indicate whether a nexthop is sharable or non\-sharable. true \- sharable, means the nexthop can be shared        with other routes false \- non\-sharable, means the nexthop can not        be shared with other routes
                	**type**\:  bool
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_base = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase()
                    self.nexthop_base.parent = self
                    self.nexthop_chain = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopChain()
                    self.nexthop_chain.parent = self
                    self.nexthop_id = None
                    self.nexthop_lb = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopLb()
                    self.nexthop_lb.parent = self
                    self.nexthop_protection = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopProtection()
                    self.nexthop_protection.parent = self
                    self.nexthop_replicates = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopReplicates()
                    self.nexthop_replicates.parent = self
                    self.sharing_flag = None


                class NexthopBase(object):
                    """
                    The base nexthop.
                    
                    .. attribute:: egress_interface_ipv4_address
                    
                    	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                    	**type**\:   :py:class:`EgressInterfaceIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address>`
                    
                    .. attribute:: egress_interface_ipv6_address
                    
                    	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                    	**type**\:   :py:class:`EgressInterfaceIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address>`
                    
                    .. attribute:: egress_interface_mac_address
                    
                    	The egress interface must be an Ethernet interface. Address resolution is not required for this nexthop
                    	**type**\:   :py:class:`EgressInterfaceMacAddress <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress>`
                    
                    .. attribute:: ipv4_address
                    
                    	The nexthop is an IPv4 address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ipv6_address
                    
                    	The nexthop is an IPv6 address
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: logical_tunnel
                    
                    	This can be a MPLS LSP or a GRE tunnel (or others as defined in this document), that is represented by a unique identifier (e.g. name)
                    	**type**\:   :py:class:`LogicalTunnel <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.LogicalTunnel>`
                    
                    .. attribute:: nexthop_ref
                    
                    	A nexthop reference that points to a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**refers to**\:  :py:class:`nexthop_id <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: outgoing_interface
                    
                    	The nexthop is an outgoing interface
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: rib_name
                    
                    	A nexthop pointing to a RIB indicates that the route lookup needs to continue in the specified rib. This is a way to perform chained lookups
                    	**type**\:  str
                    
                    .. attribute:: special
                    
                    	A special nexthop
                    	**type**\:   :py:class:`SpecialNexthopIdentity <ydk.models.ietf.ietf_i2rs_rib.SpecialNexthopIdentity>`
                    
                    .. attribute:: tunnel_decap
                    
                    	This is to specify decapsulating a tunnel header
                    	**type**\:   :py:class:`TunnelDecap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap>`
                    
                    .. attribute:: tunnel_encap
                    
                    	This can be an encap representing an IP tunnel or MPLS tunnel or others as defined in info model. An optional egress interface can be chained to the tunnel encap to indicate which interface to send the packet out on.  The egress interface is useful when the network device contains Ethernet interfaces and one needs to perform address resolution for the IP packet
                    	**type**\:   :py:class:`TunnelEncap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.egress_interface_ipv4_address = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address()
                        self.egress_interface_ipv4_address.parent = self
                        self.egress_interface_ipv6_address = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address()
                        self.egress_interface_ipv6_address.parent = self
                        self.egress_interface_mac_address = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress()
                        self.egress_interface_mac_address.parent = self
                        self.ipv4_address = None
                        self.ipv6_address = None
                        self.logical_tunnel = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.LogicalTunnel()
                        self.logical_tunnel.parent = self
                        self.nexthop_ref = None
                        self.outgoing_interface = None
                        self.rib_name = None
                        self.special = None
                        self.tunnel_decap = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap()
                        self.tunnel_decap.parent = self
                        self.tunnel_encap = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap()
                        self.tunnel_encap.parent = self


                    class EgressInterfaceIpv4Address(object):
                        """
                        The nexthop is an egress\-interface and an IP
                        address. This can be used in cases e.g. where
                        the IP address is a link\-local address.
                        
                        .. attribute:: ipv4_address
                        
                        	The nexthop points to an interface with an IPv4 address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv4-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address']['meta_info']


                    class EgressInterfaceIpv6Address(object):
                        """
                        The nexthop is an egress\-interface and an IP
                        address. This can be used in cases e.g. where
                        the IP address is a link\-local address.
                        
                        .. attribute:: ipv6_address
                        
                        	The nexthop points to an interface with an IPv6 address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv6_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv6-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv6_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address']['meta_info']


                    class EgressInterfaceMacAddress(object):
                        """
                        The egress interface must be an Ethernet
                        interface. Address resolution is not required
                        for this nexthop.
                        
                        .. attribute:: ieee_mac_address
                        
                        	The nexthop points to an interface with a specific mac\-address
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ieee_mac_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-mac-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ieee_mac_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress']['meta_info']


                    class TunnelEncap(object):
                        """
                        This can be an encap representing an IP tunnel or
                        MPLS tunnel or others as defined in info model.
                        An optional egress interface can be chained to the
                        tunnel encap to indicate which interface to send
                        the packet out on.  The egress interface is useful
                        when the network device contains Ethernet interfaces
                        and one needs to perform address resolution for the
                        IP packet.
                        
                        .. attribute:: gre_header
                        
                        	GRE header
                        	**type**\:   :py:class:`GreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader>`
                        
                        .. attribute:: ipv4_header
                        
                        	IPv4 header
                        	**type**\:   :py:class:`Ipv4Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header>`
                        
                        .. attribute:: ipv6_header
                        
                        	IPv6 header
                        	**type**\:   :py:class:`Ipv6Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header>`
                        
                        .. attribute:: mpls_header
                        
                        	MPLS header
                        	**type**\:   :py:class:`MplsHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader>`
                        
                        .. attribute:: nvgre_header
                        
                        	NvGRE header
                        	**type**\:   :py:class:`NvgreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader>`
                        
                        .. attribute:: vxlan_header
                        
                        	VxLAN header
                        	**type**\:   :py:class:`VxlanHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.gre_header = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader()
                            self.gre_header.parent = self
                            self.ipv4_header = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header()
                            self.ipv4_header.parent = self
                            self.ipv6_header = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header()
                            self.ipv6_header.parent = self
                            self.mpls_header = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader()
                            self.mpls_header.parent = self
                            self.nvgre_header = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader()
                            self.nvgre_header.parent = self
                            self.vxlan_header = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader()
                            self.vxlan_header.parent = self


                        class Ipv4Header(object):
                            """
                            IPv4 header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dscp = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.ttl = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv4-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header']['meta_info']


                        class Ipv6Header(object):
                            """
                            IPv6 header.
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv6_address = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.src_ipv6_address = None
                                self.traffic_class = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv6-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header']['meta_info']


                        class MplsHeader(object):
                            """
                            MPLS header.
                            
                            .. attribute:: label_operations
                            
                            	Label operations
                            	**type**\: list of    :py:class:`LabelOperations <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label_operations = YList()
                                self.label_operations.parent = self
                                self.label_operations.name = 'label_operations'


                            class LabelOperations(object):
                                """
                                Label operations.
                                
                                .. attribute:: label_oper_id  <key>
                                
                                	An optional identifier that points to a label operation
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: label_push
                                
                                	Label push operation
                                	**type**\:   :py:class:`LabelPush <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush>`
                                
                                .. attribute:: label_swap
                                
                                	Label swap operation
                                	**type**\:   :py:class:`LabelSwap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.label_oper_id = None
                                    self.label_push = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush()
                                    self.label_push.parent = self
                                    self.label_swap = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap()
                                    self.label_swap.parent = self


                                class LabelPush(object):
                                    """
                                    Label push operation.
                                    
                                    .. attribute:: label
                                    
                                    	The label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: s_bit
                                    
                                    	The s\-bit of the label to be pushed. 
                                    	**type**\:  bool
                                    
                                    .. attribute:: tc_value
                                    
                                    	The traffic class value of the label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: ttl_value
                                    
                                    	The TTL value of the label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.label = None
                                        self.s_bit = None
                                        self.tc_value = None
                                        self.ttl_value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-push'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        if self.parent is None:
                                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                        return self.parent.is_config()

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.label is not None:
                                            return True

                                        if self.s_bit is not None:
                                            return True

                                        if self.tc_value is not None:
                                            return True

                                        if self.ttl_value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush']['meta_info']


                                class LabelSwap(object):
                                    """
                                    Label swap operation.
                                    
                                    .. attribute:: in_label
                                    
                                    	The label to be swapped
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: out_label
                                    
                                    	The out MPLS label
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: ttl_action
                                    
                                    	The label ttl actions\: \- No\-action, or \- Copy to inner label,or \- Decrease (the in label) by 1 and   copy to the out label
                                    	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.in_label = None
                                        self.out_label = None
                                        self.ttl_action = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-swap'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        if self.parent is None:
                                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                        return self.parent.is_config()

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.in_label is not None:
                                            return True

                                        if self.out_label is not None:
                                            return True

                                        if self.ttl_action is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.label_oper_id is None:
                                        raise YPYModelError('Key property label_oper_id is None')

                                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header/ietf-i2rs-rib:label-operations[ietf-i2rs-rib:label-oper-id = ' + str(self.label_oper_id) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.label_oper_id is not None:
                                        return True

                                    if self.label_push is not None and self.label_push._has_data():
                                        return True

                                    if self.label_swap is not None and self.label_swap._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations']['meta_info']

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label_operations is not None:
                                    for child_ref in self.label_operations:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader']['meta_info']


                        class GreHeader(object):
                            """
                            GRE header.
                            
                            .. attribute:: ipv4_dest
                            
                            	The destination IP address of the GRE header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ipv6_dest
                            
                            	The destination IP address of the GRE header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: key
                            
                            	The GRE key of the GRE header
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: protocol_type
                            
                            	The protocol type of the GRE header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_dest = None
                                self.ipv6_dest = None
                                self.key = None
                                self.protocol_type = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:gre-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_dest is not None:
                                    return True

                                if self.ipv6_dest is not None:
                                    return True

                                if self.key is not None:
                                    return True

                                if self.protocol_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader']['meta_info']


                        class NvgreHeader(object):
                            """
                            NvGRE header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_id
                            
                            	The flow identifier of the NvGRE header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: virtual_subnet_id
                            
                            	The subnet identifier of the NvGRE header
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dest_ipv6_address = None
                                self.dscp = None
                                self.flow_id = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.src_ipv6_address = None
                                self.traffic_class = None
                                self.ttl = None
                                self.virtual_subnet_id = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:nvgre-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.flow_id is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                if self.virtual_subnet_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader']['meta_info']


                        class VxlanHeader(object):
                            """
                            VxLAN header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: vxlan_identifier
                            
                            	The VxLAN identifier of the VxLAN header
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dest_ipv6_address = None
                                self.dscp = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.src_ipv6_address = None
                                self.traffic_class = None
                                self.ttl = None
                                self.vxlan_identifier = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:vxlan-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                if self.vxlan_identifier is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader']['meta_info']

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.gre_header is not None and self.gre_header._has_data():
                                return True

                            if self.ipv4_header is not None and self.ipv4_header._has_data():
                                return True

                            if self.ipv6_header is not None and self.ipv6_header._has_data():
                                return True

                            if self.mpls_header is not None and self.mpls_header._has_data():
                                return True

                            if self.nvgre_header is not None and self.nvgre_header._has_data():
                                return True

                            if self.vxlan_header is not None and self.vxlan_header._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelEncap']['meta_info']


                    class TunnelDecap(object):
                        """
                        This is to specify decapsulating a tunnel header.
                        
                        .. attribute:: ipv4_decap
                        
                        	IPv4 decap
                        	**type**\:   :py:class:`Ipv4Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap>`
                        
                        .. attribute:: ipv6_decap
                        
                        	IPv6 decap
                        	**type**\:   :py:class:`Ipv6Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap>`
                        
                        .. attribute:: label_pop
                        
                        	MPLS decap
                        	**type**\:   :py:class:`LabelPop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_decap = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap()
                            self.ipv4_decap.parent = self
                            self.ipv6_decap = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap()
                            self.ipv6_decap.parent = self
                            self.label_pop = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop()
                            self.label_pop.parent = self


                        class Ipv4Decap(object):
                            """
                            IPv4 decap.
                            
                            .. attribute:: ipv4_decap
                            
                            	IPv4 decap operations
                            	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The ttl actions\: no\-action or copy to inner header
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_decap = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv4-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_decap is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap']['meta_info']


                        class Ipv6Decap(object):
                            """
                            IPv6 decap.
                            
                            .. attribute:: hop_limit_action
                            
                            	The hop limit actions\: no\-action or copy to inner header
                            	**type**\:   :py:class:`HopLimitActionIdentity <ydk.models.ietf.ietf_i2rs_rib.HopLimitActionIdentity>`
                            
                            .. attribute:: ipv6_decap
                            
                            	IPv6 decap operations
                            	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.hop_limit_action = None
                                self.ipv6_decap = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv6-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.hop_limit_action is not None:
                                    return True

                                if self.ipv6_decap is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap']['meta_info']


                        class LabelPop(object):
                            """
                            MPLS decap.
                            
                            .. attribute:: label_pop
                            
                            	Pop a label from the label stack
                            	**type**\:   :py:class:`MplsLabelActionIdentity <ydk.models.ietf.ietf_i2rs_rib.MplsLabelActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The label ttl action
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label_pop = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:label-pop'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label_pop is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop']['meta_info']

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_decap is not None and self.ipv4_decap._has_data():
                                return True

                            if self.ipv6_decap is not None and self.ipv6_decap._has_data():
                                return True

                            if self.label_pop is not None and self.label_pop._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.TunnelDecap']['meta_info']


                    class LogicalTunnel(object):
                        """
                        This can be a MPLS LSP or a GRE tunnel (or others
                        as defined in this document), that is represented
                        by a unique identifier (e.g. name).
                        
                        .. attribute:: tunnel_name
                        
                        	A tunnel name that points to a logical tunnel
                        	**type**\:  str
                        
                        	**mandatory**\: True
                        
                        .. attribute:: tunnel_type
                        
                        	A tunnel type
                        	**type**\:   :py:class:`TunnelTypeIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelTypeIdentity>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.tunnel_name = None
                            self.tunnel_type = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:logical-tunnel'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.tunnel_name is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase.LogicalTunnel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.egress_interface_ipv4_address is not None and self.egress_interface_ipv4_address._has_data():
                            return True

                        if self.egress_interface_ipv6_address is not None and self.egress_interface_ipv6_address._has_data():
                            return True

                        if self.egress_interface_mac_address is not None and self.egress_interface_mac_address._has_data():
                            return True

                        if self.ipv4_address is not None:
                            return True

                        if self.ipv6_address is not None:
                            return True

                        if self.logical_tunnel is not None and self.logical_tunnel._has_data():
                            return True

                        if self.nexthop_ref is not None:
                            return True

                        if self.outgoing_interface is not None:
                            return True

                        if self.rib_name is not None:
                            return True

                        if self.special is not None:
                            return True

                        if self.tunnel_decap is not None and self.tunnel_decap._has_data():
                            return True

                        if self.tunnel_encap is not None and self.tunnel_encap._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopBase']['meta_info']


                class NexthopChain(object):
                    """
                    A chain nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthops
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopChain.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthops.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-chain/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopChain.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-chain'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopChain']['meta_info']


                class NexthopReplicates(object):
                    """
                    A replicates nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthops
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopReplicates.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthops.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-replicates/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopReplicates.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-replicates'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopReplicates']['meta_info']


                class NexthopProtection(object):
                    """
                    A protection nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthop
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopProtection.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthop.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: nexthop_preference
                        
                        	Nexthop\-preference is used for protection schemes. It is an integer value between 1 and 99.  Lower values are more preferred. To download a primary/standby/tertiary group to the FIB, the nexthops that are resolved and are most preferred are selected
                        	**type**\:  int
                        
                        	**range:** 1..99
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None
                            self.nexthop_preference = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-protection/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            if self.nexthop_preference is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopProtection.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-protection'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopProtection']['meta_info']


                class NexthopLb(object):
                    """
                    A load balance nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthop
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopLb.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthop.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: nexthop_lb_weight
                        
                        	The weight of a nexthop of the load balance nexthops
                        	**type**\:  int
                        
                        	**range:** 1..99
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None
                            self.nexthop_lb_weight = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-lb/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            if self.nexthop_lb_weight is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopLb.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-lb'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop.NexthopLb']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-nexthop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_base is not None and self.nexthop_base._has_data():
                        return True

                    if self.nexthop_chain is not None and self.nexthop_chain._has_data():
                        return True

                    if self.nexthop_id is not None:
                        return True

                    if self.nexthop_lb is not None and self.nexthop_lb._has_data():
                        return True

                    if self.nexthop_protection is not None and self.nexthop_protection._has_data():
                        return True

                    if self.nexthop_replicates is not None and self.nexthop_replicates._has_data():
                        return True

                    if self.sharing_flag is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedNexthop']['meta_info']


            class UpdatedRouteAttr(object):
                """
                The route attributes used for updating.
                
                .. attribute:: address_family_route_attributes
                
                	Address family related route attributes
                	**type**\:   :py:class:`AddressFamilyRouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedRouteAttr.AddressFamilyRouteAttributes>`
                
                .. attribute:: local_only
                
                	Indicate whether the attributes is local only
                	**type**\:  bool
                
                	**mandatory**\: True
                
                .. attribute:: route_preference
                
                	ROUTE\_PREFERENCE\: This is a numerical value that allows for comparing routes from different protocols.  Static configuration is also considered a protocol for the purpose of this field.  It is also known as administrative\-distance. The lower the value, the higher the preference
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.address_family_route_attributes = RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedRouteAttr.AddressFamilyRouteAttributes()
                    self.address_family_route_attributes.parent = self
                    self.local_only = None
                    self.route_preference = None


                class AddressFamilyRouteAttributes(object):
                    """
                    Address family related route attributes.
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-route-attr/ietf-i2rs-rib:address-family-route-attributes'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedRouteAttr.AddressFamilyRouteAttributes']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-route-attr'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.address_family_route_attributes is not None and self.address_family_route_attributes._has_data():
                        return True

                    if self.local_only is not None:
                        return True

                    if self.route_preference is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedRouteAttr']['meta_info']


            class UpdatedRouteVendorAttr(object):
                """
                The vendor route attributes used for updating.
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor/ietf-i2rs-rib:updated-route-vendor-attr'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor.UpdatedRouteVendorAttr']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-vendor'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.updated_nexthop is not None and self.updated_nexthop._has_data():
                    return True

                if self.updated_route_attr is not None and self.updated_route_attr._has_data():
                    return True

                if self.updated_route_vendor_attr is not None and self.updated_route_vendor_attr._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersVendor']['meta_info']


        class InputNexthop(object):
            """
            The nexthop used for matching.
            
            .. attribute:: nexthop_base
            
            	The base nexthop
            	**type**\:   :py:class:`NexthopBase <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase>`
            
            .. attribute:: nexthop_chain
            
            	A chain nexthop
            	**type**\:   :py:class:`NexthopChain <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopChain>`
            
            .. attribute:: nexthop_id
            
            	An identifier that refers to a nexthop
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: nexthop_lb
            
            	A load balance nexthop
            	**type**\:   :py:class:`NexthopLb <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopLb>`
            
            .. attribute:: nexthop_protection
            
            	A protection nexthop
            	**type**\:   :py:class:`NexthopProtection <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopProtection>`
            
            .. attribute:: nexthop_replicates
            
            	A replicates nexthop
            	**type**\:   :py:class:`NexthopReplicates <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopReplicates>`
            
            .. attribute:: sharing_flag
            
            	To indicate whether a nexthop is sharable or non\-sharable. true \- sharable, means the nexthop can be shared        with other routes false \- non\-sharable, means the nexthop can not        be shared with other routes
            	**type**\:  bool
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_base = RouteUpdateRpc.Input.InputNexthop.NexthopBase()
                self.nexthop_base.parent = self
                self.nexthop_chain = RouteUpdateRpc.Input.InputNexthop.NexthopChain()
                self.nexthop_chain.parent = self
                self.nexthop_id = None
                self.nexthop_lb = RouteUpdateRpc.Input.InputNexthop.NexthopLb()
                self.nexthop_lb.parent = self
                self.nexthop_protection = RouteUpdateRpc.Input.InputNexthop.NexthopProtection()
                self.nexthop_protection.parent = self
                self.nexthop_replicates = RouteUpdateRpc.Input.InputNexthop.NexthopReplicates()
                self.nexthop_replicates.parent = self
                self.sharing_flag = None


            class NexthopBase(object):
                """
                The base nexthop.
                
                .. attribute:: egress_interface_ipv4_address
                
                	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                	**type**\:   :py:class:`EgressInterfaceIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.EgressInterfaceIpv4Address>`
                
                .. attribute:: egress_interface_ipv6_address
                
                	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                	**type**\:   :py:class:`EgressInterfaceIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.EgressInterfaceIpv6Address>`
                
                .. attribute:: egress_interface_mac_address
                
                	The egress interface must be an Ethernet interface. Address resolution is not required for this nexthop
                	**type**\:   :py:class:`EgressInterfaceMacAddress <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.EgressInterfaceMacAddress>`
                
                .. attribute:: ipv4_address
                
                	The nexthop is an IPv4 address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**mandatory**\: True
                
                .. attribute:: ipv6_address
                
                	The nexthop is an IPv6 address
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                	**mandatory**\: True
                
                .. attribute:: logical_tunnel
                
                	This can be a MPLS LSP or a GRE tunnel (or others as defined in this document), that is represented by a unique identifier (e.g. name)
                	**type**\:   :py:class:`LogicalTunnel <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.LogicalTunnel>`
                
                .. attribute:: nexthop_ref
                
                	A nexthop reference that points to a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**refers to**\:  :py:class:`nexthop_id <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
                
                	**mandatory**\: True
                
                .. attribute:: outgoing_interface
                
                	The nexthop is an outgoing interface
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                
                	**mandatory**\: True
                
                .. attribute:: rib_name
                
                	A nexthop pointing to a RIB indicates that the route lookup needs to continue in the specified rib. This is a way to perform chained lookups
                	**type**\:  str
                
                .. attribute:: special
                
                	A special nexthop
                	**type**\:   :py:class:`SpecialNexthopIdentity <ydk.models.ietf.ietf_i2rs_rib.SpecialNexthopIdentity>`
                
                .. attribute:: tunnel_decap
                
                	This is to specify decapsulating a tunnel header
                	**type**\:   :py:class:`TunnelDecap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap>`
                
                .. attribute:: tunnel_encap
                
                	This can be an encap representing an IP tunnel or MPLS tunnel or others as defined in info model. An optional egress interface can be chained to the tunnel encap to indicate which interface to send the packet out on.  The egress interface is useful when the network device contains Ethernet interfaces and one needs to perform address resolution for the IP packet
                	**type**\:   :py:class:`TunnelEncap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.egress_interface_ipv4_address = RouteUpdateRpc.Input.InputNexthop.NexthopBase.EgressInterfaceIpv4Address()
                    self.egress_interface_ipv4_address.parent = self
                    self.egress_interface_ipv6_address = RouteUpdateRpc.Input.InputNexthop.NexthopBase.EgressInterfaceIpv6Address()
                    self.egress_interface_ipv6_address.parent = self
                    self.egress_interface_mac_address = RouteUpdateRpc.Input.InputNexthop.NexthopBase.EgressInterfaceMacAddress()
                    self.egress_interface_mac_address.parent = self
                    self.ipv4_address = None
                    self.ipv6_address = None
                    self.logical_tunnel = RouteUpdateRpc.Input.InputNexthop.NexthopBase.LogicalTunnel()
                    self.logical_tunnel.parent = self
                    self.nexthop_ref = None
                    self.outgoing_interface = None
                    self.rib_name = None
                    self.special = None
                    self.tunnel_decap = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap()
                    self.tunnel_decap.parent = self
                    self.tunnel_encap = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap()
                    self.tunnel_encap.parent = self


                class EgressInterfaceIpv4Address(object):
                    """
                    The nexthop is an egress\-interface and an IP
                    address. This can be used in cases e.g. where
                    the IP address is a link\-local address.
                    
                    .. attribute:: ipv4_address
                    
                    	The nexthop points to an interface with an IPv4 address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: outgoing_interface
                    
                    	Name of the outgoing interface
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.ipv4_address = None
                        self.outgoing_interface = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv4-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4_address is not None:
                            return True

                        if self.outgoing_interface is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.EgressInterfaceIpv4Address']['meta_info']


                class EgressInterfaceIpv6Address(object):
                    """
                    The nexthop is an egress\-interface and an IP
                    address. This can be used in cases e.g. where
                    the IP address is a link\-local address.
                    
                    .. attribute:: ipv6_address
                    
                    	The nexthop points to an interface with an IPv6 address
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: outgoing_interface
                    
                    	Name of the outgoing interface
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.ipv6_address = None
                        self.outgoing_interface = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv6-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv6_address is not None:
                            return True

                        if self.outgoing_interface is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.EgressInterfaceIpv6Address']['meta_info']


                class EgressInterfaceMacAddress(object):
                    """
                    The egress interface must be an Ethernet
                    interface. Address resolution is not required
                    for this nexthop.
                    
                    .. attribute:: ieee_mac_address
                    
                    	The nexthop points to an interface with a specific mac\-address
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    .. attribute:: outgoing_interface
                    
                    	Name of the outgoing interface
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.ieee_mac_address = None
                        self.outgoing_interface = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-mac-address'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ieee_mac_address is not None:
                            return True

                        if self.outgoing_interface is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.EgressInterfaceMacAddress']['meta_info']


                class TunnelEncap(object):
                    """
                    This can be an encap representing an IP tunnel or
                    MPLS tunnel or others as defined in info model.
                    An optional egress interface can be chained to the
                    tunnel encap to indicate which interface to send
                    the packet out on.  The egress interface is useful
                    when the network device contains Ethernet interfaces
                    and one needs to perform address resolution for the
                    IP packet.
                    
                    .. attribute:: gre_header
                    
                    	GRE header
                    	**type**\:   :py:class:`GreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.GreHeader>`
                    
                    .. attribute:: ipv4_header
                    
                    	IPv4 header
                    	**type**\:   :py:class:`Ipv4Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.Ipv4Header>`
                    
                    .. attribute:: ipv6_header
                    
                    	IPv6 header
                    	**type**\:   :py:class:`Ipv6Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.Ipv6Header>`
                    
                    .. attribute:: mpls_header
                    
                    	MPLS header
                    	**type**\:   :py:class:`MplsHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader>`
                    
                    .. attribute:: nvgre_header
                    
                    	NvGRE header
                    	**type**\:   :py:class:`NvgreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.NvgreHeader>`
                    
                    .. attribute:: vxlan_header
                    
                    	VxLAN header
                    	**type**\:   :py:class:`VxlanHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.VxlanHeader>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.gre_header = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.GreHeader()
                        self.gre_header.parent = self
                        self.ipv4_header = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.Ipv4Header()
                        self.ipv4_header.parent = self
                        self.ipv6_header = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.Ipv6Header()
                        self.ipv6_header.parent = self
                        self.mpls_header = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader()
                        self.mpls_header.parent = self
                        self.nvgre_header = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.NvgreHeader()
                        self.nvgre_header.parent = self
                        self.vxlan_header = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.VxlanHeader()
                        self.vxlan_header.parent = self


                    class Ipv4Header(object):
                        """
                        IPv4 header.
                        
                        .. attribute:: dest_ipv4_address
                        
                        	The destination IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dscp
                        
                        	The DSCP field of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: protocol
                        
                        	The protocol id of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: src_ipv4_address
                        
                        	The source IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: ttl
                        
                        	The TTL of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv4_address = None
                            self.dscp = None
                            self.protocol = None
                            self.src_ipv4_address = None
                            self.ttl = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv4-header'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv4_address is not None:
                                return True

                            if self.dscp is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            if self.src_ipv4_address is not None:
                                return True

                            if self.ttl is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.Ipv4Header']['meta_info']


                    class Ipv6Header(object):
                        """
                        IPv6 header.
                        
                        .. attribute:: dest_ipv6_address
                        
                        	The destination IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: flow_label
                        
                        	The flow label of the header
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: hop_limit
                        
                        	The hop limit the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: next_header
                        
                        	The next header of the IPv6 header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: src_ipv6_address
                        
                        	The source IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: traffic_class
                        
                        	The traffic class value of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv6_address = None
                            self.flow_label = None
                            self.hop_limit = None
                            self.next_header = None
                            self.src_ipv6_address = None
                            self.traffic_class = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv6-header'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv6_address is not None:
                                return True

                            if self.flow_label is not None:
                                return True

                            if self.hop_limit is not None:
                                return True

                            if self.next_header is not None:
                                return True

                            if self.src_ipv6_address is not None:
                                return True

                            if self.traffic_class is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.Ipv6Header']['meta_info']


                    class MplsHeader(object):
                        """
                        MPLS header.
                        
                        .. attribute:: label_operations
                        
                        	Label operations
                        	**type**\: list of    :py:class:`LabelOperations <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.label_operations = YList()
                            self.label_operations.parent = self
                            self.label_operations.name = 'label_operations'


                        class LabelOperations(object):
                            """
                            Label operations.
                            
                            .. attribute:: label_oper_id  <key>
                            
                            	An optional identifier that points to a label operation
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: label_push
                            
                            	Label push operation
                            	**type**\:   :py:class:`LabelPush <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush>`
                            
                            .. attribute:: label_swap
                            
                            	Label swap operation
                            	**type**\:   :py:class:`LabelSwap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label_oper_id = None
                                self.label_push = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush()
                                self.label_push.parent = self
                                self.label_swap = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap()
                                self.label_swap.parent = self


                            class LabelPush(object):
                                """
                                Label push operation.
                                
                                .. attribute:: label
                                
                                	The label to be pushed
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                .. attribute:: s_bit
                                
                                	The s\-bit of the label to be pushed. 
                                	**type**\:  bool
                                
                                .. attribute:: tc_value
                                
                                	The traffic class value of the label to be pushed
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                .. attribute:: ttl_value
                                
                                	The TTL value of the label to be pushed
                                	**type**\:  int
                                
                                	**range:** 0..255
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.label = None
                                    self.s_bit = None
                                    self.tc_value = None
                                    self.ttl_value = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:label-push'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.label is not None:
                                        return True

                                    if self.s_bit is not None:
                                        return True

                                    if self.tc_value is not None:
                                        return True

                                    if self.ttl_value is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush']['meta_info']


                            class LabelSwap(object):
                                """
                                Label swap operation.
                                
                                .. attribute:: in_label
                                
                                	The label to be swapped
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                .. attribute:: out_label
                                
                                	The out MPLS label
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                	**mandatory**\: True
                                
                                .. attribute:: ttl_action
                                
                                	The label ttl actions\: \- No\-action, or \- Copy to inner label,or \- Decrease (the in label) by 1 and   copy to the out label
                                	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.in_label = None
                                    self.out_label = None
                                    self.ttl_action = None

                                @property
                                def _common_path(self):
                                    if self.parent is None:
                                        raise YPYModelError('parent is not set . Cannot derive path.')

                                    return self.parent._common_path +'/ietf-i2rs-rib:label-swap'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.in_label is not None:
                                        return True

                                    if self.out_label is not None:
                                        return True

                                    if self.ttl_action is not None:
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap']['meta_info']

                            @property
                            def _common_path(self):
                                if self.label_oper_id is None:
                                    raise YPYModelError('Key property label_oper_id is None')

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header/ietf-i2rs-rib:label-operations[ietf-i2rs-rib:label-oper-id = ' + str(self.label_oper_id) + ']'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label_oper_id is not None:
                                    return True

                                if self.label_push is not None and self.label_push._has_data():
                                    return True

                                if self.label_swap is not None and self.label_swap._has_data():
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations']['meta_info']

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.label_operations is not None:
                                for child_ref in self.label_operations:
                                    if child_ref._has_data():
                                        return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.MplsHeader']['meta_info']


                    class GreHeader(object):
                        """
                        GRE header.
                        
                        .. attribute:: ipv4_dest
                        
                        	The destination IP address of the GRE header
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: ipv6_dest
                        
                        	The destination IP address of the GRE header
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: key
                        
                        	The GRE key of the GRE header
                        	**type**\:  int
                        
                        	**range:** 0..18446744073709551615
                        
                        .. attribute:: protocol_type
                        
                        	The protocol type of the GRE header
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_dest = None
                            self.ipv6_dest = None
                            self.key = None
                            self.protocol_type = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:gre-header'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_dest is not None:
                                return True

                            if self.ipv6_dest is not None:
                                return True

                            if self.key is not None:
                                return True

                            if self.protocol_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.GreHeader']['meta_info']


                    class NvgreHeader(object):
                        """
                        NvGRE header.
                        
                        .. attribute:: dest_ipv4_address
                        
                        	The destination IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dest_ipv6_address
                        
                        	The destination IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dscp
                        
                        	The DSCP field of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: flow_id
                        
                        	The flow identifier of the NvGRE header
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: flow_label
                        
                        	The flow label of the header
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: hop_limit
                        
                        	The hop limit the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: next_header
                        
                        	The next header of the IPv6 header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: protocol
                        
                        	The protocol id of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: src_ipv4_address
                        
                        	The source IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: src_ipv6_address
                        
                        	The source IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: traffic_class
                        
                        	The traffic class value of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ttl
                        
                        	The TTL of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: virtual_subnet_id
                        
                        	The subnet identifier of the NvGRE header
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv4_address = None
                            self.dest_ipv6_address = None
                            self.dscp = None
                            self.flow_id = None
                            self.flow_label = None
                            self.hop_limit = None
                            self.next_header = None
                            self.protocol = None
                            self.src_ipv4_address = None
                            self.src_ipv6_address = None
                            self.traffic_class = None
                            self.ttl = None
                            self.virtual_subnet_id = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:nvgre-header'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv4_address is not None:
                                return True

                            if self.dest_ipv6_address is not None:
                                return True

                            if self.dscp is not None:
                                return True

                            if self.flow_id is not None:
                                return True

                            if self.flow_label is not None:
                                return True

                            if self.hop_limit is not None:
                                return True

                            if self.next_header is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            if self.src_ipv4_address is not None:
                                return True

                            if self.src_ipv6_address is not None:
                                return True

                            if self.traffic_class is not None:
                                return True

                            if self.ttl is not None:
                                return True

                            if self.virtual_subnet_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.NvgreHeader']['meta_info']


                    class VxlanHeader(object):
                        """
                        VxLAN header.
                        
                        .. attribute:: dest_ipv4_address
                        
                        	The destination IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dest_ipv6_address
                        
                        	The destination IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: dscp
                        
                        	The DSCP field of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: flow_label
                        
                        	The flow label of the header
                        	**type**\:  int
                        
                        	**range:** 0..65535
                        
                        .. attribute:: hop_limit
                        
                        	The hop limit the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: next_header
                        
                        	The next header of the IPv6 header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: protocol
                        
                        	The protocol id of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        	**mandatory**\: True
                        
                        .. attribute:: src_ipv4_address
                        
                        	The source IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: src_ipv6_address
                        
                        	The source IP address of the header
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: traffic_class
                        
                        	The traffic class value of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: ttl
                        
                        	The TTL of the header
                        	**type**\:  int
                        
                        	**range:** 0..255
                        
                        .. attribute:: vxlan_identifier
                        
                        	The VxLAN identifier of the VxLAN header
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.dest_ipv4_address = None
                            self.dest_ipv6_address = None
                            self.dscp = None
                            self.flow_label = None
                            self.hop_limit = None
                            self.next_header = None
                            self.protocol = None
                            self.src_ipv4_address = None
                            self.src_ipv6_address = None
                            self.traffic_class = None
                            self.ttl = None
                            self.vxlan_identifier = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:vxlan-header'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.dest_ipv4_address is not None:
                                return True

                            if self.dest_ipv6_address is not None:
                                return True

                            if self.dscp is not None:
                                return True

                            if self.flow_label is not None:
                                return True

                            if self.hop_limit is not None:
                                return True

                            if self.next_header is not None:
                                return True

                            if self.protocol is not None:
                                return True

                            if self.src_ipv4_address is not None:
                                return True

                            if self.src_ipv6_address is not None:
                                return True

                            if self.traffic_class is not None:
                                return True

                            if self.ttl is not None:
                                return True

                            if self.vxlan_identifier is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap.VxlanHeader']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.gre_header is not None and self.gre_header._has_data():
                            return True

                        if self.ipv4_header is not None and self.ipv4_header._has_data():
                            return True

                        if self.ipv6_header is not None and self.ipv6_header._has_data():
                            return True

                        if self.mpls_header is not None and self.mpls_header._has_data():
                            return True

                        if self.nvgre_header is not None and self.nvgre_header._has_data():
                            return True

                        if self.vxlan_header is not None and self.vxlan_header._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelEncap']['meta_info']


                class TunnelDecap(object):
                    """
                    This is to specify decapsulating a tunnel header.
                    
                    .. attribute:: ipv4_decap
                    
                    	IPv4 decap
                    	**type**\:   :py:class:`Ipv4Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap.Ipv4Decap>`
                    
                    .. attribute:: ipv6_decap
                    
                    	IPv6 decap
                    	**type**\:   :py:class:`Ipv6Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap.Ipv6Decap>`
                    
                    .. attribute:: label_pop
                    
                    	MPLS decap
                    	**type**\:   :py:class:`LabelPop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap.LabelPop>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.ipv4_decap = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap.Ipv4Decap()
                        self.ipv4_decap.parent = self
                        self.ipv6_decap = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap.Ipv6Decap()
                        self.ipv6_decap.parent = self
                        self.label_pop = RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap.LabelPop()
                        self.label_pop.parent = self


                    class Ipv4Decap(object):
                        """
                        IPv4 decap.
                        
                        .. attribute:: ipv4_decap
                        
                        	IPv4 decap operations
                        	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: ttl_action
                        
                        	The ttl actions\: no\-action or copy to inner header
                        	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_decap = None
                            self.ttl_action = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv4-decap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_decap is not None:
                                return True

                            if self.ttl_action is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap.Ipv4Decap']['meta_info']


                    class Ipv6Decap(object):
                        """
                        IPv6 decap.
                        
                        .. attribute:: hop_limit_action
                        
                        	The hop limit actions\: no\-action or copy to inner header
                        	**type**\:   :py:class:`HopLimitActionIdentity <ydk.models.ietf.ietf_i2rs_rib.HopLimitActionIdentity>`
                        
                        .. attribute:: ipv6_decap
                        
                        	IPv6 decap operations
                        	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.hop_limit_action = None
                            self.ipv6_decap = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv6-decap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.hop_limit_action is not None:
                                return True

                            if self.ipv6_decap is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap.Ipv6Decap']['meta_info']


                    class LabelPop(object):
                        """
                        MPLS decap.
                        
                        .. attribute:: label_pop
                        
                        	Pop a label from the label stack
                        	**type**\:   :py:class:`MplsLabelActionIdentity <ydk.models.ietf.ietf_i2rs_rib.MplsLabelActionIdentity>`
                        
                        	**mandatory**\: True
                        
                        .. attribute:: ttl_action
                        
                        	The label ttl action
                        	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.label_pop = None
                            self.ttl_action = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:label-pop'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.label_pop is not None:
                                return True

                            if self.ttl_action is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap.LabelPop']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4_decap is not None and self.ipv4_decap._has_data():
                            return True

                        if self.ipv6_decap is not None and self.ipv6_decap._has_data():
                            return True

                        if self.label_pop is not None and self.label_pop._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.TunnelDecap']['meta_info']


                class LogicalTunnel(object):
                    """
                    This can be a MPLS LSP or a GRE tunnel (or others
                    as defined in this document), that is represented
                    by a unique identifier (e.g. name).
                    
                    .. attribute:: tunnel_name
                    
                    	A tunnel name that points to a logical tunnel
                    	**type**\:  str
                    
                    	**mandatory**\: True
                    
                    .. attribute:: tunnel_type
                    
                    	A tunnel type
                    	**type**\:   :py:class:`TunnelTypeIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelTypeIdentity>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.tunnel_name = None
                        self.tunnel_type = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:logical-tunnel'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.tunnel_name is not None:
                            return True

                        if self.tunnel_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase.LogicalTunnel']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-base'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.egress_interface_ipv4_address is not None and self.egress_interface_ipv4_address._has_data():
                        return True

                    if self.egress_interface_ipv6_address is not None and self.egress_interface_ipv6_address._has_data():
                        return True

                    if self.egress_interface_mac_address is not None and self.egress_interface_mac_address._has_data():
                        return True

                    if self.ipv4_address is not None:
                        return True

                    if self.ipv6_address is not None:
                        return True

                    if self.logical_tunnel is not None and self.logical_tunnel._has_data():
                        return True

                    if self.nexthop_ref is not None:
                        return True

                    if self.outgoing_interface is not None:
                        return True

                    if self.rib_name is not None:
                        return True

                    if self.special is not None:
                        return True

                    if self.tunnel_decap is not None and self.tunnel_decap._has_data():
                        return True

                    if self.tunnel_encap is not None and self.tunnel_encap._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopBase']['meta_info']


            class NexthopChain(object):
                """
                A chain nexthop.
                
                .. attribute:: nexthop_list
                
                	A list of nexthops
                	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopChain.NexthopList>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_list = YList()
                    self.nexthop_list.parent = self
                    self.nexthop_list.name = 'nexthop_list'


                class NexthopList(object):
                    """
                    A list of nexthops.
                    
                    .. attribute:: nexthop_member_id  <key>
                    
                    	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_member_id = None

                    @property
                    def _common_path(self):
                        if self.nexthop_member_id is None:
                            raise YPYModelError('Key property nexthop_member_id is None')

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-chain/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_member_id is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopChain.NexthopList']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-chain'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_list is not None:
                        for child_ref in self.nexthop_list:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopChain']['meta_info']


            class NexthopReplicates(object):
                """
                A replicates nexthop.
                
                .. attribute:: nexthop_list
                
                	A list of nexthops
                	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopReplicates.NexthopList>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_list = YList()
                    self.nexthop_list.parent = self
                    self.nexthop_list.name = 'nexthop_list'


                class NexthopList(object):
                    """
                    A list of nexthops.
                    
                    .. attribute:: nexthop_member_id  <key>
                    
                    	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_member_id = None

                    @property
                    def _common_path(self):
                        if self.nexthop_member_id is None:
                            raise YPYModelError('Key property nexthop_member_id is None')

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-replicates/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_member_id is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopReplicates.NexthopList']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-replicates'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_list is not None:
                        for child_ref in self.nexthop_list:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopReplicates']['meta_info']


            class NexthopProtection(object):
                """
                A protection nexthop.
                
                .. attribute:: nexthop_list
                
                	A list of nexthop
                	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopProtection.NexthopList>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_list = YList()
                    self.nexthop_list.parent = self
                    self.nexthop_list.name = 'nexthop_list'


                class NexthopList(object):
                    """
                    A list of nexthop.
                    
                    .. attribute:: nexthop_member_id  <key>
                    
                    	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    .. attribute:: nexthop_preference
                    
                    	Nexthop\-preference is used for protection schemes. It is an integer value between 1 and 99.  Lower values are more preferred. To download a primary/standby/tertiary group to the FIB, the nexthops that are resolved and are most preferred are selected
                    	**type**\:  int
                    
                    	**range:** 1..99
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_member_id = None
                        self.nexthop_preference = None

                    @property
                    def _common_path(self):
                        if self.nexthop_member_id is None:
                            raise YPYModelError('Key property nexthop_member_id is None')

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-protection/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_member_id is not None:
                            return True

                        if self.nexthop_preference is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopProtection.NexthopList']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-protection'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_list is not None:
                        for child_ref in self.nexthop_list:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopProtection']['meta_info']


            class NexthopLb(object):
                """
                A load balance nexthop.
                
                .. attribute:: nexthop_list
                
                	A list of nexthop
                	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.InputNexthop.NexthopLb.NexthopList>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_list = YList()
                    self.nexthop_list.parent = self
                    self.nexthop_list.name = 'nexthop_list'


                class NexthopList(object):
                    """
                    A list of nexthop.
                    
                    .. attribute:: nexthop_member_id  <key>
                    
                    	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    .. attribute:: nexthop_lb_weight
                    
                    	The weight of a nexthop of the load balance nexthops
                    	**type**\:  int
                    
                    	**range:** 1..99
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_member_id = None
                        self.nexthop_lb_weight = None

                    @property
                    def _common_path(self):
                        if self.nexthop_member_id is None:
                            raise YPYModelError('Key property nexthop_member_id is None')

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-lb/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_member_id is not None:
                            return True

                        if self.nexthop_lb_weight is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopLb.NexthopList']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop/ietf-i2rs-rib:nexthop-lb'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_list is not None:
                        for child_ref in self.nexthop_list:
                            if child_ref._has_data():
                                return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.InputNexthop.NexthopLb']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:input-nexthop'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_base is not None and self.nexthop_base._has_data():
                    return True

                if self.nexthop_chain is not None and self.nexthop_chain._has_data():
                    return True

                if self.nexthop_id is not None:
                    return True

                if self.nexthop_lb is not None and self.nexthop_lb._has_data():
                    return True

                if self.nexthop_protection is not None and self.nexthop_protection._has_data():
                    return True

                if self.nexthop_replicates is not None and self.nexthop_replicates._has_data():
                    return True

                if self.sharing_flag is not None:
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteUpdateRpc.Input.InputNexthop']['meta_info']


        class UpdateParametersNexthop(object):
            """
            Update options\:
            1. update the nexthop
            2. update the route attributes
            3. update the route\-vendor\-attributes.
            
            .. attribute:: updated_nexthop
            
            	The nexthop used for updating
            	**type**\:   :py:class:`UpdatedNexthop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop>`
            
            .. attribute:: updated_route_attr
            
            	The route attributes used for updating
            	**type**\:   :py:class:`UpdatedRouteAttr <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedRouteAttr>`
            
            .. attribute:: updated_route_vendor_attr
            
            	The vendor route attributes used for updating
            	**type**\:   :py:class:`UpdatedRouteVendorAttr <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedRouteVendorAttr>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.updated_nexthop = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop()
                self.updated_nexthop.parent = self
                self.updated_route_attr = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedRouteAttr()
                self.updated_route_attr.parent = self
                self.updated_route_vendor_attr = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedRouteVendorAttr()
                self.updated_route_vendor_attr.parent = self


            class UpdatedNexthop(object):
                """
                The nexthop used for updating.
                
                .. attribute:: nexthop_base
                
                	The base nexthop
                	**type**\:   :py:class:`NexthopBase <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase>`
                
                .. attribute:: nexthop_chain
                
                	A chain nexthop
                	**type**\:   :py:class:`NexthopChain <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopChain>`
                
                .. attribute:: nexthop_id
                
                	An identifier that refers to a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: nexthop_lb
                
                	A load balance nexthop
                	**type**\:   :py:class:`NexthopLb <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopLb>`
                
                .. attribute:: nexthop_protection
                
                	A protection nexthop
                	**type**\:   :py:class:`NexthopProtection <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopProtection>`
                
                .. attribute:: nexthop_replicates
                
                	A replicates nexthop
                	**type**\:   :py:class:`NexthopReplicates <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopReplicates>`
                
                .. attribute:: sharing_flag
                
                	To indicate whether a nexthop is sharable or non\-sharable. true \- sharable, means the nexthop can be shared        with other routes false \- non\-sharable, means the nexthop can not        be shared with other routes
                	**type**\:  bool
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_base = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase()
                    self.nexthop_base.parent = self
                    self.nexthop_chain = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopChain()
                    self.nexthop_chain.parent = self
                    self.nexthop_id = None
                    self.nexthop_lb = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopLb()
                    self.nexthop_lb.parent = self
                    self.nexthop_protection = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopProtection()
                    self.nexthop_protection.parent = self
                    self.nexthop_replicates = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopReplicates()
                    self.nexthop_replicates.parent = self
                    self.sharing_flag = None


                class NexthopBase(object):
                    """
                    The base nexthop.
                    
                    .. attribute:: egress_interface_ipv4_address
                    
                    	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                    	**type**\:   :py:class:`EgressInterfaceIpv4Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address>`
                    
                    .. attribute:: egress_interface_ipv6_address
                    
                    	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
                    	**type**\:   :py:class:`EgressInterfaceIpv6Address <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address>`
                    
                    .. attribute:: egress_interface_mac_address
                    
                    	The egress interface must be an Ethernet interface. Address resolution is not required for this nexthop
                    	**type**\:   :py:class:`EgressInterfaceMacAddress <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress>`
                    
                    .. attribute:: ipv4_address
                    
                    	The nexthop is an IPv4 address
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ipv6_address
                    
                    	The nexthop is an IPv6 address
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: logical_tunnel
                    
                    	This can be a MPLS LSP or a GRE tunnel (or others as defined in this document), that is represented by a unique identifier (e.g. name)
                    	**type**\:   :py:class:`LogicalTunnel <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.LogicalTunnel>`
                    
                    .. attribute:: nexthop_ref
                    
                    	A nexthop reference that points to a nexthop
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**refers to**\:  :py:class:`nexthop_id <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: outgoing_interface
                    
                    	The nexthop is an outgoing interface
                    	**type**\:  str
                    
                    	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: rib_name
                    
                    	A nexthop pointing to a RIB indicates that the route lookup needs to continue in the specified rib. This is a way to perform chained lookups
                    	**type**\:  str
                    
                    .. attribute:: special
                    
                    	A special nexthop
                    	**type**\:   :py:class:`SpecialNexthopIdentity <ydk.models.ietf.ietf_i2rs_rib.SpecialNexthopIdentity>`
                    
                    .. attribute:: tunnel_decap
                    
                    	This is to specify decapsulating a tunnel header
                    	**type**\:   :py:class:`TunnelDecap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap>`
                    
                    .. attribute:: tunnel_encap
                    
                    	This can be an encap representing an IP tunnel or MPLS tunnel or others as defined in info model. An optional egress interface can be chained to the tunnel encap to indicate which interface to send the packet out on.  The egress interface is useful when the network device contains Ethernet interfaces and one needs to perform address resolution for the IP packet
                    	**type**\:   :py:class:`TunnelEncap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.egress_interface_ipv4_address = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address()
                        self.egress_interface_ipv4_address.parent = self
                        self.egress_interface_ipv6_address = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address()
                        self.egress_interface_ipv6_address.parent = self
                        self.egress_interface_mac_address = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress()
                        self.egress_interface_mac_address.parent = self
                        self.ipv4_address = None
                        self.ipv6_address = None
                        self.logical_tunnel = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.LogicalTunnel()
                        self.logical_tunnel.parent = self
                        self.nexthop_ref = None
                        self.outgoing_interface = None
                        self.rib_name = None
                        self.special = None
                        self.tunnel_decap = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap()
                        self.tunnel_decap.parent = self
                        self.tunnel_encap = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap()
                        self.tunnel_encap.parent = self


                    class EgressInterfaceIpv4Address(object):
                        """
                        The nexthop is an egress\-interface and an IP
                        address. This can be used in cases e.g. where
                        the IP address is a link\-local address.
                        
                        .. attribute:: ipv4_address
                        
                        	The nexthop points to an interface with an IPv4 address
                        	**type**\:  str
                        
                        	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv4-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.EgressInterfaceIpv4Address']['meta_info']


                    class EgressInterfaceIpv6Address(object):
                        """
                        The nexthop is an egress\-interface and an IP
                        address. This can be used in cases e.g. where
                        the IP address is a link\-local address.
                        
                        .. attribute:: ipv6_address
                        
                        	The nexthop points to an interface with an IPv6 address
                        	**type**\:  str
                        
                        	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv6_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv6-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv6_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.EgressInterfaceIpv6Address']['meta_info']


                    class EgressInterfaceMacAddress(object):
                        """
                        The egress interface must be an Ethernet
                        interface. Address resolution is not required
                        for this nexthop.
                        
                        .. attribute:: ieee_mac_address
                        
                        	The nexthop points to an interface with a specific mac\-address
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: outgoing_interface
                        
                        	Name of the outgoing interface
                        	**type**\:  str
                        
                        	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ieee_mac_address = None
                            self.outgoing_interface = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-mac-address'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ieee_mac_address is not None:
                                return True

                            if self.outgoing_interface is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.EgressInterfaceMacAddress']['meta_info']


                    class TunnelEncap(object):
                        """
                        This can be an encap representing an IP tunnel or
                        MPLS tunnel or others as defined in info model.
                        An optional egress interface can be chained to the
                        tunnel encap to indicate which interface to send
                        the packet out on.  The egress interface is useful
                        when the network device contains Ethernet interfaces
                        and one needs to perform address resolution for the
                        IP packet.
                        
                        .. attribute:: gre_header
                        
                        	GRE header
                        	**type**\:   :py:class:`GreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader>`
                        
                        .. attribute:: ipv4_header
                        
                        	IPv4 header
                        	**type**\:   :py:class:`Ipv4Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header>`
                        
                        .. attribute:: ipv6_header
                        
                        	IPv6 header
                        	**type**\:   :py:class:`Ipv6Header <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header>`
                        
                        .. attribute:: mpls_header
                        
                        	MPLS header
                        	**type**\:   :py:class:`MplsHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader>`
                        
                        .. attribute:: nvgre_header
                        
                        	NvGRE header
                        	**type**\:   :py:class:`NvgreHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader>`
                        
                        .. attribute:: vxlan_header
                        
                        	VxLAN header
                        	**type**\:   :py:class:`VxlanHeader <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.gre_header = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader()
                            self.gre_header.parent = self
                            self.ipv4_header = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header()
                            self.ipv4_header.parent = self
                            self.ipv6_header = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header()
                            self.ipv6_header.parent = self
                            self.mpls_header = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader()
                            self.mpls_header.parent = self
                            self.nvgre_header = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader()
                            self.nvgre_header.parent = self
                            self.vxlan_header = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader()
                            self.vxlan_header.parent = self


                        class Ipv4Header(object):
                            """
                            IPv4 header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dscp = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.ttl = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv4-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv4Header']['meta_info']


                        class Ipv6Header(object):
                            """
                            IPv6 header.
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv6_address = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.src_ipv6_address = None
                                self.traffic_class = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv6-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.Ipv6Header']['meta_info']


                        class MplsHeader(object):
                            """
                            MPLS header.
                            
                            .. attribute:: label_operations
                            
                            	Label operations
                            	**type**\: list of    :py:class:`LabelOperations <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label_operations = YList()
                                self.label_operations.parent = self
                                self.label_operations.name = 'label_operations'


                            class LabelOperations(object):
                                """
                                Label operations.
                                
                                .. attribute:: label_oper_id  <key>
                                
                                	An optional identifier that points to a label operation
                                	**type**\:  int
                                
                                	**range:** 0..4294967295
                                
                                .. attribute:: label_push
                                
                                	Label push operation
                                	**type**\:   :py:class:`LabelPush <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush>`
                                
                                .. attribute:: label_swap
                                
                                	Label swap operation
                                	**type**\:   :py:class:`LabelSwap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap>`
                                
                                

                                """

                                _prefix = 'iir'
                                _revision = '2016-07-04'

                                def __init__(self):
                                    self.parent = None
                                    self.label_oper_id = None
                                    self.label_push = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush()
                                    self.label_push.parent = self
                                    self.label_swap = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap()
                                    self.label_swap.parent = self


                                class LabelPush(object):
                                    """
                                    Label push operation.
                                    
                                    .. attribute:: label
                                    
                                    	The label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: s_bit
                                    
                                    	The s\-bit of the label to be pushed. 
                                    	**type**\:  bool
                                    
                                    .. attribute:: tc_value
                                    
                                    	The traffic class value of the label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    .. attribute:: ttl_value
                                    
                                    	The TTL value of the label to be pushed
                                    	**type**\:  int
                                    
                                    	**range:** 0..255
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.label = None
                                        self.s_bit = None
                                        self.tc_value = None
                                        self.ttl_value = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-push'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        if self.parent is None:
                                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                        return self.parent.is_config()

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.label is not None:
                                            return True

                                        if self.s_bit is not None:
                                            return True

                                        if self.tc_value is not None:
                                            return True

                                        if self.ttl_value is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush']['meta_info']


                                class LabelSwap(object):
                                    """
                                    Label swap operation.
                                    
                                    .. attribute:: in_label
                                    
                                    	The label to be swapped
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: out_label
                                    
                                    	The out MPLS label
                                    	**type**\:  int
                                    
                                    	**range:** 0..4294967295
                                    
                                    	**mandatory**\: True
                                    
                                    .. attribute:: ttl_action
                                    
                                    	The label ttl actions\: \- No\-action, or \- Copy to inner label,or \- Decrease (the in label) by 1 and   copy to the out label
                                    	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                                    
                                    

                                    """

                                    _prefix = 'iir'
                                    _revision = '2016-07-04'

                                    def __init__(self):
                                        self.parent = None
                                        self.in_label = None
                                        self.out_label = None
                                        self.ttl_action = None

                                    @property
                                    def _common_path(self):
                                        if self.parent is None:
                                            raise YPYModelError('parent is not set . Cannot derive path.')

                                        return self.parent._common_path +'/ietf-i2rs-rib:label-swap'

                                    def is_config(self):
                                        ''' Returns True if this instance represents config data else returns False '''
                                        if self.parent is None:
                                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                        return self.parent.is_config()

                                    def _has_data(self):
                                        if not self.is_config():
                                            return False
                                        if self.in_label is not None:
                                            return True

                                        if self.out_label is not None:
                                            return True

                                        if self.ttl_action is not None:
                                            return True

                                        return False

                                    @staticmethod
                                    def _meta_info():
                                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap']['meta_info']

                                @property
                                def _common_path(self):
                                    if self.label_oper_id is None:
                                        raise YPYModelError('Key property label_oper_id is None')

                                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header/ietf-i2rs-rib:label-operations[ietf-i2rs-rib:label-oper-id = ' + str(self.label_oper_id) + ']'

                                def is_config(self):
                                    ''' Returns True if this instance represents config data else returns False '''
                                    if self.parent is None:
                                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                    return self.parent.is_config()

                                def _has_data(self):
                                    if not self.is_config():
                                        return False
                                    if self.label_oper_id is not None:
                                        return True

                                    if self.label_push is not None and self.label_push._has_data():
                                        return True

                                    if self.label_swap is not None and self.label_swap._has_data():
                                        return True

                                    return False

                                @staticmethod
                                def _meta_info():
                                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader.LabelOperations']['meta_info']

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label_operations is not None:
                                    for child_ref in self.label_operations:
                                        if child_ref._has_data():
                                            return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.MplsHeader']['meta_info']


                        class GreHeader(object):
                            """
                            GRE header.
                            
                            .. attribute:: ipv4_dest
                            
                            	The destination IP address of the GRE header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ipv6_dest
                            
                            	The destination IP address of the GRE header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: key
                            
                            	The GRE key of the GRE header
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: protocol_type
                            
                            	The protocol type of the GRE header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_dest = None
                                self.ipv6_dest = None
                                self.key = None
                                self.protocol_type = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:gre-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_dest is not None:
                                    return True

                                if self.ipv6_dest is not None:
                                    return True

                                if self.key is not None:
                                    return True

                                if self.protocol_type is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.GreHeader']['meta_info']


                        class NvgreHeader(object):
                            """
                            NvGRE header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_id
                            
                            	The flow identifier of the NvGRE header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: virtual_subnet_id
                            
                            	The subnet identifier of the NvGRE header
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dest_ipv6_address = None
                                self.dscp = None
                                self.flow_id = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.src_ipv6_address = None
                                self.traffic_class = None
                                self.ttl = None
                                self.virtual_subnet_id = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:nvgre-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.flow_id is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                if self.virtual_subnet_id is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.NvgreHeader']['meta_info']


                        class VxlanHeader(object):
                            """
                            VxLAN header.
                            
                            .. attribute:: dest_ipv4_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dest_ipv6_address
                            
                            	The destination IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: dscp
                            
                            	The DSCP field of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: flow_label
                            
                            	The flow label of the header
                            	**type**\:  int
                            
                            	**range:** 0..65535
                            
                            .. attribute:: hop_limit
                            
                            	The hop limit the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: next_header
                            
                            	The next header of the IPv6 header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: protocol
                            
                            	The protocol id of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv4_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: src_ipv6_address
                            
                            	The source IP address of the header
                            	**type**\:  str
                            
                            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                            
                            	**mandatory**\: True
                            
                            .. attribute:: traffic_class
                            
                            	The traffic class value of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl
                            
                            	The TTL of the header
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: vxlan_identifier
                            
                            	The VxLAN identifier of the VxLAN header
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.dest_ipv4_address = None
                                self.dest_ipv6_address = None
                                self.dscp = None
                                self.flow_label = None
                                self.hop_limit = None
                                self.next_header = None
                                self.protocol = None
                                self.src_ipv4_address = None
                                self.src_ipv6_address = None
                                self.traffic_class = None
                                self.ttl = None
                                self.vxlan_identifier = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:vxlan-header'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.dest_ipv4_address is not None:
                                    return True

                                if self.dest_ipv6_address is not None:
                                    return True

                                if self.dscp is not None:
                                    return True

                                if self.flow_label is not None:
                                    return True

                                if self.hop_limit is not None:
                                    return True

                                if self.next_header is not None:
                                    return True

                                if self.protocol is not None:
                                    return True

                                if self.src_ipv4_address is not None:
                                    return True

                                if self.src_ipv6_address is not None:
                                    return True

                                if self.traffic_class is not None:
                                    return True

                                if self.ttl is not None:
                                    return True

                                if self.vxlan_identifier is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap.VxlanHeader']['meta_info']

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.gre_header is not None and self.gre_header._has_data():
                                return True

                            if self.ipv4_header is not None and self.ipv4_header._has_data():
                                return True

                            if self.ipv6_header is not None and self.ipv6_header._has_data():
                                return True

                            if self.mpls_header is not None and self.mpls_header._has_data():
                                return True

                            if self.nvgre_header is not None and self.nvgre_header._has_data():
                                return True

                            if self.vxlan_header is not None and self.vxlan_header._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelEncap']['meta_info']


                    class TunnelDecap(object):
                        """
                        This is to specify decapsulating a tunnel header.
                        
                        .. attribute:: ipv4_decap
                        
                        	IPv4 decap
                        	**type**\:   :py:class:`Ipv4Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap>`
                        
                        .. attribute:: ipv6_decap
                        
                        	IPv6 decap
                        	**type**\:   :py:class:`Ipv6Decap <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap>`
                        
                        .. attribute:: label_pop
                        
                        	MPLS decap
                        	**type**\:   :py:class:`LabelPop <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.ipv4_decap = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap()
                            self.ipv4_decap.parent = self
                            self.ipv6_decap = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap()
                            self.ipv6_decap.parent = self
                            self.label_pop = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop()
                            self.label_pop.parent = self


                        class Ipv4Decap(object):
                            """
                            IPv4 decap.
                            
                            .. attribute:: ipv4_decap
                            
                            	IPv4 decap operations
                            	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The ttl actions\: no\-action or copy to inner header
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.ipv4_decap = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv4-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.ipv4_decap is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv4Decap']['meta_info']


                        class Ipv6Decap(object):
                            """
                            IPv6 decap.
                            
                            .. attribute:: hop_limit_action
                            
                            	The hop limit actions\: no\-action or copy to inner header
                            	**type**\:   :py:class:`HopLimitActionIdentity <ydk.models.ietf.ietf_i2rs_rib.HopLimitActionIdentity>`
                            
                            .. attribute:: ipv6_decap
                            
                            	IPv6 decap operations
                            	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.hop_limit_action = None
                                self.ipv6_decap = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv6-decap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.hop_limit_action is not None:
                                    return True

                                if self.ipv6_decap is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap.Ipv6Decap']['meta_info']


                        class LabelPop(object):
                            """
                            MPLS decap.
                            
                            .. attribute:: label_pop
                            
                            	Pop a label from the label stack
                            	**type**\:   :py:class:`MplsLabelActionIdentity <ydk.models.ietf.ietf_i2rs_rib.MplsLabelActionIdentity>`
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The label ttl action
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label_pop = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):

                                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:label-pop'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label_pop is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap.LabelPop']['meta_info']

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.ipv4_decap is not None and self.ipv4_decap._has_data():
                                return True

                            if self.ipv6_decap is not None and self.ipv6_decap._has_data():
                                return True

                            if self.label_pop is not None and self.label_pop._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.TunnelDecap']['meta_info']


                    class LogicalTunnel(object):
                        """
                        This can be a MPLS LSP or a GRE tunnel (or others
                        as defined in this document), that is represented
                        by a unique identifier (e.g. name).
                        
                        .. attribute:: tunnel_name
                        
                        	A tunnel name that points to a logical tunnel
                        	**type**\:  str
                        
                        	**mandatory**\: True
                        
                        .. attribute:: tunnel_type
                        
                        	A tunnel type
                        	**type**\:   :py:class:`TunnelTypeIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelTypeIdentity>`
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.tunnel_name = None
                            self.tunnel_type = None

                        @property
                        def _common_path(self):

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:logical-tunnel'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.tunnel_name is not None:
                                return True

                            if self.tunnel_type is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase.LogicalTunnel']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-base'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.egress_interface_ipv4_address is not None and self.egress_interface_ipv4_address._has_data():
                            return True

                        if self.egress_interface_ipv6_address is not None and self.egress_interface_ipv6_address._has_data():
                            return True

                        if self.egress_interface_mac_address is not None and self.egress_interface_mac_address._has_data():
                            return True

                        if self.ipv4_address is not None:
                            return True

                        if self.ipv6_address is not None:
                            return True

                        if self.logical_tunnel is not None and self.logical_tunnel._has_data():
                            return True

                        if self.nexthop_ref is not None:
                            return True

                        if self.outgoing_interface is not None:
                            return True

                        if self.rib_name is not None:
                            return True

                        if self.special is not None:
                            return True

                        if self.tunnel_decap is not None and self.tunnel_decap._has_data():
                            return True

                        if self.tunnel_encap is not None and self.tunnel_encap._has_data():
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopBase']['meta_info']


                class NexthopChain(object):
                    """
                    A chain nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthops
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopChain.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthops.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-chain/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopChain.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-chain'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopChain']['meta_info']


                class NexthopReplicates(object):
                    """
                    A replicates nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthops
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopReplicates.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthops.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-replicates/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopReplicates.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-replicates'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopReplicates']['meta_info']


                class NexthopProtection(object):
                    """
                    A protection nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthop
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopProtection.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthop.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: nexthop_preference
                        
                        	Nexthop\-preference is used for protection schemes. It is an integer value between 1 and 99.  Lower values are more preferred. To download a primary/standby/tertiary group to the FIB, the nexthops that are resolved and are most preferred are selected
                        	**type**\:  int
                        
                        	**range:** 1..99
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None
                            self.nexthop_preference = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-protection/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            if self.nexthop_preference is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopProtection.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-protection'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopProtection']['meta_info']


                class NexthopLb(object):
                    """
                    A load balance nexthop.
                    
                    .. attribute:: nexthop_list
                    
                    	A list of nexthop
                    	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopLb.NexthopList>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.nexthop_list = YList()
                        self.nexthop_list.parent = self
                        self.nexthop_list.name = 'nexthop_list'


                    class NexthopList(object):
                        """
                        A list of nexthop.
                        
                        .. attribute:: nexthop_member_id  <key>
                        
                        	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        	**mandatory**\: True
                        
                        .. attribute:: nexthop_lb_weight
                        
                        	The weight of a nexthop of the load balance nexthops
                        	**type**\:  int
                        
                        	**range:** 1..99
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.nexthop_member_id = None
                            self.nexthop_lb_weight = None

                        @property
                        def _common_path(self):
                            if self.nexthop_member_id is None:
                                raise YPYModelError('Key property nexthop_member_id is None')

                            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-lb/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.nexthop_member_id is not None:
                                return True

                            if self.nexthop_lb_weight is not None:
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopLb.NexthopList']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop/ietf-i2rs-rib:nexthop-lb'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.nexthop_list is not None:
                            for child_ref in self.nexthop_list:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop.NexthopLb']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-nexthop'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_base is not None and self.nexthop_base._has_data():
                        return True

                    if self.nexthop_chain is not None and self.nexthop_chain._has_data():
                        return True

                    if self.nexthop_id is not None:
                        return True

                    if self.nexthop_lb is not None and self.nexthop_lb._has_data():
                        return True

                    if self.nexthop_protection is not None and self.nexthop_protection._has_data():
                        return True

                    if self.nexthop_replicates is not None and self.nexthop_replicates._has_data():
                        return True

                    if self.sharing_flag is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedNexthop']['meta_info']


            class UpdatedRouteAttr(object):
                """
                The route attributes used for updating.
                
                .. attribute:: address_family_route_attributes
                
                	Address family related route attributes
                	**type**\:   :py:class:`AddressFamilyRouteAttributes <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedRouteAttr.AddressFamilyRouteAttributes>`
                
                .. attribute:: local_only
                
                	Indicate whether the attributes is local only
                	**type**\:  bool
                
                	**mandatory**\: True
                
                .. attribute:: route_preference
                
                	ROUTE\_PREFERENCE\: This is a numerical value that allows for comparing routes from different protocols.  Static configuration is also considered a protocol for the purpose of this field.  It is also known as administrative\-distance. The lower the value, the higher the preference
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.address_family_route_attributes = RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedRouteAttr.AddressFamilyRouteAttributes()
                    self.address_family_route_attributes.parent = self
                    self.local_only = None
                    self.route_preference = None


                class AddressFamilyRouteAttributes(object):
                    """
                    Address family related route attributes.
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-route-attr/ietf-i2rs-rib:address-family-route-attributes'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedRouteAttr.AddressFamilyRouteAttributes']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-route-attr'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.address_family_route_attributes is not None and self.address_family_route_attributes._has_data():
                        return True

                    if self.local_only is not None:
                        return True

                    if self.route_preference is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedRouteAttr']['meta_info']


            class UpdatedRouteVendorAttr(object):
                """
                The vendor route attributes used for updating.
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop/ietf-i2rs-rib:updated-route-vendor-attr'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop.UpdatedRouteVendorAttr']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input/ietf-i2rs-rib:update-parameters-nexthop'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.updated_nexthop is not None and self.updated_nexthop._has_data():
                    return True

                if self.updated_route_attr is not None and self.updated_route_attr._has_data():
                    return True

                if self.updated_route_vendor_attr is not None and self.updated_route_vendor_attr._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteUpdateRpc.Input.UpdateParametersNexthop']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.input_nexthop is not None and self.input_nexthop._has_data():
                return True

            if self.input_route_attributes is not None and self.input_route_attributes._has_data():
                return True

            if self.input_route_vendor_attributes is not None and self.input_route_vendor_attributes._has_data():
                return True

            if self.input_routes is not None and self.input_routes._has_data():
                return True

            if self.return_failure_detail is not None:
                return True

            if self.rib_name is not None:
                return True

            if self.update_parameters_nexthop is not None and self.update_parameters_nexthop._has_data():
                return True

            if self.update_parameters_vendor is not None and self.update_parameters_vendor._has_data():
                return True

            if self.update_parametors is not None and self.update_parametors._has_data():
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RouteUpdateRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: failed_count
        
        	The numbers of the routes that are failed to be added/deleted/updated
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**mandatory**\: True
        
        .. attribute:: failure_detail
        
        	The failure detail reflects the reason why a route operation fails. It is a array that includes the route index and error code of the failed route
        	**type**\:   :py:class:`FailureDetail <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Output.FailureDetail>`
        
        .. attribute:: success_count
        
        	The numbers of routes that are successfully added/deleted/updated
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.failed_count = None
            self.failure_detail = RouteUpdateRpc.Output.FailureDetail()
            self.failure_detail.parent = self
            self.success_count = None


        class FailureDetail(object):
            """
            The failure detail reflects the reason why a route
            operation fails. It is a array that includes the route
            index and error code of the failed route.
            
            .. attribute:: failed_routes
            
            	The list of failed routes
            	**type**\: list of    :py:class:`FailedRoutes <ydk.models.ietf.ietf_i2rs_rib.RouteUpdateRpc.Output.FailureDetail.FailedRoutes>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.failed_routes = YList()
                self.failed_routes.parent = self
                self.failed_routes.name = 'failed_routes'


            class FailedRoutes(object):
                """
                The list of failed routes.
                
                .. attribute:: route_index  <key>
                
                	The route index of the failed route
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: error_code
                
                	The error code that reflects the failure reason
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.route_index = None
                    self.error_code = None

                @property
                def _common_path(self):
                    if self.route_index is None:
                        raise YPYModelError('Key property route_index is None')

                    return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:output/ietf-i2rs-rib:failure-detail/ietf-i2rs-rib:failed-routes[ietf-i2rs-rib:route-index = ' + str(self.route_index) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.route_index is not None:
                        return True

                    if self.error_code is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['RouteUpdateRpc.Output.FailureDetail.FailedRoutes']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:output/ietf-i2rs-rib:failure-detail'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.failed_routes is not None:
                    for child_ref in self.failed_routes:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['RouteUpdateRpc.Output.FailureDetail']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:route-update/ietf-i2rs-rib:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.failed_count is not None:
                return True

            if self.failure_detail is not None and self.failure_detail._has_data():
                return True

            if self.success_count is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['RouteUpdateRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-i2rs-rib:route-update'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['RouteUpdateRpc']['meta_info']


class NhAddRpc(object):
    """
    To add a nexthop to a rib.
    Inputs parameters\:
      1. RIB name
      2. nexthop;
    Actions\:
      Add the nexthop to the RIB
    Outputs\:
      1.Operation result\:
        true  \- success
        false \- failed;
      2. nexthop identifier.
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Output>`
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        self.input = NhAddRpc.Input()
        self.input.parent = self
        self.output = NhAddRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: nexthop_base
        
        	The base nexthop
        	**type**\:   :py:class:`NexthopBase <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase>`
        
        .. attribute:: nexthop_chain
        
        	A chain nexthop
        	**type**\:   :py:class:`NexthopChain <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopChain>`
        
        .. attribute:: nexthop_id
        
        	An identifier that refers to a nexthop
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: nexthop_lb
        
        	A load balance nexthop
        	**type**\:   :py:class:`NexthopLb <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopLb>`
        
        .. attribute:: nexthop_protection
        
        	A protection nexthop
        	**type**\:   :py:class:`NexthopProtection <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopProtection>`
        
        .. attribute:: nexthop_replicates
        
        	A replicates nexthop
        	**type**\:   :py:class:`NexthopReplicates <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopReplicates>`
        
        .. attribute:: rib_name
        
        	A reference to the name of a rib
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: sharing_flag
        
        	To indicate whether a nexthop is sharable or non\-sharable. true \- sharable, means the nexthop can be shared        with other routes false \- non\-sharable, means the nexthop can not        be shared with other routes
        	**type**\:  bool
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.nexthop_base = NhAddRpc.Input.NexthopBase()
            self.nexthop_base.parent = self
            self.nexthop_chain = NhAddRpc.Input.NexthopChain()
            self.nexthop_chain.parent = self
            self.nexthop_id = None
            self.nexthop_lb = NhAddRpc.Input.NexthopLb()
            self.nexthop_lb.parent = self
            self.nexthop_protection = NhAddRpc.Input.NexthopProtection()
            self.nexthop_protection.parent = self
            self.nexthop_replicates = NhAddRpc.Input.NexthopReplicates()
            self.nexthop_replicates.parent = self
            self.rib_name = None
            self.sharing_flag = None


        class NexthopBase(object):
            """
            The base nexthop.
            
            .. attribute:: egress_interface_ipv4_address
            
            	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
            	**type**\:   :py:class:`EgressInterfaceIpv4Address <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.EgressInterfaceIpv4Address>`
            
            .. attribute:: egress_interface_ipv6_address
            
            	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
            	**type**\:   :py:class:`EgressInterfaceIpv6Address <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.EgressInterfaceIpv6Address>`
            
            .. attribute:: egress_interface_mac_address
            
            	The egress interface must be an Ethernet interface. Address resolution is not required for this nexthop
            	**type**\:   :py:class:`EgressInterfaceMacAddress <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.EgressInterfaceMacAddress>`
            
            .. attribute:: ipv4_address
            
            	The nexthop is an IPv4 address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            	**mandatory**\: True
            
            .. attribute:: ipv6_address
            
            	The nexthop is an IPv6 address
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            	**mandatory**\: True
            
            .. attribute:: logical_tunnel
            
            	This can be a MPLS LSP or a GRE tunnel (or others as defined in this document), that is represented by a unique identifier (e.g. name)
            	**type**\:   :py:class:`LogicalTunnel <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.LogicalTunnel>`
            
            .. attribute:: nexthop_ref
            
            	A nexthop reference that points to a nexthop
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**refers to**\:  :py:class:`nexthop_id <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
            
            	**mandatory**\: True
            
            .. attribute:: outgoing_interface
            
            	The nexthop is an outgoing interface
            	**type**\:  str
            
            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
            
            	**mandatory**\: True
            
            .. attribute:: rib_name
            
            	A nexthop pointing to a RIB indicates that the route lookup needs to continue in the specified rib. This is a way to perform chained lookups
            	**type**\:  str
            
            .. attribute:: special
            
            	A special nexthop
            	**type**\:   :py:class:`SpecialNexthopIdentity <ydk.models.ietf.ietf_i2rs_rib.SpecialNexthopIdentity>`
            
            .. attribute:: tunnel_decap
            
            	This is to specify decapsulating a tunnel header
            	**type**\:   :py:class:`TunnelDecap <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelDecap>`
            
            .. attribute:: tunnel_encap
            
            	This can be an encap representing an IP tunnel or MPLS tunnel or others as defined in info model. An optional egress interface can be chained to the tunnel encap to indicate which interface to send the packet out on.  The egress interface is useful when the network device contains Ethernet interfaces and one needs to perform address resolution for the IP packet
            	**type**\:   :py:class:`TunnelEncap <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.egress_interface_ipv4_address = NhAddRpc.Input.NexthopBase.EgressInterfaceIpv4Address()
                self.egress_interface_ipv4_address.parent = self
                self.egress_interface_ipv6_address = NhAddRpc.Input.NexthopBase.EgressInterfaceIpv6Address()
                self.egress_interface_ipv6_address.parent = self
                self.egress_interface_mac_address = NhAddRpc.Input.NexthopBase.EgressInterfaceMacAddress()
                self.egress_interface_mac_address.parent = self
                self.ipv4_address = None
                self.ipv6_address = None
                self.logical_tunnel = NhAddRpc.Input.NexthopBase.LogicalTunnel()
                self.logical_tunnel.parent = self
                self.nexthop_ref = None
                self.outgoing_interface = None
                self.rib_name = None
                self.special = None
                self.tunnel_decap = NhAddRpc.Input.NexthopBase.TunnelDecap()
                self.tunnel_decap.parent = self
                self.tunnel_encap = NhAddRpc.Input.NexthopBase.TunnelEncap()
                self.tunnel_encap.parent = self


            class EgressInterfaceIpv4Address(object):
                """
                The nexthop is an egress\-interface and an IP
                address. This can be used in cases e.g. where
                the IP address is a link\-local address.
                
                .. attribute:: ipv4_address
                
                	The nexthop points to an interface with an IPv4 address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**mandatory**\: True
                
                .. attribute:: outgoing_interface
                
                	Name of the outgoing interface
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.ipv4_address = None
                    self.outgoing_interface = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv4-address'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ipv4_address is not None:
                        return True

                    if self.outgoing_interface is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopBase.EgressInterfaceIpv4Address']['meta_info']


            class EgressInterfaceIpv6Address(object):
                """
                The nexthop is an egress\-interface and an IP
                address. This can be used in cases e.g. where
                the IP address is a link\-local address.
                
                .. attribute:: ipv6_address
                
                	The nexthop points to an interface with an IPv6 address
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                	**mandatory**\: True
                
                .. attribute:: outgoing_interface
                
                	Name of the outgoing interface
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.ipv6_address = None
                    self.outgoing_interface = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv6-address'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ipv6_address is not None:
                        return True

                    if self.outgoing_interface is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopBase.EgressInterfaceIpv6Address']['meta_info']


            class EgressInterfaceMacAddress(object):
                """
                The egress interface must be an Ethernet
                interface. Address resolution is not required
                for this nexthop.
                
                .. attribute:: ieee_mac_address
                
                	The nexthop points to an interface with a specific mac\-address
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: outgoing_interface
                
                	Name of the outgoing interface
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.ieee_mac_address = None
                    self.outgoing_interface = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-mac-address'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ieee_mac_address is not None:
                        return True

                    if self.outgoing_interface is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopBase.EgressInterfaceMacAddress']['meta_info']


            class TunnelEncap(object):
                """
                This can be an encap representing an IP tunnel or
                MPLS tunnel or others as defined in info model.
                An optional egress interface can be chained to the
                tunnel encap to indicate which interface to send
                the packet out on.  The egress interface is useful
                when the network device contains Ethernet interfaces
                and one needs to perform address resolution for the
                IP packet.
                
                .. attribute:: gre_header
                
                	GRE header
                	**type**\:   :py:class:`GreHeader <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap.GreHeader>`
                
                .. attribute:: ipv4_header
                
                	IPv4 header
                	**type**\:   :py:class:`Ipv4Header <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap.Ipv4Header>`
                
                .. attribute:: ipv6_header
                
                	IPv6 header
                	**type**\:   :py:class:`Ipv6Header <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap.Ipv6Header>`
                
                .. attribute:: mpls_header
                
                	MPLS header
                	**type**\:   :py:class:`MplsHeader <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader>`
                
                .. attribute:: nvgre_header
                
                	NvGRE header
                	**type**\:   :py:class:`NvgreHeader <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap.NvgreHeader>`
                
                .. attribute:: vxlan_header
                
                	VxLAN header
                	**type**\:   :py:class:`VxlanHeader <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap.VxlanHeader>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.gre_header = NhAddRpc.Input.NexthopBase.TunnelEncap.GreHeader()
                    self.gre_header.parent = self
                    self.ipv4_header = NhAddRpc.Input.NexthopBase.TunnelEncap.Ipv4Header()
                    self.ipv4_header.parent = self
                    self.ipv6_header = NhAddRpc.Input.NexthopBase.TunnelEncap.Ipv6Header()
                    self.ipv6_header.parent = self
                    self.mpls_header = NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader()
                    self.mpls_header.parent = self
                    self.nvgre_header = NhAddRpc.Input.NexthopBase.TunnelEncap.NvgreHeader()
                    self.nvgre_header.parent = self
                    self.vxlan_header = NhAddRpc.Input.NexthopBase.TunnelEncap.VxlanHeader()
                    self.vxlan_header.parent = self


                class Ipv4Header(object):
                    """
                    IPv4 header.
                    
                    .. attribute:: dest_ipv4_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dscp
                    
                    	The DSCP field of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: protocol
                    
                    	The protocol id of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv4_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ttl
                    
                    	The TTL of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv4_address = None
                        self.dscp = None
                        self.protocol = None
                        self.src_ipv4_address = None
                        self.ttl = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv4-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv4_address is not None:
                            return True

                        if self.dscp is not None:
                            return True

                        if self.protocol is not None:
                            return True

                        if self.src_ipv4_address is not None:
                            return True

                        if self.ttl is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap.Ipv4Header']['meta_info']


                class Ipv6Header(object):
                    """
                    IPv6 header.
                    
                    .. attribute:: dest_ipv6_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: flow_label
                    
                    	The flow label of the header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: hop_limit
                    
                    	The hop limit the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: next_header
                    
                    	The next header of the IPv6 header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv6_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: traffic_class
                    
                    	The traffic class value of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv6_address = None
                        self.flow_label = None
                        self.hop_limit = None
                        self.next_header = None
                        self.src_ipv6_address = None
                        self.traffic_class = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv6-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv6_address is not None:
                            return True

                        if self.flow_label is not None:
                            return True

                        if self.hop_limit is not None:
                            return True

                        if self.next_header is not None:
                            return True

                        if self.src_ipv6_address is not None:
                            return True

                        if self.traffic_class is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap.Ipv6Header']['meta_info']


                class MplsHeader(object):
                    """
                    MPLS header.
                    
                    .. attribute:: label_operations
                    
                    	Label operations
                    	**type**\: list of    :py:class:`LabelOperations <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.label_operations = YList()
                        self.label_operations.parent = self
                        self.label_operations.name = 'label_operations'


                    class LabelOperations(object):
                        """
                        Label operations.
                        
                        .. attribute:: label_oper_id  <key>
                        
                        	An optional identifier that points to a label operation
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: label_push
                        
                        	Label push operation
                        	**type**\:   :py:class:`LabelPush <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush>`
                        
                        .. attribute:: label_swap
                        
                        	Label swap operation
                        	**type**\:   :py:class:`LabelSwap <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.label_oper_id = None
                            self.label_push = NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush()
                            self.label_push.parent = self
                            self.label_swap = NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap()
                            self.label_swap.parent = self


                        class LabelPush(object):
                            """
                            Label push operation.
                            
                            .. attribute:: label
                            
                            	The label to be pushed
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: s_bit
                            
                            	The s\-bit of the label to be pushed. 
                            	**type**\:  bool
                            
                            .. attribute:: tc_value
                            
                            	The traffic class value of the label to be pushed
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl_value
                            
                            	The TTL value of the label to be pushed
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label = None
                                self.s_bit = None
                                self.tc_value = None
                                self.ttl_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:label-push'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label is not None:
                                    return True

                                if self.s_bit is not None:
                                    return True

                                if self.tc_value is not None:
                                    return True

                                if self.ttl_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush']['meta_info']


                        class LabelSwap(object):
                            """
                            Label swap operation.
                            
                            .. attribute:: in_label
                            
                            	The label to be swapped
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: out_label
                            
                            	The out MPLS label
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The label ttl actions\: \- No\-action, or \- Copy to inner label,or \- Decrease (the in label) by 1 and   copy to the out label
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.in_label = None
                                self.out_label = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:label-swap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.in_label is not None:
                                    return True

                                if self.out_label is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap']['meta_info']

                        @property
                        def _common_path(self):
                            if self.label_oper_id is None:
                                raise YPYModelError('Key property label_oper_id is None')

                            return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header/ietf-i2rs-rib:label-operations[ietf-i2rs-rib:label-oper-id = ' + str(self.label_oper_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.label_oper_id is not None:
                                return True

                            if self.label_push is not None and self.label_push._has_data():
                                return True

                            if self.label_swap is not None and self.label_swap._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.label_operations is not None:
                            for child_ref in self.label_operations:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap.MplsHeader']['meta_info']


                class GreHeader(object):
                    """
                    GRE header.
                    
                    .. attribute:: ipv4_dest
                    
                    	The destination IP address of the GRE header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ipv6_dest
                    
                    	The destination IP address of the GRE header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: key
                    
                    	The GRE key of the GRE header
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: protocol_type
                    
                    	The protocol type of the GRE header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.ipv4_dest = None
                        self.ipv6_dest = None
                        self.key = None
                        self.protocol_type = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:gre-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4_dest is not None:
                            return True

                        if self.ipv6_dest is not None:
                            return True

                        if self.key is not None:
                            return True

                        if self.protocol_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap.GreHeader']['meta_info']


                class NvgreHeader(object):
                    """
                    NvGRE header.
                    
                    .. attribute:: dest_ipv4_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dest_ipv6_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dscp
                    
                    	The DSCP field of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_id
                    
                    	The flow identifier of the NvGRE header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_label
                    
                    	The flow label of the header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: hop_limit
                    
                    	The hop limit the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: next_header
                    
                    	The next header of the IPv6 header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: protocol
                    
                    	The protocol id of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv4_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv6_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: traffic_class
                    
                    	The traffic class value of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ttl
                    
                    	The TTL of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: virtual_subnet_id
                    
                    	The subnet identifier of the NvGRE header
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv4_address = None
                        self.dest_ipv6_address = None
                        self.dscp = None
                        self.flow_id = None
                        self.flow_label = None
                        self.hop_limit = None
                        self.next_header = None
                        self.protocol = None
                        self.src_ipv4_address = None
                        self.src_ipv6_address = None
                        self.traffic_class = None
                        self.ttl = None
                        self.virtual_subnet_id = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:nvgre-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv4_address is not None:
                            return True

                        if self.dest_ipv6_address is not None:
                            return True

                        if self.dscp is not None:
                            return True

                        if self.flow_id is not None:
                            return True

                        if self.flow_label is not None:
                            return True

                        if self.hop_limit is not None:
                            return True

                        if self.next_header is not None:
                            return True

                        if self.protocol is not None:
                            return True

                        if self.src_ipv4_address is not None:
                            return True

                        if self.src_ipv6_address is not None:
                            return True

                        if self.traffic_class is not None:
                            return True

                        if self.ttl is not None:
                            return True

                        if self.virtual_subnet_id is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap.NvgreHeader']['meta_info']


                class VxlanHeader(object):
                    """
                    VxLAN header.
                    
                    .. attribute:: dest_ipv4_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dest_ipv6_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dscp
                    
                    	The DSCP field of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_label
                    
                    	The flow label of the header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: hop_limit
                    
                    	The hop limit the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: next_header
                    
                    	The next header of the IPv6 header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: protocol
                    
                    	The protocol id of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv4_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv6_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: traffic_class
                    
                    	The traffic class value of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ttl
                    
                    	The TTL of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: vxlan_identifier
                    
                    	The VxLAN identifier of the VxLAN header
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv4_address = None
                        self.dest_ipv6_address = None
                        self.dscp = None
                        self.flow_label = None
                        self.hop_limit = None
                        self.next_header = None
                        self.protocol = None
                        self.src_ipv4_address = None
                        self.src_ipv6_address = None
                        self.traffic_class = None
                        self.ttl = None
                        self.vxlan_identifier = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:vxlan-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv4_address is not None:
                            return True

                        if self.dest_ipv6_address is not None:
                            return True

                        if self.dscp is not None:
                            return True

                        if self.flow_label is not None:
                            return True

                        if self.hop_limit is not None:
                            return True

                        if self.next_header is not None:
                            return True

                        if self.protocol is not None:
                            return True

                        if self.src_ipv4_address is not None:
                            return True

                        if self.src_ipv6_address is not None:
                            return True

                        if self.traffic_class is not None:
                            return True

                        if self.ttl is not None:
                            return True

                        if self.vxlan_identifier is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap.VxlanHeader']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.gre_header is not None and self.gre_header._has_data():
                        return True

                    if self.ipv4_header is not None and self.ipv4_header._has_data():
                        return True

                    if self.ipv6_header is not None and self.ipv6_header._has_data():
                        return True

                    if self.mpls_header is not None and self.mpls_header._has_data():
                        return True

                    if self.nvgre_header is not None and self.nvgre_header._has_data():
                        return True

                    if self.vxlan_header is not None and self.vxlan_header._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelEncap']['meta_info']


            class TunnelDecap(object):
                """
                This is to specify decapsulating a tunnel header.
                
                .. attribute:: ipv4_decap
                
                	IPv4 decap
                	**type**\:   :py:class:`Ipv4Decap <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelDecap.Ipv4Decap>`
                
                .. attribute:: ipv6_decap
                
                	IPv6 decap
                	**type**\:   :py:class:`Ipv6Decap <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelDecap.Ipv6Decap>`
                
                .. attribute:: label_pop
                
                	MPLS decap
                	**type**\:   :py:class:`LabelPop <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopBase.TunnelDecap.LabelPop>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.ipv4_decap = NhAddRpc.Input.NexthopBase.TunnelDecap.Ipv4Decap()
                    self.ipv4_decap.parent = self
                    self.ipv6_decap = NhAddRpc.Input.NexthopBase.TunnelDecap.Ipv6Decap()
                    self.ipv6_decap.parent = self
                    self.label_pop = NhAddRpc.Input.NexthopBase.TunnelDecap.LabelPop()
                    self.label_pop.parent = self


                class Ipv4Decap(object):
                    """
                    IPv4 decap.
                    
                    .. attribute:: ipv4_decap
                    
                    	IPv4 decap operations
                    	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ttl_action
                    
                    	The ttl actions\: no\-action or copy to inner header
                    	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.ipv4_decap = None
                        self.ttl_action = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv4-decap'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4_decap is not None:
                            return True

                        if self.ttl_action is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelDecap.Ipv4Decap']['meta_info']


                class Ipv6Decap(object):
                    """
                    IPv6 decap.
                    
                    .. attribute:: hop_limit_action
                    
                    	The hop limit actions\: no\-action or copy to inner header
                    	**type**\:   :py:class:`HopLimitActionIdentity <ydk.models.ietf.ietf_i2rs_rib.HopLimitActionIdentity>`
                    
                    .. attribute:: ipv6_decap
                    
                    	IPv6 decap operations
                    	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.hop_limit_action = None
                        self.ipv6_decap = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv6-decap'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.hop_limit_action is not None:
                            return True

                        if self.ipv6_decap is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelDecap.Ipv6Decap']['meta_info']


                class LabelPop(object):
                    """
                    MPLS decap.
                    
                    .. attribute:: label_pop
                    
                    	Pop a label from the label stack
                    	**type**\:   :py:class:`MplsLabelActionIdentity <ydk.models.ietf.ietf_i2rs_rib.MplsLabelActionIdentity>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ttl_action
                    
                    	The label ttl action
                    	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.label_pop = None
                        self.ttl_action = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:label-pop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.label_pop is not None:
                            return True

                        if self.ttl_action is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelDecap.LabelPop']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ipv4_decap is not None and self.ipv4_decap._has_data():
                        return True

                    if self.ipv6_decap is not None and self.ipv6_decap._has_data():
                        return True

                    if self.label_pop is not None and self.label_pop._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopBase.TunnelDecap']['meta_info']


            class LogicalTunnel(object):
                """
                This can be a MPLS LSP or a GRE tunnel (or others
                as defined in this document), that is represented
                by a unique identifier (e.g. name).
                
                .. attribute:: tunnel_name
                
                	A tunnel name that points to a logical tunnel
                	**type**\:  str
                
                	**mandatory**\: True
                
                .. attribute:: tunnel_type
                
                	A tunnel type
                	**type**\:   :py:class:`TunnelTypeIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelTypeIdentity>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.tunnel_name = None
                    self.tunnel_type = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:logical-tunnel'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.tunnel_name is not None:
                        return True

                    if self.tunnel_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopBase.LogicalTunnel']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.egress_interface_ipv4_address is not None and self.egress_interface_ipv4_address._has_data():
                    return True

                if self.egress_interface_ipv6_address is not None and self.egress_interface_ipv6_address._has_data():
                    return True

                if self.egress_interface_mac_address is not None and self.egress_interface_mac_address._has_data():
                    return True

                if self.ipv4_address is not None:
                    return True

                if self.ipv6_address is not None:
                    return True

                if self.logical_tunnel is not None and self.logical_tunnel._has_data():
                    return True

                if self.nexthop_ref is not None:
                    return True

                if self.outgoing_interface is not None:
                    return True

                if self.rib_name is not None:
                    return True

                if self.special is not None:
                    return True

                if self.tunnel_decap is not None and self.tunnel_decap._has_data():
                    return True

                if self.tunnel_encap is not None and self.tunnel_encap._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhAddRpc.Input.NexthopBase']['meta_info']


        class NexthopChain(object):
            """
            A chain nexthop.
            
            .. attribute:: nexthop_list
            
            	A list of nexthops
            	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopChain.NexthopList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_list = YList()
                self.nexthop_list.parent = self
                self.nexthop_list.name = 'nexthop_list'


            class NexthopList(object):
                """
                A list of nexthops.
                
                .. attribute:: nexthop_member_id  <key>
                
                	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_member_id = None

                @property
                def _common_path(self):
                    if self.nexthop_member_id is None:
                        raise YPYModelError('Key property nexthop_member_id is None')

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-chain/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_member_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopChain.NexthopList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-chain'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_list is not None:
                    for child_ref in self.nexthop_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhAddRpc.Input.NexthopChain']['meta_info']


        class NexthopReplicates(object):
            """
            A replicates nexthop.
            
            .. attribute:: nexthop_list
            
            	A list of nexthops
            	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopReplicates.NexthopList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_list = YList()
                self.nexthop_list.parent = self
                self.nexthop_list.name = 'nexthop_list'


            class NexthopList(object):
                """
                A list of nexthops.
                
                .. attribute:: nexthop_member_id  <key>
                
                	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_member_id = None

                @property
                def _common_path(self):
                    if self.nexthop_member_id is None:
                        raise YPYModelError('Key property nexthop_member_id is None')

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-replicates/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_member_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopReplicates.NexthopList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-replicates'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_list is not None:
                    for child_ref in self.nexthop_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhAddRpc.Input.NexthopReplicates']['meta_info']


        class NexthopProtection(object):
            """
            A protection nexthop.
            
            .. attribute:: nexthop_list
            
            	A list of nexthop
            	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopProtection.NexthopList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_list = YList()
                self.nexthop_list.parent = self
                self.nexthop_list.name = 'nexthop_list'


            class NexthopList(object):
                """
                A list of nexthop.
                
                .. attribute:: nexthop_member_id  <key>
                
                	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: nexthop_preference
                
                	Nexthop\-preference is used for protection schemes. It is an integer value between 1 and 99.  Lower values are more preferred. To download a primary/standby/tertiary group to the FIB, the nexthops that are resolved and are most preferred are selected
                	**type**\:  int
                
                	**range:** 1..99
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_member_id = None
                    self.nexthop_preference = None

                @property
                def _common_path(self):
                    if self.nexthop_member_id is None:
                        raise YPYModelError('Key property nexthop_member_id is None')

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-protection/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_member_id is not None:
                        return True

                    if self.nexthop_preference is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopProtection.NexthopList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-protection'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_list is not None:
                    for child_ref in self.nexthop_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhAddRpc.Input.NexthopProtection']['meta_info']


        class NexthopLb(object):
            """
            A load balance nexthop.
            
            .. attribute:: nexthop_list
            
            	A list of nexthop
            	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.NhAddRpc.Input.NexthopLb.NexthopList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_list = YList()
                self.nexthop_list.parent = self
                self.nexthop_list.name = 'nexthop_list'


            class NexthopList(object):
                """
                A list of nexthop.
                
                .. attribute:: nexthop_member_id  <key>
                
                	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: nexthop_lb_weight
                
                	The weight of a nexthop of the load balance nexthops
                	**type**\:  int
                
                	**range:** 1..99
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_member_id = None
                    self.nexthop_lb_weight = None

                @property
                def _common_path(self):
                    if self.nexthop_member_id is None:
                        raise YPYModelError('Key property nexthop_member_id is None')

                    return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-lb/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_member_id is not None:
                        return True

                    if self.nexthop_lb_weight is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhAddRpc.Input.NexthopLb.NexthopList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-lb'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_list is not None:
                    for child_ref in self.nexthop_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhAddRpc.Input.NexthopLb']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.nexthop_base is not None and self.nexthop_base._has_data():
                return True

            if self.nexthop_chain is not None and self.nexthop_chain._has_data():
                return True

            if self.nexthop_id is not None:
                return True

            if self.nexthop_lb is not None and self.nexthop_lb._has_data():
                return True

            if self.nexthop_protection is not None and self.nexthop_protection._has_data():
                return True

            if self.nexthop_replicates is not None and self.nexthop_replicates._has_data():
                return True

            if self.rib_name is not None:
                return True

            if self.sharing_flag is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['NhAddRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: nexthop_id
        
        	A nexthop identifier that is allocated to the nexthop
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: reason
        
        	The specific reason that causes the failure
        	**type**\:  str
        
        .. attribute:: result
        
        	Return the result of the rib\-add operation. true  \- success; false \- failed;
        	**type**\:  bool
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.nexthop_id = None
            self.reason = None
            self.result = None

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:nh-add/ietf-i2rs-rib:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.nexthop_id is not None:
                return True

            if self.reason is not None:
                return True

            if self.result is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['NhAddRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-i2rs-rib:nh-add'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['NhAddRpc']['meta_info']


class NhDeleteRpc(object):
    """
    To delete a nexthop from a rib
    
    .. attribute:: input
    
    	
    	**type**\:   :py:class:`Input <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input>`
    
    .. attribute:: output
    
    	
    	**type**\:   :py:class:`Output <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Output>`
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        self.input = NhDeleteRpc.Input()
        self.input.parent = self
        self.output = NhDeleteRpc.Output()
        self.output.parent = self

        self.is_rpc = True


    class Input(object):
        """
        
        
        .. attribute:: nexthop_base
        
        	The base nexthop
        	**type**\:   :py:class:`NexthopBase <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase>`
        
        .. attribute:: nexthop_chain
        
        	A chain nexthop
        	**type**\:   :py:class:`NexthopChain <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopChain>`
        
        .. attribute:: nexthop_id
        
        	An identifier that refers to a nexthop
        	**type**\:  int
        
        	**range:** 0..4294967295
        
        .. attribute:: nexthop_lb
        
        	A load balance nexthop
        	**type**\:   :py:class:`NexthopLb <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopLb>`
        
        .. attribute:: nexthop_protection
        
        	A protection nexthop
        	**type**\:   :py:class:`NexthopProtection <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopProtection>`
        
        .. attribute:: nexthop_replicates
        
        	A replicates nexthop
        	**type**\:   :py:class:`NexthopReplicates <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopReplicates>`
        
        .. attribute:: rib_name
        
        	A reference to the name of a rib
        	**type**\:  str
        
        	**mandatory**\: True
        
        .. attribute:: sharing_flag
        
        	To indicate whether a nexthop is sharable or non\-sharable. true \- sharable, means the nexthop can be shared        with other routes false \- non\-sharable, means the nexthop can not        be shared with other routes
        	**type**\:  bool
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.nexthop_base = NhDeleteRpc.Input.NexthopBase()
            self.nexthop_base.parent = self
            self.nexthop_chain = NhDeleteRpc.Input.NexthopChain()
            self.nexthop_chain.parent = self
            self.nexthop_id = None
            self.nexthop_lb = NhDeleteRpc.Input.NexthopLb()
            self.nexthop_lb.parent = self
            self.nexthop_protection = NhDeleteRpc.Input.NexthopProtection()
            self.nexthop_protection.parent = self
            self.nexthop_replicates = NhDeleteRpc.Input.NexthopReplicates()
            self.nexthop_replicates.parent = self
            self.rib_name = None
            self.sharing_flag = None


        class NexthopBase(object):
            """
            The base nexthop.
            
            .. attribute:: egress_interface_ipv4_address
            
            	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
            	**type**\:   :py:class:`EgressInterfaceIpv4Address <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.EgressInterfaceIpv4Address>`
            
            .. attribute:: egress_interface_ipv6_address
            
            	The nexthop is an egress\-interface and an IP address. This can be used in cases e.g. where the IP address is a link\-local address
            	**type**\:   :py:class:`EgressInterfaceIpv6Address <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.EgressInterfaceIpv6Address>`
            
            .. attribute:: egress_interface_mac_address
            
            	The egress interface must be an Ethernet interface. Address resolution is not required for this nexthop
            	**type**\:   :py:class:`EgressInterfaceMacAddress <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.EgressInterfaceMacAddress>`
            
            .. attribute:: ipv4_address
            
            	The nexthop is an IPv4 address
            	**type**\:  str
            
            	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
            
            	**mandatory**\: True
            
            .. attribute:: ipv6_address
            
            	The nexthop is an IPv6 address
            	**type**\:  str
            
            	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
            
            	**mandatory**\: True
            
            .. attribute:: logical_tunnel
            
            	This can be a MPLS LSP or a GRE tunnel (or others as defined in this document), that is represented by a unique identifier (e.g. name)
            	**type**\:   :py:class:`LogicalTunnel <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.LogicalTunnel>`
            
            .. attribute:: nexthop_ref
            
            	A nexthop reference that points to a nexthop
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**refers to**\:  :py:class:`nexthop_id <ydk.models.ietf.ietf_i2rs_rib.RoutingInstance.RibList.RouteList.Nexthop>`
            
            	**mandatory**\: True
            
            .. attribute:: outgoing_interface
            
            	The nexthop is an outgoing interface
            	**type**\:  str
            
            	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
            
            	**mandatory**\: True
            
            .. attribute:: rib_name
            
            	A nexthop pointing to a RIB indicates that the route lookup needs to continue in the specified rib. This is a way to perform chained lookups
            	**type**\:  str
            
            .. attribute:: special
            
            	A special nexthop
            	**type**\:   :py:class:`SpecialNexthopIdentity <ydk.models.ietf.ietf_i2rs_rib.SpecialNexthopIdentity>`
            
            .. attribute:: tunnel_decap
            
            	This is to specify decapsulating a tunnel header
            	**type**\:   :py:class:`TunnelDecap <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelDecap>`
            
            .. attribute:: tunnel_encap
            
            	This can be an encap representing an IP tunnel or MPLS tunnel or others as defined in info model. An optional egress interface can be chained to the tunnel encap to indicate which interface to send the packet out on.  The egress interface is useful when the network device contains Ethernet interfaces and one needs to perform address resolution for the IP packet
            	**type**\:   :py:class:`TunnelEncap <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.egress_interface_ipv4_address = NhDeleteRpc.Input.NexthopBase.EgressInterfaceIpv4Address()
                self.egress_interface_ipv4_address.parent = self
                self.egress_interface_ipv6_address = NhDeleteRpc.Input.NexthopBase.EgressInterfaceIpv6Address()
                self.egress_interface_ipv6_address.parent = self
                self.egress_interface_mac_address = NhDeleteRpc.Input.NexthopBase.EgressInterfaceMacAddress()
                self.egress_interface_mac_address.parent = self
                self.ipv4_address = None
                self.ipv6_address = None
                self.logical_tunnel = NhDeleteRpc.Input.NexthopBase.LogicalTunnel()
                self.logical_tunnel.parent = self
                self.nexthop_ref = None
                self.outgoing_interface = None
                self.rib_name = None
                self.special = None
                self.tunnel_decap = NhDeleteRpc.Input.NexthopBase.TunnelDecap()
                self.tunnel_decap.parent = self
                self.tunnel_encap = NhDeleteRpc.Input.NexthopBase.TunnelEncap()
                self.tunnel_encap.parent = self


            class EgressInterfaceIpv4Address(object):
                """
                The nexthop is an egress\-interface and an IP
                address. This can be used in cases e.g. where
                the IP address is a link\-local address.
                
                .. attribute:: ipv4_address
                
                	The nexthop points to an interface with an IPv4 address
                	**type**\:  str
                
                	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                
                	**mandatory**\: True
                
                .. attribute:: outgoing_interface
                
                	Name of the outgoing interface
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.ipv4_address = None
                    self.outgoing_interface = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv4-address'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ipv4_address is not None:
                        return True

                    if self.outgoing_interface is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopBase.EgressInterfaceIpv4Address']['meta_info']


            class EgressInterfaceIpv6Address(object):
                """
                The nexthop is an egress\-interface and an IP
                address. This can be used in cases e.g. where
                the IP address is a link\-local address.
                
                .. attribute:: ipv6_address
                
                	The nexthop points to an interface with an IPv6 address
                	**type**\:  str
                
                	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                
                	**mandatory**\: True
                
                .. attribute:: outgoing_interface
                
                	Name of the outgoing interface
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.ipv6_address = None
                    self.outgoing_interface = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-ipv6-address'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ipv6_address is not None:
                        return True

                    if self.outgoing_interface is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopBase.EgressInterfaceIpv6Address']['meta_info']


            class EgressInterfaceMacAddress(object):
                """
                The egress interface must be an Ethernet
                interface. Address resolution is not required
                for this nexthop.
                
                .. attribute:: ieee_mac_address
                
                	The nexthop points to an interface with a specific mac\-address
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: outgoing_interface
                
                	Name of the outgoing interface
                	**type**\:  str
                
                	**refers to**\:  :py:class:`name <ydk.models.ietf.ietf_interfaces.Interfaces.Interface>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.ieee_mac_address = None
                    self.outgoing_interface = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:egress-interface-mac-address'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ieee_mac_address is not None:
                        return True

                    if self.outgoing_interface is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopBase.EgressInterfaceMacAddress']['meta_info']


            class TunnelEncap(object):
                """
                This can be an encap representing an IP tunnel or
                MPLS tunnel or others as defined in info model.
                An optional egress interface can be chained to the
                tunnel encap to indicate which interface to send
                the packet out on.  The egress interface is useful
                when the network device contains Ethernet interfaces
                and one needs to perform address resolution for the
                IP packet.
                
                .. attribute:: gre_header
                
                	GRE header
                	**type**\:   :py:class:`GreHeader <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap.GreHeader>`
                
                .. attribute:: ipv4_header
                
                	IPv4 header
                	**type**\:   :py:class:`Ipv4Header <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap.Ipv4Header>`
                
                .. attribute:: ipv6_header
                
                	IPv6 header
                	**type**\:   :py:class:`Ipv6Header <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap.Ipv6Header>`
                
                .. attribute:: mpls_header
                
                	MPLS header
                	**type**\:   :py:class:`MplsHeader <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader>`
                
                .. attribute:: nvgre_header
                
                	NvGRE header
                	**type**\:   :py:class:`NvgreHeader <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap.NvgreHeader>`
                
                .. attribute:: vxlan_header
                
                	VxLAN header
                	**type**\:   :py:class:`VxlanHeader <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap.VxlanHeader>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.gre_header = NhDeleteRpc.Input.NexthopBase.TunnelEncap.GreHeader()
                    self.gre_header.parent = self
                    self.ipv4_header = NhDeleteRpc.Input.NexthopBase.TunnelEncap.Ipv4Header()
                    self.ipv4_header.parent = self
                    self.ipv6_header = NhDeleteRpc.Input.NexthopBase.TunnelEncap.Ipv6Header()
                    self.ipv6_header.parent = self
                    self.mpls_header = NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader()
                    self.mpls_header.parent = self
                    self.nvgre_header = NhDeleteRpc.Input.NexthopBase.TunnelEncap.NvgreHeader()
                    self.nvgre_header.parent = self
                    self.vxlan_header = NhDeleteRpc.Input.NexthopBase.TunnelEncap.VxlanHeader()
                    self.vxlan_header.parent = self


                class Ipv4Header(object):
                    """
                    IPv4 header.
                    
                    .. attribute:: dest_ipv4_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dscp
                    
                    	The DSCP field of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: protocol
                    
                    	The protocol id of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv4_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ttl
                    
                    	The TTL of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv4_address = None
                        self.dscp = None
                        self.protocol = None
                        self.src_ipv4_address = None
                        self.ttl = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv4-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv4_address is not None:
                            return True

                        if self.dscp is not None:
                            return True

                        if self.protocol is not None:
                            return True

                        if self.src_ipv4_address is not None:
                            return True

                        if self.ttl is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap.Ipv4Header']['meta_info']


                class Ipv6Header(object):
                    """
                    IPv6 header.
                    
                    .. attribute:: dest_ipv6_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: flow_label
                    
                    	The flow label of the header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: hop_limit
                    
                    	The hop limit the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: next_header
                    
                    	The next header of the IPv6 header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv6_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: traffic_class
                    
                    	The traffic class value of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv6_address = None
                        self.flow_label = None
                        self.hop_limit = None
                        self.next_header = None
                        self.src_ipv6_address = None
                        self.traffic_class = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:ipv6-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv6_address is not None:
                            return True

                        if self.flow_label is not None:
                            return True

                        if self.hop_limit is not None:
                            return True

                        if self.next_header is not None:
                            return True

                        if self.src_ipv6_address is not None:
                            return True

                        if self.traffic_class is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap.Ipv6Header']['meta_info']


                class MplsHeader(object):
                    """
                    MPLS header.
                    
                    .. attribute:: label_operations
                    
                    	Label operations
                    	**type**\: list of    :py:class:`LabelOperations <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.label_operations = YList()
                        self.label_operations.parent = self
                        self.label_operations.name = 'label_operations'


                    class LabelOperations(object):
                        """
                        Label operations.
                        
                        .. attribute:: label_oper_id  <key>
                        
                        	An optional identifier that points to a label operation
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: label_push
                        
                        	Label push operation
                        	**type**\:   :py:class:`LabelPush <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush>`
                        
                        .. attribute:: label_swap
                        
                        	Label swap operation
                        	**type**\:   :py:class:`LabelSwap <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap>`
                        
                        

                        """

                        _prefix = 'iir'
                        _revision = '2016-07-04'

                        def __init__(self):
                            self.parent = None
                            self.label_oper_id = None
                            self.label_push = NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush()
                            self.label_push.parent = self
                            self.label_swap = NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap()
                            self.label_swap.parent = self


                        class LabelPush(object):
                            """
                            Label push operation.
                            
                            .. attribute:: label
                            
                            	The label to be pushed
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: s_bit
                            
                            	The s\-bit of the label to be pushed. 
                            	**type**\:  bool
                            
                            .. attribute:: tc_value
                            
                            	The traffic class value of the label to be pushed
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            .. attribute:: ttl_value
                            
                            	The TTL value of the label to be pushed
                            	**type**\:  int
                            
                            	**range:** 0..255
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.label = None
                                self.s_bit = None
                                self.tc_value = None
                                self.ttl_value = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:label-push'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.label is not None:
                                    return True

                                if self.s_bit is not None:
                                    return True

                                if self.tc_value is not None:
                                    return True

                                if self.ttl_value is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelPush']['meta_info']


                        class LabelSwap(object):
                            """
                            Label swap operation.
                            
                            .. attribute:: in_label
                            
                            	The label to be swapped
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: out_label
                            
                            	The out MPLS label
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            	**mandatory**\: True
                            
                            .. attribute:: ttl_action
                            
                            	The label ttl actions\: \- No\-action, or \- Copy to inner label,or \- Decrease (the in label) by 1 and   copy to the out label
                            	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                            
                            

                            """

                            _prefix = 'iir'
                            _revision = '2016-07-04'

                            def __init__(self):
                                self.parent = None
                                self.in_label = None
                                self.out_label = None
                                self.ttl_action = None

                            @property
                            def _common_path(self):
                                if self.parent is None:
                                    raise YPYModelError('parent is not set . Cannot derive path.')

                                return self.parent._common_path +'/ietf-i2rs-rib:label-swap'

                            def is_config(self):
                                ''' Returns True if this instance represents config data else returns False '''
                                if self.parent is None:
                                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                                return self.parent.is_config()

                            def _has_data(self):
                                if not self.is_config():
                                    return False
                                if self.in_label is not None:
                                    return True

                                if self.out_label is not None:
                                    return True

                                if self.ttl_action is not None:
                                    return True

                                return False

                            @staticmethod
                            def _meta_info():
                                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                                return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations.LabelSwap']['meta_info']

                        @property
                        def _common_path(self):
                            if self.label_oper_id is None:
                                raise YPYModelError('Key property label_oper_id is None')

                            return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header/ietf-i2rs-rib:label-operations[ietf-i2rs-rib:label-oper-id = ' + str(self.label_oper_id) + ']'

                        def is_config(self):
                            ''' Returns True if this instance represents config data else returns False '''
                            if self.parent is None:
                                raise YPYError('Parent reference is needed to determine if entity has configuration data')
                            return self.parent.is_config()

                        def _has_data(self):
                            if not self.is_config():
                                return False
                            if self.label_oper_id is not None:
                                return True

                            if self.label_push is not None and self.label_push._has_data():
                                return True

                            if self.label_swap is not None and self.label_swap._has_data():
                                return True

                            return False

                        @staticmethod
                        def _meta_info():
                            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                            return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader.LabelOperations']['meta_info']

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:mpls-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.label_operations is not None:
                            for child_ref in self.label_operations:
                                if child_ref._has_data():
                                    return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap.MplsHeader']['meta_info']


                class GreHeader(object):
                    """
                    GRE header.
                    
                    .. attribute:: ipv4_dest
                    
                    	The destination IP address of the GRE header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ipv6_dest
                    
                    	The destination IP address of the GRE header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: key
                    
                    	The GRE key of the GRE header
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: protocol_type
                    
                    	The protocol type of the GRE header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.ipv4_dest = None
                        self.ipv6_dest = None
                        self.key = None
                        self.protocol_type = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:gre-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4_dest is not None:
                            return True

                        if self.ipv6_dest is not None:
                            return True

                        if self.key is not None:
                            return True

                        if self.protocol_type is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap.GreHeader']['meta_info']


                class NvgreHeader(object):
                    """
                    NvGRE header.
                    
                    .. attribute:: dest_ipv4_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dest_ipv6_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dscp
                    
                    	The DSCP field of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_id
                    
                    	The flow identifier of the NvGRE header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: flow_label
                    
                    	The flow label of the header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: hop_limit
                    
                    	The hop limit the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: next_header
                    
                    	The next header of the IPv6 header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: protocol
                    
                    	The protocol id of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv4_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv6_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: traffic_class
                    
                    	The traffic class value of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ttl
                    
                    	The TTL of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: virtual_subnet_id
                    
                    	The subnet identifier of the NvGRE header
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv4_address = None
                        self.dest_ipv6_address = None
                        self.dscp = None
                        self.flow_id = None
                        self.flow_label = None
                        self.hop_limit = None
                        self.next_header = None
                        self.protocol = None
                        self.src_ipv4_address = None
                        self.src_ipv6_address = None
                        self.traffic_class = None
                        self.ttl = None
                        self.virtual_subnet_id = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:nvgre-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv4_address is not None:
                            return True

                        if self.dest_ipv6_address is not None:
                            return True

                        if self.dscp is not None:
                            return True

                        if self.flow_id is not None:
                            return True

                        if self.flow_label is not None:
                            return True

                        if self.hop_limit is not None:
                            return True

                        if self.next_header is not None:
                            return True

                        if self.protocol is not None:
                            return True

                        if self.src_ipv4_address is not None:
                            return True

                        if self.src_ipv6_address is not None:
                            return True

                        if self.traffic_class is not None:
                            return True

                        if self.ttl is not None:
                            return True

                        if self.virtual_subnet_id is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap.NvgreHeader']['meta_info']


                class VxlanHeader(object):
                    """
                    VxLAN header.
                    
                    .. attribute:: dest_ipv4_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dest_ipv6_address
                    
                    	The destination IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: dscp
                    
                    	The DSCP field of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: flow_label
                    
                    	The flow label of the header
                    	**type**\:  int
                    
                    	**range:** 0..65535
                    
                    .. attribute:: hop_limit
                    
                    	The hop limit the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: next_header
                    
                    	The next header of the IPv6 header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: protocol
                    
                    	The protocol id of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv4_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** (([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])\\.){3}([0\-9]\|[1\-9][0\-9]\|1[0\-9][0\-9]\|2[0\-4][0\-9]\|25[0\-5])(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: src_ipv6_address
                    
                    	The source IP address of the header
                    	**type**\:  str
                    
                    	**pattern:** ((\:\|[0\-9a\-fA\-F]{0,4})\:)([0\-9a\-fA\-F]{0,4}\:){0,5}((([0\-9a\-fA\-F]{0,4}\:)?(\:\|[0\-9a\-fA\-F]{0,4}))\|(((25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])\\.){3}(25[0\-5]\|2[0\-4][0\-9]\|[01]?[0\-9]?[0\-9])))(%[\\p{N}\\p{L}]+)?
                    
                    	**mandatory**\: True
                    
                    .. attribute:: traffic_class
                    
                    	The traffic class value of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: ttl
                    
                    	The TTL of the header
                    	**type**\:  int
                    
                    	**range:** 0..255
                    
                    .. attribute:: vxlan_identifier
                    
                    	The VxLAN identifier of the VxLAN header
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.dest_ipv4_address = None
                        self.dest_ipv6_address = None
                        self.dscp = None
                        self.flow_label = None
                        self.hop_limit = None
                        self.next_header = None
                        self.protocol = None
                        self.src_ipv4_address = None
                        self.src_ipv6_address = None
                        self.traffic_class = None
                        self.ttl = None
                        self.vxlan_identifier = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap/ietf-i2rs-rib:vxlan-header'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.dest_ipv4_address is not None:
                            return True

                        if self.dest_ipv6_address is not None:
                            return True

                        if self.dscp is not None:
                            return True

                        if self.flow_label is not None:
                            return True

                        if self.hop_limit is not None:
                            return True

                        if self.next_header is not None:
                            return True

                        if self.protocol is not None:
                            return True

                        if self.src_ipv4_address is not None:
                            return True

                        if self.src_ipv6_address is not None:
                            return True

                        if self.traffic_class is not None:
                            return True

                        if self.ttl is not None:
                            return True

                        if self.vxlan_identifier is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap.VxlanHeader']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-encap'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.gre_header is not None and self.gre_header._has_data():
                        return True

                    if self.ipv4_header is not None and self.ipv4_header._has_data():
                        return True

                    if self.ipv6_header is not None and self.ipv6_header._has_data():
                        return True

                    if self.mpls_header is not None and self.mpls_header._has_data():
                        return True

                    if self.nvgre_header is not None and self.nvgre_header._has_data():
                        return True

                    if self.vxlan_header is not None and self.vxlan_header._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelEncap']['meta_info']


            class TunnelDecap(object):
                """
                This is to specify decapsulating a tunnel header.
                
                .. attribute:: ipv4_decap
                
                	IPv4 decap
                	**type**\:   :py:class:`Ipv4Decap <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelDecap.Ipv4Decap>`
                
                .. attribute:: ipv6_decap
                
                	IPv6 decap
                	**type**\:   :py:class:`Ipv6Decap <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelDecap.Ipv6Decap>`
                
                .. attribute:: label_pop
                
                	MPLS decap
                	**type**\:   :py:class:`LabelPop <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopBase.TunnelDecap.LabelPop>`
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.ipv4_decap = NhDeleteRpc.Input.NexthopBase.TunnelDecap.Ipv4Decap()
                    self.ipv4_decap.parent = self
                    self.ipv6_decap = NhDeleteRpc.Input.NexthopBase.TunnelDecap.Ipv6Decap()
                    self.ipv6_decap.parent = self
                    self.label_pop = NhDeleteRpc.Input.NexthopBase.TunnelDecap.LabelPop()
                    self.label_pop.parent = self


                class Ipv4Decap(object):
                    """
                    IPv4 decap.
                    
                    .. attribute:: ipv4_decap
                    
                    	IPv4 decap operations
                    	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ttl_action
                    
                    	The ttl actions\: no\-action or copy to inner header
                    	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.ipv4_decap = None
                        self.ttl_action = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv4-decap'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.ipv4_decap is not None:
                            return True

                        if self.ttl_action is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelDecap.Ipv4Decap']['meta_info']


                class Ipv6Decap(object):
                    """
                    IPv6 decap.
                    
                    .. attribute:: hop_limit_action
                    
                    	The hop limit actions\: no\-action or copy to inner header
                    	**type**\:   :py:class:`HopLimitActionIdentity <ydk.models.ietf.ietf_i2rs_rib.HopLimitActionIdentity>`
                    
                    .. attribute:: ipv6_decap
                    
                    	IPv6 decap operations
                    	**type**\:   :py:class:`TunnelDecapActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelDecapActionIdentity>`
                    
                    	**mandatory**\: True
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.hop_limit_action = None
                        self.ipv6_decap = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:ipv6-decap'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.hop_limit_action is not None:
                            return True

                        if self.ipv6_decap is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelDecap.Ipv6Decap']['meta_info']


                class LabelPop(object):
                    """
                    MPLS decap.
                    
                    .. attribute:: label_pop
                    
                    	Pop a label from the label stack
                    	**type**\:   :py:class:`MplsLabelActionIdentity <ydk.models.ietf.ietf_i2rs_rib.MplsLabelActionIdentity>`
                    
                    	**mandatory**\: True
                    
                    .. attribute:: ttl_action
                    
                    	The label ttl action
                    	**type**\:   :py:class:`TtlActionIdentity <ydk.models.ietf.ietf_i2rs_rib.TtlActionIdentity>`
                    
                    

                    """

                    _prefix = 'iir'
                    _revision = '2016-07-04'

                    def __init__(self):
                        self.parent = None
                        self.label_pop = None
                        self.ttl_action = None

                    @property
                    def _common_path(self):

                        return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap/ietf-i2rs-rib:label-pop'

                    def is_config(self):
                        ''' Returns True if this instance represents config data else returns False '''
                        if self.parent is None:
                            raise YPYError('Parent reference is needed to determine if entity has configuration data')
                        return self.parent.is_config()

                    def _has_data(self):
                        if not self.is_config():
                            return False
                        if self.label_pop is not None:
                            return True

                        if self.ttl_action is not None:
                            return True

                        return False

                    @staticmethod
                    def _meta_info():
                        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                        return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelDecap.LabelPop']['meta_info']

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:tunnel-decap'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.ipv4_decap is not None and self.ipv4_decap._has_data():
                        return True

                    if self.ipv6_decap is not None and self.ipv6_decap._has_data():
                        return True

                    if self.label_pop is not None and self.label_pop._has_data():
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopBase.TunnelDecap']['meta_info']


            class LogicalTunnel(object):
                """
                This can be a MPLS LSP or a GRE tunnel (or others
                as defined in this document), that is represented
                by a unique identifier (e.g. name).
                
                .. attribute:: tunnel_name
                
                	A tunnel name that points to a logical tunnel
                	**type**\:  str
                
                	**mandatory**\: True
                
                .. attribute:: tunnel_type
                
                	A tunnel type
                	**type**\:   :py:class:`TunnelTypeIdentity <ydk.models.ietf.ietf_i2rs_rib.TunnelTypeIdentity>`
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.tunnel_name = None
                    self.tunnel_type = None

                @property
                def _common_path(self):

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base/ietf-i2rs-rib:logical-tunnel'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.tunnel_name is not None:
                        return True

                    if self.tunnel_type is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopBase.LogicalTunnel']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-base'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.egress_interface_ipv4_address is not None and self.egress_interface_ipv4_address._has_data():
                    return True

                if self.egress_interface_ipv6_address is not None and self.egress_interface_ipv6_address._has_data():
                    return True

                if self.egress_interface_mac_address is not None and self.egress_interface_mac_address._has_data():
                    return True

                if self.ipv4_address is not None:
                    return True

                if self.ipv6_address is not None:
                    return True

                if self.logical_tunnel is not None and self.logical_tunnel._has_data():
                    return True

                if self.nexthop_ref is not None:
                    return True

                if self.outgoing_interface is not None:
                    return True

                if self.rib_name is not None:
                    return True

                if self.special is not None:
                    return True

                if self.tunnel_decap is not None and self.tunnel_decap._has_data():
                    return True

                if self.tunnel_encap is not None and self.tunnel_encap._has_data():
                    return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhDeleteRpc.Input.NexthopBase']['meta_info']


        class NexthopChain(object):
            """
            A chain nexthop.
            
            .. attribute:: nexthop_list
            
            	A list of nexthops
            	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopChain.NexthopList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_list = YList()
                self.nexthop_list.parent = self
                self.nexthop_list.name = 'nexthop_list'


            class NexthopList(object):
                """
                A list of nexthops.
                
                .. attribute:: nexthop_member_id  <key>
                
                	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_member_id = None

                @property
                def _common_path(self):
                    if self.nexthop_member_id is None:
                        raise YPYModelError('Key property nexthop_member_id is None')

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-chain/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_member_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopChain.NexthopList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-chain'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_list is not None:
                    for child_ref in self.nexthop_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhDeleteRpc.Input.NexthopChain']['meta_info']


        class NexthopReplicates(object):
            """
            A replicates nexthop.
            
            .. attribute:: nexthop_list
            
            	A list of nexthops
            	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopReplicates.NexthopList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_list = YList()
                self.nexthop_list.parent = self
                self.nexthop_list.name = 'nexthop_list'


            class NexthopList(object):
                """
                A list of nexthops.
                
                .. attribute:: nexthop_member_id  <key>
                
                	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_member_id = None

                @property
                def _common_path(self):
                    if self.nexthop_member_id is None:
                        raise YPYModelError('Key property nexthop_member_id is None')

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-replicates/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_member_id is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopReplicates.NexthopList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-replicates'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_list is not None:
                    for child_ref in self.nexthop_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhDeleteRpc.Input.NexthopReplicates']['meta_info']


        class NexthopProtection(object):
            """
            A protection nexthop.
            
            .. attribute:: nexthop_list
            
            	A list of nexthop
            	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopProtection.NexthopList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_list = YList()
                self.nexthop_list.parent = self
                self.nexthop_list.name = 'nexthop_list'


            class NexthopList(object):
                """
                A list of nexthop.
                
                .. attribute:: nexthop_member_id  <key>
                
                	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: nexthop_preference
                
                	Nexthop\-preference is used for protection schemes. It is an integer value between 1 and 99.  Lower values are more preferred. To download a primary/standby/tertiary group to the FIB, the nexthops that are resolved and are most preferred are selected
                	**type**\:  int
                
                	**range:** 1..99
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_member_id = None
                    self.nexthop_preference = None

                @property
                def _common_path(self):
                    if self.nexthop_member_id is None:
                        raise YPYModelError('Key property nexthop_member_id is None')

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-protection/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_member_id is not None:
                        return True

                    if self.nexthop_preference is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopProtection.NexthopList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-protection'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_list is not None:
                    for child_ref in self.nexthop_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhDeleteRpc.Input.NexthopProtection']['meta_info']


        class NexthopLb(object):
            """
            A load balance nexthop.
            
            .. attribute:: nexthop_list
            
            	A list of nexthop
            	**type**\: list of    :py:class:`NexthopList <ydk.models.ietf.ietf_i2rs_rib.NhDeleteRpc.Input.NexthopLb.NexthopList>`
            
            

            """

            _prefix = 'iir'
            _revision = '2016-07-04'

            def __init__(self):
                self.parent = None
                self.nexthop_list = YList()
                self.nexthop_list.parent = self
                self.nexthop_list.name = 'nexthop_list'


            class NexthopList(object):
                """
                A list of nexthop.
                
                .. attribute:: nexthop_member_id  <key>
                
                	A nexthop identifier that points to a nexthop list member. A nexthop list member is a nexthop
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                	**mandatory**\: True
                
                .. attribute:: nexthop_lb_weight
                
                	The weight of a nexthop of the load balance nexthops
                	**type**\:  int
                
                	**range:** 1..99
                
                	**mandatory**\: True
                
                

                """

                _prefix = 'iir'
                _revision = '2016-07-04'

                def __init__(self):
                    self.parent = None
                    self.nexthop_member_id = None
                    self.nexthop_lb_weight = None

                @property
                def _common_path(self):
                    if self.nexthop_member_id is None:
                        raise YPYModelError('Key property nexthop_member_id is None')

                    return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-lb/ietf-i2rs-rib:nexthop-list[ietf-i2rs-rib:nexthop-member-id = ' + str(self.nexthop_member_id) + ']'

                def is_config(self):
                    ''' Returns True if this instance represents config data else returns False '''
                    if self.parent is None:
                        raise YPYError('Parent reference is needed to determine if entity has configuration data')
                    return self.parent.is_config()

                def _has_data(self):
                    if not self.is_config():
                        return False
                    if self.nexthop_member_id is not None:
                        return True

                    if self.nexthop_lb_weight is not None:
                        return True

                    return False

                @staticmethod
                def _meta_info():
                    from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                    return meta._meta_table['NhDeleteRpc.Input.NexthopLb.NexthopList']['meta_info']

            @property
            def _common_path(self):

                return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input/ietf-i2rs-rib:nexthop-lb'

            def is_config(self):
                ''' Returns True if this instance represents config data else returns False '''
                if self.parent is None:
                    raise YPYError('Parent reference is needed to determine if entity has configuration data')
                return self.parent.is_config()

            def _has_data(self):
                if not self.is_config():
                    return False
                if self.nexthop_list is not None:
                    for child_ref in self.nexthop_list:
                        if child_ref._has_data():
                            return True

                return False

            @staticmethod
            def _meta_info():
                from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
                return meta._meta_table['NhDeleteRpc.Input.NexthopLb']['meta_info']

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:input'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.nexthop_base is not None and self.nexthop_base._has_data():
                return True

            if self.nexthop_chain is not None and self.nexthop_chain._has_data():
                return True

            if self.nexthop_id is not None:
                return True

            if self.nexthop_lb is not None and self.nexthop_lb._has_data():
                return True

            if self.nexthop_protection is not None and self.nexthop_protection._has_data():
                return True

            if self.nexthop_replicates is not None and self.nexthop_replicates._has_data():
                return True

            if self.rib_name is not None:
                return True

            if self.sharing_flag is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['NhDeleteRpc.Input']['meta_info']


    class Output(object):
        """
        
        
        .. attribute:: reason
        
        	The specific reason that causes the failure
        	**type**\:  str
        
        .. attribute:: result
        
        	Return the result of the rib\-add operation. true  \- success; false \- failed
        	**type**\:  bool
        
        	**mandatory**\: True
        
        

        """

        _prefix = 'iir'
        _revision = '2016-07-04'

        def __init__(self):
            self.parent = None
            self.reason = None
            self.result = None

        @property
        def _common_path(self):

            return '/ietf-i2rs-rib:nh-delete/ietf-i2rs-rib:output'

        def is_config(self):
            ''' Returns True if this instance represents config data else returns False '''
            if self.parent is None:
                raise YPYError('Parent reference is needed to determine if entity has configuration data')
            return self.parent.is_config()

        def _has_data(self):
            if not self.is_config():
                return False
            if self.reason is not None:
                return True

            if self.result is not None:
                return True

            return False

        @staticmethod
        def _meta_info():
            from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
            return meta._meta_table['NhDeleteRpc.Output']['meta_info']

    @property
    def _common_path(self):

        return '/ietf-i2rs-rib:nh-delete'

    def is_config(self):
        ''' Returns True if this instance represents config data else returns False '''
        return True

    def _has_data(self):
        if not self.is_config():
            return False
        if self.input is not None and self.input._has_data():
            return True

        if self.output is not None and self.output._has_data():
            return True

        return False

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['NhDeleteRpc']['meta_info']


class MplsRibFamilyIdentity(RibFamilyIdentity):
    """
    MPLS RIB address family.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RibFamilyIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['MplsRibFamilyIdentity']['meta_info']


class Ipv4RibFamilyIdentity(RibFamilyIdentity):
    """
    IPv4 RIB address family.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RibFamilyIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['Ipv4RibFamilyIdentity']['meta_info']


class LabelPushIdentity(MplsLabelActionIdentity):
    """
    MPLS label stack operation\: push.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        MplsLabelActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['LabelPushIdentity']['meta_info']


class Ipv4DecapIdentity(TunnelDecapActionIdentity):
    """
    IPv4 tunnel decap.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TunnelDecapActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['Ipv4DecapIdentity']['meta_info']


class UnresolvedNexthopIdentity(RouteChangeReasonIdentity):
    """
    This route was made inactive because all of
    its nexthops are unresolved.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteChangeReasonIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['UnresolvedNexthopIdentity']['meta_info']


class NoActionIdentity(TtlActionIdentity):
    """
    Do nothing regarding the TTL.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TtlActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['NoActionIdentity']['meta_info']


class InstalledIdentity(RouteInstalledStateIdentity):
    """
    Installed state.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteInstalledStateIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['InstalledIdentity']['meta_info']


class ActiveIdentity(RouteStateIdentity):
    """
    Active state.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteStateIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['ActiveIdentity']['meta_info']


class InactiveIdentity(RouteStateIdentity):
    """
    Inactive state.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteStateIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['InactiveIdentity']['meta_info']


class ResolvedNexthopIdentity(RouteChangeReasonIdentity):
    """
    This route was made active because at least
    one of its nexthops was resolved.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteChangeReasonIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['ResolvedNexthopIdentity']['meta_info']


class DecreaseAndCopyToInnerIdentity(TtlActionIdentity):
    """
    Decrease TTL by one and copy the TTL
    to the inner header.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TtlActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['DecreaseAndCopyToInnerIdentity']['meta_info']


class IeeeMacIdentity(RouteTypeIdentity):
    """
    MAC route type.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['IeeeMacIdentity']['meta_info']


class IeeeMacRibFamilyIdentity(RibFamilyIdentity):
    """
    MAC RIB address family.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RibFamilyIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['IeeeMacRibFamilyIdentity']['meta_info']


class LabelPopIdentity(MplsLabelActionIdentity):
    """
    MPLS label stack operation\: pop.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        MplsLabelActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['LabelPopIdentity']['meta_info']


class MatchIpSrcDestIdentity(IpRouteMatchTypeIdentity):
    """
    Source and Destination route match type
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        IpRouteMatchTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['MatchIpSrcDestIdentity']['meta_info']


class HopLimitNoActionIdentity(HopLimitActionIdentity):
    """
    Do nothing regarding the hop limit.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        HopLimitActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['HopLimitNoActionIdentity']['meta_info']


class UninstalledIdentity(RouteInstalledStateIdentity):
    """
    Uninstalled state.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteInstalledStateIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['UninstalledIdentity']['meta_info']


class HopLimitCopyToInnerIdentity(HopLimitActionIdentity):
    """
    Copy the hop limit of the outer header
    to the inner header.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        HopLimitActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['HopLimitCopyToInnerIdentity']['meta_info']


class Ipv6DecapIdentity(TunnelDecapActionIdentity):
    """
    IPv4 tunnel decap.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TunnelDecapActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['Ipv6DecapIdentity']['meta_info']


class HigherRoutePreferenceIdentity(RouteChangeReasonIdentity):
    """
    This route was uninstalled from the FIB because it had
    a higher route preference value (and thus was less
    preferred) than the route that replaced it.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteChangeReasonIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['HigherRoutePreferenceIdentity']['meta_info']


class MplsTunnelIdentity(TunnelTypeIdentity):
    """
    MPLS tunnel type
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TunnelTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['MplsTunnelIdentity']['meta_info']


class ResolvedIdentity(NexthopStateIdentity):
    """
    Reolved nexthop state.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        NexthopStateIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['ResolvedIdentity']['meta_info']


class Ipv6RouteIdentity(RouteTypeIdentity):
    """
    IPv6 route type.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['Ipv6RouteIdentity']['meta_info']


class VxlanTunnelIdentity(TunnelTypeIdentity):
    """
    VxLAN tunnel type
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TunnelTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['VxlanTunnelIdentity']['meta_info']


class MatchIpSrcIdentity(IpRouteMatchTypeIdentity):
    """
    Source route match type.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        IpRouteMatchTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['MatchIpSrcIdentity']['meta_info']


class Ipv6TunnelIdentity(TunnelTypeIdentity):
    """
    IPv6 Tunnel type
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TunnelTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['Ipv6TunnelIdentity']['meta_info']


class LowerRoutePreferenceIdentity(RouteChangeReasonIdentity):
    """
    This route was installed in the FIB because it had
    a lower route preference value (and thus was more
    preferred) than the route it replaced.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteChangeReasonIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['LowerRoutePreferenceIdentity']['meta_info']


class UnresolvedIdentity(NexthopStateIdentity):
    """
    Unresolved nexthop state.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        NexthopStateIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['UnresolvedIdentity']['meta_info']


class CopyToInnerIdentity(TtlActionIdentity):
    """
    Copy the TTL of the outer header
    to the inner header.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TtlActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['CopyToInnerIdentity']['meta_info']


class InterfaceIdentity(RouteTypeIdentity):
    """
    Interface route type.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['InterfaceIdentity']['meta_info']


class Ipv6RibFamilyIdentity(RibFamilyIdentity):
    """
    IPv6 RIB address family.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RibFamilyIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['Ipv6RibFamilyIdentity']['meta_info']


class Ipv4RouteIdentity(RouteTypeIdentity):
    """
    IPv4 route type.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['Ipv4RouteIdentity']['meta_info']


class Ipv4TunnelIdentity(TunnelTypeIdentity):
    """
    IPv4 tunnel type
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TunnelTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['Ipv4TunnelIdentity']['meta_info']


class ReceiveIdentity(SpecialNexthopIdentity):
    """
    This indicates that the traffic is
    destined for the network device.  For
    example, protocol packets or OAM packets.
    All locally destined traffic SHOULD be
    throttled to avoid a denial of service
    attack on the router's control plane. An
    optional rate\-limiter can be specified
    to indicate how to throttle traffic
    destined for the control plane.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        SpecialNexthopIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['ReceiveIdentity']['meta_info']


class MatchIpDestIdentity(IpRouteMatchTypeIdentity):
    """
    Destination route match type
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        IpRouteMatchTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['MatchIpDestIdentity']['meta_info']


class NvgreTunnelIdentity(TunnelTypeIdentity):
    """
    NVGRE tunnel type
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TunnelTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['NvgreTunnelIdentity']['meta_info']


class DiscardWithErrorIdentity(SpecialNexthopIdentity):
    """
    This indicates that the network
    device should drop the packet,
    increment a drop counter and send
    back an appropriate error message
    (like ICMP error).
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        SpecialNexthopIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['DiscardWithErrorIdentity']['meta_info']


class CosValueIdentity(SpecialNexthopIdentity):
    """
    Cos\-value special nexthop.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        SpecialNexthopIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['CosValueIdentity']['meta_info']


class LabelSwapIdentity(MplsLabelActionIdentity):
    """
    MPLS label stack operation\: swap.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        MplsLabelActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['LabelSwapIdentity']['meta_info']


class MplsRouteIdentity(RouteTypeIdentity):
    """
    MPLS route type.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        RouteTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['MplsRouteIdentity']['meta_info']


class GreTunnelIdentity(TunnelTypeIdentity):
    """
    GRE tunnel type
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TunnelTypeIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['GreTunnelIdentity']['meta_info']


class DiscardIdentity(SpecialNexthopIdentity):
    """
    This indicates that the network
    device should drop the packet and
    increment a drop counter.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        SpecialNexthopIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['DiscardIdentity']['meta_info']


class DecreaseAndCopyToNextIdentity(TtlActionIdentity):
    """
    Decrease TTL by one and copy the TTL
    to the next header.For example\: when
    MPLS label swapping, decrease the TTL
    of the inner label and copy it to the
    outer label.
    
    

    """

    _prefix = 'iir'
    _revision = '2016-07-04'

    def __init__(self):
        TtlActionIdentity.__init__(self)

    @staticmethod
    def _meta_info():
        from ydk.models.ietf._meta import _ietf_i2rs_rib as meta
        return meta._meta_table['DecreaseAndCopyToNextIdentity']['meta_info']


