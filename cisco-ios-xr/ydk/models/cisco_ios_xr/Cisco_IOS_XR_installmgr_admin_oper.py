""" Cisco_IOS_XR_installmgr_admin_oper 

This module contains a collection of YANG definitions
for Cisco IOS\-XR installmgr package
admin\-plane operational data.

This module contains definitions
for the following management objects\:
  install\: Information of software packages and install
    operations

Copyright (c) 2013\-2016 by Cisco Systems, Inc.
All rights reserved.

"""
from ydk.entity_utils import get_relative_entity_path as _get_relative_entity_path
from ydk.types import Entity, EntityPath, Identity, Enum, YType, YLeaf, YLeafList, YList, LeafDataList, Bits, Empty, Decimal64
from ydk.filters import YFilter
from ydk.errors import YPYError, YPYModelError
from ydk.errors.error_handler import handle_type_error as _handle_type_error


class InstallmgrIsmNodeConforming(Enum):
    """
    InstallmgrIsmNodeConforming

    ISSU manage node inventory type

    .. data:: conforming = 0

    	Conforming Nodes

    .. data:: none_conforming = 1

    	Non-conforming nodes

    .. data:: upgrade_fail = 2

    	Node Upgrade failed

    .. data:: none_conforming_spa = 3

    	Non-conforming SPAs

    .. data:: spa_upgrade_fail = 4

    	SPA Upgrade failed

    """

    conforming = Enum.YLeaf(0, "conforming")

    none_conforming = Enum.YLeaf(1, "none-conforming")

    upgrade_fail = Enum.YLeaf(2, "upgrade-fail")

    none_conforming_spa = Enum.YLeaf(3, "none-conforming-spa")

    spa_upgrade_fail = Enum.YLeaf(4, "spa-upgrade-fail")


class InstmgrBagAbortState(Enum):
    """
    InstmgrBagAbortState

    The abortable state of an install command

    .. data:: abortable = 1

    	Operation can be aborted

    .. data:: no_longer_abortable = 2

    	Operation can no longer be aborted

    .. data:: never_abortable = 3

    	Operation cannot be aborted

    .. data:: already_aborted = 4

    	Operation has been aborted

    """

    abortable = Enum.YLeaf(1, "abortable")

    no_longer_abortable = Enum.YLeaf(2, "no-longer-abortable")

    never_abortable = Enum.YLeaf(3, "never-abortable")

    already_aborted = Enum.YLeaf(4, "already-aborted")


class InstmgrBagIiDirection(Enum):
    """
    InstmgrBagIiDirection

    The Incremental Install direction

    .. data:: not_incremental = 0

    	Not incremental install operation

    .. data:: installing = 1

    	Installing

    .. data:: unwinding = 2

    	Unwinding

    """

    not_incremental = Enum.YLeaf(0, "not-incremental")

    installing = Enum.YLeaf(1, "installing")

    unwinding = Enum.YLeaf(2, "unwinding")


class InstmgrBagIiState(Enum):
    """
    InstmgrBagIiState

    The Incremental Install state of an install

    .. data:: idle = 1

    	Node to be upraded

    .. data:: in_progress = 2

    	Node is being upraded

    .. data:: completed = 3

    	Node upgraded successfully

    .. data:: aborted = 4

    	Node reverted to the old S/W

    .. data:: rebooted = 5

    	Node rebooted and held in MBI

    """

    idle = Enum.YLeaf(1, "idle")

    in_progress = Enum.YLeaf(2, "in-progress")

    completed = Enum.YLeaf(3, "completed")

    aborted = Enum.YLeaf(4, "aborted")

    rebooted = Enum.YLeaf(5, "rebooted")


class InstmgrBagLogEntryUserMsgCategory(Enum):
    """
    InstmgrBagLogEntryUserMsgCategory

    Category type

    .. data:: user_error = 1

    	User error

    .. data:: non_specific = 2

    	Non-specific message

    .. data:: warning = 3

    	Warning message

    .. data:: information = 4

    	Information message

    .. data:: user_prompt = 5

    	User prompt

    .. data:: log = 6

    	Log message

    .. data:: system_error = 7

    	System error

    .. data:: user_response = 8

    	User response

    """

    user_error = Enum.YLeaf(1, "user-error")

    non_specific = Enum.YLeaf(2, "non-specific")

    warning = Enum.YLeaf(3, "warning")

    information = Enum.YLeaf(4, "information")

    user_prompt = Enum.YLeaf(5, "user-prompt")

    log = Enum.YLeaf(6, "log")

    system_error = Enum.YLeaf(7, "system-error")

    user_response = Enum.YLeaf(8, "user-response")


class InstmgrBagRequestTrigger(Enum):
    """
    InstmgrBagRequestTrigger

    The trigger type of an install request

    .. data:: cli = 1

    	Request triggered by CLI

    .. data:: xr_xml = 2

    	Request triggered by XML

    """

    cli = Enum.YLeaf(1, "cli")

    xr_xml = Enum.YLeaf(2, "xr-xml")


class InstmgrBagUserMsgCategory(Enum):
    """
    InstmgrBagUserMsgCategory

    Instmgr bag user msg category

    .. data:: user_error = 1

    	User error

    .. data:: non_specific = 2

    	Non-specific message

    .. data:: warning = 3

    	Warning message

    .. data:: information = 4

    	Information message

    .. data:: user_prompt = 5

    	User prompt

    .. data:: log = 6

    	Log message

    .. data:: system_error = 7

    	System error

    .. data:: user_response = 8

    	User response

    """

    user_error = Enum.YLeaf(1, "user-error")

    non_specific = Enum.YLeaf(2, "non-specific")

    warning = Enum.YLeaf(3, "warning")

    information = Enum.YLeaf(4, "information")

    user_prompt = Enum.YLeaf(5, "user-prompt")

    log = Enum.YLeaf(6, "log")

    system_error = Enum.YLeaf(7, "system-error")

    user_response = Enum.YLeaf(8, "user-response")


class InstmgrCardState(Enum):
    """
    InstmgrCardState

    Instmgr card state

    .. data:: instmgr_card_not_present = 0

    	instmgr card not present

    .. data:: instmgr_card_present = 1

    	instmgr card present

    .. data:: instmgr_card_reset = 2

    	instmgr card reset

    .. data:: instmgr_card_booting = 3

    	instmgr card booting

    .. data:: instmgr_card_mbi_booting = 4

    	instmgr card mbi booting

    .. data:: instmgr_card_running_mbi = 5

    	instmgr card running mbi

    .. data:: instmgr_card_running_ena = 6

    	instmgr card running ena

    .. data:: instmgr_card_bring_down = 7

    	instmgr card bring down

    .. data:: instmgr_card_ena_failure = 8

    	instmgr card ena failure

    .. data:: instmgr_card_f_diag_run = 9

    	instmgr card f diag run

    .. data:: instmgr_card_f_diag_failure = 10

    	instmgr card f diag failure

    .. data:: instmgr_card_powered = 11

    	instmgr card powered

    .. data:: instmgr_card_unpowered = 12

    	instmgr card unpowered

    .. data:: instmgr_card_mdr = 13

    	instmgr card mdr

    .. data:: instmgr_card_mdr_running_mbi = 14

    	instmgr card mdr running mbi

    .. data:: instmgr_card_main_t_mode = 15

    	instmgr card main t mode

    .. data:: instmgr_card_admin_down = 16

    	instmgr card admin down

    .. data:: instmgr_card_no_mon = 17

    	instmgr card no mon

    .. data:: instmgr_card_unknown = 18

    	instmgr card unknown

    .. data:: instmgr_card_failed = 19

    	instmgr card failed

    .. data:: instmgr_card_ok = 20

    	instmgr card ok

    .. data:: instmgr_card_missing = 21

    	instmgr card missing

    .. data:: instmgr_card_field_diag_downloading = 22

    	instmgr card field diag downloading

    .. data:: instmgr_card_field_diag_unmonitor = 23

    	instmgr card field diag unmonitor

    .. data:: instmgr_card_fabric_field_diag_unmonitor = 24

    	instmgr card fabric field diag unmonitor

    .. data:: instmgr_card_field_diag_rp_launching = 25

    	instmgr card field diag rp launching

    .. data:: instmgr_card_field_diag_running = 26

    	instmgr card field diag running

    .. data:: instmgr_card_field_diag_pass = 27

    	instmgr card field diag pass

    .. data:: instmgr_card_field_diag_fail = 28

    	instmgr card field diag fail

    .. data:: instmgr_card_field_diag_timeout = 29

    	instmgr card field diag timeout

    .. data:: instmgr_card_disabled = 30

    	instmgr card disabled

    .. data:: instmgr_card_spa_booting = 31

    	instmgr card spa booting

    .. data:: instmgr_card_not_allowed_online = 32

    	instmgr card not allowed online

    .. data:: instmgr_card_stopped = 33

    	instmgr card stopped

    .. data:: instmgr_card_incompatible_fw_ver = 34

    	instmgr card incompatible fw ver

    .. data:: instmgr_card_fpd_hold = 35

    	instmgr card fpd hold

    .. data:: instmgr_card_updating_fpd = 37

    	instmgr card updating fpd

    .. data:: instmgr_card_num_states = 38

    	instmgr card num states

    """

    instmgr_card_not_present = Enum.YLeaf(0, "instmgr-card-not-present")

    instmgr_card_present = Enum.YLeaf(1, "instmgr-card-present")

    instmgr_card_reset = Enum.YLeaf(2, "instmgr-card-reset")

    instmgr_card_booting = Enum.YLeaf(3, "instmgr-card-booting")

    instmgr_card_mbi_booting = Enum.YLeaf(4, "instmgr-card-mbi-booting")

    instmgr_card_running_mbi = Enum.YLeaf(5, "instmgr-card-running-mbi")

    instmgr_card_running_ena = Enum.YLeaf(6, "instmgr-card-running-ena")

    instmgr_card_bring_down = Enum.YLeaf(7, "instmgr-card-bring-down")

    instmgr_card_ena_failure = Enum.YLeaf(8, "instmgr-card-ena-failure")

    instmgr_card_f_diag_run = Enum.YLeaf(9, "instmgr-card-f-diag-run")

    instmgr_card_f_diag_failure = Enum.YLeaf(10, "instmgr-card-f-diag-failure")

    instmgr_card_powered = Enum.YLeaf(11, "instmgr-card-powered")

    instmgr_card_unpowered = Enum.YLeaf(12, "instmgr-card-unpowered")

    instmgr_card_mdr = Enum.YLeaf(13, "instmgr-card-mdr")

    instmgr_card_mdr_running_mbi = Enum.YLeaf(14, "instmgr-card-mdr-running-mbi")

    instmgr_card_main_t_mode = Enum.YLeaf(15, "instmgr-card-main-t-mode")

    instmgr_card_admin_down = Enum.YLeaf(16, "instmgr-card-admin-down")

    instmgr_card_no_mon = Enum.YLeaf(17, "instmgr-card-no-mon")

    instmgr_card_unknown = Enum.YLeaf(18, "instmgr-card-unknown")

    instmgr_card_failed = Enum.YLeaf(19, "instmgr-card-failed")

    instmgr_card_ok = Enum.YLeaf(20, "instmgr-card-ok")

    instmgr_card_missing = Enum.YLeaf(21, "instmgr-card-missing")

    instmgr_card_field_diag_downloading = Enum.YLeaf(22, "instmgr-card-field-diag-downloading")

    instmgr_card_field_diag_unmonitor = Enum.YLeaf(23, "instmgr-card-field-diag-unmonitor")

    instmgr_card_fabric_field_diag_unmonitor = Enum.YLeaf(24, "instmgr-card-fabric-field-diag-unmonitor")

    instmgr_card_field_diag_rp_launching = Enum.YLeaf(25, "instmgr-card-field-diag-rp-launching")

    instmgr_card_field_diag_running = Enum.YLeaf(26, "instmgr-card-field-diag-running")

    instmgr_card_field_diag_pass = Enum.YLeaf(27, "instmgr-card-field-diag-pass")

    instmgr_card_field_diag_fail = Enum.YLeaf(28, "instmgr-card-field-diag-fail")

    instmgr_card_field_diag_timeout = Enum.YLeaf(29, "instmgr-card-field-diag-timeout")

    instmgr_card_disabled = Enum.YLeaf(30, "instmgr-card-disabled")

    instmgr_card_spa_booting = Enum.YLeaf(31, "instmgr-card-spa-booting")

    instmgr_card_not_allowed_online = Enum.YLeaf(32, "instmgr-card-not-allowed-online")

    instmgr_card_stopped = Enum.YLeaf(33, "instmgr-card-stopped")

    instmgr_card_incompatible_fw_ver = Enum.YLeaf(34, "instmgr-card-incompatible-fw-ver")

    instmgr_card_fpd_hold = Enum.YLeaf(35, "instmgr-card-fpd-hold")

    instmgr_card_updating_fpd = Enum.YLeaf(37, "instmgr-card-updating-fpd")

    instmgr_card_num_states = Enum.YLeaf(38, "instmgr-card-num-states")


class InstmgrGroup(Enum):
    """
    InstmgrGroup

    Group type

    .. data:: inst_pkg_group_undefined = 0

    	Undefined grouping

    .. data:: inst_pkg_group_grouped = 1

    	Packages are grouped

    .. data:: inst_pkg_group_individual = 2

    	Packages are all individual

    """

    inst_pkg_group_undefined = Enum.YLeaf(0, "inst-pkg-group-undefined")

    inst_pkg_group_grouped = Enum.YLeaf(1, "inst-pkg-group-grouped")

    inst_pkg_group_individual = Enum.YLeaf(2, "inst-pkg-group-individual")


class InstmgrInstallPhase(Enum):
    """
    InstmgrInstallPhase

    Current operation phase

    .. data:: inst_phase_unknown = 0

    	Unknown operational phase

    .. data:: inst_phase_download = 10

    	Downloading

    .. data:: inst_phase_sw_change = 50

    	Performing software changes

    .. data:: inst_phase_cleaning_up = 1000

    	Cleaning up after op

    """

    inst_phase_unknown = Enum.YLeaf(0, "inst-phase-unknown")

    inst_phase_download = Enum.YLeaf(10, "inst-phase-download")

    inst_phase_sw_change = Enum.YLeaf(50, "inst-phase-sw-change")

    inst_phase_cleaning_up = Enum.YLeaf(1000, "inst-phase-cleaning-up")


class InstmgrIsmFsmState(Enum):
    """
    InstmgrIsmFsmState

    Install manager FSM state

    .. data:: idle = 0

    	No ISSU in progress

    .. data:: init_done = 1

    	LOAD init

    .. data:: load_shut = 2

    	LOAD preparation

    .. data:: load_wait = 3

    	LOAD wait

    .. data:: load_stp_root_before = 4

    	LOAD root SC FO

    .. data:: load_standby_root_sc_upgrade = 5

    	LOAD standby ROOT SC Upgrade

    .. data:: load_standby_management_upgrade = 6

    	LOAD standby management upgrade

    .. data:: load_stp_root_after = 7

    	LOAD NDSC FO

    .. data:: load_fabric_upgrade = 8

    	LOAD fabric upgrade

    .. data:: load_management_issu_ready = 9

    	LOAD ISSU ready

    .. data:: load_done = 10

    	LOAD done

    .. data:: run_prep = 11

    	RUN preparation

    .. data:: run_wait = 12

    	RUN wait

    .. data:: runi_mdr_prep = 13

    	RUN iMDR preparation

    .. data:: runi_mdr_start = 14

    	RUN iMDR start

    .. data:: runi_mdr_complete = 15

    	RUN iMDR complete

    .. data:: run_make_standby_ready = 16

    	RUN make standby ready

    .. data:: run_root_scfo = 17

    	RUN root SC FO

    .. data:: run_ndscfo = 18

    	RUN NDSC FO

    .. data:: run_transient1 = 19

    	RUN transient1

    .. data:: run_dscfo = 20

    	RUN DSC FO

    .. data:: run_fo_complete = 21

    	RUN FO compelte

    .. data:: run_stp_root_return = 22

    	Run STP Root Return

    .. data:: runi_mdr_continue = 23

    	RUN iMDR continue

    .. data:: run_am_i_ready_afteri_mdr = 24

    	RUN I am ready after iMDR

    .. data:: run_nsf_ready = 25

    	RUN NSF ready

    .. data:: run_nsf_begin = 26

    	RUN iMDR begin

    .. data:: runi_mdr_done = 27

    	RUN iMDR done

    .. data:: run_management_issu_ready = 28

    	RUN mgmt issu ready

    .. data:: run_un_shut = 29

    	RUN unshut

    .. data:: run_is_done = 30

    	RUN done

    .. data:: state_max = 31

    	Max ISSU state

    """

    idle = Enum.YLeaf(0, "idle")

    init_done = Enum.YLeaf(1, "init-done")

    load_shut = Enum.YLeaf(2, "load-shut")

    load_wait = Enum.YLeaf(3, "load-wait")

    load_stp_root_before = Enum.YLeaf(4, "load-stp-root-before")

    load_standby_root_sc_upgrade = Enum.YLeaf(5, "load-standby-root-sc-upgrade")

    load_standby_management_upgrade = Enum.YLeaf(6, "load-standby-management-upgrade")

    load_stp_root_after = Enum.YLeaf(7, "load-stp-root-after")

    load_fabric_upgrade = Enum.YLeaf(8, "load-fabric-upgrade")

    load_management_issu_ready = Enum.YLeaf(9, "load-management-issu-ready")

    load_done = Enum.YLeaf(10, "load-done")

    run_prep = Enum.YLeaf(11, "run-prep")

    run_wait = Enum.YLeaf(12, "run-wait")

    runi_mdr_prep = Enum.YLeaf(13, "runi-mdr-prep")

    runi_mdr_start = Enum.YLeaf(14, "runi-mdr-start")

    runi_mdr_complete = Enum.YLeaf(15, "runi-mdr-complete")

    run_make_standby_ready = Enum.YLeaf(16, "run-make-standby-ready")

    run_root_scfo = Enum.YLeaf(17, "run-root-scfo")

    run_ndscfo = Enum.YLeaf(18, "run-ndscfo")

    run_transient1 = Enum.YLeaf(19, "run-transient1")

    run_dscfo = Enum.YLeaf(20, "run-dscfo")

    run_fo_complete = Enum.YLeaf(21, "run-fo-complete")

    run_stp_root_return = Enum.YLeaf(22, "run-stp-root-return")

    runi_mdr_continue = Enum.YLeaf(23, "runi-mdr-continue")

    run_am_i_ready_afteri_mdr = Enum.YLeaf(24, "run-am-i-ready-afteri-mdr")

    run_nsf_ready = Enum.YLeaf(25, "run-nsf-ready")

    run_nsf_begin = Enum.YLeaf(26, "run-nsf-begin")

    runi_mdr_done = Enum.YLeaf(27, "runi-mdr-done")

    run_management_issu_ready = Enum.YLeaf(28, "run-management-issu-ready")

    run_un_shut = Enum.YLeaf(29, "run-un-shut")

    run_is_done = Enum.YLeaf(30, "run-is-done")

    state_max = Enum.YLeaf(31, "state-max")


class InstmgrIsmNodeState(Enum):
    """
    InstmgrIsmNodeState

    ISSU manager node state

    .. data:: none = 0

    	No ISSU in progress

    .. data:: issu_node_gsp_ready = 1

    	Node GSP ready

    .. data:: load_shut_done = 2

    	Load shut done

    .. data:: standby_management_upgrade_done = 3

    	Standby management nodes upgrade done

    .. data:: fabric_upgrade_done = 4

    	Fabric nodes upgrade done

    .. data:: imdr_preparation_ack_received = 5

    	iMDR preparation ACK received

    .. data:: imdr_preparation_failed = 6

    	iMDR preparation ACK failed

    .. data:: imdr_start_ack_received = 7

    	iMDR start AVK received

    .. data:: imdr_start_failed = 8

    	iMDR start failed

    .. data:: imdr_complete_ack_received = 9

    	iMDR complete ACK received

    .. data:: imdr_complete_failed = 10

    	iMDR complete failed

    .. data:: standby_management_ready = 11

    	Standby management nodes ready

    .. data:: fo_acknowledged = 12

    	FO acked

    .. data:: fo_complete = 13

    	FO complete

    .. data:: standby_ready_after_fo = 14

    	Standby nodes ready after FO

    .. data:: iam_ready_afteri_mdr = 15

    	Node is ready after iMDR

    .. data:: nsf_ready = 16

    	NSF ready

    .. data:: nsf_begin_ack_received = 17

    	NSF begin ACK received

    .. data:: imdr_done = 18

    	iMDR done

    .. data:: unshut_done = 19

    	Unshut done

    .. data:: run_done = 20

    	Run done

    .. data:: imdr_abort_sent = 21

    	iMDR abort sent

    .. data:: imdr_abort_ack_received = 22

    	iMDR abort ACK Received

    .. data:: imdr_abort_failed = 23

    	iMDR abort failed

    .. data:: standby_management_downgrade_done = 24

    	Standby management nodes downgrade done

    .. data:: fabric_downgrade_done = 25

    	Fabric nodes downgrade done

    .. data:: reload_during_issu = 26

    	Node reloaded during ISSU

    .. data:: timneout = 27

    	Node time out

    .. data:: fabric_upgrade_failed = 28

    	Fabric upgrade failed

    .. data:: unsupported_hw = 29

    	Unsupported hardware

    .. data:: not_reachable = 30

    	Node unreachable

    .. data:: max = 32

    	Max node state

    """

    none = Enum.YLeaf(0, "none")

    issu_node_gsp_ready = Enum.YLeaf(1, "issu-node-gsp-ready")

    load_shut_done = Enum.YLeaf(2, "load-shut-done")

    standby_management_upgrade_done = Enum.YLeaf(3, "standby-management-upgrade-done")

    fabric_upgrade_done = Enum.YLeaf(4, "fabric-upgrade-done")

    imdr_preparation_ack_received = Enum.YLeaf(5, "imdr-preparation-ack-received")

    imdr_preparation_failed = Enum.YLeaf(6, "imdr-preparation-failed")

    imdr_start_ack_received = Enum.YLeaf(7, "imdr-start-ack-received")

    imdr_start_failed = Enum.YLeaf(8, "imdr-start-failed")

    imdr_complete_ack_received = Enum.YLeaf(9, "imdr-complete-ack-received")

    imdr_complete_failed = Enum.YLeaf(10, "imdr-complete-failed")

    standby_management_ready = Enum.YLeaf(11, "standby-management-ready")

    fo_acknowledged = Enum.YLeaf(12, "fo-acknowledged")

    fo_complete = Enum.YLeaf(13, "fo-complete")

    standby_ready_after_fo = Enum.YLeaf(14, "standby-ready-after-fo")

    iam_ready_afteri_mdr = Enum.YLeaf(15, "iam-ready-afteri-mdr")

    nsf_ready = Enum.YLeaf(16, "nsf-ready")

    nsf_begin_ack_received = Enum.YLeaf(17, "nsf-begin-ack-received")

    imdr_done = Enum.YLeaf(18, "imdr-done")

    unshut_done = Enum.YLeaf(19, "unshut-done")

    run_done = Enum.YLeaf(20, "run-done")

    imdr_abort_sent = Enum.YLeaf(21, "imdr-abort-sent")

    imdr_abort_ack_received = Enum.YLeaf(22, "imdr-abort-ack-received")

    imdr_abort_failed = Enum.YLeaf(23, "imdr-abort-failed")

    standby_management_downgrade_done = Enum.YLeaf(24, "standby-management-downgrade-done")

    fabric_downgrade_done = Enum.YLeaf(25, "fabric-downgrade-done")

    reload_during_issu = Enum.YLeaf(26, "reload-during-issu")

    timneout = Enum.YLeaf(27, "timneout")

    fabric_upgrade_failed = Enum.YLeaf(28, "fabric-upgrade-failed")

    unsupported_hw = Enum.YLeaf(29, "unsupported-hw")

    not_reachable = Enum.YLeaf(30, "not-reachable")

    max = Enum.YLeaf(32, "max")


class InstmgrIssuAbortImpact(Enum):
    """
    InstmgrIssuAbortImpact

    Abort impact

    .. data:: undefined = 0

    	Unknown abort impact

    .. data:: hitless = 1

    	Abort is hitless

    .. data:: traffic_outage = 2

    	Abort will not affect traffic

    .. data:: not_applicable = 3

    	Abort impact: n/a

    """

    undefined = Enum.YLeaf(0, "undefined")

    hitless = Enum.YLeaf(1, "hitless")

    traffic_outage = Enum.YLeaf(2, "traffic-outage")

    not_applicable = Enum.YLeaf(3, "not-applicable")


class InstmgrIssuAbortMethod(Enum):
    """
    InstmgrIssuAbortMethod

    Abort method

    .. data:: method_undefined = 0

    	Unknown abort method

    .. data:: method_no_operation = 1

    	No abort is required

    .. data:: method_standby_reload = 2

    	Abort will reload standby nodes

    .. data:: method_system_reload = 3

    	Abort will reload the whole system

    .. data:: method_rollback = 4

    	Abort will rollback

    .. data:: method_not_possible = 5

    	Abort is not possible

    .. data:: method_admin_only = 6

    	Abort is not possible by SDR user

    """

    method_undefined = Enum.YLeaf(0, "method-undefined")

    method_no_operation = Enum.YLeaf(1, "method-no-operation")

    method_standby_reload = Enum.YLeaf(2, "method-standby-reload")

    method_system_reload = Enum.YLeaf(3, "method-system-reload")

    method_rollback = Enum.YLeaf(4, "method-rollback")

    method_not_possible = Enum.YLeaf(5, "method-not-possible")

    method_admin_only = Enum.YLeaf(6, "method-admin-only")


class InstmgrNodeRole(Enum):
    """
    InstmgrNodeRole

    Node role

    .. data:: redundency_unknown = 0

    	Redundency unknown

    .. data:: redundency_active = 1

    	Redundency active

    .. data:: redundency_standby = 2

    	Redundency standby

    .. data:: redundency_unusable = 3

    	Redundency unusable

    """

    redundency_unknown = Enum.YLeaf(0, "redundency-unknown")

    redundency_active = Enum.YLeaf(1, "redundency-active")

    redundency_standby = Enum.YLeaf(2, "redundency-standby")

    redundency_unusable = Enum.YLeaf(3, "redundency-unusable")


class InstmgrPiCard(Enum):
    """
    InstmgrPiCard

    PI card types

    .. data:: type_rp = 0

    	Card type RP

    .. data:: type_drp = 1

    	Card Type DRP

    .. data:: type_lc = 2

    	Card type  LC

    .. data:: type_sc = 3

    	Card type SC

    .. data:: type_sp = 4

    	Card type SP

    .. data:: type_other = 5

    	Card type other

    """

    type_rp = Enum.YLeaf(0, "type-rp")

    type_drp = Enum.YLeaf(1, "type-drp")

    type_lc = Enum.YLeaf(2, "type-lc")

    type_sc = Enum.YLeaf(3, "type-sc")

    type_sp = Enum.YLeaf(4, "type-sp")

    type_other = Enum.YLeaf(5, "type-other")


class InstmgrPkg(Enum):
    """
    InstmgrPkg

    Package type

    .. data:: inst_pkg_type_undefined = 0

    	Undefined package

    .. data:: inst_pkg_type_root = 1

    	Root package

    .. data:: inst_pkg_type_standard = 2

    	Standard package

    .. data:: inst_pkg_type_internal = 3

    	Internal package

    """

    inst_pkg_type_undefined = Enum.YLeaf(0, "inst-pkg-type-undefined")

    inst_pkg_type_root = Enum.YLeaf(1, "inst-pkg-type-root")

    inst_pkg_type_standard = Enum.YLeaf(2, "inst-pkg-type-standard")

    inst_pkg_type_internal = Enum.YLeaf(3, "inst-pkg-type-internal")


class InstmgrRequest(Enum):
    """
    InstmgrRequest

    Instmgr request

    .. data:: add = 1

    	install add

    .. data:: accept = 2

    	install accept

    .. data:: clean = 3

    	install clean

    .. data:: activate = 4

    	install activate

    .. data:: deactivate = 5

    	install deactivate

    .. data:: commit = 6

    	install commit

    .. data:: verify = 7

    	install verify

    .. data:: rollback = 8

    	install rollback

    .. data:: clear_rollback = 9

    	install clear rollback oldest

    .. data:: clear_log = 10

    	install clear historylog

    .. data:: health_check = 11

    	(Deprecated) install healthcheck

    .. data:: operation_ = 12

    	install run/accept/complete

    .. data:: stop_timer = 13

    	install auto-abort-timer stop

    .. data:: label = 14

    	install label

    .. data:: clear_label = 15

    	clear install label

    .. data:: extend = 16

    	install extend

    """

    add = Enum.YLeaf(1, "add")

    accept = Enum.YLeaf(2, "accept")

    clean = Enum.YLeaf(3, "clean")

    activate = Enum.YLeaf(4, "activate")

    deactivate = Enum.YLeaf(5, "deactivate")

    commit = Enum.YLeaf(6, "commit")

    verify = Enum.YLeaf(7, "verify")

    rollback = Enum.YLeaf(8, "rollback")

    clear_rollback = Enum.YLeaf(9, "clear-rollback")

    clear_log = Enum.YLeaf(10, "clear-log")

    health_check = Enum.YLeaf(11, "health-check")

    operation_ = Enum.YLeaf(12, "operation")

    stop_timer = Enum.YLeaf(13, "stop-timer")

    label = Enum.YLeaf(14, "label")

    clear_label = Enum.YLeaf(15, "clear-label")

    extend = Enum.YLeaf(16, "extend")


class IsmCardTypeFamily(Enum):
    """
    IsmCardTypeFamily

    Ism card type family

    .. data:: ndsc_active_rp = 1

    	Active NDSC RPs

    .. data:: ndsc_standby_rp = 2

    	Standby NDSC RPs

    .. data:: active_drp = 3

    	Active DRP

    .. data:: standby_drp = 4

    	Standby DRP

    .. data:: dsc_active_rp = 5

    	Active dSC

    .. data:: dsc_standby_rp = 6

    	Standby dSC

    .. data:: active_sc = 7

    	Active non-root SC

    .. data:: standby_sc = 8

    	Standby non-root SC

    .. data:: root_active_sc = 9

    	Active root SC

    .. data:: root_standby_sc = 10

    	Standby root SC

    .. data:: lc = 11

    	Line card

    .. data:: sp = 12

    	Non-Fabric SP

    .. data:: fabric_sp = 13

    	Fabric SP

    .. data:: spa = 14

    	SPA

    """

    ndsc_active_rp = Enum.YLeaf(1, "ndsc-active-rp")

    ndsc_standby_rp = Enum.YLeaf(2, "ndsc-standby-rp")

    active_drp = Enum.YLeaf(3, "active-drp")

    standby_drp = Enum.YLeaf(4, "standby-drp")

    dsc_active_rp = Enum.YLeaf(5, "dsc-active-rp")

    dsc_standby_rp = Enum.YLeaf(6, "dsc-standby-rp")

    active_sc = Enum.YLeaf(7, "active-sc")

    standby_sc = Enum.YLeaf(8, "standby-sc")

    root_active_sc = Enum.YLeaf(9, "root-active-sc")

    root_standby_sc = Enum.YLeaf(10, "root-standby-sc")

    lc = Enum.YLeaf(11, "lc")

    sp = Enum.YLeaf(12, "sp")

    fabric_sp = Enum.YLeaf(13, "fabric-sp")

    spa = Enum.YLeaf(14, "spa")



class Install(Entity):
    """
    Information of software packages and install
    operations
    
    .. attribute:: boot_image
    
    	System Boot Image
    	**type**\:   :py:class:`BootImage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.BootImage>`
    
    .. attribute:: boot_variables
    
    	Boot variable information
    	**type**\:   :py:class:`BootVariables <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.BootVariables>`
    
    .. attribute:: configuration_registers
    
    	Configuration register (confreg) information
    	**type**\:   :py:class:`ConfigurationRegisters <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.ConfigurationRegisters>`
    
    .. attribute:: issu
    
    	Information of install ISSU operations
    	**type**\:   :py:class:`Issu <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Issu>`
    
    .. attribute:: log_size
    
    	Install operation log history size
    	**type**\:  int
    
    	**range:** \-2147483648..2147483647
    
    .. attribute:: logs
    
    	Install operation log
    	**type**\:   :py:class:`Logs <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs>`
    
    .. attribute:: request_statuses
    
    	Install operation request status
    	**type**\:   :py:class:`RequestStatuses <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses>`
    
    .. attribute:: software
    
    	Software package,component and alias information
    	**type**\:   :py:class:`Software <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software>`
    
    .. attribute:: software_inventory
    
    	Information of install operations
    	**type**\:   :py:class:`SoftwareInventory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory>`
    
    

    """

    _prefix = 'installmgr-admin-oper'
    _revision = '2015-11-09'

    def __init__(self):
        super(Install, self).__init__()
        self._top_entity = None

        self.yang_name = "install"
        self.yang_parent_name = "Cisco-IOS-XR-installmgr-admin-oper"

        self.log_size = YLeaf(YType.int32, "log-size")

        self.boot_image = Install.BootImage()
        self.boot_image.parent = self
        self._children_name_map["boot_image"] = "boot-image"
        self._children_yang_names.add("boot-image")

        self.boot_variables = Install.BootVariables()
        self.boot_variables.parent = self
        self._children_name_map["boot_variables"] = "boot-variables"
        self._children_yang_names.add("boot-variables")

        self.configuration_registers = Install.ConfigurationRegisters()
        self.configuration_registers.parent = self
        self._children_name_map["configuration_registers"] = "configuration-registers"
        self._children_yang_names.add("configuration-registers")

        self.issu = Install.Issu()
        self.issu.parent = self
        self._children_name_map["issu"] = "issu"
        self._children_yang_names.add("issu")

        self.logs = Install.Logs()
        self.logs.parent = self
        self._children_name_map["logs"] = "logs"
        self._children_yang_names.add("logs")

        self.request_statuses = Install.RequestStatuses()
        self.request_statuses.parent = self
        self._children_name_map["request_statuses"] = "request-statuses"
        self._children_yang_names.add("request-statuses")

        self.software = Install.Software()
        self.software.parent = self
        self._children_name_map["software"] = "software"
        self._children_yang_names.add("software")

        self.software_inventory = Install.SoftwareInventory()
        self.software_inventory.parent = self
        self._children_name_map["software_inventory"] = "software-inventory"
        self._children_yang_names.add("software-inventory")

    def __setattr__(self, name, value):
        self._check_monkey_patching_error(name, value)
        with _handle_type_error():
            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                    "Please use list append or extend method."
                                    .format(value))
            if isinstance(value, Enum.YLeaf):
                value = value.name
            if name in ("log_size") and name in self.__dict__:
                if isinstance(value, YLeaf):
                    self.__dict__[name].set(value.get())
                elif isinstance(value, YLeafList):
                    super(Install, self).__setattr__(name, value)
                else:
                    self.__dict__[name].set(value)
            else:
                if hasattr(value, "parent") and name != "parent":
                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                        value.parent = self
                    elif value.parent is None and value.yang_name in self._children_yang_names:
                        value.parent = self
                super(Install, self).__setattr__(name, value)


    class ConfigurationRegisters(Entity):
        """
        Configuration register (confreg) information
        
        .. attribute:: configuration_register
        
        	Configuration register for specific node
        	**type**\: list of    :py:class:`ConfigurationRegister <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.ConfigurationRegisters.ConfigurationRegister>`
        
        

        """

        _prefix = 'installmgr-admin-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Install.ConfigurationRegisters, self).__init__()

            self.yang_name = "configuration-registers"
            self.yang_parent_name = "install"

            self.configuration_register = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Install.ConfigurationRegisters, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Install.ConfigurationRegisters, self).__setattr__(name, value)


        class ConfigurationRegister(Entity):
            """
            Configuration register for specific node
            
            .. attribute:: node_name  <key>
            
            	Node name
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: config_register
            
            	Configuration register value
            	**type**\:  str
            
            	**pattern:** [0\-9a\-fA\-F]{1,8}
            
            	**mandatory**\: True
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.ConfigurationRegisters.ConfigurationRegister, self).__init__()

                self.yang_name = "configuration-register"
                self.yang_parent_name = "configuration-registers"

                self.node_name = YLeaf(YType.str, "node-name")

                self.config_register = YLeaf(YType.str, "config-register")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("node_name",
                                "config_register") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Install.ConfigurationRegisters.ConfigurationRegister, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Install.ConfigurationRegisters.ConfigurationRegister, self).__setattr__(name, value)

            def has_data(self):
                return (
                    self.node_name.is_set or
                    self.config_register.is_set)

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.node_name.yfilter != YFilter.not_set or
                    self.config_register.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "configuration-register" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/configuration-registers/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.node_name.get_name_leafdata())
                if (self.config_register.is_set or self.config_register.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.config_register.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "node-name" or name == "config-register"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "node-name"):
                    self.node_name = value
                    self.node_name.value_namespace = name_space
                    self.node_name.value_namespace_prefix = name_space_prefix
                if(value_path == "config-register"):
                    self.config_register = value
                    self.config_register.value_namespace = name_space
                    self.config_register.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.configuration_register:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.configuration_register:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "configuration-registers" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "configuration-register"):
                for c in self.configuration_register:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = Install.ConfigurationRegisters.ConfigurationRegister()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.configuration_register.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "configuration-register"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class RequestStatuses(Entity):
        """
        Install operation request status
        
        .. attribute:: request_status
        
        	Request status Information
        	**type**\: list of    :py:class:`RequestStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses.RequestStatus>`
        
        

        """

        _prefix = 'installmgr-admin-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Install.RequestStatuses, self).__init__()

            self.yang_name = "request-statuses"
            self.yang_parent_name = "install"

            self.request_status = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Install.RequestStatuses, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Install.RequestStatuses, self).__setattr__(name, value)


        class RequestStatus(Entity):
            """
            Request status Information
            
            .. attribute:: request_id  <key>
            
            	Install operation request ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: abort_state
            
            	Abort state
            	**type**\:   :py:class:`InstmgrBagAbortState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagAbortState>`
            
            .. attribute:: abort_status
            
            	How the abort will occur
            	**type**\:   :py:class:`AbortStatus <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses.RequestStatus.AbortStatus>`
            
            .. attribute:: downloaded_bytes
            
            	Downloaded bytes
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: byte
            
            .. attribute:: incremental_install_information
            
            	Incremental Install information
            	**type**\:   :py:class:`IncrementalInstallInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses.RequestStatus.IncrementalInstallInformation>`
            
            .. attribute:: issu_message
            
            	Messages related to ISSU operations
            	**type**\: list of    :py:class:`IssuMessage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses.RequestStatus.IssuMessage>`
            
            .. attribute:: message
            
            	Messages output to the user
            	**type**\: list of    :py:class:`Message <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses.RequestStatus.Message>`
            
            .. attribute:: operation_phase
            
            	Phase of the operation
            	**type**\:   :py:class:`InstmgrInstallPhase <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrInstallPhase>`
            
            .. attribute:: percentage
            
            	Percentage completed
            	**type**\:  int
            
            	**range:** 0..255
            
            	**units**\: percentage
            
            .. attribute:: request_information
            
            	Requested install operation
            	**type**\:   :py:class:`RequestInformation <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses.RequestStatus.RequestInformation>`
            
            .. attribute:: unanswered_query
            
            	Whether the operation is blocked waiting for a response from the user
            	**type**\:  bool
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.RequestStatuses.RequestStatus, self).__init__()

                self.yang_name = "request-status"
                self.yang_parent_name = "request-statuses"

                self.request_id = YLeaf(YType.int32, "request-id")

                self.abort_state = YLeaf(YType.enumeration, "abort-state")

                self.downloaded_bytes = YLeaf(YType.uint32, "downloaded-bytes")

                self.operation_phase = YLeaf(YType.enumeration, "operation-phase")

                self.percentage = YLeaf(YType.uint8, "percentage")

                self.unanswered_query = YLeaf(YType.boolean, "unanswered-query")

                self.abort_status = Install.RequestStatuses.RequestStatus.AbortStatus()
                self.abort_status.parent = self
                self._children_name_map["abort_status"] = "abort-status"
                self._children_yang_names.add("abort-status")

                self.incremental_install_information = Install.RequestStatuses.RequestStatus.IncrementalInstallInformation()
                self.incremental_install_information.parent = self
                self._children_name_map["incremental_install_information"] = "incremental-install-information"
                self._children_yang_names.add("incremental-install-information")

                self.request_information = Install.RequestStatuses.RequestStatus.RequestInformation()
                self.request_information.parent = self
                self._children_name_map["request_information"] = "request-information"
                self._children_yang_names.add("request-information")

                self.issu_message = YList(self)
                self.message = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("request_id",
                                "abort_state",
                                "downloaded_bytes",
                                "operation_phase",
                                "percentage",
                                "unanswered_query") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Install.RequestStatuses.RequestStatus, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Install.RequestStatuses.RequestStatus, self).__setattr__(name, value)


            class RequestInformation(Entity):
                """
                Requested install operation
                
                .. attribute:: operation_detail
                
                	Detail operation information
                	**type**\:  str
                
                .. attribute:: operation_type
                
                	Requested operation type
                	**type**\:   :py:class:`InstmgrRequest <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrRequest>`
                
                .. attribute:: request_id
                
                	Install id of operation
                	**type**\:  int
                
                	**range:** 0..4294967295
                
                .. attribute:: request_option
                
                	Options affecting processing of install requests
                	**type**\:  int
                
                	**range:** \-2147483648..2147483647
                
                .. attribute:: trigger_type
                
                	Request trigger type
                	**type**\:   :py:class:`InstmgrBagRequestTrigger <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagRequestTrigger>`
                
                .. attribute:: user_id
                
                	User ID that started the reqeust
                	**type**\:  str
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.RequestStatuses.RequestStatus.RequestInformation, self).__init__()

                    self.yang_name = "request-information"
                    self.yang_parent_name = "request-status"

                    self.operation_detail = YLeaf(YType.str, "operation-detail")

                    self.operation_type = YLeaf(YType.enumeration, "operation-type")

                    self.request_id = YLeaf(YType.uint32, "request-id")

                    self.request_option = YLeaf(YType.int32, "request-option")

                    self.trigger_type = YLeaf(YType.enumeration, "trigger-type")

                    self.user_id = YLeaf(YType.str, "user-id")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("operation_detail",
                                    "operation_type",
                                    "request_id",
                                    "request_option",
                                    "trigger_type",
                                    "user_id") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.RequestStatuses.RequestStatus.RequestInformation, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.RequestStatuses.RequestStatus.RequestInformation, self).__setattr__(name, value)

                def has_data(self):
                    return (
                        self.operation_detail.is_set or
                        self.operation_type.is_set or
                        self.request_id.is_set or
                        self.request_option.is_set or
                        self.trigger_type.is_set or
                        self.user_id.is_set)

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.operation_detail.yfilter != YFilter.not_set or
                        self.operation_type.yfilter != YFilter.not_set or
                        self.request_id.yfilter != YFilter.not_set or
                        self.request_option.yfilter != YFilter.not_set or
                        self.trigger_type.yfilter != YFilter.not_set or
                        self.user_id.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "request-information" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.operation_detail.is_set or self.operation_detail.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.operation_detail.get_name_leafdata())
                    if (self.operation_type.is_set or self.operation_type.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.operation_type.get_name_leafdata())
                    if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.request_id.get_name_leafdata())
                    if (self.request_option.is_set or self.request_option.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.request_option.get_name_leafdata())
                    if (self.trigger_type.is_set or self.trigger_type.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.trigger_type.get_name_leafdata())
                    if (self.user_id.is_set or self.user_id.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.user_id.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "operation-detail" or name == "operation-type" or name == "request-id" or name == "request-option" or name == "trigger-type" or name == "user-id"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "operation-detail"):
                        self.operation_detail = value
                        self.operation_detail.value_namespace = name_space
                        self.operation_detail.value_namespace_prefix = name_space_prefix
                    if(value_path == "operation-type"):
                        self.operation_type = value
                        self.operation_type.value_namespace = name_space
                        self.operation_type.value_namespace_prefix = name_space_prefix
                    if(value_path == "request-id"):
                        self.request_id = value
                        self.request_id.value_namespace = name_space
                        self.request_id.value_namespace_prefix = name_space_prefix
                    if(value_path == "request-option"):
                        self.request_option = value
                        self.request_option.value_namespace = name_space
                        self.request_option.value_namespace_prefix = name_space_prefix
                    if(value_path == "trigger-type"):
                        self.trigger_type = value
                        self.trigger_type.value_namespace = name_space
                        self.trigger_type.value_namespace_prefix = name_space_prefix
                    if(value_path == "user-id"):
                        self.user_id = value
                        self.user_id.value_namespace = name_space
                        self.user_id.value_namespace_prefix = name_space_prefix


            class AbortStatus(Entity):
                """
                How the abort will occur
                
                .. attribute:: abort_impact
                
                	Impact of abort
                	**type**\:   :py:class:`InstmgrIssuAbortImpact <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrIssuAbortImpact>`
                
                .. attribute:: abort_method
                
                	Method of abort
                	**type**\:   :py:class:`InstmgrIssuAbortMethod <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrIssuAbortMethod>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.RequestStatuses.RequestStatus.AbortStatus, self).__init__()

                    self.yang_name = "abort-status"
                    self.yang_parent_name = "request-status"

                    self.abort_impact = YLeaf(YType.enumeration, "abort-impact")

                    self.abort_method = YLeaf(YType.enumeration, "abort-method")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("abort_impact",
                                    "abort_method") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.RequestStatuses.RequestStatus.AbortStatus, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.RequestStatuses.RequestStatus.AbortStatus, self).__setattr__(name, value)

                def has_data(self):
                    return (
                        self.abort_impact.is_set or
                        self.abort_method.is_set)

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.abort_impact.yfilter != YFilter.not_set or
                        self.abort_method.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "abort-status" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.abort_impact.is_set or self.abort_impact.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.abort_impact.get_name_leafdata())
                    if (self.abort_method.is_set or self.abort_method.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.abort_method.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "abort-impact" or name == "abort-method"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "abort-impact"):
                        self.abort_impact = value
                        self.abort_impact.value_namespace = name_space
                        self.abort_impact.value_namespace_prefix = name_space_prefix
                    if(value_path == "abort-method"):
                        self.abort_method = value
                        self.abort_method.value_namespace = name_space
                        self.abort_method.value_namespace_prefix = name_space_prefix


            class IncrementalInstallInformation(Entity):
                """
                Incremental Install information
                
                .. attribute:: direction
                
                	Install direction
                	**type**\:   :py:class:`InstmgrBagIiDirection <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagIiDirection>`
                
                .. attribute:: ii_error
                
                	First error during incremental install
                	**type**\:  str
                
                .. attribute:: nodes
                
                	Participating nodes
                	**type**\: list of    :py:class:`Nodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses.RequestStatus.IncrementalInstallInformation.Nodes>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.RequestStatuses.RequestStatus.IncrementalInstallInformation, self).__init__()

                    self.yang_name = "incremental-install-information"
                    self.yang_parent_name = "request-status"

                    self.direction = YLeaf(YType.enumeration, "direction")

                    self.ii_error = YLeaf(YType.str, "ii-error")

                    self.nodes = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("direction",
                                    "ii_error") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.RequestStatuses.RequestStatus.IncrementalInstallInformation, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.RequestStatuses.RequestStatus.IncrementalInstallInformation, self).__setattr__(name, value)


                class Nodes(Entity):
                    """
                    Participating nodes
                    
                    .. attribute:: node_name
                    
                    	Node identifier
                    	**type**\:  str
                    
                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                    
                    .. attribute:: state
                    
                    	State
                    	**type**\:   :py:class:`InstmgrBagIiState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagIiState>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.RequestStatuses.RequestStatus.IncrementalInstallInformation.Nodes, self).__init__()

                        self.yang_name = "nodes"
                        self.yang_parent_name = "incremental-install-information"

                        self.node_name = YLeaf(YType.str, "node-name")

                        self.state = YLeaf(YType.enumeration, "state")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("node_name",
                                        "state") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.RequestStatuses.RequestStatus.IncrementalInstallInformation.Nodes, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.RequestStatuses.RequestStatus.IncrementalInstallInformation.Nodes, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.node_name.is_set or
                            self.state.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.node_name.yfilter != YFilter.not_set or
                            self.state.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "nodes" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_name.get_name_leafdata())
                        if (self.state.is_set or self.state.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.state.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "node-name" or name == "state"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "node-name"):
                            self.node_name = value
                            self.node_name.value_namespace = name_space
                            self.node_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "state"):
                            self.state = value
                            self.state.value_namespace = name_space
                            self.state.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.nodes:
                        if (c.has_data()):
                            return True
                    return (
                        self.direction.is_set or
                        self.ii_error.is_set)

                def has_operation(self):
                    for c in self.nodes:
                        if (c.has_operation()):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.direction.yfilter != YFilter.not_set or
                        self.ii_error.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "incremental-install-information" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.direction.is_set or self.direction.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.direction.get_name_leafdata())
                    if (self.ii_error.is_set or self.ii_error.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.ii_error.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "nodes"):
                        for c in self.nodes:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.RequestStatuses.RequestStatus.IncrementalInstallInformation.Nodes()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.nodes.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "nodes" or name == "direction" or name == "ii-error"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "direction"):
                        self.direction = value
                        self.direction.value_namespace = name_space
                        self.direction.value_namespace_prefix = name_space_prefix
                    if(value_path == "ii-error"):
                        self.ii_error = value
                        self.ii_error.value_namespace = name_space
                        self.ii_error.value_namespace_prefix = name_space_prefix


            class IssuMessage(Entity):
                """
                Messages related to ISSU operations
                
                .. attribute:: category
                
                	Category of the message
                	**type**\:   :py:class:`InstmgrBagUserMsgCategory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagUserMsgCategory>`
                
                .. attribute:: message
                
                	Message
                	**type**\:  str
                
                .. attribute:: scope
                
                	Scope of the message
                	**type**\:   :py:class:`Scope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses.RequestStatus.IssuMessage.Scope>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.RequestStatuses.RequestStatus.IssuMessage, self).__init__()

                    self.yang_name = "issu-message"
                    self.yang_parent_name = "request-status"

                    self.category = YLeaf(YType.enumeration, "category")

                    self.message = YLeaf(YType.str, "message")

                    self.scope = Install.RequestStatuses.RequestStatus.IssuMessage.Scope()
                    self.scope.parent = self
                    self._children_name_map["scope"] = "scope"
                    self._children_yang_names.add("scope")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("category",
                                    "message") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.RequestStatuses.RequestStatus.IssuMessage, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.RequestStatuses.RequestStatus.IssuMessage, self).__setattr__(name, value)


                class Scope(Entity):
                    """
                    Scope of the message
                    
                    .. attribute:: admin_read
                    
                    	Does the admin want to read this?
                    	**type**\:  bool
                    
                    .. attribute:: affected_sd_rs
                    
                    	Which LRs are affected by the message
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.RequestStatuses.RequestStatus.IssuMessage.Scope, self).__init__()

                        self.yang_name = "scope"
                        self.yang_parent_name = "issu-message"

                        self.admin_read = YLeaf(YType.boolean, "admin-read")

                        self.affected_sd_rs = YLeaf(YType.uint32, "affected-sd-rs")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("admin_read",
                                        "affected_sd_rs") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.RequestStatuses.RequestStatus.IssuMessage.Scope, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.RequestStatuses.RequestStatus.IssuMessage.Scope, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.admin_read.is_set or
                            self.affected_sd_rs.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.admin_read.yfilter != YFilter.not_set or
                            self.affected_sd_rs.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "scope" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.admin_read.is_set or self.admin_read.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.admin_read.get_name_leafdata())
                        if (self.affected_sd_rs.is_set or self.affected_sd_rs.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.affected_sd_rs.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "admin-read" or name == "affected-sd-rs"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "admin-read"):
                            self.admin_read = value
                            self.admin_read.value_namespace = name_space
                            self.admin_read.value_namespace_prefix = name_space_prefix
                        if(value_path == "affected-sd-rs"):
                            self.affected_sd_rs = value
                            self.affected_sd_rs.value_namespace = name_space
                            self.affected_sd_rs.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (
                        self.category.is_set or
                        self.message.is_set or
                        (self.scope is not None and self.scope.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.category.yfilter != YFilter.not_set or
                        self.message.yfilter != YFilter.not_set or
                        (self.scope is not None and self.scope.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "issu-message" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.category.is_set or self.category.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.category.get_name_leafdata())
                    if (self.message.is_set or self.message.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.message.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "scope"):
                        if (self.scope is None):
                            self.scope = Install.RequestStatuses.RequestStatus.IssuMessage.Scope()
                            self.scope.parent = self
                            self._children_name_map["scope"] = "scope"
                        return self.scope

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "scope" or name == "category" or name == "message"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "category"):
                        self.category = value
                        self.category.value_namespace = name_space
                        self.category.value_namespace_prefix = name_space_prefix
                    if(value_path == "message"):
                        self.message = value
                        self.message.value_namespace = name_space
                        self.message.value_namespace_prefix = name_space_prefix


            class Message(Entity):
                """
                Messages output to the user
                
                .. attribute:: category
                
                	Category of the message
                	**type**\:   :py:class:`InstmgrBagUserMsgCategory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagUserMsgCategory>`
                
                .. attribute:: message
                
                	Message
                	**type**\:  str
                
                .. attribute:: scope
                
                	Scope of the message
                	**type**\:   :py:class:`Scope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.RequestStatuses.RequestStatus.Message.Scope>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.RequestStatuses.RequestStatus.Message, self).__init__()

                    self.yang_name = "message"
                    self.yang_parent_name = "request-status"

                    self.category = YLeaf(YType.enumeration, "category")

                    self.message = YLeaf(YType.str, "message")

                    self.scope = Install.RequestStatuses.RequestStatus.Message.Scope()
                    self.scope.parent = self
                    self._children_name_map["scope"] = "scope"
                    self._children_yang_names.add("scope")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("category",
                                    "message") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.RequestStatuses.RequestStatus.Message, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.RequestStatuses.RequestStatus.Message, self).__setattr__(name, value)


                class Scope(Entity):
                    """
                    Scope of the message
                    
                    .. attribute:: admin_read
                    
                    	Does the admin want to read this?
                    	**type**\:  bool
                    
                    .. attribute:: affected_sd_rs
                    
                    	Which LRs are affected by the message
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.RequestStatuses.RequestStatus.Message.Scope, self).__init__()

                        self.yang_name = "scope"
                        self.yang_parent_name = "message"

                        self.admin_read = YLeaf(YType.boolean, "admin-read")

                        self.affected_sd_rs = YLeaf(YType.uint32, "affected-sd-rs")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("admin_read",
                                        "affected_sd_rs") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.RequestStatuses.RequestStatus.Message.Scope, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.RequestStatuses.RequestStatus.Message.Scope, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.admin_read.is_set or
                            self.affected_sd_rs.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.admin_read.yfilter != YFilter.not_set or
                            self.affected_sd_rs.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "scope" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.admin_read.is_set or self.admin_read.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.admin_read.get_name_leafdata())
                        if (self.affected_sd_rs.is_set or self.affected_sd_rs.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.affected_sd_rs.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "admin-read" or name == "affected-sd-rs"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "admin-read"):
                            self.admin_read = value
                            self.admin_read.value_namespace = name_space
                            self.admin_read.value_namespace_prefix = name_space_prefix
                        if(value_path == "affected-sd-rs"):
                            self.affected_sd_rs = value
                            self.affected_sd_rs.value_namespace = name_space
                            self.affected_sd_rs.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (
                        self.category.is_set or
                        self.message.is_set or
                        (self.scope is not None and self.scope.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.category.yfilter != YFilter.not_set or
                        self.message.yfilter != YFilter.not_set or
                        (self.scope is not None and self.scope.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "message" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.category.is_set or self.category.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.category.get_name_leafdata())
                    if (self.message.is_set or self.message.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.message.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "scope"):
                        if (self.scope is None):
                            self.scope = Install.RequestStatuses.RequestStatus.Message.Scope()
                            self.scope.parent = self
                            self._children_name_map["scope"] = "scope"
                        return self.scope

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "scope" or name == "category" or name == "message"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "category"):
                        self.category = value
                        self.category.value_namespace = name_space
                        self.category.value_namespace_prefix = name_space_prefix
                    if(value_path == "message"):
                        self.message = value
                        self.message.value_namespace = name_space
                        self.message.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.issu_message:
                    if (c.has_data()):
                        return True
                for c in self.message:
                    if (c.has_data()):
                        return True
                return (
                    self.request_id.is_set or
                    self.abort_state.is_set or
                    self.downloaded_bytes.is_set or
                    self.operation_phase.is_set or
                    self.percentage.is_set or
                    self.unanswered_query.is_set or
                    (self.abort_status is not None and self.abort_status.has_data()) or
                    (self.incremental_install_information is not None and self.incremental_install_information.has_data()) or
                    (self.request_information is not None and self.request_information.has_data()))

            def has_operation(self):
                for c in self.issu_message:
                    if (c.has_operation()):
                        return True
                for c in self.message:
                    if (c.has_operation()):
                        return True
                return (
                    self.yfilter != YFilter.not_set or
                    self.request_id.yfilter != YFilter.not_set or
                    self.abort_state.yfilter != YFilter.not_set or
                    self.downloaded_bytes.yfilter != YFilter.not_set or
                    self.operation_phase.yfilter != YFilter.not_set or
                    self.percentage.yfilter != YFilter.not_set or
                    self.unanswered_query.yfilter != YFilter.not_set or
                    (self.abort_status is not None and self.abort_status.has_operation()) or
                    (self.incremental_install_information is not None and self.incremental_install_information.has_operation()) or
                    (self.request_information is not None and self.request_information.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "request-status" + "[request-id='" + self.request_id.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/request-statuses/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.request_id.get_name_leafdata())
                if (self.abort_state.is_set or self.abort_state.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.abort_state.get_name_leafdata())
                if (self.downloaded_bytes.is_set or self.downloaded_bytes.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.downloaded_bytes.get_name_leafdata())
                if (self.operation_phase.is_set or self.operation_phase.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.operation_phase.get_name_leafdata())
                if (self.percentage.is_set or self.percentage.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.percentage.get_name_leafdata())
                if (self.unanswered_query.is_set or self.unanswered_query.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.unanswered_query.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "abort-status"):
                    if (self.abort_status is None):
                        self.abort_status = Install.RequestStatuses.RequestStatus.AbortStatus()
                        self.abort_status.parent = self
                        self._children_name_map["abort_status"] = "abort-status"
                    return self.abort_status

                if (child_yang_name == "incremental-install-information"):
                    if (self.incremental_install_information is None):
                        self.incremental_install_information = Install.RequestStatuses.RequestStatus.IncrementalInstallInformation()
                        self.incremental_install_information.parent = self
                        self._children_name_map["incremental_install_information"] = "incremental-install-information"
                    return self.incremental_install_information

                if (child_yang_name == "issu-message"):
                    for c in self.issu_message:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.RequestStatuses.RequestStatus.IssuMessage()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.issu_message.append(c)
                    return c

                if (child_yang_name == "message"):
                    for c in self.message:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.RequestStatuses.RequestStatus.Message()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.message.append(c)
                    return c

                if (child_yang_name == "request-information"):
                    if (self.request_information is None):
                        self.request_information = Install.RequestStatuses.RequestStatus.RequestInformation()
                        self.request_information.parent = self
                        self._children_name_map["request_information"] = "request-information"
                    return self.request_information

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "abort-status" or name == "incremental-install-information" or name == "issu-message" or name == "message" or name == "request-information" or name == "request-id" or name == "abort-state" or name == "downloaded-bytes" or name == "operation-phase" or name == "percentage" or name == "unanswered-query"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "request-id"):
                    self.request_id = value
                    self.request_id.value_namespace = name_space
                    self.request_id.value_namespace_prefix = name_space_prefix
                if(value_path == "abort-state"):
                    self.abort_state = value
                    self.abort_state.value_namespace = name_space
                    self.abort_state.value_namespace_prefix = name_space_prefix
                if(value_path == "downloaded-bytes"):
                    self.downloaded_bytes = value
                    self.downloaded_bytes.value_namespace = name_space
                    self.downloaded_bytes.value_namespace_prefix = name_space_prefix
                if(value_path == "operation-phase"):
                    self.operation_phase = value
                    self.operation_phase.value_namespace = name_space
                    self.operation_phase.value_namespace_prefix = name_space_prefix
                if(value_path == "percentage"):
                    self.percentage = value
                    self.percentage.value_namespace = name_space
                    self.percentage.value_namespace_prefix = name_space_prefix
                if(value_path == "unanswered-query"):
                    self.unanswered_query = value
                    self.unanswered_query.value_namespace = name_space
                    self.unanswered_query.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.request_status:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.request_status:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "request-statuses" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "request-status"):
                for c in self.request_status:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = Install.RequestStatuses.RequestStatus()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.request_status.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "request-status"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class BootVariables(Entity):
        """
        Boot variable information
        
        .. attribute:: boot_variable
        
        	Boot variable for specific node
        	**type**\: list of    :py:class:`BootVariable <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.BootVariables.BootVariable>`
        
        

        """

        _prefix = 'installmgr-admin-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Install.BootVariables, self).__init__()

            self.yang_name = "boot-variables"
            self.yang_parent_name = "install"

            self.boot_variable = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Install.BootVariables, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Install.BootVariables, self).__setattr__(name, value)


        class BootVariable(Entity):
            """
            Boot variable for specific node
            
            .. attribute:: node_name  <key>
            
            	Node name
            	**type**\:  str
            
            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
            
            .. attribute:: boot_variable
            
            	Boot variable value
            	**type**\:  str
            
            	**mandatory**\: True
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.BootVariables.BootVariable, self).__init__()

                self.yang_name = "boot-variable"
                self.yang_parent_name = "boot-variables"

                self.node_name = YLeaf(YType.str, "node-name")

                self.boot_variable = YLeaf(YType.str, "boot-variable")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("node_name",
                                "boot_variable") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Install.BootVariables.BootVariable, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Install.BootVariables.BootVariable, self).__setattr__(name, value)

            def has_data(self):
                return (
                    self.node_name.is_set or
                    self.boot_variable.is_set)

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.node_name.yfilter != YFilter.not_set or
                    self.boot_variable.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "boot-variable" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/boot-variables/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.node_name.get_name_leafdata())
                if (self.boot_variable.is_set or self.boot_variable.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.boot_variable.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "node-name" or name == "boot-variable"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "node-name"):
                    self.node_name = value
                    self.node_name.value_namespace = name_space
                    self.node_name.value_namespace_prefix = name_space_prefix
                if(value_path == "boot-variable"):
                    self.boot_variable = value
                    self.boot_variable.value_namespace = name_space
                    self.boot_variable.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.boot_variable:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.boot_variable:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "boot-variables" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "boot-variable"):
                for c in self.boot_variable:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = Install.BootVariables.BootVariable()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.boot_variable.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "boot-variable"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class Software(Entity):
        """
        Software package,component and alias information
        
        .. attribute:: alias_devices
        
        	Package alias information
        	**type**\:   :py:class:`AliasDevices <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.AliasDevices>`
        
        .. attribute:: component_devices
        
        	Software component information
        	**type**\:   :py:class:`ComponentDevices <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.ComponentDevices>`
        
        .. attribute:: package_devices
        
        	Package information
        	**type**\:   :py:class:`PackageDevices <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.PackageDevices>`
        
        

        """

        _prefix = 'installmgr-admin-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Install.Software, self).__init__()

            self.yang_name = "software"
            self.yang_parent_name = "install"

            self.alias_devices = Install.Software.AliasDevices()
            self.alias_devices.parent = self
            self._children_name_map["alias_devices"] = "alias-devices"
            self._children_yang_names.add("alias-devices")

            self.component_devices = Install.Software.ComponentDevices()
            self.component_devices.parent = self
            self._children_name_map["component_devices"] = "component-devices"
            self._children_yang_names.add("component-devices")

            self.package_devices = Install.Software.PackageDevices()
            self.package_devices.parent = self
            self._children_name_map["package_devices"] = "package-devices"
            self._children_yang_names.add("package-devices")


        class AliasDevices(Entity):
            """
            Package alias information
            
            .. attribute:: alias_device
            
            	Package alias information for specific device
            	**type**\: list of    :py:class:`AliasDevice <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.AliasDevices.AliasDevice>`
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.Software.AliasDevices, self).__init__()

                self.yang_name = "alias-devices"
                self.yang_parent_name = "software"

                self.alias_device = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Install.Software.AliasDevices, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Install.Software.AliasDevices, self).__setattr__(name, value)


            class AliasDevice(Entity):
                """
                Package alias information for specific device
                
                .. attribute:: device_name  <key>
                
                	Device Name
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: aliases
                
                	alias information
                	**type**\:   :py:class:`Aliases <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.AliasDevices.AliasDevice.Aliases>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Software.AliasDevices.AliasDevice, self).__init__()

                    self.yang_name = "alias-device"
                    self.yang_parent_name = "alias-devices"

                    self.device_name = YLeaf(YType.str, "device-name")

                    self.aliases = Install.Software.AliasDevices.AliasDevice.Aliases()
                    self.aliases.parent = self
                    self._children_name_map["aliases"] = "aliases"
                    self._children_yang_names.add("aliases")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("device_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.Software.AliasDevices.AliasDevice, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.Software.AliasDevices.AliasDevice, self).__setattr__(name, value)


                class Aliases(Entity):
                    """
                    alias information
                    
                    .. attribute:: alias
                    
                    	Aliases for specific package
                    	**type**\: list of    :py:class:`Alias <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.AliasDevices.AliasDevice.Aliases.Alias>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Software.AliasDevices.AliasDevice.Aliases, self).__init__()

                        self.yang_name = "aliases"
                        self.yang_parent_name = "alias-device"

                        self.alias = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Software.AliasDevices.AliasDevice.Aliases, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Software.AliasDevices.AliasDevice.Aliases, self).__setattr__(name, value)


                    class Alias(Entity):
                        """
                        Aliases for specific package
                        
                        .. attribute:: package_name  <key>
                        
                        	Package Name
                        	**type**\:  str
                        
                        .. attribute:: alias_names
                        
                        	Alias names
                        	**type**\:  str
                        
                        	**mandatory**\: True
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.Software.AliasDevices.AliasDevice.Aliases.Alias, self).__init__()

                            self.yang_name = "alias"
                            self.yang_parent_name = "aliases"

                            self.package_name = YLeaf(YType.str, "package-name")

                            self.alias_names = YLeaf(YType.str, "alias-names")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("package_name",
                                            "alias_names") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.Software.AliasDevices.AliasDevice.Aliases.Alias, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.Software.AliasDevices.AliasDevice.Aliases.Alias, self).__setattr__(name, value)

                        def has_data(self):
                            return (
                                self.package_name.is_set or
                                self.alias_names.is_set)

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.package_name.yfilter != YFilter.not_set or
                                self.alias_names.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "alias" + "[package-name='" + self.package_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.package_name.is_set or self.package_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.package_name.get_name_leafdata())
                            if (self.alias_names.is_set or self.alias_names.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.alias_names.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package-name" or name == "alias-names"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "package-name"):
                                self.package_name = value
                                self.package_name.value_namespace = name_space
                                self.package_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "alias-names"):
                                self.alias_names = value
                                self.alias_names.value_namespace = name_space
                                self.alias_names.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.alias:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.alias:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "aliases" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "alias"):
                            for c in self.alias:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.Software.AliasDevices.AliasDevice.Aliases.Alias()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.alias.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "alias"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        self.device_name.is_set or
                        (self.aliases is not None and self.aliases.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.device_name.yfilter != YFilter.not_set or
                        (self.aliases is not None and self.aliases.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "alias-device" + "[device-name='" + self.device_name.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software/alias-devices/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.device_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "aliases"):
                        if (self.aliases is None):
                            self.aliases = Install.Software.AliasDevices.AliasDevice.Aliases()
                            self.aliases.parent = self
                            self._children_name_map["aliases"] = "aliases"
                        return self.aliases

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "aliases" or name == "device-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "device-name"):
                        self.device_name = value
                        self.device_name.value_namespace = name_space
                        self.device_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.alias_device:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.alias_device:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "alias-devices" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "alias-device"):
                    for c in self.alias_device:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Software.AliasDevices.AliasDevice()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.alias_device.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "alias-device"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class PackageDevices(Entity):
            """
            Package information
            
            .. attribute:: package_device
            
            	Package information for specific device
            	**type**\: list of    :py:class:`PackageDevice <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.PackageDevices.PackageDevice>`
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.Software.PackageDevices, self).__init__()

                self.yang_name = "package-devices"
                self.yang_parent_name = "software"

                self.package_device = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Install.Software.PackageDevices, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Install.Software.PackageDevices, self).__setattr__(name, value)


            class PackageDevice(Entity):
                """
                Package information for specific device
                
                .. attribute:: device_name  <key>
                
                	Device Name
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: packages
                
                	Package information for specific package
                	**type**\:   :py:class:`Packages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.PackageDevices.PackageDevice.Packages>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Software.PackageDevices.PackageDevice, self).__init__()

                    self.yang_name = "package-device"
                    self.yang_parent_name = "package-devices"

                    self.device_name = YLeaf(YType.str, "device-name")

                    self.packages = Install.Software.PackageDevices.PackageDevice.Packages()
                    self.packages.parent = self
                    self._children_name_map["packages"] = "packages"
                    self._children_yang_names.add("packages")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("device_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.Software.PackageDevices.PackageDevice, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.Software.PackageDevices.PackageDevice, self).__setattr__(name, value)


                class Packages(Entity):
                    """
                    Package information for specific package
                    
                    .. attribute:: package
                    
                    	Package information
                    	**type**\: list of    :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.PackageDevices.PackageDevice.Packages.Package>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Software.PackageDevices.PackageDevice.Packages, self).__init__()

                        self.yang_name = "packages"
                        self.yang_parent_name = "package-device"

                        self.package = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Software.PackageDevices.PackageDevice.Packages, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Software.PackageDevices.PackageDevice.Packages, self).__setattr__(name, value)


                    class Package(Entity):
                        """
                        Package information
                        
                        .. attribute:: package_name  <key>
                        
                        	Package Name
                        	**type**\:  str
                        
                        .. attribute:: base
                        
                        	Identifies the base bundle that the package is for
                        	**type**\:  str
                        
                        .. attribute:: bootable
                        
                        	TRUE if package has BOOTIMAGE tag set
                        	**type**\:  bool
                        
                        .. attribute:: cards
                        
                        	Card types that the package should be installed on
                        	**type**\:  list of str
                        
                        .. attribute:: composite
                        
                        	TRUE if package is a composite package
                        	**type**\:  bool
                        
                        .. attribute:: compressed_size
                        
                        	Compressed size of package
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: date
                        
                        	Time and date that the package was built
                        	**type**\:  str
                        
                        .. attribute:: depth
                        
                        	Number of layers of parent packages
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: description
                        
                        	Description of the package
                        	**type**\:  str
                        
                        .. attribute:: group_type
                        
                        	Group type of the package
                        	**type**\:   :py:class:`InstmgrGroup <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrGroup>`
                        
                        .. attribute:: name
                        
                        	Name of the package
                        	**type**\:  str
                        
                        .. attribute:: package_type
                        
                        	Type of the package
                        	**type**\:   :py:class:`InstmgrPkg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrPkg>`
                        
                        .. attribute:: release
                        
                        	Release that the package belongs to
                        	**type**\:  str
                        
                        .. attribute:: restart_info
                        
                        	Restart info of the package
                        	**type**\:  str
                        
                        .. attribute:: source
                        
                        	Identifies the provider of the package
                        	**type**\:  str
                        
                        .. attribute:: sub_pkg
                        
                        	Sub\-package info of the package
                        	**type**\: list of    :py:class:`SubPkg <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.PackageDevices.PackageDevice.Packages.Package.SubPkg>`
                        
                        .. attribute:: uncompressed_size
                        
                        	Uncompressed size of package
                        	**type**\:  int
                        
                        	**range:** 0..4294967295
                        
                        .. attribute:: vendor
                        
                        	Information about the vendor that supplied the package
                        	**type**\:  str
                        
                        .. attribute:: version
                        
                        	Version of the package
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.Software.PackageDevices.PackageDevice.Packages.Package, self).__init__()

                            self.yang_name = "package"
                            self.yang_parent_name = "packages"

                            self.package_name = YLeaf(YType.str, "package-name")

                            self.base = YLeaf(YType.str, "base")

                            self.bootable = YLeaf(YType.boolean, "bootable")

                            self.cards = YLeafList(YType.str, "cards")

                            self.composite = YLeaf(YType.boolean, "composite")

                            self.compressed_size = YLeaf(YType.uint32, "compressed-size")

                            self.date = YLeaf(YType.str, "date")

                            self.depth = YLeaf(YType.uint32, "depth")

                            self.description = YLeaf(YType.str, "description")

                            self.group_type = YLeaf(YType.enumeration, "group-type")

                            self.name = YLeaf(YType.str, "name")

                            self.package_type = YLeaf(YType.enumeration, "package-type")

                            self.release = YLeaf(YType.str, "release")

                            self.restart_info = YLeaf(YType.str, "restart-info")

                            self.source = YLeaf(YType.str, "source")

                            self.uncompressed_size = YLeaf(YType.uint32, "uncompressed-size")

                            self.vendor = YLeaf(YType.str, "vendor")

                            self.version = YLeaf(YType.str, "version")

                            self.sub_pkg = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("package_name",
                                            "base",
                                            "bootable",
                                            "cards",
                                            "composite",
                                            "compressed_size",
                                            "date",
                                            "depth",
                                            "description",
                                            "group_type",
                                            "name",
                                            "package_type",
                                            "release",
                                            "restart_info",
                                            "source",
                                            "uncompressed_size",
                                            "vendor",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.Software.PackageDevices.PackageDevice.Packages.Package, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.Software.PackageDevices.PackageDevice.Packages.Package, self).__setattr__(name, value)


                        class SubPkg(Entity):
                            """
                            Sub\-package info of the package
                            
                            .. attribute:: name
                            
                            	Name of the sub\-package
                            	**type**\:  str
                            
                            .. attribute:: node_types
                            
                            	Node types of the package
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.Software.PackageDevices.PackageDevice.Packages.Package.SubPkg, self).__init__()

                                self.yang_name = "sub-pkg"
                                self.yang_parent_name = "package"

                                self.name = YLeaf(YType.str, "name")

                                self.node_types = YLeaf(YType.uint64, "node-types")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("name",
                                                "node_types") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.Software.PackageDevices.PackageDevice.Packages.Package.SubPkg, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.Software.PackageDevices.PackageDevice.Packages.Package.SubPkg, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.name.is_set or
                                    self.node_types.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set or
                                    self.node_types.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "sub-pkg" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())
                                if (self.node_types.is_set or self.node_types.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.node_types.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "name" or name == "node-types"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix
                                if(value_path == "node-types"):
                                    self.node_types = value
                                    self.node_types.value_namespace = name_space
                                    self.node_types.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.sub_pkg:
                                if (c.has_data()):
                                    return True
                            for leaf in self.cards.getYLeafs():
                                if (leaf.yfilter != YFilter.not_set):
                                    return True
                            return (
                                self.package_name.is_set or
                                self.base.is_set or
                                self.bootable.is_set or
                                self.composite.is_set or
                                self.compressed_size.is_set or
                                self.date.is_set or
                                self.depth.is_set or
                                self.description.is_set or
                                self.group_type.is_set or
                                self.name.is_set or
                                self.package_type.is_set or
                                self.release.is_set or
                                self.restart_info.is_set or
                                self.source.is_set or
                                self.uncompressed_size.is_set or
                                self.vendor.is_set or
                                self.version.is_set)

                        def has_operation(self):
                            for c in self.sub_pkg:
                                if (c.has_operation()):
                                    return True
                            for leaf in self.cards.getYLeafs():
                                if (leaf.is_set):
                                    return True
                            return (
                                self.yfilter != YFilter.not_set or
                                self.package_name.yfilter != YFilter.not_set or
                                self.base.yfilter != YFilter.not_set or
                                self.bootable.yfilter != YFilter.not_set or
                                self.cards.yfilter != YFilter.not_set or
                                self.composite.yfilter != YFilter.not_set or
                                self.compressed_size.yfilter != YFilter.not_set or
                                self.date.yfilter != YFilter.not_set or
                                self.depth.yfilter != YFilter.not_set or
                                self.description.yfilter != YFilter.not_set or
                                self.group_type.yfilter != YFilter.not_set or
                                self.name.yfilter != YFilter.not_set or
                                self.package_type.yfilter != YFilter.not_set or
                                self.release.yfilter != YFilter.not_set or
                                self.restart_info.yfilter != YFilter.not_set or
                                self.source.yfilter != YFilter.not_set or
                                self.uncompressed_size.yfilter != YFilter.not_set or
                                self.vendor.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "package" + "[package-name='" + self.package_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.package_name.is_set or self.package_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.package_name.get_name_leafdata())
                            if (self.base.is_set or self.base.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.base.get_name_leafdata())
                            if (self.bootable.is_set or self.bootable.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.bootable.get_name_leafdata())
                            if (self.composite.is_set or self.composite.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.composite.get_name_leafdata())
                            if (self.compressed_size.is_set or self.compressed_size.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.compressed_size.get_name_leafdata())
                            if (self.date.is_set or self.date.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.date.get_name_leafdata())
                            if (self.depth.is_set or self.depth.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.depth.get_name_leafdata())
                            if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.description.get_name_leafdata())
                            if (self.group_type.is_set or self.group_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.group_type.get_name_leafdata())
                            if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.name.get_name_leafdata())
                            if (self.package_type.is_set or self.package_type.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.package_type.get_name_leafdata())
                            if (self.release.is_set or self.release.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.release.get_name_leafdata())
                            if (self.restart_info.is_set or self.restart_info.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.restart_info.get_name_leafdata())
                            if (self.source.is_set or self.source.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.source.get_name_leafdata())
                            if (self.uncompressed_size.is_set or self.uncompressed_size.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.uncompressed_size.get_name_leafdata())
                            if (self.vendor.is_set or self.vendor.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.vendor.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            leaf_name_data.extend(self.cards.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "sub-pkg"):
                                for c in self.sub_pkg:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Install.Software.PackageDevices.PackageDevice.Packages.Package.SubPkg()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.sub_pkg.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "sub-pkg" or name == "package-name" or name == "base" or name == "bootable" or name == "cards" or name == "composite" or name == "compressed-size" or name == "date" or name == "depth" or name == "description" or name == "group-type" or name == "name" or name == "package-type" or name == "release" or name == "restart-info" or name == "source" or name == "uncompressed-size" or name == "vendor" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "package-name"):
                                self.package_name = value
                                self.package_name.value_namespace = name_space
                                self.package_name.value_namespace_prefix = name_space_prefix
                            if(value_path == "base"):
                                self.base = value
                                self.base.value_namespace = name_space
                                self.base.value_namespace_prefix = name_space_prefix
                            if(value_path == "bootable"):
                                self.bootable = value
                                self.bootable.value_namespace = name_space
                                self.bootable.value_namespace_prefix = name_space_prefix
                            if(value_path == "cards"):
                                self.cards.append(value)
                            if(value_path == "composite"):
                                self.composite = value
                                self.composite.value_namespace = name_space
                                self.composite.value_namespace_prefix = name_space_prefix
                            if(value_path == "compressed-size"):
                                self.compressed_size = value
                                self.compressed_size.value_namespace = name_space
                                self.compressed_size.value_namespace_prefix = name_space_prefix
                            if(value_path == "date"):
                                self.date = value
                                self.date.value_namespace = name_space
                                self.date.value_namespace_prefix = name_space_prefix
                            if(value_path == "depth"):
                                self.depth = value
                                self.depth.value_namespace = name_space
                                self.depth.value_namespace_prefix = name_space_prefix
                            if(value_path == "description"):
                                self.description = value
                                self.description.value_namespace = name_space
                                self.description.value_namespace_prefix = name_space_prefix
                            if(value_path == "group-type"):
                                self.group_type = value
                                self.group_type.value_namespace = name_space
                                self.group_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "name"):
                                self.name = value
                                self.name.value_namespace = name_space
                                self.name.value_namespace_prefix = name_space_prefix
                            if(value_path == "package-type"):
                                self.package_type = value
                                self.package_type.value_namespace = name_space
                                self.package_type.value_namespace_prefix = name_space_prefix
                            if(value_path == "release"):
                                self.release = value
                                self.release.value_namespace = name_space
                                self.release.value_namespace_prefix = name_space_prefix
                            if(value_path == "restart-info"):
                                self.restart_info = value
                                self.restart_info.value_namespace = name_space
                                self.restart_info.value_namespace_prefix = name_space_prefix
                            if(value_path == "source"):
                                self.source = value
                                self.source.value_namespace = name_space
                                self.source.value_namespace_prefix = name_space_prefix
                            if(value_path == "uncompressed-size"):
                                self.uncompressed_size = value
                                self.uncompressed_size.value_namespace = name_space
                                self.uncompressed_size.value_namespace_prefix = name_space_prefix
                            if(value_path == "vendor"):
                                self.vendor = value
                                self.vendor.value_namespace = name_space
                                self.vendor.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.package:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.package:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "packages" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "package"):
                            for c in self.package:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.Software.PackageDevices.PackageDevice.Packages.Package()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.package.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "package"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        self.device_name.is_set or
                        (self.packages is not None and self.packages.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.device_name.yfilter != YFilter.not_set or
                        (self.packages is not None and self.packages.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "package-device" + "[device-name='" + self.device_name.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software/package-devices/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.device_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "packages"):
                        if (self.packages is None):
                            self.packages = Install.Software.PackageDevices.PackageDevice.Packages()
                            self.packages.parent = self
                            self._children_name_map["packages"] = "packages"
                        return self.packages

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "packages" or name == "device-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "device-name"):
                        self.device_name = value
                        self.device_name.value_namespace = name_space
                        self.device_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.package_device:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.package_device:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "package-devices" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "package-device"):
                    for c in self.package_device:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Software.PackageDevices.PackageDevice()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.package_device.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "package-device"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class ComponentDevices(Entity):
            """
            Software component information
            
            .. attribute:: component_device
            
            	Component information for specific device
            	**type**\: list of    :py:class:`ComponentDevice <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.ComponentDevices.ComponentDevice>`
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.Software.ComponentDevices, self).__init__()

                self.yang_name = "component-devices"
                self.yang_parent_name = "software"

                self.component_device = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Install.Software.ComponentDevices, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Install.Software.ComponentDevices, self).__setattr__(name, value)


            class ComponentDevice(Entity):
                """
                Component information for specific device
                
                .. attribute:: device_name  <key>
                
                	Device Name
                	**type**\:  str
                
                	**pattern:** [\\w\\\-\\.\:,\_@#%$\\+=\\\|;]+
                
                .. attribute:: component_packages
                
                	Software package information
                	**type**\:   :py:class:`ComponentPackages <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.ComponentDevices.ComponentDevice.ComponentPackages>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Software.ComponentDevices.ComponentDevice, self).__init__()

                    self.yang_name = "component-device"
                    self.yang_parent_name = "component-devices"

                    self.device_name = YLeaf(YType.str, "device-name")

                    self.component_packages = Install.Software.ComponentDevices.ComponentDevice.ComponentPackages()
                    self.component_packages.parent = self
                    self._children_name_map["component_packages"] = "component-packages"
                    self._children_yang_names.add("component-packages")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("device_name") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.Software.ComponentDevices.ComponentDevice, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.Software.ComponentDevices.ComponentDevice, self).__setattr__(name, value)


                class ComponentPackages(Entity):
                    """
                    Software package information
                    
                    .. attribute:: component_package
                    
                    	Component information for specific package
                    	**type**\: list of    :py:class:`ComponentPackage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Software.ComponentDevices.ComponentDevice.ComponentPackages, self).__init__()

                        self.yang_name = "component-packages"
                        self.yang_parent_name = "component-device"

                        self.component_package = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in () and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Software.ComponentDevices.ComponentDevice.ComponentPackages, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Software.ComponentDevices.ComponentDevice.ComponentPackages, self).__setattr__(name, value)


                    class ComponentPackage(Entity):
                        """
                        Component information for specific package
                        
                        .. attribute:: package_name  <key>
                        
                        	Package Name
                        	**type**\:  str
                        
                        .. attribute:: component
                        
                        	Component information
                        	**type**\: list of    :py:class:`Component <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage.Component>`
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage, self).__init__()

                            self.yang_name = "component-package"
                            self.yang_parent_name = "component-packages"

                            self.package_name = YLeaf(YType.str, "package-name")

                            self.component = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("package_name") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage, self).__setattr__(name, value)


                        class Component(Entity):
                            """
                            Component information
                            
                            .. attribute:: component_name  <key>
                            
                            	Component Name
                            	**type**\:  str
                            
                            .. attribute:: description
                            
                            	Description of the component
                            	**type**\:  str
                            
                            .. attribute:: files
                            
                            	The set of files belonging to the component
                            	**type**\:  list of str
                            
                            .. attribute:: name
                            
                            	Name of the component
                            	**type**\:  str
                            
                            .. attribute:: release
                            
                            	Release that the component belongs to
                            	**type**\:  str
                            
                            .. attribute:: version
                            
                            	Version of the component
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage.Component, self).__init__()

                                self.yang_name = "component"
                                self.yang_parent_name = "component-package"

                                self.component_name = YLeaf(YType.str, "component-name")

                                self.description = YLeaf(YType.str, "description")

                                self.files = YLeafList(YType.str, "files")

                                self.name = YLeaf(YType.str, "name")

                                self.release = YLeaf(YType.str, "release")

                                self.version = YLeaf(YType.str, "version")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("component_name",
                                                "description",
                                                "files",
                                                "name",
                                                "release",
                                                "version") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage.Component, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage.Component, self).__setattr__(name, value)

                            def has_data(self):
                                for leaf in self.files.getYLeafs():
                                    if (leaf.yfilter != YFilter.not_set):
                                        return True
                                return (
                                    self.component_name.is_set or
                                    self.description.is_set or
                                    self.name.is_set or
                                    self.release.is_set or
                                    self.version.is_set)

                            def has_operation(self):
                                for leaf in self.files.getYLeafs():
                                    if (leaf.is_set):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.component_name.yfilter != YFilter.not_set or
                                    self.description.yfilter != YFilter.not_set or
                                    self.files.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set or
                                    self.release.yfilter != YFilter.not_set or
                                    self.version.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "component" + "[component-name='" + self.component_name.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.component_name.is_set or self.component_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.component_name.get_name_leafdata())
                                if (self.description.is_set or self.description.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.description.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())
                                if (self.release.is_set or self.release.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.release.get_name_leafdata())
                                if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.version.get_name_leafdata())

                                leaf_name_data.extend(self.files.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "component-name" or name == "description" or name == "files" or name == "name" or name == "release" or name == "version"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "component-name"):
                                    self.component_name = value
                                    self.component_name.value_namespace = name_space
                                    self.component_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "description"):
                                    self.description = value
                                    self.description.value_namespace = name_space
                                    self.description.value_namespace_prefix = name_space_prefix
                                if(value_path == "files"):
                                    self.files.append(value)
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix
                                if(value_path == "release"):
                                    self.release = value
                                    self.release.value_namespace = name_space
                                    self.release.value_namespace_prefix = name_space_prefix
                                if(value_path == "version"):
                                    self.version = value
                                    self.version.value_namespace = name_space
                                    self.version.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.component:
                                if (c.has_data()):
                                    return True
                            return self.package_name.is_set

                        def has_operation(self):
                            for c in self.component:
                                if (c.has_operation()):
                                    return True
                            return (
                                self.yfilter != YFilter.not_set or
                                self.package_name.yfilter != YFilter.not_set)

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "component-package" + "[package-name='" + self.package_name.get() + "']" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.package_name.is_set or self.package_name.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.package_name.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "component"):
                                for c in self.component:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage.Component()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.component.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "component" or name == "package-name"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "package-name"):
                                self.package_name = value
                                self.package_name.value_namespace = name_space
                                self.package_name.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.component_package:
                            if (c.has_data()):
                                return True
                        return False

                    def has_operation(self):
                        for c in self.component_package:
                            if (c.has_operation()):
                                return True
                        return self.yfilter != YFilter.not_set

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "component-packages" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "component-package"):
                            for c in self.component_package:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.Software.ComponentDevices.ComponentDevice.ComponentPackages.ComponentPackage()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.component_package.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "component-package"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        pass

                def has_data(self):
                    return (
                        self.device_name.is_set or
                        (self.component_packages is not None and self.component_packages.has_data()))

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        self.device_name.yfilter != YFilter.not_set or
                        (self.component_packages is not None and self.component_packages.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "component-device" + "[device-name='" + self.device_name.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software/component-devices/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.device_name.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "component-packages"):
                        if (self.component_packages is None):
                            self.component_packages = Install.Software.ComponentDevices.ComponentDevice.ComponentPackages()
                            self.component_packages.parent = self
                            self._children_name_map["component_packages"] = "component-packages"
                        return self.component_packages

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "component-packages" or name == "device-name"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "device-name"):
                        self.device_name = value
                        self.device_name.value_namespace = name_space
                        self.device_name.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.component_device:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.component_device:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "component-devices" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "component-device"):
                    for c in self.component_device:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Software.ComponentDevices.ComponentDevice()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.component_device.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "component-device"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (
                (self.alias_devices is not None and self.alias_devices.has_data()) or
                (self.component_devices is not None and self.component_devices.has_data()) or
                (self.package_devices is not None and self.package_devices.has_data()))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.alias_devices is not None and self.alias_devices.has_operation()) or
                (self.component_devices is not None and self.component_devices.has_operation()) or
                (self.package_devices is not None and self.package_devices.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "software" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "alias-devices"):
                if (self.alias_devices is None):
                    self.alias_devices = Install.Software.AliasDevices()
                    self.alias_devices.parent = self
                    self._children_name_map["alias_devices"] = "alias-devices"
                return self.alias_devices

            if (child_yang_name == "component-devices"):
                if (self.component_devices is None):
                    self.component_devices = Install.Software.ComponentDevices()
                    self.component_devices.parent = self
                    self._children_name_map["component_devices"] = "component-devices"
                return self.component_devices

            if (child_yang_name == "package-devices"):
                if (self.package_devices is None):
                    self.package_devices = Install.Software.PackageDevices()
                    self.package_devices.parent = self
                    self._children_name_map["package_devices"] = "package-devices"
                return self.package_devices

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "alias-devices" or name == "component-devices" or name == "package-devices"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class SoftwareInventory(Entity):
        """
        Information of install operations
        
        .. attribute:: active
        
        	Active inventory information
        	**type**\:   :py:class:`Active <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active>`
        
        .. attribute:: committed
        
        	Committed inventory information
        	**type**\:   :py:class:`Committed <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed>`
        
        .. attribute:: inactive
        
        	Inactive inventory information
        	**type**\:   :py:class:`Inactive <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive>`
        
        .. attribute:: requests
        
        	Install operation requests
        	**type**\:   :py:class:`Requests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Requests>`
        
        

        """

        _prefix = 'installmgr-admin-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Install.SoftwareInventory, self).__init__()

            self.yang_name = "software-inventory"
            self.yang_parent_name = "install"

            self.active = Install.SoftwareInventory.Active()
            self.active.parent = self
            self._children_name_map["active"] = "active"
            self._children_yang_names.add("active")

            self.committed = Install.SoftwareInventory.Committed()
            self.committed.parent = self
            self._children_name_map["committed"] = "committed"
            self._children_yang_names.add("committed")

            self.inactive = Install.SoftwareInventory.Inactive()
            self.inactive.parent = self
            self._children_name_map["inactive"] = "inactive"
            self._children_yang_names.add("inactive")

            self.requests = Install.SoftwareInventory.Requests()
            self.requests.parent = self
            self._children_name_map["requests"] = "requests"
            self._children_yang_names.add("requests")


        class Committed(Entity):
            """
            Committed inventory information
            
            .. attribute:: inventories
            
            	Software inventory
            	**type**\:   :py:class:`Inventories <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Inventories>`
            
            .. attribute:: summary
            
            	Summarized inventory information
            	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary>`
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.SoftwareInventory.Committed, self).__init__()

                self.yang_name = "committed"
                self.yang_parent_name = "software-inventory"

                self.inventories = Install.SoftwareInventory.Committed.Inventories()
                self.inventories.parent = self
                self._children_name_map["inventories"] = "inventories"
                self._children_yang_names.add("inventories")

                self.summary = Install.SoftwareInventory.Committed.Summary()
                self.summary.parent = self
                self._children_name_map["summary"] = "summary"
                self._children_yang_names.add("summary")


            class Summary(Entity):
                """
                Summarized inventory information
                
                .. attribute:: admin_load_path
                
                	Admin Resources load path
                	**type**\:   :py:class:`AdminLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.AdminLoadPath>`
                
                .. attribute:: default_load_path
                
                	Default load path
                	**type**\:   :py:class:`DefaultLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.DefaultLoadPath>`
                
                .. attribute:: location_load_path
                
                	Location load paths
                	**type**\: list of    :py:class:`LocationLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.LocationLoadPath>`
                
                .. attribute:: sdr_load_path
                
                	SDR load paths
                	**type**\: list of    :py:class:`SdrLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.SdrLoadPath>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.SoftwareInventory.Committed.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "committed"

                    self.admin_load_path = Install.SoftwareInventory.Committed.Summary.AdminLoadPath()
                    self.admin_load_path.parent = self
                    self._children_name_map["admin_load_path"] = "admin-load-path"
                    self._children_yang_names.add("admin-load-path")

                    self.default_load_path = Install.SoftwareInventory.Committed.Summary.DefaultLoadPath()
                    self.default_load_path.parent = self
                    self._children_name_map["default_load_path"] = "default-load-path"
                    self._children_yang_names.add("default-load-path")

                    self.location_load_path = YList(self)
                    self.sdr_load_path = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.SoftwareInventory.Committed.Summary, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.SoftwareInventory.Committed.Summary, self).__setattr__(name, value)


                class DefaultLoadPath(Entity):
                    """
                    Default load path
                    
                    .. attribute:: admin_match
                    
                    	Does this match the Admin Resources load path?
                    	**type**\:  bool
                    
                    .. attribute:: load_path
                    
                    	Default load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath>`
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: secure_domain_router_name
                    
                    	Names of SDRs this applies to
                    	**type**\:  list of str
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath, self).__init__()

                        self.yang_name = "default-load-path"
                        self.yang_parent_name = "summary"

                        self.admin_match = YLeaf(YType.boolean, "admin-match")

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.secure_domain_router_name = YLeafList(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("admin_match",
                                        "request_id",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Default load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "default-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/default-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/default-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "default-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/default-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/default-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        for leaf in self.secure_domain_router_name.getYLeafs():
                            if (leaf.yfilter != YFilter.not_set):
                                return True
                        return (
                            self.admin_match.is_set or
                            self.request_id.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        for leaf in self.secure_domain_router_name.getYLeafs():
                            if (leaf.is_set):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.admin_match.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "default-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.admin_match.is_set or self.admin_match.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.admin_match.get_name_leafdata())
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())

                        leaf_name_data.extend(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Committed.Summary.DefaultLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "admin-match" or name == "request-id" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "admin-match"):
                            self.admin_match = value
                            self.admin_match.value_namespace = name_space
                            self.admin_match.value_namespace_prefix = name_space_prefix
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name.append(value)


                class AdminLoadPath(Entity):
                    """
                    Admin Resources load path
                    
                    .. attribute:: load_path
                    
                    	Admin Resources load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath>`
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath, self).__init__()

                        self.yang_name = "admin-load-path"
                        self.yang_parent_name = "summary"

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("request_id") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Admin Resources load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "admin-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/admin-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/admin-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "admin-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/admin-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/admin-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        return self.request_id.is_set

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "admin-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Committed.Summary.AdminLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Committed.Summary.AdminLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "request-id"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix


                class SdrLoadPath(Entity):
                    """
                    SDR load paths
                    
                    .. attribute:: load_path
                    
                    	Load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath>`
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: secure_domain_router_name
                    
                    	SDR name
                    	**type**\:  str
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath, self).__init__()

                        self.yang_name = "sdr-load-path"
                        self.yang_parent_name = "summary"

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("request_id",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "sdr-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/sdr-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/sdr-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "sdr-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/sdr-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/sdr-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        return (
                            self.request_id.is_set or
                            self.secure_domain_router_name.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "sdr-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())
                        if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Committed.Summary.SdrLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Committed.Summary.SdrLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "request-id" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name = value
                            self.secure_domain_router_name.value_namespace = name_space
                            self.secure_domain_router_name.value_namespace_prefix = name_space_prefix


                class LocationLoadPath(Entity):
                    """
                    Location load paths
                    
                    .. attribute:: load_path
                    
                    	Load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath>`
                    
                    .. attribute:: node_name
                    
                    	Node identifier
                    	**type**\:  str
                    
                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: secure_domain_router_name
                    
                    	SDR name
                    	**type**\:  str
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath, self).__init__()

                        self.yang_name = "location-load-path"
                        self.yang_parent_name = "summary"

                        self.node_name = YLeaf(YType.str, "node-name")

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("node_name",
                                        "request_id",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "location-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/location-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/location-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "location-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/location-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/location-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        return (
                            self.node_name.is_set or
                            self.request_id.is_set or
                            self.secure_domain_router_name.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.node_name.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "location-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_name.get_name_leafdata())
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())
                        if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Committed.Summary.LocationLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Committed.Summary.LocationLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "node-name" or name == "request-id" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "node-name"):
                            self.node_name = value
                            self.node_name.value_namespace = name_space
                            self.node_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name = value
                            self.secure_domain_router_name.value_namespace = name_space
                            self.secure_domain_router_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.location_load_path:
                        if (c.has_data()):
                            return True
                    for c in self.sdr_load_path:
                        if (c.has_data()):
                            return True
                    return (
                        (self.admin_load_path is not None and self.admin_load_path.has_data()) or
                        (self.default_load_path is not None and self.default_load_path.has_data()))

                def has_operation(self):
                    for c in self.location_load_path:
                        if (c.has_operation()):
                            return True
                    for c in self.sdr_load_path:
                        if (c.has_operation()):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.admin_load_path is not None and self.admin_load_path.has_operation()) or
                        (self.default_load_path is not None and self.default_load_path.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "summary" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "admin-load-path"):
                        if (self.admin_load_path is None):
                            self.admin_load_path = Install.SoftwareInventory.Committed.Summary.AdminLoadPath()
                            self.admin_load_path.parent = self
                            self._children_name_map["admin_load_path"] = "admin-load-path"
                        return self.admin_load_path

                    if (child_yang_name == "default-load-path"):
                        if (self.default_load_path is None):
                            self.default_load_path = Install.SoftwareInventory.Committed.Summary.DefaultLoadPath()
                            self.default_load_path.parent = self
                            self._children_name_map["default_load_path"] = "default-load-path"
                        return self.default_load_path

                    if (child_yang_name == "location-load-path"):
                        for c in self.location_load_path:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Committed.Summary.LocationLoadPath()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.location_load_path.append(c)
                        return c

                    if (child_yang_name == "sdr-load-path"):
                        for c in self.sdr_load_path:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Committed.Summary.SdrLoadPath()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.sdr_load_path.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "admin-load-path" or name == "default-load-path" or name == "location-load-path" or name == "sdr-load-path"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Inventories(Entity):
                """
                Software inventory
                
                .. attribute:: inventory
                
                	Inventory information for specific node
                	**type**\: list of    :py:class:`Inventory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Inventories.Inventory>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.SoftwareInventory.Committed.Inventories, self).__init__()

                    self.yang_name = "inventories"
                    self.yang_parent_name = "committed"

                    self.inventory = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.SoftwareInventory.Committed.Inventories, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.SoftwareInventory.Committed.Inventories, self).__setattr__(name, value)


                class Inventory(Entity):
                    """
                    Inventory information for specific node
                    
                    .. attribute:: node_name  <key>
                    
                    	Node name
                    	**type**\:  str
                    
                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                    
                    .. attribute:: boot_image_name
                    
                    	Name of the boot image
                    	**type**\:  str
                    
                    .. attribute:: load_path
                    
                    	Load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath>`
                    
                    .. attribute:: major
                    
                    	Major data version number
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minor
                    
                    	Minor data version number
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: node_type
                    
                    	Node's type
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: secure_domain_router_name
                    
                    	SDR name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Committed.Inventories.Inventory, self).__init__()

                        self.yang_name = "inventory"
                        self.yang_parent_name = "inventories"

                        self.node_name = YLeaf(YType.str, "node-name")

                        self.boot_image_name = YLeaf(YType.str, "boot-image-name")

                        self.major = YLeaf(YType.uint32, "major")

                        self.minor = YLeaf(YType.uint32, "minor")

                        self.node_type = YLeaf(YType.uint64, "node-type")

                        self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("node_name",
                                        "boot_image_name",
                                        "major",
                                        "minor",
                                        "node_type",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Committed.Inventories.Inventory, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Committed.Inventories.Inventory, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "inventory"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        return (
                            self.node_name.is_set or
                            self.boot_image_name.is_set or
                            self.major.is_set or
                            self.minor.is_set or
                            self.node_type.is_set or
                            self.secure_domain_router_name.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.node_name.yfilter != YFilter.not_set or
                            self.boot_image_name.yfilter != YFilter.not_set or
                            self.major.yfilter != YFilter.not_set or
                            self.minor.yfilter != YFilter.not_set or
                            self.node_type.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "inventory" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/inventories/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_name.get_name_leafdata())
                        if (self.boot_image_name.is_set or self.boot_image_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.boot_image_name.get_name_leafdata())
                        if (self.major.is_set or self.major.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.major.get_name_leafdata())
                        if (self.minor.is_set or self.minor.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.minor.get_name_leafdata())
                        if (self.node_type.is_set or self.node_type.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_type.get_name_leafdata())
                        if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Committed.Inventories.Inventory.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "node-name" or name == "boot-image-name" or name == "major" or name == "minor" or name == "node-type" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "node-name"):
                            self.node_name = value
                            self.node_name.value_namespace = name_space
                            self.node_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "boot-image-name"):
                            self.boot_image_name = value
                            self.boot_image_name.value_namespace = name_space
                            self.boot_image_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "major"):
                            self.major = value
                            self.major.value_namespace = name_space
                            self.major.value_namespace_prefix = name_space_prefix
                        if(value_path == "minor"):
                            self.minor = value
                            self.minor.value_namespace = name_space
                            self.minor.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-type"):
                            self.node_type = value
                            self.node_type.value_namespace = name_space
                            self.node_type.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name = value
                            self.secure_domain_router_name.value_namespace = name_space
                            self.secure_domain_router_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.inventory:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.inventory:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inventories" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/committed/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "inventory"):
                        for c in self.inventory:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Committed.Inventories.Inventory()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.inventory.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "inventory"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    (self.inventories is not None and self.inventories.has_data()) or
                    (self.summary is not None and self.summary.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.inventories is not None and self.inventories.has_operation()) or
                    (self.summary is not None and self.summary.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "committed" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "inventories"):
                    if (self.inventories is None):
                        self.inventories = Install.SoftwareInventory.Committed.Inventories()
                        self.inventories.parent = self
                        self._children_name_map["inventories"] = "inventories"
                    return self.inventories

                if (child_yang_name == "summary"):
                    if (self.summary is None):
                        self.summary = Install.SoftwareInventory.Committed.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"
                    return self.summary

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "inventories" or name == "summary"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Inactive(Entity):
            """
            Inactive inventory information
            
            .. attribute:: inventories
            
            	Software inventory
            	**type**\:   :py:class:`Inventories <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Inventories>`
            
            .. attribute:: summary
            
            	Summarized inventory information
            	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary>`
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.SoftwareInventory.Inactive, self).__init__()

                self.yang_name = "inactive"
                self.yang_parent_name = "software-inventory"

                self.inventories = Install.SoftwareInventory.Inactive.Inventories()
                self.inventories.parent = self
                self._children_name_map["inventories"] = "inventories"
                self._children_yang_names.add("inventories")

                self.summary = Install.SoftwareInventory.Inactive.Summary()
                self.summary.parent = self
                self._children_name_map["summary"] = "summary"
                self._children_yang_names.add("summary")


            class Summary(Entity):
                """
                Summarized inventory information
                
                .. attribute:: admin_load_path
                
                	Admin Resources load path
                	**type**\:   :py:class:`AdminLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.AdminLoadPath>`
                
                .. attribute:: default_load_path
                
                	Default load path
                	**type**\:   :py:class:`DefaultLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath>`
                
                .. attribute:: location_load_path
                
                	Location load paths
                	**type**\: list of    :py:class:`LocationLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.LocationLoadPath>`
                
                .. attribute:: sdr_load_path
                
                	SDR load paths
                	**type**\: list of    :py:class:`SdrLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.SdrLoadPath>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.SoftwareInventory.Inactive.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "inactive"

                    self.admin_load_path = Install.SoftwareInventory.Inactive.Summary.AdminLoadPath()
                    self.admin_load_path.parent = self
                    self._children_name_map["admin_load_path"] = "admin-load-path"
                    self._children_yang_names.add("admin-load-path")

                    self.default_load_path = Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath()
                    self.default_load_path.parent = self
                    self._children_name_map["default_load_path"] = "default-load-path"
                    self._children_yang_names.add("default-load-path")

                    self.location_load_path = YList(self)
                    self.sdr_load_path = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.SoftwareInventory.Inactive.Summary, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.SoftwareInventory.Inactive.Summary, self).__setattr__(name, value)


                class DefaultLoadPath(Entity):
                    """
                    Default load path
                    
                    .. attribute:: admin_match
                    
                    	Does this match the Admin Resources load path?
                    	**type**\:  bool
                    
                    .. attribute:: load_path
                    
                    	Default load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath>`
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: secure_domain_router_name
                    
                    	Names of SDRs this applies to
                    	**type**\:  list of str
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath, self).__init__()

                        self.yang_name = "default-load-path"
                        self.yang_parent_name = "summary"

                        self.admin_match = YLeaf(YType.boolean, "admin-match")

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.secure_domain_router_name = YLeafList(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("admin_match",
                                        "request_id",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Default load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "default-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/default-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/default-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "default-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/default-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/default-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        for leaf in self.secure_domain_router_name.getYLeafs():
                            if (leaf.yfilter != YFilter.not_set):
                                return True
                        return (
                            self.admin_match.is_set or
                            self.request_id.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        for leaf in self.secure_domain_router_name.getYLeafs():
                            if (leaf.is_set):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.admin_match.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "default-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.admin_match.is_set or self.admin_match.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.admin_match.get_name_leafdata())
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())

                        leaf_name_data.extend(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "admin-match" or name == "request-id" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "admin-match"):
                            self.admin_match = value
                            self.admin_match.value_namespace = name_space
                            self.admin_match.value_namespace_prefix = name_space_prefix
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name.append(value)


                class AdminLoadPath(Entity):
                    """
                    Admin Resources load path
                    
                    .. attribute:: load_path
                    
                    	Admin Resources load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath>`
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath, self).__init__()

                        self.yang_name = "admin-load-path"
                        self.yang_parent_name = "summary"

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("request_id") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Admin Resources load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "admin-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/admin-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/admin-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "admin-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/admin-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/admin-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        return self.request_id.is_set

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "admin-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Inactive.Summary.AdminLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "request-id"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix


                class SdrLoadPath(Entity):
                    """
                    SDR load paths
                    
                    .. attribute:: load_path
                    
                    	Load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath>`
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: secure_domain_router_name
                    
                    	SDR name
                    	**type**\:  str
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath, self).__init__()

                        self.yang_name = "sdr-load-path"
                        self.yang_parent_name = "summary"

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("request_id",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "sdr-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/sdr-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/sdr-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "sdr-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/sdr-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/sdr-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        return (
                            self.request_id.is_set or
                            self.secure_domain_router_name.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "sdr-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())
                        if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Inactive.Summary.SdrLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "request-id" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name = value
                            self.secure_domain_router_name.value_namespace = name_space
                            self.secure_domain_router_name.value_namespace_prefix = name_space_prefix


                class LocationLoadPath(Entity):
                    """
                    Location load paths
                    
                    .. attribute:: load_path
                    
                    	Load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath>`
                    
                    .. attribute:: node_name
                    
                    	Node identifier
                    	**type**\:  str
                    
                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: secure_domain_router_name
                    
                    	SDR name
                    	**type**\:  str
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath, self).__init__()

                        self.yang_name = "location-load-path"
                        self.yang_parent_name = "summary"

                        self.node_name = YLeaf(YType.str, "node-name")

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("node_name",
                                        "request_id",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "location-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/location-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/location-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "location-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/location-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/location-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        return (
                            self.node_name.is_set or
                            self.request_id.is_set or
                            self.secure_domain_router_name.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.node_name.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "location-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_name.get_name_leafdata())
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())
                        if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Inactive.Summary.LocationLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "node-name" or name == "request-id" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "node-name"):
                            self.node_name = value
                            self.node_name.value_namespace = name_space
                            self.node_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name = value
                            self.secure_domain_router_name.value_namespace = name_space
                            self.secure_domain_router_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.location_load_path:
                        if (c.has_data()):
                            return True
                    for c in self.sdr_load_path:
                        if (c.has_data()):
                            return True
                    return (
                        (self.admin_load_path is not None and self.admin_load_path.has_data()) or
                        (self.default_load_path is not None and self.default_load_path.has_data()))

                def has_operation(self):
                    for c in self.location_load_path:
                        if (c.has_operation()):
                            return True
                    for c in self.sdr_load_path:
                        if (c.has_operation()):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.admin_load_path is not None and self.admin_load_path.has_operation()) or
                        (self.default_load_path is not None and self.default_load_path.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "summary" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "admin-load-path"):
                        if (self.admin_load_path is None):
                            self.admin_load_path = Install.SoftwareInventory.Inactive.Summary.AdminLoadPath()
                            self.admin_load_path.parent = self
                            self._children_name_map["admin_load_path"] = "admin-load-path"
                        return self.admin_load_path

                    if (child_yang_name == "default-load-path"):
                        if (self.default_load_path is None):
                            self.default_load_path = Install.SoftwareInventory.Inactive.Summary.DefaultLoadPath()
                            self.default_load_path.parent = self
                            self._children_name_map["default_load_path"] = "default-load-path"
                        return self.default_load_path

                    if (child_yang_name == "location-load-path"):
                        for c in self.location_load_path:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Inactive.Summary.LocationLoadPath()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.location_load_path.append(c)
                        return c

                    if (child_yang_name == "sdr-load-path"):
                        for c in self.sdr_load_path:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Inactive.Summary.SdrLoadPath()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.sdr_load_path.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "admin-load-path" or name == "default-load-path" or name == "location-load-path" or name == "sdr-load-path"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Inventories(Entity):
                """
                Software inventory
                
                .. attribute:: inventory
                
                	Inventory information for specific node
                	**type**\: list of    :py:class:`Inventory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Inventories.Inventory>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.SoftwareInventory.Inactive.Inventories, self).__init__()

                    self.yang_name = "inventories"
                    self.yang_parent_name = "inactive"

                    self.inventory = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.SoftwareInventory.Inactive.Inventories, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.SoftwareInventory.Inactive.Inventories, self).__setattr__(name, value)


                class Inventory(Entity):
                    """
                    Inventory information for specific node
                    
                    .. attribute:: node_name  <key>
                    
                    	Node name
                    	**type**\:  str
                    
                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                    
                    .. attribute:: boot_image_name
                    
                    	Name of the boot image
                    	**type**\:  str
                    
                    .. attribute:: load_path
                    
                    	Load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath>`
                    
                    .. attribute:: major
                    
                    	Major data version number
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minor
                    
                    	Minor data version number
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: node_type
                    
                    	Node's type
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: secure_domain_router_name
                    
                    	SDR name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Inactive.Inventories.Inventory, self).__init__()

                        self.yang_name = "inventory"
                        self.yang_parent_name = "inventories"

                        self.node_name = YLeaf(YType.str, "node-name")

                        self.boot_image_name = YLeaf(YType.str, "boot-image-name")

                        self.major = YLeaf(YType.uint32, "major")

                        self.minor = YLeaf(YType.uint32, "minor")

                        self.node_type = YLeaf(YType.uint64, "node-type")

                        self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("node_name",
                                        "boot_image_name",
                                        "major",
                                        "minor",
                                        "node_type",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Inactive.Inventories.Inventory, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Inactive.Inventories.Inventory, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "inventory"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        return (
                            self.node_name.is_set or
                            self.boot_image_name.is_set or
                            self.major.is_set or
                            self.minor.is_set or
                            self.node_type.is_set or
                            self.secure_domain_router_name.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.node_name.yfilter != YFilter.not_set or
                            self.boot_image_name.yfilter != YFilter.not_set or
                            self.major.yfilter != YFilter.not_set or
                            self.minor.yfilter != YFilter.not_set or
                            self.node_type.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "inventory" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/inventories/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_name.get_name_leafdata())
                        if (self.boot_image_name.is_set or self.boot_image_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.boot_image_name.get_name_leafdata())
                        if (self.major.is_set or self.major.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.major.get_name_leafdata())
                        if (self.minor.is_set or self.minor.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.minor.get_name_leafdata())
                        if (self.node_type.is_set or self.node_type.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_type.get_name_leafdata())
                        if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Inactive.Inventories.Inventory.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "node-name" or name == "boot-image-name" or name == "major" or name == "minor" or name == "node-type" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "node-name"):
                            self.node_name = value
                            self.node_name.value_namespace = name_space
                            self.node_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "boot-image-name"):
                            self.boot_image_name = value
                            self.boot_image_name.value_namespace = name_space
                            self.boot_image_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "major"):
                            self.major = value
                            self.major.value_namespace = name_space
                            self.major.value_namespace_prefix = name_space_prefix
                        if(value_path == "minor"):
                            self.minor = value
                            self.minor.value_namespace = name_space
                            self.minor.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-type"):
                            self.node_type = value
                            self.node_type.value_namespace = name_space
                            self.node_type.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name = value
                            self.secure_domain_router_name.value_namespace = name_space
                            self.secure_domain_router_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.inventory:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.inventory:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inventories" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/inactive/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "inventory"):
                        for c in self.inventory:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Inactive.Inventories.Inventory()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.inventory.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "inventory"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    (self.inventories is not None and self.inventories.has_data()) or
                    (self.summary is not None and self.summary.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.inventories is not None and self.inventories.has_operation()) or
                    (self.summary is not None and self.summary.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "inactive" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "inventories"):
                    if (self.inventories is None):
                        self.inventories = Install.SoftwareInventory.Inactive.Inventories()
                        self.inventories.parent = self
                        self._children_name_map["inventories"] = "inventories"
                    return self.inventories

                if (child_yang_name == "summary"):
                    if (self.summary is None):
                        self.summary = Install.SoftwareInventory.Inactive.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"
                    return self.summary

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "inventories" or name == "summary"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Requests(Entity):
            """
            Install operation requests
            
            .. attribute:: requests
            
            	Install operation request history
            	**type**\:   :py:class:`Requests <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Requests.Requests>`
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.SoftwareInventory.Requests, self).__init__()

                self.yang_name = "requests"
                self.yang_parent_name = "software-inventory"

                self.requests = Install.SoftwareInventory.Requests.Requests()
                self.requests.parent = self
                self._children_name_map["requests"] = "requests"
                self._children_yang_names.add("requests")


            class Requests(Entity):
                """
                Install operation request history
                
                .. attribute:: request
                
                	Install operation request information
                	**type**\: list of    :py:class:`Request <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Requests.Requests.Request>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.SoftwareInventory.Requests.Requests, self).__init__()

                    self.yang_name = "requests"
                    self.yang_parent_name = "requests"

                    self.request = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.SoftwareInventory.Requests.Requests, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.SoftwareInventory.Requests.Requests, self).__setattr__(name, value)


                class Request(Entity):
                    """
                    Install operation request information
                    
                    .. attribute:: request_id  <key>
                    
                    	Install operation request ID
                    	**type**\:  int
                    
                    	**range:** \-2147483648..2147483647
                    
                    .. attribute:: inventories
                    
                    	Inventory information of install operation request
                    	**type**\:   :py:class:`Inventories <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Requests.Requests.Request.Inventories>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Requests.Requests.Request, self).__init__()

                        self.yang_name = "request"
                        self.yang_parent_name = "requests"

                        self.request_id = YLeaf(YType.int32, "request-id")

                        self.inventories = Install.SoftwareInventory.Requests.Requests.Request.Inventories()
                        self.inventories.parent = self
                        self._children_name_map["inventories"] = "inventories"
                        self._children_yang_names.add("inventories")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("request_id") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Requests.Requests.Request, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Requests.Requests.Request, self).__setattr__(name, value)


                    class Inventories(Entity):
                        """
                        Inventory information of install operation
                        request
                        
                        .. attribute:: inventory
                        
                        	Inventory information
                        	**type**\: list of    :py:class:`Inventory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory>`
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Requests.Requests.Request.Inventories, self).__init__()

                            self.yang_name = "inventories"
                            self.yang_parent_name = "request"

                            self.inventory = YList(self)

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in () and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Requests.Requests.Request.Inventories, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Requests.Requests.Request.Inventories, self).__setattr__(name, value)


                        class Inventory(Entity):
                            """
                            Inventory information
                            
                            .. attribute:: node_name  <key>
                            
                            	Node name
                            	**type**\:  str
                            
                            	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                            
                            .. attribute:: boot_image_name
                            
                            	Name of the boot image
                            	**type**\:  str
                            
                            .. attribute:: load_path
                            
                            	Load path
                            	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath>`
                            
                            .. attribute:: major
                            
                            	Major data version number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: minor
                            
                            	Minor data version number
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            .. attribute:: node_type
                            
                            	Node's type
                            	**type**\:  int
                            
                            	**range:** 0..18446744073709551615
                            
                            .. attribute:: secure_domain_router_name
                            
                            	SDR name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory, self).__init__()

                                self.yang_name = "inventory"
                                self.yang_parent_name = "inventories"

                                self.node_name = YLeaf(YType.str, "node-name")

                                self.boot_image_name = YLeaf(YType.str, "boot-image-name")

                                self.major = YLeaf(YType.uint32, "major")

                                self.minor = YLeaf(YType.uint32, "minor")

                                self.node_type = YLeaf(YType.uint64, "node-type")

                                self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                                self.load_path = YList(self)

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("node_name",
                                                "boot_image_name",
                                                "major",
                                                "minor",
                                                "node_type",
                                                "secure_domain_router_name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory, self).__setattr__(name, value)


                            class LoadPath(Entity):
                                """
                                Load path
                                
                                .. attribute:: build_information
                                
                                	Build information
                                	**type**\:  str
                                
                                .. attribute:: package
                                
                                	Package
                                	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath.Package>`
                                
                                .. attribute:: version
                                
                                	Version
                                	**type**\:  str
                                
                                

                                """

                                _prefix = 'installmgr-admin-oper'
                                _revision = '2015-11-09'

                                def __init__(self):
                                    super(Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath, self).__init__()

                                    self.yang_name = "load-path"
                                    self.yang_parent_name = "inventory"

                                    self.build_information = YLeaf(YType.str, "build-information")

                                    self.version = YLeaf(YType.str, "version")

                                    self.package = Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                    self._children_yang_names.add("package")

                                def __setattr__(self, name, value):
                                    self._check_monkey_patching_error(name, value)
                                    with _handle_type_error():
                                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                "Please use list append or extend method."
                                                                .format(value))
                                        if isinstance(value, Enum.YLeaf):
                                            value = value.name
                                        if name in ("build_information",
                                                    "version") and name in self.__dict__:
                                            if isinstance(value, YLeaf):
                                                self.__dict__[name].set(value.get())
                                            elif isinstance(value, YLeafList):
                                                super(Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath, self).__setattr__(name, value)
                                            else:
                                                self.__dict__[name].set(value)
                                        else:
                                            if hasattr(value, "parent") and name != "parent":
                                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                    value.parent = self
                                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                                    value.parent = self
                                            super(Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath, self).__setattr__(name, value)


                                class Package(Entity):
                                    """
                                    Package
                                    
                                    .. attribute:: device_name
                                    
                                    	Device name
                                    	**type**\:  str
                                    
                                    .. attribute:: name
                                    
                                    	Package group name
                                    	**type**\:  str
                                    
                                    

                                    """

                                    _prefix = 'installmgr-admin-oper'
                                    _revision = '2015-11-09'

                                    def __init__(self):
                                        super(Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath.Package, self).__init__()

                                        self.yang_name = "package"
                                        self.yang_parent_name = "load-path"

                                        self.device_name = YLeaf(YType.str, "device-name")

                                        self.name = YLeaf(YType.str, "name")

                                    def __setattr__(self, name, value):
                                        self._check_monkey_patching_error(name, value)
                                        with _handle_type_error():
                                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                                    "Please use list append or extend method."
                                                                    .format(value))
                                            if isinstance(value, Enum.YLeaf):
                                                value = value.name
                                            if name in ("device_name",
                                                        "name") and name in self.__dict__:
                                                if isinstance(value, YLeaf):
                                                    self.__dict__[name].set(value.get())
                                                elif isinstance(value, YLeafList):
                                                    super(Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath.Package, self).__setattr__(name, value)
                                                else:
                                                    self.__dict__[name].set(value)
                                            else:
                                                if hasattr(value, "parent") and name != "parent":
                                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                        value.parent = self
                                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                                        value.parent = self
                                                super(Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath.Package, self).__setattr__(name, value)

                                    def has_data(self):
                                        return (
                                            self.device_name.is_set or
                                            self.name.is_set)

                                    def has_operation(self):
                                        return (
                                            self.yfilter != YFilter.not_set or
                                            self.device_name.yfilter != YFilter.not_set or
                                            self.name.yfilter != YFilter.not_set)

                                    def get_segment_path(self):
                                        path_buffer = ""
                                        path_buffer = "package" + path_buffer

                                        return path_buffer

                                    def get_entity_path(self, ancestor):
                                        path_buffer = ""
                                        if (ancestor is None):
                                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                        else:
                                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                        leaf_name_data = LeafDataList()
                                        if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.device_name.get_name_leafdata())
                                        if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                            leaf_name_data.append(self.name.get_name_leafdata())

                                        entity_path = EntityPath(path_buffer, leaf_name_data)
                                        return entity_path

                                    def get_child_by_name(self, child_yang_name, segment_path):
                                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                        if child is not None:
                                            return child

                                        return None

                                    def has_leaf_or_child_of_name(self, name):
                                        if(name == "device-name" or name == "name"):
                                            return True
                                        return False

                                    def set_value(self, value_path, value, name_space, name_space_prefix):
                                        if(value_path == "device-name"):
                                            self.device_name = value
                                            self.device_name.value_namespace = name_space
                                            self.device_name.value_namespace_prefix = name_space_prefix
                                        if(value_path == "name"):
                                            self.name = value
                                            self.name.value_namespace = name_space
                                            self.name.value_namespace_prefix = name_space_prefix

                                def has_data(self):
                                    return (
                                        self.build_information.is_set or
                                        self.version.is_set or
                                        (self.package is not None and self.package.has_data()))

                                def has_operation(self):
                                    return (
                                        self.yfilter != YFilter.not_set or
                                        self.build_information.yfilter != YFilter.not_set or
                                        self.version.yfilter != YFilter.not_set or
                                        (self.package is not None and self.package.has_operation()))

                                def get_segment_path(self):
                                    path_buffer = ""
                                    path_buffer = "load-path" + path_buffer

                                    return path_buffer

                                def get_entity_path(self, ancestor):
                                    path_buffer = ""
                                    if (ancestor is None):
                                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                    else:
                                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                    leaf_name_data = LeafDataList()
                                    if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.build_information.get_name_leafdata())
                                    if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                        leaf_name_data.append(self.version.get_name_leafdata())

                                    entity_path = EntityPath(path_buffer, leaf_name_data)
                                    return entity_path

                                def get_child_by_name(self, child_yang_name, segment_path):
                                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                    if child is not None:
                                        return child

                                    if (child_yang_name == "package"):
                                        if (self.package is None):
                                            self.package = Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath.Package()
                                            self.package.parent = self
                                            self._children_name_map["package"] = "package"
                                        return self.package

                                    return None

                                def has_leaf_or_child_of_name(self, name):
                                    if(name == "package" or name == "build-information" or name == "version"):
                                        return True
                                    return False

                                def set_value(self, value_path, value, name_space, name_space_prefix):
                                    if(value_path == "build-information"):
                                        self.build_information = value
                                        self.build_information.value_namespace = name_space
                                        self.build_information.value_namespace_prefix = name_space_prefix
                                    if(value_path == "version"):
                                        self.version = value
                                        self.version.value_namespace = name_space
                                        self.version.value_namespace_prefix = name_space_prefix

                            def has_data(self):
                                for c in self.load_path:
                                    if (c.has_data()):
                                        return True
                                return (
                                    self.node_name.is_set or
                                    self.boot_image_name.is_set or
                                    self.major.is_set or
                                    self.minor.is_set or
                                    self.node_type.is_set or
                                    self.secure_domain_router_name.is_set)

                            def has_operation(self):
                                for c in self.load_path:
                                    if (c.has_operation()):
                                        return True
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.node_name.yfilter != YFilter.not_set or
                                    self.boot_image_name.yfilter != YFilter.not_set or
                                    self.major.yfilter != YFilter.not_set or
                                    self.minor.yfilter != YFilter.not_set or
                                    self.node_type.yfilter != YFilter.not_set or
                                    self.secure_domain_router_name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "inventory" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.node_name.get_name_leafdata())
                                if (self.boot_image_name.is_set or self.boot_image_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.boot_image_name.get_name_leafdata())
                                if (self.major.is_set or self.major.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.major.get_name_leafdata())
                                if (self.minor.is_set or self.minor.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.minor.get_name_leafdata())
                                if (self.node_type.is_set or self.node_type.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.node_type.get_name_leafdata())
                                if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                if (child_yang_name == "load-path"):
                                    for c in self.load_path:
                                        segment = c.get_segment_path()
                                        if (segment_path == segment):
                                            return c
                                    c = Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory.LoadPath()
                                    c.parent = self
                                    local_reference_key = "ydk::seg::%s" % segment_path
                                    self._local_refs[local_reference_key] = c
                                    self.load_path.append(c)
                                    return c

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "load-path" or name == "node-name" or name == "boot-image-name" or name == "major" or name == "minor" or name == "node-type" or name == "secure-domain-router-name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "node-name"):
                                    self.node_name = value
                                    self.node_name.value_namespace = name_space
                                    self.node_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "boot-image-name"):
                                    self.boot_image_name = value
                                    self.boot_image_name.value_namespace = name_space
                                    self.boot_image_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "major"):
                                    self.major = value
                                    self.major.value_namespace = name_space
                                    self.major.value_namespace_prefix = name_space_prefix
                                if(value_path == "minor"):
                                    self.minor = value
                                    self.minor.value_namespace = name_space
                                    self.minor.value_namespace_prefix = name_space_prefix
                                if(value_path == "node-type"):
                                    self.node_type = value
                                    self.node_type.value_namespace = name_space
                                    self.node_type.value_namespace_prefix = name_space_prefix
                                if(value_path == "secure-domain-router-name"):
                                    self.secure_domain_router_name = value
                                    self.secure_domain_router_name.value_namespace = name_space
                                    self.secure_domain_router_name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            for c in self.inventory:
                                if (c.has_data()):
                                    return True
                            return False

                        def has_operation(self):
                            for c in self.inventory:
                                if (c.has_operation()):
                                    return True
                            return self.yfilter != YFilter.not_set

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "inventories" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "inventory"):
                                for c in self.inventory:
                                    segment = c.get_segment_path()
                                    if (segment_path == segment):
                                        return c
                                c = Install.SoftwareInventory.Requests.Requests.Request.Inventories.Inventory()
                                c.parent = self
                                local_reference_key = "ydk::seg::%s" % segment_path
                                self._local_refs[local_reference_key] = c
                                self.inventory.append(c)
                                return c

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "inventory"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            pass

                    def has_data(self):
                        return (
                            self.request_id.is_set or
                            (self.inventories is not None and self.inventories.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            (self.inventories is not None and self.inventories.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "request" + "[request-id='" + self.request_id.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/requests/requests/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "inventories"):
                            if (self.inventories is None):
                                self.inventories = Install.SoftwareInventory.Requests.Requests.Request.Inventories()
                                self.inventories.parent = self
                                self._children_name_map["inventories"] = "inventories"
                            return self.inventories

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "inventories" or name == "request-id"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.request:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.request:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "requests" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/requests/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "request"):
                        for c in self.request:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Requests.Requests.Request()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.request.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "request"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (self.requests is not None and self.requests.has_data())

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.requests is not None and self.requests.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "requests" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "requests"):
                    if (self.requests is None):
                        self.requests = Install.SoftwareInventory.Requests.Requests()
                        self.requests.parent = self
                        self._children_name_map["requests"] = "requests"
                    return self.requests

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "requests"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Active(Entity):
            """
            Active inventory information
            
            .. attribute:: inventories
            
            	Software inventory
            	**type**\:   :py:class:`Inventories <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Inventories>`
            
            .. attribute:: summary
            
            	Summarized inventory information
            	**type**\:   :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary>`
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.SoftwareInventory.Active, self).__init__()

                self.yang_name = "active"
                self.yang_parent_name = "software-inventory"

                self.inventories = Install.SoftwareInventory.Active.Inventories()
                self.inventories.parent = self
                self._children_name_map["inventories"] = "inventories"
                self._children_yang_names.add("inventories")

                self.summary = Install.SoftwareInventory.Active.Summary()
                self.summary.parent = self
                self._children_name_map["summary"] = "summary"
                self._children_yang_names.add("summary")


            class Summary(Entity):
                """
                Summarized inventory information
                
                .. attribute:: admin_load_path
                
                	Admin Resources load path
                	**type**\:   :py:class:`AdminLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.AdminLoadPath>`
                
                .. attribute:: default_load_path
                
                	Default load path
                	**type**\:   :py:class:`DefaultLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.DefaultLoadPath>`
                
                .. attribute:: location_load_path
                
                	Location load paths
                	**type**\: list of    :py:class:`LocationLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.LocationLoadPath>`
                
                .. attribute:: sdr_load_path
                
                	SDR load paths
                	**type**\: list of    :py:class:`SdrLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.SdrLoadPath>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.SoftwareInventory.Active.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "active"

                    self.admin_load_path = Install.SoftwareInventory.Active.Summary.AdminLoadPath()
                    self.admin_load_path.parent = self
                    self._children_name_map["admin_load_path"] = "admin-load-path"
                    self._children_yang_names.add("admin-load-path")

                    self.default_load_path = Install.SoftwareInventory.Active.Summary.DefaultLoadPath()
                    self.default_load_path.parent = self
                    self._children_name_map["default_load_path"] = "default-load-path"
                    self._children_yang_names.add("default-load-path")

                    self.location_load_path = YList(self)
                    self.sdr_load_path = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.SoftwareInventory.Active.Summary, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.SoftwareInventory.Active.Summary, self).__setattr__(name, value)


                class DefaultLoadPath(Entity):
                    """
                    Default load path
                    
                    .. attribute:: admin_match
                    
                    	Does this match the Admin Resources load path?
                    	**type**\:  bool
                    
                    .. attribute:: load_path
                    
                    	Default load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath>`
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: secure_domain_router_name
                    
                    	Names of SDRs this applies to
                    	**type**\:  list of str
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath, self).__init__()

                        self.yang_name = "default-load-path"
                        self.yang_parent_name = "summary"

                        self.admin_match = YLeaf(YType.boolean, "admin-match")

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.secure_domain_router_name = YLeafList(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("admin_match",
                                        "request_id",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Default load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "default-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/default-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/default-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "default-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/default-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/default-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        for leaf in self.secure_domain_router_name.getYLeafs():
                            if (leaf.yfilter != YFilter.not_set):
                                return True
                        return (
                            self.admin_match.is_set or
                            self.request_id.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        for leaf in self.secure_domain_router_name.getYLeafs():
                            if (leaf.is_set):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.admin_match.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "default-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.admin_match.is_set or self.admin_match.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.admin_match.get_name_leafdata())
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())

                        leaf_name_data.extend(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Active.Summary.DefaultLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Active.Summary.DefaultLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "admin-match" or name == "request-id" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "admin-match"):
                            self.admin_match = value
                            self.admin_match.value_namespace = name_space
                            self.admin_match.value_namespace_prefix = name_space_prefix
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name.append(value)


                class AdminLoadPath(Entity):
                    """
                    Admin Resources load path
                    
                    .. attribute:: load_path
                    
                    	Admin Resources load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath>`
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Active.Summary.AdminLoadPath, self).__init__()

                        self.yang_name = "admin-load-path"
                        self.yang_parent_name = "summary"

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("request_id") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Active.Summary.AdminLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Active.Summary.AdminLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Admin Resources load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "admin-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/admin-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/admin-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "admin-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/admin-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/admin-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        return self.request_id.is_set

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "admin-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Active.Summary.AdminLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Active.Summary.AdminLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "request-id"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix


                class SdrLoadPath(Entity):
                    """
                    SDR load paths
                    
                    .. attribute:: load_path
                    
                    	Load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath>`
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: secure_domain_router_name
                    
                    	SDR name
                    	**type**\:  str
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Active.Summary.SdrLoadPath, self).__init__()

                        self.yang_name = "sdr-load-path"
                        self.yang_parent_name = "summary"

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("request_id",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Active.Summary.SdrLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Active.Summary.SdrLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "sdr-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/sdr-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/sdr-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "sdr-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/sdr-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/sdr-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        return (
                            self.request_id.is_set or
                            self.secure_domain_router_name.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "sdr-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())
                        if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Active.Summary.SdrLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Active.Summary.SdrLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "request-id" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name = value
                            self.secure_domain_router_name.value_namespace = name_space
                            self.secure_domain_router_name.value_namespace_prefix = name_space_prefix


                class LocationLoadPath(Entity):
                    """
                    Location load paths
                    
                    .. attribute:: load_path
                    
                    	Load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath>`
                    
                    .. attribute:: node_name
                    
                    	Node identifier
                    	**type**\:  str
                    
                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                    
                    .. attribute:: request_id
                    
                    	Install op affecting scope
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: secure_domain_router_name
                    
                    	SDR name
                    	**type**\:  str
                    
                    .. attribute:: standby_load_path
                    
                    	Load paths for standby nodes
                    	**type**\: list of    :py:class:`StandbyLoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath>`
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Active.Summary.LocationLoadPath, self).__init__()

                        self.yang_name = "location-load-path"
                        self.yang_parent_name = "summary"

                        self.node_name = YLeaf(YType.str, "node-name")

                        self.request_id = YLeaf(YType.uint32, "request-id")

                        self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)
                        self.standby_load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("node_name",
                                        "request_id",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Active.Summary.LocationLoadPath, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Active.Summary.LocationLoadPath, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "location-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/location-load-path/load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/location-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix


                    class StandbyLoadPath(Entity):
                        """
                        Load paths for standby nodes
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath, self).__init__()

                            self.yang_name = "standby-load-path"
                            self.yang_parent_name = "location-load-path"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "standby-load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/location-load-path/standby-load-path/%s" % self.get_segment_path()
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "standby-load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/location-load-path/%s" % self.get_segment_path()
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_data()):
                                return True
                        return (
                            self.node_name.is_set or
                            self.request_id.is_set or
                            self.secure_domain_router_name.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        for c in self.standby_load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.node_name.yfilter != YFilter.not_set or
                            self.request_id.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "location-load-path" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/summary/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_name.get_name_leafdata())
                        if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.request_id.get_name_leafdata())
                        if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Active.Summary.LocationLoadPath.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        if (child_yang_name == "standby-load-path"):
                            for c in self.standby_load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Active.Summary.LocationLoadPath.StandbyLoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.standby_load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "standby-load-path" or name == "node-name" or name == "request-id" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "node-name"):
                            self.node_name = value
                            self.node_name.value_namespace = name_space
                            self.node_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "request-id"):
                            self.request_id = value
                            self.request_id.value_namespace = name_space
                            self.request_id.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name = value
                            self.secure_domain_router_name.value_namespace = name_space
                            self.secure_domain_router_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.location_load_path:
                        if (c.has_data()):
                            return True
                    for c in self.sdr_load_path:
                        if (c.has_data()):
                            return True
                    return (
                        (self.admin_load_path is not None and self.admin_load_path.has_data()) or
                        (self.default_load_path is not None and self.default_load_path.has_data()))

                def has_operation(self):
                    for c in self.location_load_path:
                        if (c.has_operation()):
                            return True
                    for c in self.sdr_load_path:
                        if (c.has_operation()):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.admin_load_path is not None and self.admin_load_path.has_operation()) or
                        (self.default_load_path is not None and self.default_load_path.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "summary" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "admin-load-path"):
                        if (self.admin_load_path is None):
                            self.admin_load_path = Install.SoftwareInventory.Active.Summary.AdminLoadPath()
                            self.admin_load_path.parent = self
                            self._children_name_map["admin_load_path"] = "admin-load-path"
                        return self.admin_load_path

                    if (child_yang_name == "default-load-path"):
                        if (self.default_load_path is None):
                            self.default_load_path = Install.SoftwareInventory.Active.Summary.DefaultLoadPath()
                            self.default_load_path.parent = self
                            self._children_name_map["default_load_path"] = "default-load-path"
                        return self.default_load_path

                    if (child_yang_name == "location-load-path"):
                        for c in self.location_load_path:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Active.Summary.LocationLoadPath()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.location_load_path.append(c)
                        return c

                    if (child_yang_name == "sdr-load-path"):
                        for c in self.sdr_load_path:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Active.Summary.SdrLoadPath()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.sdr_load_path.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "admin-load-path" or name == "default-load-path" or name == "location-load-path" or name == "sdr-load-path"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Inventories(Entity):
                """
                Software inventory
                
                .. attribute:: inventory
                
                	Inventory information for specific node
                	**type**\: list of    :py:class:`Inventory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Inventories.Inventory>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.SoftwareInventory.Active.Inventories, self).__init__()

                    self.yang_name = "inventories"
                    self.yang_parent_name = "active"

                    self.inventory = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in () and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.SoftwareInventory.Active.Inventories, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.SoftwareInventory.Active.Inventories, self).__setattr__(name, value)


                class Inventory(Entity):
                    """
                    Inventory information for specific node
                    
                    .. attribute:: node_name  <key>
                    
                    	Node name
                    	**type**\:  str
                    
                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                    
                    .. attribute:: boot_image_name
                    
                    	Name of the boot image
                    	**type**\:  str
                    
                    .. attribute:: load_path
                    
                    	Load path
                    	**type**\: list of    :py:class:`LoadPath <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath>`
                    
                    .. attribute:: major
                    
                    	Major data version number
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: minor
                    
                    	Minor data version number
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: node_type
                    
                    	Node's type
                    	**type**\:  int
                    
                    	**range:** 0..18446744073709551615
                    
                    .. attribute:: secure_domain_router_name
                    
                    	SDR name
                    	**type**\:  str
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.SoftwareInventory.Active.Inventories.Inventory, self).__init__()

                        self.yang_name = "inventory"
                        self.yang_parent_name = "inventories"

                        self.node_name = YLeaf(YType.str, "node-name")

                        self.boot_image_name = YLeaf(YType.str, "boot-image-name")

                        self.major = YLeaf(YType.uint32, "major")

                        self.minor = YLeaf(YType.uint32, "minor")

                        self.node_type = YLeaf(YType.uint64, "node-type")

                        self.secure_domain_router_name = YLeaf(YType.str, "secure-domain-router-name")

                        self.load_path = YList(self)

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("node_name",
                                        "boot_image_name",
                                        "major",
                                        "minor",
                                        "node_type",
                                        "secure_domain_router_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.SoftwareInventory.Active.Inventories.Inventory, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.SoftwareInventory.Active.Inventories.Inventory, self).__setattr__(name, value)


                    class LoadPath(Entity):
                        """
                        Load path
                        
                        .. attribute:: build_information
                        
                        	Build information
                        	**type**\:  str
                        
                        .. attribute:: package
                        
                        	Package
                        	**type**\:   :py:class:`Package <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath.Package>`
                        
                        .. attribute:: version
                        
                        	Version
                        	**type**\:  str
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath, self).__init__()

                            self.yang_name = "load-path"
                            self.yang_parent_name = "inventory"

                            self.build_information = YLeaf(YType.str, "build-information")

                            self.version = YLeaf(YType.str, "version")

                            self.package = Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath.Package()
                            self.package.parent = self
                            self._children_name_map["package"] = "package"
                            self._children_yang_names.add("package")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("build_information",
                                            "version") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath, self).__setattr__(name, value)


                        class Package(Entity):
                            """
                            Package
                            
                            .. attribute:: device_name
                            
                            	Device name
                            	**type**\:  str
                            
                            .. attribute:: name
                            
                            	Package group name
                            	**type**\:  str
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath.Package, self).__init__()

                                self.yang_name = "package"
                                self.yang_parent_name = "load-path"

                                self.device_name = YLeaf(YType.str, "device-name")

                                self.name = YLeaf(YType.str, "name")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("device_name",
                                                "name") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath.Package, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath.Package, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.device_name.is_set or
                                    self.name.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.device_name.yfilter != YFilter.not_set or
                                    self.name.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "package" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.device_name.is_set or self.device_name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.device_name.get_name_leafdata())
                                if (self.name.is_set or self.name.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.name.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "device-name" or name == "name"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "device-name"):
                                    self.device_name = value
                                    self.device_name.value_namespace = name_space
                                    self.device_name.value_namespace_prefix = name_space_prefix
                                if(value_path == "name"):
                                    self.name = value
                                    self.name.value_namespace = name_space
                                    self.name.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.build_information.is_set or
                                self.version.is_set or
                                (self.package is not None and self.package.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.build_information.yfilter != YFilter.not_set or
                                self.version.yfilter != YFilter.not_set or
                                (self.package is not None and self.package.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "load-path" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.build_information.is_set or self.build_information.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.build_information.get_name_leafdata())
                            if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.version.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "package"):
                                if (self.package is None):
                                    self.package = Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath.Package()
                                    self.package.parent = self
                                    self._children_name_map["package"] = "package"
                                return self.package

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "package" or name == "build-information" or name == "version"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "build-information"):
                                self.build_information = value
                                self.build_information.value_namespace = name_space
                                self.build_information.value_namespace_prefix = name_space_prefix
                            if(value_path == "version"):
                                self.version = value
                                self.version.value_namespace = name_space
                                self.version.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        for c in self.load_path:
                            if (c.has_data()):
                                return True
                        return (
                            self.node_name.is_set or
                            self.boot_image_name.is_set or
                            self.major.is_set or
                            self.minor.is_set or
                            self.node_type.is_set or
                            self.secure_domain_router_name.is_set)

                    def has_operation(self):
                        for c in self.load_path:
                            if (c.has_operation()):
                                return True
                        return (
                            self.yfilter != YFilter.not_set or
                            self.node_name.yfilter != YFilter.not_set or
                            self.boot_image_name.yfilter != YFilter.not_set or
                            self.major.yfilter != YFilter.not_set or
                            self.minor.yfilter != YFilter.not_set or
                            self.node_type.yfilter != YFilter.not_set or
                            self.secure_domain_router_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "inventory" + "[node-name='" + self.node_name.get() + "']" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/inventories/%s" % self.get_segment_path()
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_name.get_name_leafdata())
                        if (self.boot_image_name.is_set or self.boot_image_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.boot_image_name.get_name_leafdata())
                        if (self.major.is_set or self.major.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.major.get_name_leafdata())
                        if (self.minor.is_set or self.minor.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.minor.get_name_leafdata())
                        if (self.node_type.is_set or self.node_type.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_type.get_name_leafdata())
                        if (self.secure_domain_router_name.is_set or self.secure_domain_router_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.secure_domain_router_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "load-path"):
                            for c in self.load_path:
                                segment = c.get_segment_path()
                                if (segment_path == segment):
                                    return c
                            c = Install.SoftwareInventory.Active.Inventories.Inventory.LoadPath()
                            c.parent = self
                            local_reference_key = "ydk::seg::%s" % segment_path
                            self._local_refs[local_reference_key] = c
                            self.load_path.append(c)
                            return c

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "load-path" or name == "node-name" or name == "boot-image-name" or name == "major" or name == "minor" or name == "node-type" or name == "secure-domain-router-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "node-name"):
                            self.node_name = value
                            self.node_name.value_namespace = name_space
                            self.node_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "boot-image-name"):
                            self.boot_image_name = value
                            self.boot_image_name.value_namespace = name_space
                            self.boot_image_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "major"):
                            self.major = value
                            self.major.value_namespace = name_space
                            self.major.value_namespace_prefix = name_space_prefix
                        if(value_path == "minor"):
                            self.minor = value
                            self.minor.value_namespace = name_space
                            self.minor.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-type"):
                            self.node_type = value
                            self.node_type.value_namespace = name_space
                            self.node_type.value_namespace_prefix = name_space_prefix
                        if(value_path == "secure-domain-router-name"):
                            self.secure_domain_router_name = value
                            self.secure_domain_router_name.value_namespace = name_space
                            self.secure_domain_router_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.inventory:
                        if (c.has_data()):
                            return True
                    return False

                def has_operation(self):
                    for c in self.inventory:
                        if (c.has_operation()):
                            return True
                    return self.yfilter != YFilter.not_set

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "inventories" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/active/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "inventory"):
                        for c in self.inventory:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.SoftwareInventory.Active.Inventories.Inventory()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.inventory.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "inventory"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                return (
                    (self.inventories is not None and self.inventories.has_data()) or
                    (self.summary is not None and self.summary.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    (self.inventories is not None and self.inventories.has_operation()) or
                    (self.summary is not None and self.summary.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "active" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/software-inventory/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "inventories"):
                    if (self.inventories is None):
                        self.inventories = Install.SoftwareInventory.Active.Inventories()
                        self.inventories.parent = self
                        self._children_name_map["inventories"] = "inventories"
                    return self.inventories

                if (child_yang_name == "summary"):
                    if (self.summary is None):
                        self.summary = Install.SoftwareInventory.Active.Summary()
                        self.summary.parent = self
                        self._children_name_map["summary"] = "summary"
                    return self.summary

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "inventories" or name == "summary"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass

        def has_data(self):
            return (
                (self.active is not None and self.active.has_data()) or
                (self.committed is not None and self.committed.has_data()) or
                (self.inactive is not None and self.inactive.has_data()) or
                (self.requests is not None and self.requests.has_data()))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.active is not None and self.active.has_operation()) or
                (self.committed is not None and self.committed.has_operation()) or
                (self.inactive is not None and self.inactive.has_operation()) or
                (self.requests is not None and self.requests.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "software-inventory" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "active"):
                if (self.active is None):
                    self.active = Install.SoftwareInventory.Active()
                    self.active.parent = self
                    self._children_name_map["active"] = "active"
                return self.active

            if (child_yang_name == "committed"):
                if (self.committed is None):
                    self.committed = Install.SoftwareInventory.Committed()
                    self.committed.parent = self
                    self._children_name_map["committed"] = "committed"
                return self.committed

            if (child_yang_name == "inactive"):
                if (self.inactive is None):
                    self.inactive = Install.SoftwareInventory.Inactive()
                    self.inactive.parent = self
                    self._children_name_map["inactive"] = "inactive"
                return self.inactive

            if (child_yang_name == "requests"):
                if (self.requests is None):
                    self.requests = Install.SoftwareInventory.Requests()
                    self.requests.parent = self
                    self._children_name_map["requests"] = "requests"
                return self.requests

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "active" or name == "committed" or name == "inactive" or name == "requests"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class Issu(Entity):
        """
        Information of install ISSU operations
        
        .. attribute:: card_inventories
        
        	ISSU manager card inventory table
        	**type**\:   :py:class:`CardInventories <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Issu.CardInventories>`
        
        .. attribute:: stage
        
        	Summarized ISSU stage information
        	**type**\:   :py:class:`Stage <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Issu.Stage>`
        
        

        """

        _prefix = 'installmgr-admin-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Install.Issu, self).__init__()

            self.yang_name = "issu"
            self.yang_parent_name = "install"

            self.card_inventories = Install.Issu.CardInventories()
            self.card_inventories.parent = self
            self._children_name_map["card_inventories"] = "card-inventories"
            self._children_yang_names.add("card-inventories")

            self.stage = Install.Issu.Stage()
            self.stage.parent = self
            self._children_name_map["stage"] = "stage"
            self._children_yang_names.add("stage")


        class CardInventories(Entity):
            """
            ISSU manager card inventory table
            
            .. attribute:: card_inventory
            
            	ISSU manager inventory summary of the same card type
            	**type**\: list of    :py:class:`CardInventory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Issu.CardInventories.CardInventory>`
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.Issu.CardInventories, self).__init__()

                self.yang_name = "card-inventories"
                self.yang_parent_name = "issu"

                self.card_inventory = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in () and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Install.Issu.CardInventories, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Install.Issu.CardInventories, self).__setattr__(name, value)


            class CardInventory(Entity):
                """
                ISSU manager inventory summary of the same
                card type
                
                .. attribute:: card_type_id  <key>
                
                	ISSU manager card type ID
                	**type**\:   :py:class:`IsmCardTypeFamily <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.IsmCardTypeFamily>`
                
                .. attribute:: summary
                
                	node state for all nodes
                	**type**\: list of    :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Issu.CardInventories.CardInventory.Summary>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Issu.CardInventories.CardInventory, self).__init__()

                    self.yang_name = "card-inventory"
                    self.yang_parent_name = "card-inventories"

                    self.card_type_id = YLeaf(YType.enumeration, "card-type-id")

                    self.summary = YList(self)

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("card_type_id") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.Issu.CardInventories.CardInventory, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.Issu.CardInventories.CardInventory, self).__setattr__(name, value)


                class Summary(Entity):
                    """
                    node state for all nodes
                    
                    .. attribute:: attempts
                    
                    	Number of attempts made
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    .. attribute:: is_conforming_node
                    
                    	Node none\-cnforming
                    	**type**\:   :py:class:`InstallmgrIsmNodeConforming <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstallmgrIsmNodeConforming>`
                    
                    .. attribute:: is_node_upgraded
                    
                    	Is node upgraded?
                    	**type**\:  bool
                    
                    .. attribute:: node_current_state
                    
                    	Current node ISSU state
                    	**type**\:   :py:class:`InstmgrIsmNodeState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrIsmNodeState>`
                    
                    .. attribute:: node_expected_state
                    
                    	Expected ISSU state
                    	**type**\:   :py:class:`InstmgrIsmNodeState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrIsmNodeState>`
                    
                    .. attribute:: node_failure_reason
                    
                    	Node failure reason
                    	**type**\:  str
                    
                    .. attribute:: node_name
                    
                    	Node identifier
                    	**type**\:  str
                    
                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                    
                    .. attribute:: node_role
                    
                    	Node roll
                    	**type**\:   :py:class:`InstmgrNodeRole <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrNodeRole>`
                    
                    .. attribute:: node_state
                    
                    	Node state
                    	**type**\:   :py:class:`InstmgrCardState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrCardState>`
                    
                    .. attribute:: node_type_issu
                    
                    	ISSU node type
                    	**type**\:  str
                    
                    .. attribute:: node_type_pi
                    
                    	PI Node type
                    	**type**\:   :py:class:`InstmgrPiCard <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrPiCard>`
                    
                    .. attribute:: partner_node_name
                    
                    	Partner Node IDs
                    	**type**\:  str
                    
                    	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Issu.CardInventories.CardInventory.Summary, self).__init__()

                        self.yang_name = "summary"
                        self.yang_parent_name = "card-inventory"

                        self.attempts = YLeaf(YType.uint32, "attempts")

                        self.is_conforming_node = YLeaf(YType.enumeration, "is-conforming-node")

                        self.is_node_upgraded = YLeaf(YType.boolean, "is-node-upgraded")

                        self.node_current_state = YLeaf(YType.enumeration, "node-current-state")

                        self.node_expected_state = YLeaf(YType.enumeration, "node-expected-state")

                        self.node_failure_reason = YLeaf(YType.str, "node-failure-reason")

                        self.node_name = YLeaf(YType.str, "node-name")

                        self.node_role = YLeaf(YType.enumeration, "node-role")

                        self.node_state = YLeaf(YType.enumeration, "node-state")

                        self.node_type_issu = YLeaf(YType.str, "node-type-issu")

                        self.node_type_pi = YLeaf(YType.enumeration, "node-type-pi")

                        self.partner_node_name = YLeaf(YType.str, "partner-node-name")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("attempts",
                                        "is_conforming_node",
                                        "is_node_upgraded",
                                        "node_current_state",
                                        "node_expected_state",
                                        "node_failure_reason",
                                        "node_name",
                                        "node_role",
                                        "node_state",
                                        "node_type_issu",
                                        "node_type_pi",
                                        "partner_node_name") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Issu.CardInventories.CardInventory.Summary, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Issu.CardInventories.CardInventory.Summary, self).__setattr__(name, value)

                    def has_data(self):
                        return (
                            self.attempts.is_set or
                            self.is_conforming_node.is_set or
                            self.is_node_upgraded.is_set or
                            self.node_current_state.is_set or
                            self.node_expected_state.is_set or
                            self.node_failure_reason.is_set or
                            self.node_name.is_set or
                            self.node_role.is_set or
                            self.node_state.is_set or
                            self.node_type_issu.is_set or
                            self.node_type_pi.is_set or
                            self.partner_node_name.is_set)

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.attempts.yfilter != YFilter.not_set or
                            self.is_conforming_node.yfilter != YFilter.not_set or
                            self.is_node_upgraded.yfilter != YFilter.not_set or
                            self.node_current_state.yfilter != YFilter.not_set or
                            self.node_expected_state.yfilter != YFilter.not_set or
                            self.node_failure_reason.yfilter != YFilter.not_set or
                            self.node_name.yfilter != YFilter.not_set or
                            self.node_role.yfilter != YFilter.not_set or
                            self.node_state.yfilter != YFilter.not_set or
                            self.node_type_issu.yfilter != YFilter.not_set or
                            self.node_type_pi.yfilter != YFilter.not_set or
                            self.partner_node_name.yfilter != YFilter.not_set)

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "summary" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.attempts.is_set or self.attempts.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.attempts.get_name_leafdata())
                        if (self.is_conforming_node.is_set or self.is_conforming_node.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.is_conforming_node.get_name_leafdata())
                        if (self.is_node_upgraded.is_set or self.is_node_upgraded.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.is_node_upgraded.get_name_leafdata())
                        if (self.node_current_state.is_set or self.node_current_state.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_current_state.get_name_leafdata())
                        if (self.node_expected_state.is_set or self.node_expected_state.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_expected_state.get_name_leafdata())
                        if (self.node_failure_reason.is_set or self.node_failure_reason.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_failure_reason.get_name_leafdata())
                        if (self.node_name.is_set or self.node_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_name.get_name_leafdata())
                        if (self.node_role.is_set or self.node_role.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_role.get_name_leafdata())
                        if (self.node_state.is_set or self.node_state.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_state.get_name_leafdata())
                        if (self.node_type_issu.is_set or self.node_type_issu.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_type_issu.get_name_leafdata())
                        if (self.node_type_pi.is_set or self.node_type_pi.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.node_type_pi.get_name_leafdata())
                        if (self.partner_node_name.is_set or self.partner_node_name.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.partner_node_name.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "attempts" or name == "is-conforming-node" or name == "is-node-upgraded" or name == "node-current-state" or name == "node-expected-state" or name == "node-failure-reason" or name == "node-name" or name == "node-role" or name == "node-state" or name == "node-type-issu" or name == "node-type-pi" or name == "partner-node-name"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "attempts"):
                            self.attempts = value
                            self.attempts.value_namespace = name_space
                            self.attempts.value_namespace_prefix = name_space_prefix
                        if(value_path == "is-conforming-node"):
                            self.is_conforming_node = value
                            self.is_conforming_node.value_namespace = name_space
                            self.is_conforming_node.value_namespace_prefix = name_space_prefix
                        if(value_path == "is-node-upgraded"):
                            self.is_node_upgraded = value
                            self.is_node_upgraded.value_namespace = name_space
                            self.is_node_upgraded.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-current-state"):
                            self.node_current_state = value
                            self.node_current_state.value_namespace = name_space
                            self.node_current_state.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-expected-state"):
                            self.node_expected_state = value
                            self.node_expected_state.value_namespace = name_space
                            self.node_expected_state.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-failure-reason"):
                            self.node_failure_reason = value
                            self.node_failure_reason.value_namespace = name_space
                            self.node_failure_reason.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-name"):
                            self.node_name = value
                            self.node_name.value_namespace = name_space
                            self.node_name.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-role"):
                            self.node_role = value
                            self.node_role.value_namespace = name_space
                            self.node_role.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-state"):
                            self.node_state = value
                            self.node_state.value_namespace = name_space
                            self.node_state.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-type-issu"):
                            self.node_type_issu = value
                            self.node_type_issu.value_namespace = name_space
                            self.node_type_issu.value_namespace_prefix = name_space_prefix
                        if(value_path == "node-type-pi"):
                            self.node_type_pi = value
                            self.node_type_pi.value_namespace = name_space
                            self.node_type_pi.value_namespace_prefix = name_space_prefix
                        if(value_path == "partner-node-name"):
                            self.partner_node_name = value
                            self.partner_node_name.value_namespace = name_space
                            self.partner_node_name.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    for c in self.summary:
                        if (c.has_data()):
                            return True
                    return self.card_type_id.is_set

                def has_operation(self):
                    for c in self.summary:
                        if (c.has_operation()):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.card_type_id.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "card-inventory" + "[card-type-id='" + self.card_type_id.get() + "']" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/issu/card-inventories/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()
                    if (self.card_type_id.is_set or self.card_type_id.yfilter != YFilter.not_set):
                        leaf_name_data.append(self.card_type_id.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "summary"):
                        for c in self.summary:
                            segment = c.get_segment_path()
                            if (segment_path == segment):
                                return c
                        c = Install.Issu.CardInventories.CardInventory.Summary()
                        c.parent = self
                        local_reference_key = "ydk::seg::%s" % segment_path
                        self._local_refs[local_reference_key] = c
                        self.summary.append(c)
                        return c

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "summary" or name == "card-type-id"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "card-type-id"):
                        self.card_type_id = value
                        self.card_type_id.value_namespace = name_space
                        self.card_type_id.value_namespace_prefix = name_space_prefix

            def has_data(self):
                for c in self.card_inventory:
                    if (c.has_data()):
                        return True
                return False

            def has_operation(self):
                for c in self.card_inventory:
                    if (c.has_operation()):
                        return True
                return self.yfilter != YFilter.not_set

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "card-inventories" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/issu/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "card-inventory"):
                    for c in self.card_inventory:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Issu.CardInventories.CardInventory()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.card_inventory.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "card-inventory"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                pass


        class Stage(Entity):
            """
            Summarized ISSU stage information
            
            .. attribute:: is_issu_aborted
            
            	ISSU aborted?
            	**type**\:  bool
            
            .. attribute:: is_issu_aborted_by_ism
            
            	ISSU aborted by ISM?
            	**type**\:  bool
            
            .. attribute:: issu_manager_fsm_state
            
            	ISM FSM state
            	**type**\:   :py:class:`InstmgrIsmFsmState <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrIsmFsmState>`
            
            .. attribute:: issu_op_id
            
            	ISSU operational ID
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: issu_state
            
            	Current ISSU state
            	**type**\:  str
            
            .. attribute:: nc_nodes
            
            	None\-conforming nodes
            	**type**\:   :py:class:`NcNodes <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Issu.Stage.NcNodes>`
            
            .. attribute:: node_in_progress
            
            	Nodes in progress
            	**type**\:   :py:class:`NodeInProgress <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Issu.Stage.NodeInProgress>`
            
            .. attribute:: nodes_in_load
            
            	Node in LOAD phase
            	**type**\:   :py:class:`NodesInLoad <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Issu.Stage.NodesInLoad>`
            
            .. attribute:: nodes_in_run
            
            	Node in RUN phase
            	**type**\:   :py:class:`NodesInRun <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Issu.Stage.NodesInRun>`
            
            .. attribute:: num_nodes_in_progress
            
            	Number of node in progress
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_of_nodes_in_load
            
            	Number of nodes in LOAD phase
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: num_of_nodes_in_run
            
            	Number of nodes in RUN phase
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: numof_nc_nodes
            
            	Number of none\-conforming nodes
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: participating_node_all
            
            	Number of participating nodes
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            .. attribute:: percentage
            
            	ISSU progress percentage
            	**type**\:  int
            
            	**range:** 0..4294967295
            
            	**units**\: percentage
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.Issu.Stage, self).__init__()

                self.yang_name = "stage"
                self.yang_parent_name = "issu"

                self.is_issu_aborted = YLeaf(YType.boolean, "is-issu-aborted")

                self.is_issu_aborted_by_ism = YLeaf(YType.boolean, "is-issu-aborted-by-ism")

                self.issu_manager_fsm_state = YLeaf(YType.enumeration, "issu-manager-fsm-state")

                self.issu_op_id = YLeaf(YType.uint32, "issu-op-id")

                self.issu_state = YLeaf(YType.str, "issu-state")

                self.num_nodes_in_progress = YLeaf(YType.uint32, "num-nodes-in-progress")

                self.num_of_nodes_in_load = YLeaf(YType.uint32, "num-of-nodes-in-load")

                self.num_of_nodes_in_run = YLeaf(YType.uint32, "num-of-nodes-in-run")

                self.numof_nc_nodes = YLeaf(YType.uint32, "numof-nc-nodes")

                self.participating_node_all = YLeaf(YType.uint32, "participating-node-all")

                self.percentage = YLeaf(YType.uint32, "percentage")

                self.nc_nodes = Install.Issu.Stage.NcNodes()
                self.nc_nodes.parent = self
                self._children_name_map["nc_nodes"] = "nc-nodes"
                self._children_yang_names.add("nc-nodes")

                self.node_in_progress = Install.Issu.Stage.NodeInProgress()
                self.node_in_progress.parent = self
                self._children_name_map["node_in_progress"] = "node-in-progress"
                self._children_yang_names.add("node-in-progress")

                self.nodes_in_load = Install.Issu.Stage.NodesInLoad()
                self.nodes_in_load.parent = self
                self._children_name_map["nodes_in_load"] = "nodes-in-load"
                self._children_yang_names.add("nodes-in-load")

                self.nodes_in_run = Install.Issu.Stage.NodesInRun()
                self.nodes_in_run.parent = self
                self._children_name_map["nodes_in_run"] = "nodes-in-run"
                self._children_yang_names.add("nodes-in-run")

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("is_issu_aborted",
                                "is_issu_aborted_by_ism",
                                "issu_manager_fsm_state",
                                "issu_op_id",
                                "issu_state",
                                "num_nodes_in_progress",
                                "num_of_nodes_in_load",
                                "num_of_nodes_in_run",
                                "numof_nc_nodes",
                                "participating_node_all",
                                "percentage") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Install.Issu.Stage, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Install.Issu.Stage, self).__setattr__(name, value)


            class NodeInProgress(Entity):
                """
                Nodes in progress
                
                .. attribute:: node
                
                	node
                	**type**\:  list of str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Issu.Stage.NodeInProgress, self).__init__()

                    self.yang_name = "node-in-progress"
                    self.yang_parent_name = "stage"

                    self.node = YLeafList(YType.str, "node")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("node") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.Issu.Stage.NodeInProgress, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.Issu.Stage.NodeInProgress, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.node.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.node.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.node.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "node-in-progress" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/issu/stage/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.node.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "node"):
                        self.node.append(value)


            class NodesInLoad(Entity):
                """
                Node in LOAD phase
                
                .. attribute:: node
                
                	node
                	**type**\:  list of str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Issu.Stage.NodesInLoad, self).__init__()

                    self.yang_name = "nodes-in-load"
                    self.yang_parent_name = "stage"

                    self.node = YLeafList(YType.str, "node")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("node") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.Issu.Stage.NodesInLoad, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.Issu.Stage.NodesInLoad, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.node.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.node.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.node.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "nodes-in-load" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/issu/stage/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.node.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "node"):
                        self.node.append(value)


            class NodesInRun(Entity):
                """
                Node in RUN phase
                
                .. attribute:: node
                
                	node
                	**type**\:  list of str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Issu.Stage.NodesInRun, self).__init__()

                    self.yang_name = "nodes-in-run"
                    self.yang_parent_name = "stage"

                    self.node = YLeafList(YType.str, "node")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("node") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.Issu.Stage.NodesInRun, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.Issu.Stage.NodesInRun, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.node.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.node.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.node.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "nodes-in-run" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/issu/stage/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.node.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "node"):
                        self.node.append(value)


            class NcNodes(Entity):
                """
                None\-conforming nodes
                
                .. attribute:: node
                
                	node
                	**type**\:  list of str
                
                	**pattern:** ([a\-zA\-Z0\-9\_]\*\\d+/){1,2}([a\-zA\-Z0\-9\_]\*\\d+)
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Issu.Stage.NcNodes, self).__init__()

                    self.yang_name = "nc-nodes"
                    self.yang_parent_name = "stage"

                    self.node = YLeafList(YType.str, "node")

                def __setattr__(self, name, value):
                    self._check_monkey_patching_error(name, value)
                    with _handle_type_error():
                        if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                            raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                "Please use list append or extend method."
                                                .format(value))
                        if isinstance(value, Enum.YLeaf):
                            value = value.name
                        if name in ("node") and name in self.__dict__:
                            if isinstance(value, YLeaf):
                                self.__dict__[name].set(value.get())
                            elif isinstance(value, YLeafList):
                                super(Install.Issu.Stage.NcNodes, self).__setattr__(name, value)
                            else:
                                self.__dict__[name].set(value)
                        else:
                            if hasattr(value, "parent") and name != "parent":
                                if hasattr(value, "is_presence_container") and value.is_presence_container:
                                    value.parent = self
                                elif value.parent is None and value.yang_name in self._children_yang_names:
                                    value.parent = self
                            super(Install.Issu.Stage.NcNodes, self).__setattr__(name, value)

                def has_data(self):
                    for leaf in self.node.getYLeafs():
                        if (leaf.yfilter != YFilter.not_set):
                            return True
                    return False

                def has_operation(self):
                    for leaf in self.node.getYLeafs():
                        if (leaf.is_set):
                            return True
                    return (
                        self.yfilter != YFilter.not_set or
                        self.node.yfilter != YFilter.not_set)

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "nc-nodes" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/issu/stage/%s" % self.get_segment_path()
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    leaf_name_data.extend(self.node.get_name_leafdata())

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "node"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    if(value_path == "node"):
                        self.node.append(value)

            def has_data(self):
                return (
                    self.is_issu_aborted.is_set or
                    self.is_issu_aborted_by_ism.is_set or
                    self.issu_manager_fsm_state.is_set or
                    self.issu_op_id.is_set or
                    self.issu_state.is_set or
                    self.num_nodes_in_progress.is_set or
                    self.num_of_nodes_in_load.is_set or
                    self.num_of_nodes_in_run.is_set or
                    self.numof_nc_nodes.is_set or
                    self.participating_node_all.is_set or
                    self.percentage.is_set or
                    (self.nc_nodes is not None and self.nc_nodes.has_data()) or
                    (self.node_in_progress is not None and self.node_in_progress.has_data()) or
                    (self.nodes_in_load is not None and self.nodes_in_load.has_data()) or
                    (self.nodes_in_run is not None and self.nodes_in_run.has_data()))

            def has_operation(self):
                return (
                    self.yfilter != YFilter.not_set or
                    self.is_issu_aborted.yfilter != YFilter.not_set or
                    self.is_issu_aborted_by_ism.yfilter != YFilter.not_set or
                    self.issu_manager_fsm_state.yfilter != YFilter.not_set or
                    self.issu_op_id.yfilter != YFilter.not_set or
                    self.issu_state.yfilter != YFilter.not_set or
                    self.num_nodes_in_progress.yfilter != YFilter.not_set or
                    self.num_of_nodes_in_load.yfilter != YFilter.not_set or
                    self.num_of_nodes_in_run.yfilter != YFilter.not_set or
                    self.numof_nc_nodes.yfilter != YFilter.not_set or
                    self.participating_node_all.yfilter != YFilter.not_set or
                    self.percentage.yfilter != YFilter.not_set or
                    (self.nc_nodes is not None and self.nc_nodes.has_operation()) or
                    (self.node_in_progress is not None and self.node_in_progress.has_operation()) or
                    (self.nodes_in_load is not None and self.nodes_in_load.has_operation()) or
                    (self.nodes_in_run is not None and self.nodes_in_run.has_operation()))

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "stage" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/issu/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.is_issu_aborted.is_set or self.is_issu_aborted.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.is_issu_aborted.get_name_leafdata())
                if (self.is_issu_aborted_by_ism.is_set or self.is_issu_aborted_by_ism.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.is_issu_aborted_by_ism.get_name_leafdata())
                if (self.issu_manager_fsm_state.is_set or self.issu_manager_fsm_state.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.issu_manager_fsm_state.get_name_leafdata())
                if (self.issu_op_id.is_set or self.issu_op_id.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.issu_op_id.get_name_leafdata())
                if (self.issu_state.is_set or self.issu_state.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.issu_state.get_name_leafdata())
                if (self.num_nodes_in_progress.is_set or self.num_nodes_in_progress.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.num_nodes_in_progress.get_name_leafdata())
                if (self.num_of_nodes_in_load.is_set or self.num_of_nodes_in_load.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.num_of_nodes_in_load.get_name_leafdata())
                if (self.num_of_nodes_in_run.is_set or self.num_of_nodes_in_run.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.num_of_nodes_in_run.get_name_leafdata())
                if (self.numof_nc_nodes.is_set or self.numof_nc_nodes.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.numof_nc_nodes.get_name_leafdata())
                if (self.participating_node_all.is_set or self.participating_node_all.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.participating_node_all.get_name_leafdata())
                if (self.percentage.is_set or self.percentage.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.percentage.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "nc-nodes"):
                    if (self.nc_nodes is None):
                        self.nc_nodes = Install.Issu.Stage.NcNodes()
                        self.nc_nodes.parent = self
                        self._children_name_map["nc_nodes"] = "nc-nodes"
                    return self.nc_nodes

                if (child_yang_name == "node-in-progress"):
                    if (self.node_in_progress is None):
                        self.node_in_progress = Install.Issu.Stage.NodeInProgress()
                        self.node_in_progress.parent = self
                        self._children_name_map["node_in_progress"] = "node-in-progress"
                    return self.node_in_progress

                if (child_yang_name == "nodes-in-load"):
                    if (self.nodes_in_load is None):
                        self.nodes_in_load = Install.Issu.Stage.NodesInLoad()
                        self.nodes_in_load.parent = self
                        self._children_name_map["nodes_in_load"] = "nodes-in-load"
                    return self.nodes_in_load

                if (child_yang_name == "nodes-in-run"):
                    if (self.nodes_in_run is None):
                        self.nodes_in_run = Install.Issu.Stage.NodesInRun()
                        self.nodes_in_run.parent = self
                        self._children_name_map["nodes_in_run"] = "nodes-in-run"
                    return self.nodes_in_run

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "nc-nodes" or name == "node-in-progress" or name == "nodes-in-load" or name == "nodes-in-run" or name == "is-issu-aborted" or name == "is-issu-aborted-by-ism" or name == "issu-manager-fsm-state" or name == "issu-op-id" or name == "issu-state" or name == "num-nodes-in-progress" or name == "num-of-nodes-in-load" or name == "num-of-nodes-in-run" or name == "numof-nc-nodes" or name == "participating-node-all" or name == "percentage"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "is-issu-aborted"):
                    self.is_issu_aborted = value
                    self.is_issu_aborted.value_namespace = name_space
                    self.is_issu_aborted.value_namespace_prefix = name_space_prefix
                if(value_path == "is-issu-aborted-by-ism"):
                    self.is_issu_aborted_by_ism = value
                    self.is_issu_aborted_by_ism.value_namespace = name_space
                    self.is_issu_aborted_by_ism.value_namespace_prefix = name_space_prefix
                if(value_path == "issu-manager-fsm-state"):
                    self.issu_manager_fsm_state = value
                    self.issu_manager_fsm_state.value_namespace = name_space
                    self.issu_manager_fsm_state.value_namespace_prefix = name_space_prefix
                if(value_path == "issu-op-id"):
                    self.issu_op_id = value
                    self.issu_op_id.value_namespace = name_space
                    self.issu_op_id.value_namespace_prefix = name_space_prefix
                if(value_path == "issu-state"):
                    self.issu_state = value
                    self.issu_state.value_namespace = name_space
                    self.issu_state.value_namespace_prefix = name_space_prefix
                if(value_path == "num-nodes-in-progress"):
                    self.num_nodes_in_progress = value
                    self.num_nodes_in_progress.value_namespace = name_space
                    self.num_nodes_in_progress.value_namespace_prefix = name_space_prefix
                if(value_path == "num-of-nodes-in-load"):
                    self.num_of_nodes_in_load = value
                    self.num_of_nodes_in_load.value_namespace = name_space
                    self.num_of_nodes_in_load.value_namespace_prefix = name_space_prefix
                if(value_path == "num-of-nodes-in-run"):
                    self.num_of_nodes_in_run = value
                    self.num_of_nodes_in_run.value_namespace = name_space
                    self.num_of_nodes_in_run.value_namespace_prefix = name_space_prefix
                if(value_path == "numof-nc-nodes"):
                    self.numof_nc_nodes = value
                    self.numof_nc_nodes.value_namespace = name_space
                    self.numof_nc_nodes.value_namespace_prefix = name_space_prefix
                if(value_path == "participating-node-all"):
                    self.participating_node_all = value
                    self.participating_node_all.value_namespace = name_space
                    self.participating_node_all.value_namespace_prefix = name_space_prefix
                if(value_path == "percentage"):
                    self.percentage = value
                    self.percentage.value_namespace = name_space
                    self.percentage.value_namespace_prefix = name_space_prefix

        def has_data(self):
            return (
                (self.card_inventories is not None and self.card_inventories.has_data()) or
                (self.stage is not None and self.stage.has_data()))

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                (self.card_inventories is not None and self.card_inventories.has_operation()) or
                (self.stage is not None and self.stage.has_operation()))

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "issu" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "card-inventories"):
                if (self.card_inventories is None):
                    self.card_inventories = Install.Issu.CardInventories()
                    self.card_inventories.parent = self
                    self._children_name_map["card_inventories"] = "card-inventories"
                return self.card_inventories

            if (child_yang_name == "stage"):
                if (self.stage is None):
                    self.stage = Install.Issu.Stage()
                    self.stage.parent = self
                    self._children_name_map["stage"] = "stage"
                return self.stage

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "card-inventories" or name == "stage"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass


    class BootImage(Entity):
        """
        System Boot Image
        
        .. attribute:: system_image_file
        
        	The boot image
        	**type**\:  str
        
        

        """

        _prefix = 'installmgr-admin-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Install.BootImage, self).__init__()

            self.yang_name = "boot-image"
            self.yang_parent_name = "install"

            self.system_image_file = YLeaf(YType.str, "system-image-file")

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in ("system_image_file") and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Install.BootImage, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Install.BootImage, self).__setattr__(name, value)

        def has_data(self):
            return self.system_image_file.is_set

        def has_operation(self):
            return (
                self.yfilter != YFilter.not_set or
                self.system_image_file.yfilter != YFilter.not_set)

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "boot-image" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()
            if (self.system_image_file.is_set or self.system_image_file.yfilter != YFilter.not_set):
                leaf_name_data.append(self.system_image_file.get_name_leafdata())

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "system-image-file"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            if(value_path == "system-image-file"):
                self.system_image_file = value
                self.system_image_file.value_namespace = name_space
                self.system_image_file.value_namespace_prefix = name_space_prefix


    class Logs(Entity):
        """
        Install operation log
        
        .. attribute:: log
        
        	Log information
        	**type**\: list of    :py:class:`Log <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log>`
        
        

        """

        _prefix = 'installmgr-admin-oper'
        _revision = '2015-11-09'

        def __init__(self):
            super(Install.Logs, self).__init__()

            self.yang_name = "logs"
            self.yang_parent_name = "install"

            self.log = YList(self)

        def __setattr__(self, name, value):
            self._check_monkey_patching_error(name, value)
            with _handle_type_error():
                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                        "Please use list append or extend method."
                                        .format(value))
                if isinstance(value, Enum.YLeaf):
                    value = value.name
                if name in () and name in self.__dict__:
                    if isinstance(value, YLeaf):
                        self.__dict__[name].set(value.get())
                    elif isinstance(value, YLeafList):
                        super(Install.Logs, self).__setattr__(name, value)
                    else:
                        self.__dict__[name].set(value)
                else:
                    if hasattr(value, "parent") and name != "parent":
                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                            value.parent = self
                        elif value.parent is None and value.yang_name in self._children_yang_names:
                            value.parent = self
                    super(Install.Logs, self).__setattr__(name, value)


        class Log(Entity):
            """
            Log information
            
            .. attribute:: request_id  <key>
            
            	Install operation request ID
            	**type**\:  int
            
            	**range:** \-2147483648..2147483647
            
            .. attribute:: change
            
            	Install changes
            	**type**\: list of    :py:class:`Change <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Change>`
            
            .. attribute:: communication
            
            	Install communications
            	**type**\: list of    :py:class:`Communication <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Communication>`
            
            .. attribute:: detail
            
            	Install details
            	**type**\: list of    :py:class:`Detail <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Detail>`
            
            .. attribute:: header
            
            	Header information
            	**type**\: list of    :py:class:`Header <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Header>`
            
            .. attribute:: message
            
            	Status Information Logs
            	**type**\: list of    :py:class:`Message <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Message>`
            
            .. attribute:: summary
            
            	Summary information
            	**type**\: list of    :py:class:`Summary <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Summary>`
            
            

            """

            _prefix = 'installmgr-admin-oper'
            _revision = '2015-11-09'

            def __init__(self):
                super(Install.Logs.Log, self).__init__()

                self.yang_name = "log"
                self.yang_parent_name = "logs"

                self.request_id = YLeaf(YType.int32, "request-id")

                self.change = YList(self)
                self.communication = YList(self)
                self.detail = YList(self)
                self.header = YList(self)
                self.message = YList(self)
                self.summary = YList(self)

            def __setattr__(self, name, value):
                self._check_monkey_patching_error(name, value)
                with _handle_type_error():
                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                            "Please use list append or extend method."
                                            .format(value))
                    if isinstance(value, Enum.YLeaf):
                        value = value.name
                    if name in ("request_id") and name in self.__dict__:
                        if isinstance(value, YLeaf):
                            self.__dict__[name].set(value.get())
                        elif isinstance(value, YLeafList):
                            super(Install.Logs.Log, self).__setattr__(name, value)
                        else:
                            self.__dict__[name].set(value)
                    else:
                        if hasattr(value, "parent") and name != "parent":
                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                value.parent = self
                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                value.parent = self
                        super(Install.Logs.Log, self).__setattr__(name, value)


            class Header(Entity):
                """
                Header information
                
                .. attribute:: log_contents
                
                	Log contents
                	**type**\:   :py:class:`LogContents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Header.LogContents>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Logs.Log.Header, self).__init__()

                    self.yang_name = "header"
                    self.yang_parent_name = "log"

                    self.log_contents = Install.Logs.Log.Header.LogContents()
                    self.log_contents.parent = self
                    self._children_name_map["log_contents"] = "log-contents"
                    self._children_yang_names.add("log-contents")


                class LogContents(Entity):
                    """
                    Log contents
                    
                    .. attribute:: v3
                    
                    	v3
                    	**type**\:   :py:class:`V3 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Header.LogContents.V3>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Logs.Log.Header.LogContents, self).__init__()

                        self.yang_name = "log-contents"
                        self.yang_parent_name = "header"

                        self.version = YLeaf(YType.uint32, "version")

                        self.v3 = Install.Logs.Log.Header.LogContents.V3()
                        self.v3.parent = self
                        self._children_name_map["v3"] = "v3"
                        self._children_yang_names.add("v3")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("version") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Logs.Log.Header.LogContents, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Logs.Log.Header.LogContents, self).__setattr__(name, value)


                    class V3(Entity):
                        """
                        v3
                        
                        .. attribute:: category
                        
                        	Category of the message
                        	**type**\:   :py:class:`InstmgrBagLogEntryUserMsgCategory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagLogEntryUserMsgCategory>`
                        
                        .. attribute:: message
                        
                        	Message
                        	**type**\:  str
                        
                        .. attribute:: scope
                        
                        	Scope of the message
                        	**type**\:   :py:class:`Scope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Header.LogContents.V3.Scope>`
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.Logs.Log.Header.LogContents.V3, self).__init__()

                            self.yang_name = "v3"
                            self.yang_parent_name = "log-contents"

                            self.category = YLeaf(YType.enumeration, "category")

                            self.message = YLeaf(YType.str, "message")

                            self.scope = Install.Logs.Log.Header.LogContents.V3.Scope()
                            self.scope.parent = self
                            self._children_name_map["scope"] = "scope"
                            self._children_yang_names.add("scope")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("category",
                                            "message") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.Logs.Log.Header.LogContents.V3, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.Logs.Log.Header.LogContents.V3, self).__setattr__(name, value)


                        class Scope(Entity):
                            """
                            Scope of the message
                            
                            .. attribute:: admin_read
                            
                            	Does the admin want to read this?
                            	**type**\:  bool
                            
                            .. attribute:: affected_sd_rs
                            
                            	Which SDRs are affected by the message
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.Logs.Log.Header.LogContents.V3.Scope, self).__init__()

                                self.yang_name = "scope"
                                self.yang_parent_name = "v3"

                                self.admin_read = YLeaf(YType.boolean, "admin-read")

                                self.affected_sd_rs = YLeaf(YType.uint32, "affected-sd-rs")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("admin_read",
                                                "affected_sd_rs") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.Logs.Log.Header.LogContents.V3.Scope, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.Logs.Log.Header.LogContents.V3.Scope, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.admin_read.is_set or
                                    self.affected_sd_rs.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.admin_read.yfilter != YFilter.not_set or
                                    self.affected_sd_rs.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "scope" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.admin_read.is_set or self.admin_read.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.admin_read.get_name_leafdata())
                                if (self.affected_sd_rs.is_set or self.affected_sd_rs.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.affected_sd_rs.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "admin-read" or name == "affected-sd-rs"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "admin-read"):
                                    self.admin_read = value
                                    self.admin_read.value_namespace = name_space
                                    self.admin_read.value_namespace_prefix = name_space_prefix
                                if(value_path == "affected-sd-rs"):
                                    self.affected_sd_rs = value
                                    self.affected_sd_rs.value_namespace = name_space
                                    self.affected_sd_rs.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.category.is_set or
                                self.message.is_set or
                                (self.scope is not None and self.scope.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.category.yfilter != YFilter.not_set or
                                self.message.yfilter != YFilter.not_set or
                                (self.scope is not None and self.scope.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "v3" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.category.is_set or self.category.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.category.get_name_leafdata())
                            if (self.message.is_set or self.message.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.message.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "scope"):
                                if (self.scope is None):
                                    self.scope = Install.Logs.Log.Header.LogContents.V3.Scope()
                                    self.scope.parent = self
                                    self._children_name_map["scope"] = "scope"
                                return self.scope

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "scope" or name == "category" or name == "message"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "category"):
                                self.category = value
                                self.category.value_namespace = name_space
                                self.category.value_namespace_prefix = name_space_prefix
                            if(value_path == "message"):
                                self.message = value
                                self.message.value_namespace = name_space
                                self.message.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.version.is_set or
                            (self.v3 is not None and self.v3.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.version.yfilter != YFilter.not_set or
                            (self.v3 is not None and self.v3.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "log-contents" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.version.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "v3"):
                            if (self.v3 is None):
                                self.v3 = Install.Logs.Log.Header.LogContents.V3()
                                self.v3.parent = self
                                self._children_name_map["v3"] = "v3"
                            return self.v3

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "v3" or name == "version"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "version"):
                            self.version = value
                            self.version.value_namespace = name_space
                            self.version.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (self.log_contents is not None and self.log_contents.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.log_contents is not None and self.log_contents.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "header" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "log-contents"):
                        if (self.log_contents is None):
                            self.log_contents = Install.Logs.Log.Header.LogContents()
                            self.log_contents.parent = self
                            self._children_name_map["log_contents"] = "log-contents"
                        return self.log_contents

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "log-contents"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Summary(Entity):
                """
                Summary information
                
                .. attribute:: log_contents
                
                	Log contents
                	**type**\:   :py:class:`LogContents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Summary.LogContents>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Logs.Log.Summary, self).__init__()

                    self.yang_name = "summary"
                    self.yang_parent_name = "log"

                    self.log_contents = Install.Logs.Log.Summary.LogContents()
                    self.log_contents.parent = self
                    self._children_name_map["log_contents"] = "log-contents"
                    self._children_yang_names.add("log-contents")


                class LogContents(Entity):
                    """
                    Log contents
                    
                    .. attribute:: v3
                    
                    	v3
                    	**type**\:   :py:class:`V3 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Summary.LogContents.V3>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Logs.Log.Summary.LogContents, self).__init__()

                        self.yang_name = "log-contents"
                        self.yang_parent_name = "summary"

                        self.version = YLeaf(YType.uint32, "version")

                        self.v3 = Install.Logs.Log.Summary.LogContents.V3()
                        self.v3.parent = self
                        self._children_name_map["v3"] = "v3"
                        self._children_yang_names.add("v3")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("version") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Logs.Log.Summary.LogContents, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Logs.Log.Summary.LogContents, self).__setattr__(name, value)


                    class V3(Entity):
                        """
                        v3
                        
                        .. attribute:: category
                        
                        	Category of the message
                        	**type**\:   :py:class:`InstmgrBagLogEntryUserMsgCategory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagLogEntryUserMsgCategory>`
                        
                        .. attribute:: message
                        
                        	Message
                        	**type**\:  str
                        
                        .. attribute:: scope
                        
                        	Scope of the message
                        	**type**\:   :py:class:`Scope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Summary.LogContents.V3.Scope>`
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.Logs.Log.Summary.LogContents.V3, self).__init__()

                            self.yang_name = "v3"
                            self.yang_parent_name = "log-contents"

                            self.category = YLeaf(YType.enumeration, "category")

                            self.message = YLeaf(YType.str, "message")

                            self.scope = Install.Logs.Log.Summary.LogContents.V3.Scope()
                            self.scope.parent = self
                            self._children_name_map["scope"] = "scope"
                            self._children_yang_names.add("scope")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("category",
                                            "message") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.Logs.Log.Summary.LogContents.V3, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.Logs.Log.Summary.LogContents.V3, self).__setattr__(name, value)


                        class Scope(Entity):
                            """
                            Scope of the message
                            
                            .. attribute:: admin_read
                            
                            	Does the admin want to read this?
                            	**type**\:  bool
                            
                            .. attribute:: affected_sd_rs
                            
                            	Which SDRs are affected by the message
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.Logs.Log.Summary.LogContents.V3.Scope, self).__init__()

                                self.yang_name = "scope"
                                self.yang_parent_name = "v3"

                                self.admin_read = YLeaf(YType.boolean, "admin-read")

                                self.affected_sd_rs = YLeaf(YType.uint32, "affected-sd-rs")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("admin_read",
                                                "affected_sd_rs") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.Logs.Log.Summary.LogContents.V3.Scope, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.Logs.Log.Summary.LogContents.V3.Scope, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.admin_read.is_set or
                                    self.affected_sd_rs.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.admin_read.yfilter != YFilter.not_set or
                                    self.affected_sd_rs.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "scope" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.admin_read.is_set or self.admin_read.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.admin_read.get_name_leafdata())
                                if (self.affected_sd_rs.is_set or self.affected_sd_rs.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.affected_sd_rs.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "admin-read" or name == "affected-sd-rs"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "admin-read"):
                                    self.admin_read = value
                                    self.admin_read.value_namespace = name_space
                                    self.admin_read.value_namespace_prefix = name_space_prefix
                                if(value_path == "affected-sd-rs"):
                                    self.affected_sd_rs = value
                                    self.affected_sd_rs.value_namespace = name_space
                                    self.affected_sd_rs.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.category.is_set or
                                self.message.is_set or
                                (self.scope is not None and self.scope.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.category.yfilter != YFilter.not_set or
                                self.message.yfilter != YFilter.not_set or
                                (self.scope is not None and self.scope.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "v3" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.category.is_set or self.category.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.category.get_name_leafdata())
                            if (self.message.is_set or self.message.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.message.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "scope"):
                                if (self.scope is None):
                                    self.scope = Install.Logs.Log.Summary.LogContents.V3.Scope()
                                    self.scope.parent = self
                                    self._children_name_map["scope"] = "scope"
                                return self.scope

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "scope" or name == "category" or name == "message"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "category"):
                                self.category = value
                                self.category.value_namespace = name_space
                                self.category.value_namespace_prefix = name_space_prefix
                            if(value_path == "message"):
                                self.message = value
                                self.message.value_namespace = name_space
                                self.message.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.version.is_set or
                            (self.v3 is not None and self.v3.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.version.yfilter != YFilter.not_set or
                            (self.v3 is not None and self.v3.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "log-contents" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.version.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "v3"):
                            if (self.v3 is None):
                                self.v3 = Install.Logs.Log.Summary.LogContents.V3()
                                self.v3.parent = self
                                self._children_name_map["v3"] = "v3"
                            return self.v3

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "v3" or name == "version"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "version"):
                            self.version = value
                            self.version.value_namespace = name_space
                            self.version.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (self.log_contents is not None and self.log_contents.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.log_contents is not None and self.log_contents.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "summary" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "log-contents"):
                        if (self.log_contents is None):
                            self.log_contents = Install.Logs.Log.Summary.LogContents()
                            self.log_contents.parent = self
                            self._children_name_map["log_contents"] = "log-contents"
                        return self.log_contents

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "log-contents"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Message(Entity):
                """
                Status Information Logs
                
                .. attribute:: log_contents
                
                	Log contents
                	**type**\:   :py:class:`LogContents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Message.LogContents>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Logs.Log.Message, self).__init__()

                    self.yang_name = "message"
                    self.yang_parent_name = "log"

                    self.log_contents = Install.Logs.Log.Message.LogContents()
                    self.log_contents.parent = self
                    self._children_name_map["log_contents"] = "log-contents"
                    self._children_yang_names.add("log-contents")


                class LogContents(Entity):
                    """
                    Log contents
                    
                    .. attribute:: v3
                    
                    	v3
                    	**type**\:   :py:class:`V3 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Message.LogContents.V3>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Logs.Log.Message.LogContents, self).__init__()

                        self.yang_name = "log-contents"
                        self.yang_parent_name = "message"

                        self.version = YLeaf(YType.uint32, "version")

                        self.v3 = Install.Logs.Log.Message.LogContents.V3()
                        self.v3.parent = self
                        self._children_name_map["v3"] = "v3"
                        self._children_yang_names.add("v3")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("version") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Logs.Log.Message.LogContents, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Logs.Log.Message.LogContents, self).__setattr__(name, value)


                    class V3(Entity):
                        """
                        v3
                        
                        .. attribute:: category
                        
                        	Category of the message
                        	**type**\:   :py:class:`InstmgrBagLogEntryUserMsgCategory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagLogEntryUserMsgCategory>`
                        
                        .. attribute:: message
                        
                        	Message
                        	**type**\:  str
                        
                        .. attribute:: scope
                        
                        	Scope of the message
                        	**type**\:   :py:class:`Scope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Message.LogContents.V3.Scope>`
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.Logs.Log.Message.LogContents.V3, self).__init__()

                            self.yang_name = "v3"
                            self.yang_parent_name = "log-contents"

                            self.category = YLeaf(YType.enumeration, "category")

                            self.message = YLeaf(YType.str, "message")

                            self.scope = Install.Logs.Log.Message.LogContents.V3.Scope()
                            self.scope.parent = self
                            self._children_name_map["scope"] = "scope"
                            self._children_yang_names.add("scope")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("category",
                                            "message") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.Logs.Log.Message.LogContents.V3, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.Logs.Log.Message.LogContents.V3, self).__setattr__(name, value)


                        class Scope(Entity):
                            """
                            Scope of the message
                            
                            .. attribute:: admin_read
                            
                            	Does the admin want to read this?
                            	**type**\:  bool
                            
                            .. attribute:: affected_sd_rs
                            
                            	Which SDRs are affected by the message
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.Logs.Log.Message.LogContents.V3.Scope, self).__init__()

                                self.yang_name = "scope"
                                self.yang_parent_name = "v3"

                                self.admin_read = YLeaf(YType.boolean, "admin-read")

                                self.affected_sd_rs = YLeaf(YType.uint32, "affected-sd-rs")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("admin_read",
                                                "affected_sd_rs") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.Logs.Log.Message.LogContents.V3.Scope, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.Logs.Log.Message.LogContents.V3.Scope, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.admin_read.is_set or
                                    self.affected_sd_rs.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.admin_read.yfilter != YFilter.not_set or
                                    self.affected_sd_rs.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "scope" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.admin_read.is_set or self.admin_read.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.admin_read.get_name_leafdata())
                                if (self.affected_sd_rs.is_set or self.affected_sd_rs.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.affected_sd_rs.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "admin-read" or name == "affected-sd-rs"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "admin-read"):
                                    self.admin_read = value
                                    self.admin_read.value_namespace = name_space
                                    self.admin_read.value_namespace_prefix = name_space_prefix
                                if(value_path == "affected-sd-rs"):
                                    self.affected_sd_rs = value
                                    self.affected_sd_rs.value_namespace = name_space
                                    self.affected_sd_rs.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.category.is_set or
                                self.message.is_set or
                                (self.scope is not None and self.scope.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.category.yfilter != YFilter.not_set or
                                self.message.yfilter != YFilter.not_set or
                                (self.scope is not None and self.scope.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "v3" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.category.is_set or self.category.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.category.get_name_leafdata())
                            if (self.message.is_set or self.message.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.message.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "scope"):
                                if (self.scope is None):
                                    self.scope = Install.Logs.Log.Message.LogContents.V3.Scope()
                                    self.scope.parent = self
                                    self._children_name_map["scope"] = "scope"
                                return self.scope

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "scope" or name == "category" or name == "message"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "category"):
                                self.category = value
                                self.category.value_namespace = name_space
                                self.category.value_namespace_prefix = name_space_prefix
                            if(value_path == "message"):
                                self.message = value
                                self.message.value_namespace = name_space
                                self.message.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.version.is_set or
                            (self.v3 is not None and self.v3.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.version.yfilter != YFilter.not_set or
                            (self.v3 is not None and self.v3.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "log-contents" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.version.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "v3"):
                            if (self.v3 is None):
                                self.v3 = Install.Logs.Log.Message.LogContents.V3()
                                self.v3.parent = self
                                self._children_name_map["v3"] = "v3"
                            return self.v3

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "v3" or name == "version"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "version"):
                            self.version = value
                            self.version.value_namespace = name_space
                            self.version.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (self.log_contents is not None and self.log_contents.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.log_contents is not None and self.log_contents.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "message" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "log-contents"):
                        if (self.log_contents is None):
                            self.log_contents = Install.Logs.Log.Message.LogContents()
                            self.log_contents.parent = self
                            self._children_name_map["log_contents"] = "log-contents"
                        return self.log_contents

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "log-contents"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Change(Entity):
                """
                Install changes
                
                .. attribute:: log_contents
                
                	Log contents
                	**type**\:   :py:class:`LogContents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Change.LogContents>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Logs.Log.Change, self).__init__()

                    self.yang_name = "change"
                    self.yang_parent_name = "log"

                    self.log_contents = Install.Logs.Log.Change.LogContents()
                    self.log_contents.parent = self
                    self._children_name_map["log_contents"] = "log-contents"
                    self._children_yang_names.add("log-contents")


                class LogContents(Entity):
                    """
                    Log contents
                    
                    .. attribute:: v3
                    
                    	v3
                    	**type**\:   :py:class:`V3 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Change.LogContents.V3>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Logs.Log.Change.LogContents, self).__init__()

                        self.yang_name = "log-contents"
                        self.yang_parent_name = "change"

                        self.version = YLeaf(YType.uint32, "version")

                        self.v3 = Install.Logs.Log.Change.LogContents.V3()
                        self.v3.parent = self
                        self._children_name_map["v3"] = "v3"
                        self._children_yang_names.add("v3")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("version") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Logs.Log.Change.LogContents, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Logs.Log.Change.LogContents, self).__setattr__(name, value)


                    class V3(Entity):
                        """
                        v3
                        
                        .. attribute:: category
                        
                        	Category of the message
                        	**type**\:   :py:class:`InstmgrBagLogEntryUserMsgCategory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagLogEntryUserMsgCategory>`
                        
                        .. attribute:: message
                        
                        	Message
                        	**type**\:  str
                        
                        .. attribute:: scope
                        
                        	Scope of the message
                        	**type**\:   :py:class:`Scope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Change.LogContents.V3.Scope>`
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.Logs.Log.Change.LogContents.V3, self).__init__()

                            self.yang_name = "v3"
                            self.yang_parent_name = "log-contents"

                            self.category = YLeaf(YType.enumeration, "category")

                            self.message = YLeaf(YType.str, "message")

                            self.scope = Install.Logs.Log.Change.LogContents.V3.Scope()
                            self.scope.parent = self
                            self._children_name_map["scope"] = "scope"
                            self._children_yang_names.add("scope")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("category",
                                            "message") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.Logs.Log.Change.LogContents.V3, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.Logs.Log.Change.LogContents.V3, self).__setattr__(name, value)


                        class Scope(Entity):
                            """
                            Scope of the message
                            
                            .. attribute:: admin_read
                            
                            	Does the admin want to read this?
                            	**type**\:  bool
                            
                            .. attribute:: affected_sd_rs
                            
                            	Which SDRs are affected by the message
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.Logs.Log.Change.LogContents.V3.Scope, self).__init__()

                                self.yang_name = "scope"
                                self.yang_parent_name = "v3"

                                self.admin_read = YLeaf(YType.boolean, "admin-read")

                                self.affected_sd_rs = YLeaf(YType.uint32, "affected-sd-rs")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("admin_read",
                                                "affected_sd_rs") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.Logs.Log.Change.LogContents.V3.Scope, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.Logs.Log.Change.LogContents.V3.Scope, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.admin_read.is_set or
                                    self.affected_sd_rs.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.admin_read.yfilter != YFilter.not_set or
                                    self.affected_sd_rs.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "scope" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.admin_read.is_set or self.admin_read.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.admin_read.get_name_leafdata())
                                if (self.affected_sd_rs.is_set or self.affected_sd_rs.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.affected_sd_rs.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "admin-read" or name == "affected-sd-rs"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "admin-read"):
                                    self.admin_read = value
                                    self.admin_read.value_namespace = name_space
                                    self.admin_read.value_namespace_prefix = name_space_prefix
                                if(value_path == "affected-sd-rs"):
                                    self.affected_sd_rs = value
                                    self.affected_sd_rs.value_namespace = name_space
                                    self.affected_sd_rs.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.category.is_set or
                                self.message.is_set or
                                (self.scope is not None and self.scope.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.category.yfilter != YFilter.not_set or
                                self.message.yfilter != YFilter.not_set or
                                (self.scope is not None and self.scope.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "v3" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.category.is_set or self.category.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.category.get_name_leafdata())
                            if (self.message.is_set or self.message.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.message.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "scope"):
                                if (self.scope is None):
                                    self.scope = Install.Logs.Log.Change.LogContents.V3.Scope()
                                    self.scope.parent = self
                                    self._children_name_map["scope"] = "scope"
                                return self.scope

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "scope" or name == "category" or name == "message"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "category"):
                                self.category = value
                                self.category.value_namespace = name_space
                                self.category.value_namespace_prefix = name_space_prefix
                            if(value_path == "message"):
                                self.message = value
                                self.message.value_namespace = name_space
                                self.message.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.version.is_set or
                            (self.v3 is not None and self.v3.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.version.yfilter != YFilter.not_set or
                            (self.v3 is not None and self.v3.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "log-contents" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.version.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "v3"):
                            if (self.v3 is None):
                                self.v3 = Install.Logs.Log.Change.LogContents.V3()
                                self.v3.parent = self
                                self._children_name_map["v3"] = "v3"
                            return self.v3

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "v3" or name == "version"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "version"):
                            self.version = value
                            self.version.value_namespace = name_space
                            self.version.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (self.log_contents is not None and self.log_contents.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.log_contents is not None and self.log_contents.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "change" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "log-contents"):
                        if (self.log_contents is None):
                            self.log_contents = Install.Logs.Log.Change.LogContents()
                            self.log_contents.parent = self
                            self._children_name_map["log_contents"] = "log-contents"
                        return self.log_contents

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "log-contents"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Detail(Entity):
                """
                Install details
                
                .. attribute:: log_contents
                
                	Log contents
                	**type**\:   :py:class:`LogContents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Detail.LogContents>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Logs.Log.Detail, self).__init__()

                    self.yang_name = "detail"
                    self.yang_parent_name = "log"

                    self.log_contents = Install.Logs.Log.Detail.LogContents()
                    self.log_contents.parent = self
                    self._children_name_map["log_contents"] = "log-contents"
                    self._children_yang_names.add("log-contents")


                class LogContents(Entity):
                    """
                    Log contents
                    
                    .. attribute:: v3
                    
                    	v3
                    	**type**\:   :py:class:`V3 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Detail.LogContents.V3>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Logs.Log.Detail.LogContents, self).__init__()

                        self.yang_name = "log-contents"
                        self.yang_parent_name = "detail"

                        self.version = YLeaf(YType.uint32, "version")

                        self.v3 = Install.Logs.Log.Detail.LogContents.V3()
                        self.v3.parent = self
                        self._children_name_map["v3"] = "v3"
                        self._children_yang_names.add("v3")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("version") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Logs.Log.Detail.LogContents, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Logs.Log.Detail.LogContents, self).__setattr__(name, value)


                    class V3(Entity):
                        """
                        v3
                        
                        .. attribute:: category
                        
                        	Category of the message
                        	**type**\:   :py:class:`InstmgrBagLogEntryUserMsgCategory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagLogEntryUserMsgCategory>`
                        
                        .. attribute:: message
                        
                        	Message
                        	**type**\:  str
                        
                        .. attribute:: scope
                        
                        	Scope of the message
                        	**type**\:   :py:class:`Scope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Detail.LogContents.V3.Scope>`
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.Logs.Log.Detail.LogContents.V3, self).__init__()

                            self.yang_name = "v3"
                            self.yang_parent_name = "log-contents"

                            self.category = YLeaf(YType.enumeration, "category")

                            self.message = YLeaf(YType.str, "message")

                            self.scope = Install.Logs.Log.Detail.LogContents.V3.Scope()
                            self.scope.parent = self
                            self._children_name_map["scope"] = "scope"
                            self._children_yang_names.add("scope")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("category",
                                            "message") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.Logs.Log.Detail.LogContents.V3, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.Logs.Log.Detail.LogContents.V3, self).__setattr__(name, value)


                        class Scope(Entity):
                            """
                            Scope of the message
                            
                            .. attribute:: admin_read
                            
                            	Does the admin want to read this?
                            	**type**\:  bool
                            
                            .. attribute:: affected_sd_rs
                            
                            	Which SDRs are affected by the message
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.Logs.Log.Detail.LogContents.V3.Scope, self).__init__()

                                self.yang_name = "scope"
                                self.yang_parent_name = "v3"

                                self.admin_read = YLeaf(YType.boolean, "admin-read")

                                self.affected_sd_rs = YLeaf(YType.uint32, "affected-sd-rs")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("admin_read",
                                                "affected_sd_rs") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.Logs.Log.Detail.LogContents.V3.Scope, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.Logs.Log.Detail.LogContents.V3.Scope, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.admin_read.is_set or
                                    self.affected_sd_rs.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.admin_read.yfilter != YFilter.not_set or
                                    self.affected_sd_rs.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "scope" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.admin_read.is_set or self.admin_read.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.admin_read.get_name_leafdata())
                                if (self.affected_sd_rs.is_set or self.affected_sd_rs.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.affected_sd_rs.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "admin-read" or name == "affected-sd-rs"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "admin-read"):
                                    self.admin_read = value
                                    self.admin_read.value_namespace = name_space
                                    self.admin_read.value_namespace_prefix = name_space_prefix
                                if(value_path == "affected-sd-rs"):
                                    self.affected_sd_rs = value
                                    self.affected_sd_rs.value_namespace = name_space
                                    self.affected_sd_rs.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.category.is_set or
                                self.message.is_set or
                                (self.scope is not None and self.scope.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.category.yfilter != YFilter.not_set or
                                self.message.yfilter != YFilter.not_set or
                                (self.scope is not None and self.scope.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "v3" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.category.is_set or self.category.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.category.get_name_leafdata())
                            if (self.message.is_set or self.message.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.message.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "scope"):
                                if (self.scope is None):
                                    self.scope = Install.Logs.Log.Detail.LogContents.V3.Scope()
                                    self.scope.parent = self
                                    self._children_name_map["scope"] = "scope"
                                return self.scope

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "scope" or name == "category" or name == "message"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "category"):
                                self.category = value
                                self.category.value_namespace = name_space
                                self.category.value_namespace_prefix = name_space_prefix
                            if(value_path == "message"):
                                self.message = value
                                self.message.value_namespace = name_space
                                self.message.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.version.is_set or
                            (self.v3 is not None and self.v3.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.version.yfilter != YFilter.not_set or
                            (self.v3 is not None and self.v3.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "log-contents" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.version.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "v3"):
                            if (self.v3 is None):
                                self.v3 = Install.Logs.Log.Detail.LogContents.V3()
                                self.v3.parent = self
                                self._children_name_map["v3"] = "v3"
                            return self.v3

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "v3" or name == "version"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "version"):
                            self.version = value
                            self.version.value_namespace = name_space
                            self.version.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (self.log_contents is not None and self.log_contents.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.log_contents is not None and self.log_contents.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "detail" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "log-contents"):
                        if (self.log_contents is None):
                            self.log_contents = Install.Logs.Log.Detail.LogContents()
                            self.log_contents.parent = self
                            self._children_name_map["log_contents"] = "log-contents"
                        return self.log_contents

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "log-contents"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass


            class Communication(Entity):
                """
                Install communications
                
                .. attribute:: log_contents
                
                	Log contents
                	**type**\:   :py:class:`LogContents <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Communication.LogContents>`
                
                

                """

                _prefix = 'installmgr-admin-oper'
                _revision = '2015-11-09'

                def __init__(self):
                    super(Install.Logs.Log.Communication, self).__init__()

                    self.yang_name = "communication"
                    self.yang_parent_name = "log"

                    self.log_contents = Install.Logs.Log.Communication.LogContents()
                    self.log_contents.parent = self
                    self._children_name_map["log_contents"] = "log-contents"
                    self._children_yang_names.add("log-contents")


                class LogContents(Entity):
                    """
                    Log contents
                    
                    .. attribute:: v3
                    
                    	v3
                    	**type**\:   :py:class:`V3 <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Communication.LogContents.V3>`
                    
                    .. attribute:: version
                    
                    	Version
                    	**type**\:  int
                    
                    	**range:** 0..4294967295
                    
                    

                    """

                    _prefix = 'installmgr-admin-oper'
                    _revision = '2015-11-09'

                    def __init__(self):
                        super(Install.Logs.Log.Communication.LogContents, self).__init__()

                        self.yang_name = "log-contents"
                        self.yang_parent_name = "communication"

                        self.version = YLeaf(YType.uint32, "version")

                        self.v3 = Install.Logs.Log.Communication.LogContents.V3()
                        self.v3.parent = self
                        self._children_name_map["v3"] = "v3"
                        self._children_yang_names.add("v3")

                    def __setattr__(self, name, value):
                        self._check_monkey_patching_error(name, value)
                        with _handle_type_error():
                            if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                    "Please use list append or extend method."
                                                    .format(value))
                            if isinstance(value, Enum.YLeaf):
                                value = value.name
                            if name in ("version") and name in self.__dict__:
                                if isinstance(value, YLeaf):
                                    self.__dict__[name].set(value.get())
                                elif isinstance(value, YLeafList):
                                    super(Install.Logs.Log.Communication.LogContents, self).__setattr__(name, value)
                                else:
                                    self.__dict__[name].set(value)
                            else:
                                if hasattr(value, "parent") and name != "parent":
                                    if hasattr(value, "is_presence_container") and value.is_presence_container:
                                        value.parent = self
                                    elif value.parent is None and value.yang_name in self._children_yang_names:
                                        value.parent = self
                                super(Install.Logs.Log.Communication.LogContents, self).__setattr__(name, value)


                    class V3(Entity):
                        """
                        v3
                        
                        .. attribute:: category
                        
                        	Category of the message
                        	**type**\:   :py:class:`InstmgrBagLogEntryUserMsgCategory <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.InstmgrBagLogEntryUserMsgCategory>`
                        
                        .. attribute:: message
                        
                        	Message
                        	**type**\:  str
                        
                        .. attribute:: scope
                        
                        	Scope of the message
                        	**type**\:   :py:class:`Scope <ydk.models.cisco_ios_xr.Cisco_IOS_XR_installmgr_admin_oper.Install.Logs.Log.Communication.LogContents.V3.Scope>`
                        
                        

                        """

                        _prefix = 'installmgr-admin-oper'
                        _revision = '2015-11-09'

                        def __init__(self):
                            super(Install.Logs.Log.Communication.LogContents.V3, self).__init__()

                            self.yang_name = "v3"
                            self.yang_parent_name = "log-contents"

                            self.category = YLeaf(YType.enumeration, "category")

                            self.message = YLeaf(YType.str, "message")

                            self.scope = Install.Logs.Log.Communication.LogContents.V3.Scope()
                            self.scope.parent = self
                            self._children_name_map["scope"] = "scope"
                            self._children_yang_names.add("scope")

                        def __setattr__(self, name, value):
                            self._check_monkey_patching_error(name, value)
                            with _handle_type_error():
                                if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                    raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                        "Please use list append or extend method."
                                                        .format(value))
                                if isinstance(value, Enum.YLeaf):
                                    value = value.name
                                if name in ("category",
                                            "message") and name in self.__dict__:
                                    if isinstance(value, YLeaf):
                                        self.__dict__[name].set(value.get())
                                    elif isinstance(value, YLeafList):
                                        super(Install.Logs.Log.Communication.LogContents.V3, self).__setattr__(name, value)
                                    else:
                                        self.__dict__[name].set(value)
                                else:
                                    if hasattr(value, "parent") and name != "parent":
                                        if hasattr(value, "is_presence_container") and value.is_presence_container:
                                            value.parent = self
                                        elif value.parent is None and value.yang_name in self._children_yang_names:
                                            value.parent = self
                                    super(Install.Logs.Log.Communication.LogContents.V3, self).__setattr__(name, value)


                        class Scope(Entity):
                            """
                            Scope of the message
                            
                            .. attribute:: admin_read
                            
                            	Does the admin want to read this?
                            	**type**\:  bool
                            
                            .. attribute:: affected_sd_rs
                            
                            	Which SDRs are affected by the message
                            	**type**\:  int
                            
                            	**range:** 0..4294967295
                            
                            

                            """

                            _prefix = 'installmgr-admin-oper'
                            _revision = '2015-11-09'

                            def __init__(self):
                                super(Install.Logs.Log.Communication.LogContents.V3.Scope, self).__init__()

                                self.yang_name = "scope"
                                self.yang_parent_name = "v3"

                                self.admin_read = YLeaf(YType.boolean, "admin-read")

                                self.affected_sd_rs = YLeaf(YType.uint32, "affected-sd-rs")

                            def __setattr__(self, name, value):
                                self._check_monkey_patching_error(name, value)
                                with _handle_type_error():
                                    if name in self.__dict__ and isinstance(self.__dict__[name], YList):
                                        raise YPYModelError("Attempt to assign value of '{}' to YList ldata. "
                                                            "Please use list append or extend method."
                                                            .format(value))
                                    if isinstance(value, Enum.YLeaf):
                                        value = value.name
                                    if name in ("admin_read",
                                                "affected_sd_rs") and name in self.__dict__:
                                        if isinstance(value, YLeaf):
                                            self.__dict__[name].set(value.get())
                                        elif isinstance(value, YLeafList):
                                            super(Install.Logs.Log.Communication.LogContents.V3.Scope, self).__setattr__(name, value)
                                        else:
                                            self.__dict__[name].set(value)
                                    else:
                                        if hasattr(value, "parent") and name != "parent":
                                            if hasattr(value, "is_presence_container") and value.is_presence_container:
                                                value.parent = self
                                            elif value.parent is None and value.yang_name in self._children_yang_names:
                                                value.parent = self
                                        super(Install.Logs.Log.Communication.LogContents.V3.Scope, self).__setattr__(name, value)

                            def has_data(self):
                                return (
                                    self.admin_read.is_set or
                                    self.affected_sd_rs.is_set)

                            def has_operation(self):
                                return (
                                    self.yfilter != YFilter.not_set or
                                    self.admin_read.yfilter != YFilter.not_set or
                                    self.affected_sd_rs.yfilter != YFilter.not_set)

                            def get_segment_path(self):
                                path_buffer = ""
                                path_buffer = "scope" + path_buffer

                                return path_buffer

                            def get_entity_path(self, ancestor):
                                path_buffer = ""
                                if (ancestor is None):
                                    raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                                else:
                                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                                leaf_name_data = LeafDataList()
                                if (self.admin_read.is_set or self.admin_read.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.admin_read.get_name_leafdata())
                                if (self.affected_sd_rs.is_set or self.affected_sd_rs.yfilter != YFilter.not_set):
                                    leaf_name_data.append(self.affected_sd_rs.get_name_leafdata())

                                entity_path = EntityPath(path_buffer, leaf_name_data)
                                return entity_path

                            def get_child_by_name(self, child_yang_name, segment_path):
                                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                                if child is not None:
                                    return child

                                return None

                            def has_leaf_or_child_of_name(self, name):
                                if(name == "admin-read" or name == "affected-sd-rs"):
                                    return True
                                return False

                            def set_value(self, value_path, value, name_space, name_space_prefix):
                                if(value_path == "admin-read"):
                                    self.admin_read = value
                                    self.admin_read.value_namespace = name_space
                                    self.admin_read.value_namespace_prefix = name_space_prefix
                                if(value_path == "affected-sd-rs"):
                                    self.affected_sd_rs = value
                                    self.affected_sd_rs.value_namespace = name_space
                                    self.affected_sd_rs.value_namespace_prefix = name_space_prefix

                        def has_data(self):
                            return (
                                self.category.is_set or
                                self.message.is_set or
                                (self.scope is not None and self.scope.has_data()))

                        def has_operation(self):
                            return (
                                self.yfilter != YFilter.not_set or
                                self.category.yfilter != YFilter.not_set or
                                self.message.yfilter != YFilter.not_set or
                                (self.scope is not None and self.scope.has_operation()))

                        def get_segment_path(self):
                            path_buffer = ""
                            path_buffer = "v3" + path_buffer

                            return path_buffer

                        def get_entity_path(self, ancestor):
                            path_buffer = ""
                            if (ancestor is None):
                                raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                            else:
                                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                            leaf_name_data = LeafDataList()
                            if (self.category.is_set or self.category.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.category.get_name_leafdata())
                            if (self.message.is_set or self.message.yfilter != YFilter.not_set):
                                leaf_name_data.append(self.message.get_name_leafdata())

                            entity_path = EntityPath(path_buffer, leaf_name_data)
                            return entity_path

                        def get_child_by_name(self, child_yang_name, segment_path):
                            child = self._get_child_by_seg_name([child_yang_name, segment_path])
                            if child is not None:
                                return child

                            if (child_yang_name == "scope"):
                                if (self.scope is None):
                                    self.scope = Install.Logs.Log.Communication.LogContents.V3.Scope()
                                    self.scope.parent = self
                                    self._children_name_map["scope"] = "scope"
                                return self.scope

                            return None

                        def has_leaf_or_child_of_name(self, name):
                            if(name == "scope" or name == "category" or name == "message"):
                                return True
                            return False

                        def set_value(self, value_path, value, name_space, name_space_prefix):
                            if(value_path == "category"):
                                self.category = value
                                self.category.value_namespace = name_space
                                self.category.value_namespace_prefix = name_space_prefix
                            if(value_path == "message"):
                                self.message = value
                                self.message.value_namespace = name_space
                                self.message.value_namespace_prefix = name_space_prefix

                    def has_data(self):
                        return (
                            self.version.is_set or
                            (self.v3 is not None and self.v3.has_data()))

                    def has_operation(self):
                        return (
                            self.yfilter != YFilter.not_set or
                            self.version.yfilter != YFilter.not_set or
                            (self.v3 is not None and self.v3.has_operation()))

                    def get_segment_path(self):
                        path_buffer = ""
                        path_buffer = "log-contents" + path_buffer

                        return path_buffer

                    def get_entity_path(self, ancestor):
                        path_buffer = ""
                        if (ancestor is None):
                            raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                        else:
                            path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                        leaf_name_data = LeafDataList()
                        if (self.version.is_set or self.version.yfilter != YFilter.not_set):
                            leaf_name_data.append(self.version.get_name_leafdata())

                        entity_path = EntityPath(path_buffer, leaf_name_data)
                        return entity_path

                    def get_child_by_name(self, child_yang_name, segment_path):
                        child = self._get_child_by_seg_name([child_yang_name, segment_path])
                        if child is not None:
                            return child

                        if (child_yang_name == "v3"):
                            if (self.v3 is None):
                                self.v3 = Install.Logs.Log.Communication.LogContents.V3()
                                self.v3.parent = self
                                self._children_name_map["v3"] = "v3"
                            return self.v3

                        return None

                    def has_leaf_or_child_of_name(self, name):
                        if(name == "v3" or name == "version"):
                            return True
                        return False

                    def set_value(self, value_path, value, name_space, name_space_prefix):
                        if(value_path == "version"):
                            self.version = value
                            self.version.value_namespace = name_space
                            self.version.value_namespace_prefix = name_space_prefix

                def has_data(self):
                    return (self.log_contents is not None and self.log_contents.has_data())

                def has_operation(self):
                    return (
                        self.yfilter != YFilter.not_set or
                        (self.log_contents is not None and self.log_contents.has_operation()))

                def get_segment_path(self):
                    path_buffer = ""
                    path_buffer = "communication" + path_buffer

                    return path_buffer

                def get_entity_path(self, ancestor):
                    path_buffer = ""
                    if (ancestor is None):
                        raise YPYModelError("ancestor cannot be None as one of the ancestors is a list")
                    else:
                        path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                    leaf_name_data = LeafDataList()

                    entity_path = EntityPath(path_buffer, leaf_name_data)
                    return entity_path

                def get_child_by_name(self, child_yang_name, segment_path):
                    child = self._get_child_by_seg_name([child_yang_name, segment_path])
                    if child is not None:
                        return child

                    if (child_yang_name == "log-contents"):
                        if (self.log_contents is None):
                            self.log_contents = Install.Logs.Log.Communication.LogContents()
                            self.log_contents.parent = self
                            self._children_name_map["log_contents"] = "log-contents"
                        return self.log_contents

                    return None

                def has_leaf_or_child_of_name(self, name):
                    if(name == "log-contents"):
                        return True
                    return False

                def set_value(self, value_path, value, name_space, name_space_prefix):
                    pass

            def has_data(self):
                for c in self.change:
                    if (c.has_data()):
                        return True
                for c in self.communication:
                    if (c.has_data()):
                        return True
                for c in self.detail:
                    if (c.has_data()):
                        return True
                for c in self.header:
                    if (c.has_data()):
                        return True
                for c in self.message:
                    if (c.has_data()):
                        return True
                for c in self.summary:
                    if (c.has_data()):
                        return True
                return self.request_id.is_set

            def has_operation(self):
                for c in self.change:
                    if (c.has_operation()):
                        return True
                for c in self.communication:
                    if (c.has_operation()):
                        return True
                for c in self.detail:
                    if (c.has_operation()):
                        return True
                for c in self.header:
                    if (c.has_operation()):
                        return True
                for c in self.message:
                    if (c.has_operation()):
                        return True
                for c in self.summary:
                    if (c.has_operation()):
                        return True
                return (
                    self.yfilter != YFilter.not_set or
                    self.request_id.yfilter != YFilter.not_set)

            def get_segment_path(self):
                path_buffer = ""
                path_buffer = "log" + "[request-id='" + self.request_id.get() + "']" + path_buffer

                return path_buffer

            def get_entity_path(self, ancestor):
                path_buffer = ""
                if (ancestor is None):
                    path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/logs/%s" % self.get_segment_path()
                else:
                    path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

                leaf_name_data = LeafDataList()
                if (self.request_id.is_set or self.request_id.yfilter != YFilter.not_set):
                    leaf_name_data.append(self.request_id.get_name_leafdata())

                entity_path = EntityPath(path_buffer, leaf_name_data)
                return entity_path

            def get_child_by_name(self, child_yang_name, segment_path):
                child = self._get_child_by_seg_name([child_yang_name, segment_path])
                if child is not None:
                    return child

                if (child_yang_name == "change"):
                    for c in self.change:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Logs.Log.Change()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.change.append(c)
                    return c

                if (child_yang_name == "communication"):
                    for c in self.communication:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Logs.Log.Communication()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.communication.append(c)
                    return c

                if (child_yang_name == "detail"):
                    for c in self.detail:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Logs.Log.Detail()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.detail.append(c)
                    return c

                if (child_yang_name == "header"):
                    for c in self.header:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Logs.Log.Header()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.header.append(c)
                    return c

                if (child_yang_name == "message"):
                    for c in self.message:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Logs.Log.Message()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.message.append(c)
                    return c

                if (child_yang_name == "summary"):
                    for c in self.summary:
                        segment = c.get_segment_path()
                        if (segment_path == segment):
                            return c
                    c = Install.Logs.Log.Summary()
                    c.parent = self
                    local_reference_key = "ydk::seg::%s" % segment_path
                    self._local_refs[local_reference_key] = c
                    self.summary.append(c)
                    return c

                return None

            def has_leaf_or_child_of_name(self, name):
                if(name == "change" or name == "communication" or name == "detail" or name == "header" or name == "message" or name == "summary" or name == "request-id"):
                    return True
                return False

            def set_value(self, value_path, value, name_space, name_space_prefix):
                if(value_path == "request-id"):
                    self.request_id = value
                    self.request_id.value_namespace = name_space
                    self.request_id.value_namespace_prefix = name_space_prefix

        def has_data(self):
            for c in self.log:
                if (c.has_data()):
                    return True
            return False

        def has_operation(self):
            for c in self.log:
                if (c.has_operation()):
                    return True
            return self.yfilter != YFilter.not_set

        def get_segment_path(self):
            path_buffer = ""
            path_buffer = "logs" + path_buffer

            return path_buffer

        def get_entity_path(self, ancestor):
            path_buffer = ""
            if (ancestor is None):
                path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install/%s" % self.get_segment_path()
            else:
                path_buffer = _get_relative_entity_path(self, ancestor, path_buffer)

            leaf_name_data = LeafDataList()

            entity_path = EntityPath(path_buffer, leaf_name_data)
            return entity_path

        def get_child_by_name(self, child_yang_name, segment_path):
            child = self._get_child_by_seg_name([child_yang_name, segment_path])
            if child is not None:
                return child

            if (child_yang_name == "log"):
                for c in self.log:
                    segment = c.get_segment_path()
                    if (segment_path == segment):
                        return c
                c = Install.Logs.Log()
                c.parent = self
                local_reference_key = "ydk::seg::%s" % segment_path
                self._local_refs[local_reference_key] = c
                self.log.append(c)
                return c

            return None

        def has_leaf_or_child_of_name(self, name):
            if(name == "log"):
                return True
            return False

        def set_value(self, value_path, value, name_space, name_space_prefix):
            pass

    def has_data(self):
        return (
            self.log_size.is_set or
            (self.boot_image is not None and self.boot_image.has_data()) or
            (self.boot_variables is not None and self.boot_variables.has_data()) or
            (self.configuration_registers is not None and self.configuration_registers.has_data()) or
            (self.issu is not None and self.issu.has_data()) or
            (self.logs is not None and self.logs.has_data()) or
            (self.request_statuses is not None and self.request_statuses.has_data()) or
            (self.software is not None and self.software.has_data()) or
            (self.software_inventory is not None and self.software_inventory.has_data()))

    def has_operation(self):
        return (
            self.yfilter != YFilter.not_set or
            self.log_size.yfilter != YFilter.not_set or
            (self.boot_image is not None and self.boot_image.has_operation()) or
            (self.boot_variables is not None and self.boot_variables.has_operation()) or
            (self.configuration_registers is not None and self.configuration_registers.has_operation()) or
            (self.issu is not None and self.issu.has_operation()) or
            (self.logs is not None and self.logs.has_operation()) or
            (self.request_statuses is not None and self.request_statuses.has_operation()) or
            (self.software is not None and self.software.has_operation()) or
            (self.software_inventory is not None and self.software_inventory.has_operation()))

    def get_segment_path(self):
        path_buffer = ""
        path_buffer = "Cisco-IOS-XR-installmgr-admin-oper:install" + path_buffer

        return path_buffer

    def get_entity_path(self, ancestor):
        path_buffer = ""
        if (not ancestor is None):
            raise YPYModelError("ancestor has to be None for top-level node")

        path_buffer = self.get_segment_path()
        leaf_name_data = LeafDataList()
        if (self.log_size.is_set or self.log_size.yfilter != YFilter.not_set):
            leaf_name_data.append(self.log_size.get_name_leafdata())

        entity_path = EntityPath(path_buffer, leaf_name_data)
        return entity_path

    def get_child_by_name(self, child_yang_name, segment_path):
        child = self._get_child_by_seg_name([child_yang_name, segment_path])
        if child is not None:
            return child

        if (child_yang_name == "boot-image"):
            if (self.boot_image is None):
                self.boot_image = Install.BootImage()
                self.boot_image.parent = self
                self._children_name_map["boot_image"] = "boot-image"
            return self.boot_image

        if (child_yang_name == "boot-variables"):
            if (self.boot_variables is None):
                self.boot_variables = Install.BootVariables()
                self.boot_variables.parent = self
                self._children_name_map["boot_variables"] = "boot-variables"
            return self.boot_variables

        if (child_yang_name == "configuration-registers"):
            if (self.configuration_registers is None):
                self.configuration_registers = Install.ConfigurationRegisters()
                self.configuration_registers.parent = self
                self._children_name_map["configuration_registers"] = "configuration-registers"
            return self.configuration_registers

        if (child_yang_name == "issu"):
            if (self.issu is None):
                self.issu = Install.Issu()
                self.issu.parent = self
                self._children_name_map["issu"] = "issu"
            return self.issu

        if (child_yang_name == "logs"):
            if (self.logs is None):
                self.logs = Install.Logs()
                self.logs.parent = self
                self._children_name_map["logs"] = "logs"
            return self.logs

        if (child_yang_name == "request-statuses"):
            if (self.request_statuses is None):
                self.request_statuses = Install.RequestStatuses()
                self.request_statuses.parent = self
                self._children_name_map["request_statuses"] = "request-statuses"
            return self.request_statuses

        if (child_yang_name == "software"):
            if (self.software is None):
                self.software = Install.Software()
                self.software.parent = self
                self._children_name_map["software"] = "software"
            return self.software

        if (child_yang_name == "software-inventory"):
            if (self.software_inventory is None):
                self.software_inventory = Install.SoftwareInventory()
                self.software_inventory.parent = self
                self._children_name_map["software_inventory"] = "software-inventory"
            return self.software_inventory

        return None

    def has_leaf_or_child_of_name(self, name):
        if(name == "boot-image" or name == "boot-variables" or name == "configuration-registers" or name == "issu" or name == "logs" or name == "request-statuses" or name == "software" or name == "software-inventory" or name == "log-size"):
            return True
        return False

    def set_value(self, value_path, value, name_space, name_space_prefix):
        if(value_path == "log-size"):
            self.log_size = value
            self.log_size.value_namespace = name_space
            self.log_size.value_namespace_prefix = name_space_prefix

    def clone_ptr(self):
        self._top_entity = Install()
        return self._top_entity

